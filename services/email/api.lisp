;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/email/api (:use)
                             (:nicknames #:aws/email)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/email/api)
(common-lisp:progn
 (common-lisp:define-condition email-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'email-error))
(common-lisp:progn
 (common-lisp:defclass email-request (aws-sdk/query-request:query-request)
                       common-lisp:nil
                       (:default-initargs :service "email" :api-version
                        "2010-12-01" :host-prefix "email" :signing-name "ses"
                        :global-host common-lisp:nil))
 (common-lisp:export 'email-request))
(common-lisp:defvar *error-map*
  '(("AccountSendingPausedException" . account-sending-paused-exception)
    ("AlreadyExistsException" . already-exists-exception)
    ("CannotDeleteException" . cannot-delete-exception)
    ("ConfigurationSetAlreadyExistsException"
     . configuration-set-already-exists-exception)
    ("ConfigurationSetDoesNotExistException"
     . configuration-set-does-not-exist-exception)
    ("ConfigurationSetSendingPausedException"
     . configuration-set-sending-paused-exception)
    ("CustomVerificationEmailInvalidContentException"
     . custom-verification-email-invalid-content-exception)
    ("CustomVerificationEmailTemplateAlreadyExistsException"
     . custom-verification-email-template-already-exists-exception)
    ("CustomVerificationEmailTemplateDoesNotExistException"
     . custom-verification-email-template-does-not-exist-exception)
    ("EventDestinationAlreadyExistsException"
     . event-destination-already-exists-exception)
    ("EventDestinationDoesNotExistException"
     . event-destination-does-not-exist-exception)
    ("FromEmailAddressNotVerifiedException"
     . from-email-address-not-verified-exception)
    ("InvalidCloudWatchDestinationException"
     . invalid-cloud-watch-destination-exception)
    ("InvalidConfigurationSetException" . invalid-configuration-set-exception)
    ("InvalidDeliveryOptionsException" . invalid-delivery-options-exception)
    ("InvalidFirehoseDestinationException"
     . invalid-firehose-destination-exception)
    ("InvalidLambdaFunctionException" . invalid-lambda-function-exception)
    ("InvalidPolicyException" . invalid-policy-exception)
    ("InvalidRenderingParameterException"
     . invalid-rendering-parameter-exception)
    ("InvalidS3ConfigurationException" . invalid-s3configuration-exception)
    ("InvalidSNSDestinationException" . invalid-snsdestination-exception)
    ("InvalidSnsTopicException" . invalid-sns-topic-exception)
    ("InvalidTemplateException" . invalid-template-exception)
    ("InvalidTrackingOptionsException" . invalid-tracking-options-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("MailFromDomainNotVerifiedException"
     . mail-from-domain-not-verified-exception)
    ("MessageRejected" . message-rejected)
    ("MissingRenderingAttributeException"
     . missing-rendering-attribute-exception)
    ("ProductionAccessNotGrantedException"
     . production-access-not-granted-exception)
    ("RuleDoesNotExistException" . rule-does-not-exist-exception)
    ("RuleSetDoesNotExistException" . rule-set-does-not-exist-exception)
    ("TemplateDoesNotExistException" . template-does-not-exist-exception)
    ("TrackingOptionsAlreadyExistsException"
     . tracking-options-already-exists-exception)
    ("TrackingOptionsDoesNotExistException"
     . tracking-options-does-not-exist-exception)))
(common-lisp:progn
 (common-lisp:define-condition account-sending-paused-exception
     (email-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'account-sending-paused-exception)))
(common-lisp:progn
 (common-lisp:defclass add-header-action common-lisp:nil
                       ((header-name :initarg :header-name :initform
                         (common-lisp:error ":header-name is required") :type
                         (common-lisp:or header-name common-lisp:null)
                         :accessor struct-shape-add-header-action-header-name
                         :shape "HeaderName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (header-value :initarg :header-value :initform
                         (common-lisp:error ":header-value is required") :type
                         (common-lisp:or header-value common-lisp:null)
                         :accessor struct-shape-add-header-action-header-value
                         :shape "HeaderValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-header-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-header-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-header-action 'make-add-header-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-header-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-header-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-name))
      (common-lisp:list
       (common-lisp:cons "HeaderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-value))
      (common-lisp:list
       (common-lisp:cons "HeaderValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-header-action))
   common-lisp:nil))
(common-lisp:deftype address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype address-list () '(trivial-types:proper-list address))
 (common-lisp:defun make-address-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition already-exists-exception
     (email-error)
     ((name :initarg :name :initform common-lisp:nil :reader
       already-exists-exception-name)))
 (common-lisp:export
  (common-lisp:list 'already-exists-exception 'already-exists-exception-name)))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:deftype arrival-date () 'common-lisp:string)
(common-lisp:deftype behavior-on-mxfailure () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass body common-lisp:nil
                       ((text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or content common-lisp:null) :accessor
                         struct-shape-body-text :shape "Content" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (html :initarg :html :initform common-lisp:nil :type
                         (common-lisp:or content common-lisp:null) :accessor
                         struct-shape-body-html :shape "Content" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-body (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'body
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'body 'make-body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input body))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input body))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'html))
      (common-lisp:list
       (common-lisp:cons "Html"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input body))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bounce-action common-lisp:nil
                       ((topic-arn :initarg :topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-bounce-action-topic-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (smtp-reply-code :initarg :smtp-reply-code :initform
                         (common-lisp:error ":smtp-reply-code is required")
                         :type
                         (common-lisp:or bounce-smtp-reply-code
                                         common-lisp:null)
                         :accessor struct-shape-bounce-action-smtp-reply-code
                         :shape "BounceSmtpReplyCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or bounce-status-code common-lisp:null)
                         :accessor struct-shape-bounce-action-status-code
                         :shape "BounceStatusCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or bounce-message common-lisp:null)
                         :accessor struct-shape-bounce-action-message :shape
                         "BounceMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sender :initarg :sender :initform
                         (common-lisp:error ":sender is required") :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-bounce-action-sender :shape "Address"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bounce-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bounce-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bounce-action 'make-bounce-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bounce-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bounce-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smtp-reply-code))
      (common-lisp:list
       (common-lisp:cons "SmtpReplyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender))
      (common-lisp:list
       (common-lisp:cons "Sender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bounce-action))
   common-lisp:nil))
(common-lisp:deftype bounce-message () 'common-lisp:string)
(common-lisp:deftype bounce-smtp-reply-code () 'common-lisp:string)
(common-lisp:deftype bounce-status-code () 'common-lisp:string)
(common-lisp:deftype bounce-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bounced-recipient-info common-lisp:nil
                       ((recipient :initarg :recipient :initform
                         (common-lisp:error ":recipient is required") :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-bounced-recipient-info-recipient :shape
                         "Address" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recipient-arn :initarg :recipient-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-bounced-recipient-info-recipient-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bounce-type :initarg :bounce-type :initform
                         common-lisp:nil :type
                         (common-lisp:or bounce-type common-lisp:null)
                         :accessor
                         struct-shape-bounced-recipient-info-bounce-type :shape
                         "BounceType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recipient-dsn-fields :initarg :recipient-dsn-fields
                         :initform common-lisp:nil :type
                         (common-lisp:or recipient-dsn-fields common-lisp:null)
                         :accessor
                         struct-shape-bounced-recipient-info-recipient-dsn-fields
                         :shape "RecipientDsnFields" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bounced-recipient-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bounced-recipient-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bounced-recipient-info 'make-bounced-recipient-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bounced-recipient-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bounced-recipient-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipient))
      (common-lisp:list
       (common-lisp:cons "Recipient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipient-arn))
      (common-lisp:list
       (common-lisp:cons "RecipientArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounce-type))
      (common-lisp:list
       (common-lisp:cons "BounceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recipient-dsn-fields))
      (common-lisp:list
       (common-lisp:cons "RecipientDsnFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bounced-recipient-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bounced-recipient-info-list ()
   '(trivial-types:proper-list bounced-recipient-info))
 (common-lisp:defun make-bounced-recipient-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bounced-recipient-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass bulk-email-destination common-lisp:nil
                       ((destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or destination common-lisp:null)
                         :accessor
                         struct-shape-bulk-email-destination-destination :shape
                         "Destination" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replacement-tags :initarg :replacement-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or message-tag-list common-lisp:null)
                         :accessor
                         struct-shape-bulk-email-destination-replacement-tags
                         :shape "MessageTagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replacement-template-data :initarg
                         :replacement-template-data :initform common-lisp:nil
                         :type (common-lisp:or template-data common-lisp:null)
                         :accessor
                         struct-shape-bulk-email-destination-replacement-template-data
                         :shape "TemplateData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bulk-email-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bulk-email-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bulk-email-destination 'make-bulk-email-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bulk-email-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bulk-email-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replacement-tags))
      (common-lisp:list
       (common-lisp:cons "ReplacementTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replacement-template-data))
      (common-lisp:list
       (common-lisp:cons "ReplacementTemplateData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bulk-email-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bulk-email-destination-list ()
   '(trivial-types:proper-list bulk-email-destination))
 (common-lisp:defun make-bulk-email-destination-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bulk-email-destination))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass bulk-email-destination-status common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or bulk-email-status common-lisp:null)
                         :accessor
                         struct-shape-bulk-email-destination-status-status
                         :shape "BulkEmailStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error common-lisp:null) :accessor
                         struct-shape-bulk-email-destination-status-error
                         :shape "Error" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message-id :initarg :message-id :initform
                         common-lisp:nil :type
                         (common-lisp:or message-id common-lisp:null) :accessor
                         struct-shape-bulk-email-destination-status-message-id
                         :shape "MessageId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bulk-email-destination-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'bulk-email-destination-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bulk-email-destination-status
                    'make-bulk-email-destination-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bulk-email-destination-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bulk-email-destination-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bulk-email-destination-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bulk-email-destination-status-list ()
   '(trivial-types:proper-list bulk-email-destination-status))
 (common-lisp:defun make-bulk-email-destination-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            bulk-email-destination-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bulk-email-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition cannot-delete-exception
     (email-error)
     ((name :initarg :name :initform common-lisp:nil :reader
       cannot-delete-exception-name)))
 (common-lisp:export
  (common-lisp:list 'cannot-delete-exception 'cannot-delete-exception-name)))
(common-lisp:deftype charset () 'common-lisp:string)
(common-lisp:deftype cidr () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass clone-receipt-rule-set-request common-lisp:nil
                       ((rule-set-name :initarg :rule-set-name :initform
                         (common-lisp:error ":rule-set-name is required") :type
                         (common-lisp:or receipt-rule-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-clone-receipt-rule-set-request-rule-set-name
                         :shape "ReceiptRuleSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (original-rule-set-name :initarg
                         :original-rule-set-name :initform
                         (common-lisp:error
                          ":original-rule-set-name is required")
                         :type
                         (common-lisp:or receipt-rule-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-clone-receipt-rule-set-request-original-rule-set-name
                         :shape "ReceiptRuleSetName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-clone-receipt-rule-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'clone-receipt-rule-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'clone-receipt-rule-set-request
                    'make-clone-receipt-rule-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clone-receipt-rule-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clone-receipt-rule-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-name))
      (common-lisp:list
       (common-lisp:cons "RuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'original-rule-set-name))
      (common-lisp:list
       (common-lisp:cons "OriginalRuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clone-receipt-rule-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass clone-receipt-rule-set-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-clone-receipt-rule-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'clone-receipt-rule-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'clone-receipt-rule-set-response
                    'make-clone-receipt-rule-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clone-receipt-rule-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clone-receipt-rule-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clone-receipt-rule-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cloud-watch-destination common-lisp:nil
                       ((dimension-configurations :initarg
                         :dimension-configurations :initform
                         (common-lisp:error
                          ":dimension-configurations is required")
                         :type
                         (common-lisp:or cloud-watch-dimension-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-destination-dimension-configurations
                         :shape "CloudWatchDimensionConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-watch-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-watch-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-destination 'make-cloud-watch-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimension-configurations))
      (common-lisp:list
       (common-lisp:cons "DimensionConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cloud-watch-dimension-configuration common-lisp:nil
                       ((dimension-name :initarg :dimension-name :initform
                         (common-lisp:error ":dimension-name is required")
                         :type (common-lisp:or dimension-name common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-dimension-configuration-dimension-name
                         :shape "DimensionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dimension-value-source :initarg
                         :dimension-value-source :initform
                         (common-lisp:error
                          ":dimension-value-source is required")
                         :type
                         (common-lisp:or dimension-value-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-dimension-configuration-dimension-value-source
                         :shape "DimensionValueSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-dimension-value :initarg
                         :default-dimension-value :initform
                         (common-lisp:error
                          ":default-dimension-value is required")
                         :type
                         (common-lisp:or default-dimension-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-dimension-configuration-default-dimension-value
                         :shape "DefaultDimensionValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-watch-dimension-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloud-watch-dimension-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-dimension-configuration
                    'make-cloud-watch-dimension-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-dimension-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-dimension-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-name))
      (common-lisp:list
       (common-lisp:cons "DimensionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimension-value-source))
      (common-lisp:list
       (common-lisp:cons "DimensionValueSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-dimension-value))
      (common-lisp:list
       (common-lisp:cons "DefaultDimensionValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-dimension-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cloud-watch-dimension-configurations ()
   '(trivial-types:proper-list cloud-watch-dimension-configuration))
 (common-lisp:defun make-cloud-watch-dimension-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-watch-dimension-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass configuration-set common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor struct-shape-configuration-set-name :shape
                         "ConfigurationSetName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration-set
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-set
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configuration-set 'make-configuration-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition configuration-set-already-exists-exception
     (email-error)
     ((configuration-set-name :initarg :configuration-set-name :initform
       common-lisp:nil :reader
       configuration-set-already-exists-exception-configuration-set-name)))
 (common-lisp:export
  (common-lisp:list 'configuration-set-already-exists-exception
                    'configuration-set-already-exists-exception-configuration-set-name)))
(common-lisp:deftype configuration-set-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configuration-set-attribute-list ()
   '(trivial-types:proper-list configuration-set-attribute))
 (common-lisp:defun make-configuration-set-attribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-set-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition configuration-set-does-not-exist-exception
     (email-error)
     ((configuration-set-name :initarg :configuration-set-name :initform
       common-lisp:nil :reader
       configuration-set-does-not-exist-exception-configuration-set-name)))
 (common-lisp:export
  (common-lisp:list 'configuration-set-does-not-exist-exception
                    'configuration-set-does-not-exist-exception-configuration-set-name)))
(common-lisp:deftype configuration-set-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition configuration-set-sending-paused-exception
     (email-error)
     ((configuration-set-name :initarg :configuration-set-name :initform
       common-lisp:nil :reader
       configuration-set-sending-paused-exception-configuration-set-name)))
 (common-lisp:export
  (common-lisp:list 'configuration-set-sending-paused-exception
                    'configuration-set-sending-paused-exception-configuration-set-name)))
(common-lisp:progn
 (common-lisp:deftype configuration-sets ()
   '(trivial-types:proper-list configuration-set))
 (common-lisp:defun make-configuration-sets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration-set))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass content common-lisp:nil
                       ((data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or message-data common-lisp:null)
                         :accessor struct-shape-content-data :shape
                         "MessageData" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (charset :initarg :charset :initform common-lisp:nil
                         :type (common-lisp:or charset common-lisp:null)
                         :accessor struct-shape-content-charset :shape
                         "Charset" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-content
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'content
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'content 'make-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'charset))
      (common-lisp:list
       (common-lisp:cons "Charset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input content))
   common-lisp:nil))
(common-lisp:deftype counter () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-configuration-set-event-destination-request
                       common-lisp:nil
                       ((configuration-set-name :initarg
                         :configuration-set-name :initform
                         (common-lisp:error
                          ":configuration-set-name is required")
                         :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-configuration-set-event-destination-request-configuration-set-name
                         :shape "ConfigurationSetName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (event-destination :initarg :event-destination
                         :initform
                         (common-lisp:error ":event-destination is required")
                         :type
                         (common-lisp:or event-destination common-lisp:null)
                         :accessor
                         struct-shape-create-configuration-set-event-destination-request-event-destination
                         :shape "EventDestination" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-configuration-set-event-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configuration-set-event-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-configuration-set-event-destination-request
                    'make-create-configuration-set-event-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-event-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-event-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-destination))
      (common-lisp:list
       (common-lisp:cons "EventDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-event-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configuration-set-event-destination-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-configuration-set-event-destination-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configuration-set-event-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-configuration-set-event-destination-response
                    'make-create-configuration-set-event-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-event-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-event-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-event-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configuration-set-request common-lisp:nil
                       ((configuration-set :initarg :configuration-set
                         :initform
                         (common-lisp:error ":configuration-set is required")
                         :type
                         (common-lisp:or configuration-set common-lisp:null)
                         :accessor
                         struct-shape-create-configuration-set-request-configuration-set
                         :shape "ConfigurationSet" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-configuration-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configuration-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-configuration-set-request
                    'make-create-configuration-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-set))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configuration-set-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-configuration-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configuration-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-configuration-set-response
                    'make-create-configuration-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configuration-set-tracking-options-request
                       common-lisp:nil
                       ((configuration-set-name :initarg
                         :configuration-set-name :initform
                         (common-lisp:error
                          ":configuration-set-name is required")
                         :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-configuration-set-tracking-options-request-configuration-set-name
                         :shape "ConfigurationSetName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tracking-options :initarg :tracking-options :initform
                         (common-lisp:error ":tracking-options is required")
                         :type
                         (common-lisp:or tracking-options common-lisp:null)
                         :accessor
                         struct-shape-create-configuration-set-tracking-options-request-tracking-options
                         :shape "TrackingOptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-configuration-set-tracking-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configuration-set-tracking-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-configuration-set-tracking-options-request
                    'make-create-configuration-set-tracking-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-tracking-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-tracking-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracking-options))
      (common-lisp:list
       (common-lisp:cons "TrackingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-tracking-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configuration-set-tracking-options-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-configuration-set-tracking-options-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configuration-set-tracking-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-configuration-set-tracking-options-response
                    'make-create-configuration-set-tracking-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-tracking-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-tracking-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configuration-set-tracking-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-verification-email-template-request
                       common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":template-name is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-create-custom-verification-email-template-request-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-email-address :initarg :from-email-address
                         :initform
                         (common-lisp:error ":from-email-address is required")
                         :type (common-lisp:or from-address common-lisp:null)
                         :accessor
                         struct-shape-create-custom-verification-email-template-request-from-email-address
                         :shape "FromAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-subject :initarg :template-subject :initform
                         (common-lisp:error ":template-subject is required")
                         :type (common-lisp:or subject common-lisp:null)
                         :accessor
                         struct-shape-create-custom-verification-email-template-request-template-subject
                         :shape "Subject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-content :initarg :template-content :initform
                         (common-lisp:error ":template-content is required")
                         :type
                         (common-lisp:or template-content common-lisp:null)
                         :accessor
                         struct-shape-create-custom-verification-email-template-request-template-content
                         :shape "TemplateContent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (success-redirection-url :initarg
                         :success-redirection-url :initform
                         (common-lisp:error
                          ":success-redirection-url is required")
                         :type
                         (common-lisp:or success-redirection-url
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-verification-email-template-request-success-redirection-url
                         :shape "SuccessRedirectionURL" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-redirection-url :initarg
                         :failure-redirection-url :initform
                         (common-lisp:error
                          ":failure-redirection-url is required")
                         :type
                         (common-lisp:or failure-redirection-url
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-verification-email-template-request-failure-redirection-url
                         :shape "FailureRedirectionURL" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-verification-email-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-verification-email-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-verification-email-template-request
                    'make-create-custom-verification-email-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-verification-email-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-verification-email-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-email-address))
      (common-lisp:list
       (common-lisp:cons "FromEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-subject))
      (common-lisp:list
       (common-lisp:cons "TemplateSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-content))
      (common-lisp:list
       (common-lisp:cons "TemplateContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'success-redirection-url))
      (common-lisp:list
       (common-lisp:cons "SuccessRedirectionURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failure-redirection-url))
      (common-lisp:list
       (common-lisp:cons "FailureRedirectionURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-verification-email-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-receipt-filter-request common-lisp:nil
                       ((filter :initarg :filter :initform
                         (common-lisp:error ":filter is required") :type
                         (common-lisp:or receipt-filter common-lisp:null)
                         :accessor
                         struct-shape-create-receipt-filter-request-filter
                         :shape "ReceiptFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-receipt-filter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-receipt-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-receipt-filter-request
                    'make-create-receipt-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-receipt-filter-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-receipt-filter-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-receipt-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-receipt-filter-response
                    'make-create-receipt-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-receipt-rule-request common-lisp:nil
                       ((rule-set-name :initarg :rule-set-name :initform
                         (common-lisp:error ":rule-set-name is required") :type
                         (common-lisp:or receipt-rule-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-receipt-rule-request-rule-set-name
                         :shape "ReceiptRuleSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (after :initarg :after :initform common-lisp:nil :type
                         (common-lisp:or receipt-rule-name common-lisp:null)
                         :accessor
                         struct-shape-create-receipt-rule-request-after :shape
                         "ReceiptRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule :initarg :rule :initform
                         (common-lisp:error ":rule is required") :type
                         (common-lisp:or receipt-rule common-lisp:null)
                         :accessor
                         struct-shape-create-receipt-rule-request-rule :shape
                         "ReceiptRule" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-receipt-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-receipt-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-receipt-rule-request
                    'make-create-receipt-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-name))
      (common-lisp:list
       (common-lisp:cons "RuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after))
      (common-lisp:list
       (common-lisp:cons "After"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-receipt-rule-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-receipt-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-receipt-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-receipt-rule-response
                    'make-create-receipt-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-receipt-rule-set-request common-lisp:nil
                       ((rule-set-name :initarg :rule-set-name :initform
                         (common-lisp:error ":rule-set-name is required") :type
                         (common-lisp:or receipt-rule-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-receipt-rule-set-request-rule-set-name
                         :shape "ReceiptRuleSetName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-receipt-rule-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-receipt-rule-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-receipt-rule-set-request
                    'make-create-receipt-rule-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-rule-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-rule-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-name))
      (common-lisp:list
       (common-lisp:cons "RuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-rule-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-receipt-rule-set-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-receipt-rule-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-receipt-rule-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-receipt-rule-set-response
                    'make-create-receipt-rule-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-rule-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-rule-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-receipt-rule-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-template-request common-lisp:nil
                       ((template :initarg :template :initform
                         (common-lisp:error ":template is required") :type
                         (common-lisp:or template common-lisp:null) :accessor
                         struct-shape-create-template-request-template :shape
                         "Template" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-template-request 'make-create-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "Template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-template-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-template-response 'make-create-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   common-lisp:nil))
(common-lisp:deftype custom-mail-from-status () 'common-lisp:string)
(common-lisp:deftype custom-redirect-domain () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition custom-verification-email-invalid-content-exception
     (email-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'custom-verification-email-invalid-content-exception)))
(common-lisp:progn
 (common-lisp:defclass custom-verification-email-template common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         common-lisp:nil :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-custom-verification-email-template-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-email-address :initarg :from-email-address
                         :initform common-lisp:nil :type
                         (common-lisp:or from-address common-lisp:null)
                         :accessor
                         struct-shape-custom-verification-email-template-from-email-address
                         :shape "FromAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-subject :initarg :template-subject :initform
                         common-lisp:nil :type
                         (common-lisp:or subject common-lisp:null) :accessor
                         struct-shape-custom-verification-email-template-template-subject
                         :shape "Subject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (success-redirection-url :initarg
                         :success-redirection-url :initform common-lisp:nil
                         :type
                         (common-lisp:or success-redirection-url
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-verification-email-template-success-redirection-url
                         :shape "SuccessRedirectionURL" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-redirection-url :initarg
                         :failure-redirection-url :initform common-lisp:nil
                         :type
                         (common-lisp:or failure-redirection-url
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-verification-email-template-failure-redirection-url
                         :shape "FailureRedirectionURL" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-verification-email-template
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-verification-email-template
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-verification-email-template
                    'make-custom-verification-email-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-verification-email-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-verification-email-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-email-address))
      (common-lisp:list
       (common-lisp:cons "FromEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-subject))
      (common-lisp:list
       (common-lisp:cons "TemplateSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'success-redirection-url))
      (common-lisp:list
       (common-lisp:cons "SuccessRedirectionURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failure-redirection-url))
      (common-lisp:list
       (common-lisp:cons "FailureRedirectionURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-verification-email-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition custom-verification-email-template-already-exists-exception
     (email-error)
     ((custom-verification-email-template-name :initarg
       :custom-verification-email-template-name :initform common-lisp:nil
       :reader
       custom-verification-email-template-already-exists-exception-custom-verification-email-template-name)))
 (common-lisp:export
  (common-lisp:list
   'custom-verification-email-template-already-exists-exception
   'custom-verification-email-template-already-exists-exception-custom-verification-email-template-name)))
(common-lisp:progn
 (common-lisp:define-condition custom-verification-email-template-does-not-exist-exception
     (email-error)
     ((custom-verification-email-template-name :initarg
       :custom-verification-email-template-name :initform common-lisp:nil
       :reader
       custom-verification-email-template-does-not-exist-exception-custom-verification-email-template-name)))
 (common-lisp:export
  (common-lisp:list
   'custom-verification-email-template-does-not-exist-exception
   'custom-verification-email-template-does-not-exist-exception-custom-verification-email-template-name)))
(common-lisp:progn
 (common-lisp:deftype custom-verification-email-templates ()
   '(trivial-types:proper-list custom-verification-email-template))
 (common-lisp:defun make-custom-verification-email-templates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-verification-email-template))
   aws-sdk/generator/shape::members))
(common-lisp:deftype default-dimension-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-configuration-set-event-destination-request
                       common-lisp:nil
                       ((configuration-set-name :initarg
                         :configuration-set-name :initform
                         (common-lisp:error
                          ":configuration-set-name is required")
                         :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-configuration-set-event-destination-request-configuration-set-name
                         :shape "ConfigurationSetName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (event-destination-name :initarg
                         :event-destination-name :initform
                         (common-lisp:error
                          ":event-destination-name is required")
                         :type
                         (common-lisp:or event-destination-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-configuration-set-event-destination-request-event-destination-name
                         :shape "EventDestinationName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configuration-set-event-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configuration-set-event-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-set-event-destination-request
                    'make-delete-configuration-set-event-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-event-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-event-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-destination-name))
      (common-lisp:list
       (common-lisp:cons "EventDestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-event-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configuration-set-event-destination-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configuration-set-event-destination-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configuration-set-event-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-set-event-destination-response
                    'make-delete-configuration-set-event-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-event-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-event-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-event-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configuration-set-request common-lisp:nil
                       ((configuration-set-name :initarg
                         :configuration-set-name :initform
                         (common-lisp:error
                          ":configuration-set-name is required")
                         :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-configuration-set-request-configuration-set-name
                         :shape "ConfigurationSetName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configuration-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configuration-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-set-request
                    'make-delete-configuration-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configuration-set-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configuration-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configuration-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-set-response
                    'make-delete-configuration-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configuration-set-tracking-options-request
                       common-lisp:nil
                       ((configuration-set-name :initarg
                         :configuration-set-name :initform
                         (common-lisp:error
                          ":configuration-set-name is required")
                         :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-configuration-set-tracking-options-request-configuration-set-name
                         :shape "ConfigurationSetName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configuration-set-tracking-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configuration-set-tracking-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-set-tracking-options-request
                    'make-delete-configuration-set-tracking-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-tracking-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-tracking-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-tracking-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configuration-set-tracking-options-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configuration-set-tracking-options-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configuration-set-tracking-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-set-tracking-options-response
                    'make-delete-configuration-set-tracking-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-tracking-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-tracking-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-set-tracking-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-verification-email-template-request
                       common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":template-name is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-verification-email-template-request-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-custom-verification-email-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-verification-email-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-custom-verification-email-template-request
                    'make-delete-custom-verification-email-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-verification-email-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-verification-email-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-verification-email-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-identity-policy-request common-lisp:nil
                       ((identity :initarg :identity :initform
                         (common-lisp:error ":identity is required") :type
                         (common-lisp:or identity common-lisp:null) :accessor
                         struct-shape-delete-identity-policy-request-identity
                         :shape "Identity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-delete-identity-policy-request-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-identity-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-identity-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-identity-policy-request
                    'make-delete-identity-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "Identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-identity-policy-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-identity-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-identity-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-identity-policy-response
                    'make-delete-identity-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-identity-request common-lisp:nil
                       ((identity :initarg :identity :initform
                         (common-lisp:error ":identity is required") :type
                         (common-lisp:or identity common-lisp:null) :accessor
                         struct-shape-delete-identity-request-identity :shape
                         "Identity" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-identity-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-identity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-identity-request 'make-delete-identity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "Identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-identity-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-identity-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-identity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-identity-response 'make-delete-identity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-receipt-filter-request common-lisp:nil
                       ((filter-name :initarg :filter-name :initform
                         (common-lisp:error ":filter-name is required") :type
                         (common-lisp:or receipt-filter-name common-lisp:null)
                         :accessor
                         struct-shape-delete-receipt-filter-request-filter-name
                         :shape "ReceiptFilterName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-receipt-filter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-receipt-filter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-receipt-filter-request
                    'make-delete-receipt-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-name))
      (common-lisp:list
       (common-lisp:cons "FilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-receipt-filter-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-receipt-filter-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-receipt-filter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-receipt-filter-response
                    'make-delete-receipt-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-receipt-rule-request common-lisp:nil
                       ((rule-set-name :initarg :rule-set-name :initform
                         (common-lisp:error ":rule-set-name is required") :type
                         (common-lisp:or receipt-rule-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-receipt-rule-request-rule-set-name
                         :shape "ReceiptRuleSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-name :initarg :rule-name :initform
                         (common-lisp:error ":rule-name is required") :type
                         (common-lisp:or receipt-rule-name common-lisp:null)
                         :accessor
                         struct-shape-delete-receipt-rule-request-rule-name
                         :shape "ReceiptRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-receipt-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-receipt-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-receipt-rule-request
                    'make-delete-receipt-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-name))
      (common-lisp:list
       (common-lisp:cons "RuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-receipt-rule-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-receipt-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-receipt-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-receipt-rule-response
                    'make-delete-receipt-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-receipt-rule-set-request common-lisp:nil
                       ((rule-set-name :initarg :rule-set-name :initform
                         (common-lisp:error ":rule-set-name is required") :type
                         (common-lisp:or receipt-rule-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-receipt-rule-set-request-rule-set-name
                         :shape "ReceiptRuleSetName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-receipt-rule-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-receipt-rule-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-receipt-rule-set-request
                    'make-delete-receipt-rule-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-rule-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-rule-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-name))
      (common-lisp:list
       (common-lisp:cons "RuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-rule-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-receipt-rule-set-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-receipt-rule-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-receipt-rule-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-receipt-rule-set-response
                    'make-delete-receipt-rule-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-rule-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-rule-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-receipt-rule-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-template-request common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":template-name is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-delete-template-request-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-template-request 'make-delete-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-template-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-template-response 'make-delete-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-verified-email-address-request common-lisp:nil
                       ((email-address :initarg :email-address :initform
                         (common-lisp:error ":email-address is required") :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-delete-verified-email-address-request-email-address
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-verified-email-address-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-verified-email-address-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-verified-email-address-request
                    'make-delete-verified-email-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-verified-email-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-verified-email-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-verified-email-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delivery-options common-lisp:nil
                       ((tls-policy :initarg :tls-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or tls-policy common-lisp:null) :accessor
                         struct-shape-delivery-options-tls-policy :shape
                         "TlsPolicy" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delivery-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delivery-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delivery-options 'make-delivery-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delivery-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delivery-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-policy))
      (common-lisp:list
       (common-lisp:cons "TlsPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delivery-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-active-receipt-rule-set-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-active-receipt-rule-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-active-receipt-rule-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-active-receipt-rule-set-request
                    'make-describe-active-receipt-rule-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-active-receipt-rule-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-active-receipt-rule-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-active-receipt-rule-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-active-receipt-rule-set-response
                       common-lisp:nil
                       ((metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or receipt-rule-set-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-active-receipt-rule-set-response-metadata
                         :shape "ReceiptRuleSetMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or receipt-rules-list common-lisp:null)
                         :accessor
                         struct-shape-describe-active-receipt-rule-set-response-rules
                         :shape "ReceiptRulesList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-active-receipt-rule-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-active-receipt-rule-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-active-receipt-rule-set-response
                    'make-describe-active-receipt-rule-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-active-receipt-rule-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-active-receipt-rule-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-active-receipt-rule-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-set-request common-lisp:nil
                       ((configuration-set-name :initarg
                         :configuration-set-name :initform
                         (common-lisp:error
                          ":configuration-set-name is required")
                         :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-set-request-configuration-set-name
                         :shape "ConfigurationSetName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configuration-set-attribute-names :initarg
                         :configuration-set-attribute-names :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-set-attribute-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-set-request-configuration-set-attribute-names
                         :shape "ConfigurationSetAttributeList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-configuration-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-set-request
                    'make-describe-configuration-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-attribute-names))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetAttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-set-response common-lisp:nil
                       ((configuration-set :initarg :configuration-set
                         :initform common-lisp:nil :type
                         (common-lisp:or configuration-set common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-set-response-configuration-set
                         :shape "ConfigurationSet" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-destinations :initarg :event-destinations
                         :initform common-lisp:nil :type
                         (common-lisp:or event-destinations common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-set-response-event-destinations
                         :shape "EventDestinations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tracking-options :initarg :tracking-options :initform
                         common-lisp:nil :type
                         (common-lisp:or tracking-options common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-set-response-tracking-options
                         :shape "TrackingOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delivery-options :initarg :delivery-options :initform
                         common-lisp:nil :type
                         (common-lisp:or delivery-options common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-set-response-delivery-options
                         :shape "DeliveryOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reputation-options :initarg :reputation-options
                         :initform common-lisp:nil :type
                         (common-lisp:or reputation-options common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-set-response-reputation-options
                         :shape "ReputationOptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-configuration-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-set-response
                    'make-describe-configuration-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-set))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-destinations))
      (common-lisp:list
       (common-lisp:cons "EventDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracking-options))
      (common-lisp:list
       (common-lisp:cons "TrackingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-options))
      (common-lisp:list
       (common-lisp:cons "DeliveryOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reputation-options))
      (common-lisp:list
       (common-lisp:cons "ReputationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-receipt-rule-request common-lisp:nil
                       ((rule-set-name :initarg :rule-set-name :initform
                         (common-lisp:error ":rule-set-name is required") :type
                         (common-lisp:or receipt-rule-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-receipt-rule-request-rule-set-name
                         :shape "ReceiptRuleSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-name :initarg :rule-name :initform
                         (common-lisp:error ":rule-name is required") :type
                         (common-lisp:or receipt-rule-name common-lisp:null)
                         :accessor
                         struct-shape-describe-receipt-rule-request-rule-name
                         :shape "ReceiptRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-receipt-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-receipt-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-receipt-rule-request
                    'make-describe-receipt-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-receipt-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-receipt-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-name))
      (common-lisp:list
       (common-lisp:cons "RuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-receipt-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-receipt-rule-response common-lisp:nil
                       ((rule :initarg :rule :initform common-lisp:nil :type
                         (common-lisp:or receipt-rule common-lisp:null)
                         :accessor
                         struct-shape-describe-receipt-rule-response-rule
                         :shape "ReceiptRule" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-receipt-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-receipt-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-receipt-rule-response
                    'make-describe-receipt-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-receipt-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-receipt-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-receipt-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-receipt-rule-set-request common-lisp:nil
                       ((rule-set-name :initarg :rule-set-name :initform
                         (common-lisp:error ":rule-set-name is required") :type
                         (common-lisp:or receipt-rule-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-receipt-rule-set-request-rule-set-name
                         :shape "ReceiptRuleSetName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-receipt-rule-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-receipt-rule-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-receipt-rule-set-request
                    'make-describe-receipt-rule-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-receipt-rule-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-receipt-rule-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-name))
      (common-lisp:list
       (common-lisp:cons "RuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-receipt-rule-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-receipt-rule-set-response common-lisp:nil
                       ((metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or receipt-rule-set-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-receipt-rule-set-response-metadata
                         :shape "ReceiptRuleSetMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or receipt-rules-list common-lisp:null)
                         :accessor
                         struct-shape-describe-receipt-rule-set-response-rules
                         :shape "ReceiptRulesList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-receipt-rule-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-receipt-rule-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-receipt-rule-set-response
                    'make-describe-receipt-rule-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-receipt-rule-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-receipt-rule-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-receipt-rule-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass destination common-lisp:nil
                       ((to-addresses :initarg :to-addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or address-list common-lisp:null)
                         :accessor struct-shape-destination-to-addresses :shape
                         "AddressList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cc-addresses :initarg :cc-addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or address-list common-lisp:null)
                         :accessor struct-shape-destination-cc-addresses :shape
                         "AddressList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bcc-addresses :initarg :bcc-addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or address-list common-lisp:null)
                         :accessor struct-shape-destination-bcc-addresses
                         :shape "AddressList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'destination 'make-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-addresses))
      (common-lisp:list
       (common-lisp:cons "ToAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cc-addresses))
      (common-lisp:list
       (common-lisp:cons "CcAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bcc-addresses))
      (common-lisp:list
       (common-lisp:cons "BccAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination))
   common-lisp:nil))
(common-lisp:deftype diagnostic-code () 'common-lisp:string)
(common-lisp:deftype dimension-name () 'common-lisp:string)
(common-lisp:deftype dimension-value-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dkim-attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-dkim-attributes (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype domain () 'common-lisp:string)
(common-lisp:deftype dsn-action () 'common-lisp:string)
(common-lisp:deftype dsn-status () 'common-lisp:string)
(common-lisp:deftype enabled () 'common-lisp:boolean)
(common-lisp:deftype error () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-destination common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or event-destination-name
                                         common-lisp:null)
                         :accessor struct-shape-event-destination-name :shape
                         "EventDestinationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor struct-shape-event-destination-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (matching-event-types :initarg :matching-event-types
                         :initform
                         (common-lisp:error
                          ":matching-event-types is required")
                         :type (common-lisp:or event-types common-lisp:null)
                         :accessor
                         struct-shape-event-destination-matching-event-types
                         :shape "EventTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kinesis-firehose-destination :initarg
                         :kinesis-firehose-destination :initform
                         common-lisp:nil :type
                         (common-lisp:or kinesis-firehose-destination
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-destination-kinesis-firehose-destination
                         :shape "KinesisFirehoseDestination" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cloud-watch-destination :initarg
                         :cloud-watch-destination :initform common-lisp:nil
                         :type
                         (common-lisp:or cloud-watch-destination
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-destination-cloud-watch-destination
                         :shape "CloudWatchDestination" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (snsdestination :initarg :snsdestination :initform
                         common-lisp:nil :type
                         (common-lisp:or snsdestination common-lisp:null)
                         :accessor
                         struct-shape-event-destination-snsdestination :shape
                         "SNSDestination" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-destination 'make-event-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'matching-event-types))
      (common-lisp:list
       (common-lisp:cons "MatchingEventTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-firehose-destination))
      (common-lisp:list
       (common-lisp:cons "KinesisFirehoseDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-destination))
      (common-lisp:list
       (common-lisp:cons "CloudWatchDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snsdestination))
      (common-lisp:list
       (common-lisp:cons "SNSDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition event-destination-already-exists-exception
     (email-error)
     ((configuration-set-name :initarg :configuration-set-name :initform
       common-lisp:nil :reader
       event-destination-already-exists-exception-configuration-set-name)
      (event-destination-name :initarg :event-destination-name :initform
       common-lisp:nil :reader
       event-destination-already-exists-exception-event-destination-name)))
 (common-lisp:export
  (common-lisp:list 'event-destination-already-exists-exception
                    'event-destination-already-exists-exception-configuration-set-name
                    'event-destination-already-exists-exception-event-destination-name)))
(common-lisp:progn
 (common-lisp:define-condition event-destination-does-not-exist-exception
     (email-error)
     ((configuration-set-name :initarg :configuration-set-name :initform
       common-lisp:nil :reader
       event-destination-does-not-exist-exception-configuration-set-name)
      (event-destination-name :initarg :event-destination-name :initform
       common-lisp:nil :reader
       event-destination-does-not-exist-exception-event-destination-name)))
 (common-lisp:export
  (common-lisp:list 'event-destination-does-not-exist-exception
                    'event-destination-does-not-exist-exception-configuration-set-name
                    'event-destination-does-not-exist-exception-event-destination-name)))
(common-lisp:deftype event-destination-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-destinations ()
   '(trivial-types:proper-list event-destination))
 (common-lisp:defun make-event-destinations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-destination))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-types () '(trivial-types:proper-list event-type))
 (common-lisp:defun make-event-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype explanation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass extension-field common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or extension-field-name common-lisp:null)
                         :accessor struct-shape-extension-field-name :shape
                         "ExtensionFieldName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or extension-field-value
                                         common-lisp:null)
                         :accessor struct-shape-extension-field-value :shape
                         "ExtensionFieldValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-extension-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'extension-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'extension-field 'make-extension-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input extension-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input extension-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input extension-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype extension-field-list ()
   '(trivial-types:proper-list extension-field))
 (common-lisp:defun make-extension-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list extension-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype extension-field-name () 'common-lisp:string)
(common-lisp:deftype extension-field-value () 'common-lisp:string)
(common-lisp:deftype failure-redirection-url () 'common-lisp:string)
(common-lisp:deftype from-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition from-email-address-not-verified-exception
     (email-error)
     ((from-email-address :initarg :from-email-address :initform
       common-lisp:nil :reader
       from-email-address-not-verified-exception-from-email-address)))
 (common-lisp:export
  (common-lisp:list 'from-email-address-not-verified-exception
                    'from-email-address-not-verified-exception-from-email-address)))
(common-lisp:progn
 (common-lisp:defclass get-account-sending-enabled-response common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor
                         struct-shape-get-account-sending-enabled-response-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-account-sending-enabled-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-account-sending-enabled-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-account-sending-enabled-response
                    'make-get-account-sending-enabled-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-sending-enabled-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-sending-enabled-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-sending-enabled-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-custom-verification-email-template-request
                       common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":template-name is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-get-custom-verification-email-template-request-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-custom-verification-email-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-custom-verification-email-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-custom-verification-email-template-request
                    'make-get-custom-verification-email-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-verification-email-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-verification-email-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-verification-email-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-custom-verification-email-template-response
                       common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         common-lisp:nil :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-get-custom-verification-email-template-response-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-email-address :initarg :from-email-address
                         :initform common-lisp:nil :type
                         (common-lisp:or from-address common-lisp:null)
                         :accessor
                         struct-shape-get-custom-verification-email-template-response-from-email-address
                         :shape "FromAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-subject :initarg :template-subject :initform
                         common-lisp:nil :type
                         (common-lisp:or subject common-lisp:null) :accessor
                         struct-shape-get-custom-verification-email-template-response-template-subject
                         :shape "Subject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-content :initarg :template-content :initform
                         common-lisp:nil :type
                         (common-lisp:or template-content common-lisp:null)
                         :accessor
                         struct-shape-get-custom-verification-email-template-response-template-content
                         :shape "TemplateContent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (success-redirection-url :initarg
                         :success-redirection-url :initform common-lisp:nil
                         :type
                         (common-lisp:or success-redirection-url
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-custom-verification-email-template-response-success-redirection-url
                         :shape "SuccessRedirectionURL" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-redirection-url :initarg
                         :failure-redirection-url :initform common-lisp:nil
                         :type
                         (common-lisp:or failure-redirection-url
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-custom-verification-email-template-response-failure-redirection-url
                         :shape "FailureRedirectionURL" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-custom-verification-email-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-custom-verification-email-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-custom-verification-email-template-response
                    'make-get-custom-verification-email-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-verification-email-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-verification-email-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-email-address))
      (common-lisp:list
       (common-lisp:cons "FromEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-subject))
      (common-lisp:list
       (common-lisp:cons "TemplateSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-content))
      (common-lisp:list
       (common-lisp:cons "TemplateContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'success-redirection-url))
      (common-lisp:list
       (common-lisp:cons "SuccessRedirectionURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failure-redirection-url))
      (common-lisp:list
       (common-lisp:cons "FailureRedirectionURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-verification-email-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-dkim-attributes-request common-lisp:nil
                       ((identities :initarg :identities :initform
                         (common-lisp:error ":identities is required") :type
                         (common-lisp:or identity-list common-lisp:null)
                         :accessor
                         struct-shape-get-identity-dkim-attributes-request-identities
                         :shape "IdentityList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-dkim-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-dkim-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-dkim-attributes-request
                    'make-get-identity-dkim-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-dkim-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-dkim-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identities))
      (common-lisp:list
       (common-lisp:cons "Identities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-dkim-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-dkim-attributes-response common-lisp:nil
                       ((dkim-attributes :initarg :dkim-attributes :initform
                         (common-lisp:error ":dkim-attributes is required")
                         :type
                         (common-lisp:or dkim-attributes common-lisp:null)
                         :accessor
                         struct-shape-get-identity-dkim-attributes-response-dkim-attributes
                         :shape "DkimAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-dkim-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-dkim-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-dkim-attributes-response
                    'make-get-identity-dkim-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-dkim-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-dkim-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dkim-attributes))
      (common-lisp:list
       (common-lisp:cons "DkimAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-dkim-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-mail-from-domain-attributes-request
                       common-lisp:nil
                       ((identities :initarg :identities :initform
                         (common-lisp:error ":identities is required") :type
                         (common-lisp:or identity-list common-lisp:null)
                         :accessor
                         struct-shape-get-identity-mail-from-domain-attributes-request-identities
                         :shape "IdentityList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-mail-from-domain-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-mail-from-domain-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-mail-from-domain-attributes-request
                    'make-get-identity-mail-from-domain-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-mail-from-domain-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-mail-from-domain-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identities))
      (common-lisp:list
       (common-lisp:cons "Identities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-mail-from-domain-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-mail-from-domain-attributes-response
                       common-lisp:nil
                       ((mail-from-domain-attributes :initarg
                         :mail-from-domain-attributes :initform
                         (common-lisp:error
                          ":mail-from-domain-attributes is required")
                         :type
                         (common-lisp:or mail-from-domain-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-identity-mail-from-domain-attributes-response-mail-from-domain-attributes
                         :shape "MailFromDomainAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-mail-from-domain-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-mail-from-domain-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-mail-from-domain-attributes-response
                    'make-get-identity-mail-from-domain-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-mail-from-domain-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-mail-from-domain-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mail-from-domain-attributes))
      (common-lisp:list
       (common-lisp:cons "MailFromDomainAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-mail-from-domain-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-notification-attributes-request
                       common-lisp:nil
                       ((identities :initarg :identities :initform
                         (common-lisp:error ":identities is required") :type
                         (common-lisp:or identity-list common-lisp:null)
                         :accessor
                         struct-shape-get-identity-notification-attributes-request-identities
                         :shape "IdentityList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-notification-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-notification-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-notification-attributes-request
                    'make-get-identity-notification-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-notification-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-notification-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identities))
      (common-lisp:list
       (common-lisp:cons "Identities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-notification-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-notification-attributes-response
                       common-lisp:nil
                       ((notification-attributes :initarg
                         :notification-attributes :initform
                         (common-lisp:error
                          ":notification-attributes is required")
                         :type
                         (common-lisp:or notification-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-identity-notification-attributes-response-notification-attributes
                         :shape "NotificationAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-notification-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-notification-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-notification-attributes-response
                    'make-get-identity-notification-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-notification-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-notification-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-attributes))
      (common-lisp:list
       (common-lisp:cons "NotificationAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-notification-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-policies-request common-lisp:nil
                       ((identity :initarg :identity :initform
                         (common-lisp:error ":identity is required") :type
                         (common-lisp:or identity common-lisp:null) :accessor
                         struct-shape-get-identity-policies-request-identity
                         :shape "Identity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-names :initarg :policy-names :initform
                         (common-lisp:error ":policy-names is required") :type
                         (common-lisp:or policy-name-list common-lisp:null)
                         :accessor
                         struct-shape-get-identity-policies-request-policy-names
                         :shape "PolicyNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-policies-request
                    'make-get-identity-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "Identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-policies-response common-lisp:nil
                       ((policies :initarg :policies :initform
                         (common-lisp:error ":policies is required") :type
                         (common-lisp:or policy-map common-lisp:null) :accessor
                         struct-shape-get-identity-policies-response-policies
                         :shape "PolicyMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-policies-response
                    'make-get-identity-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-verification-attributes-request
                       common-lisp:nil
                       ((identities :initarg :identities :initform
                         (common-lisp:error ":identities is required") :type
                         (common-lisp:or identity-list common-lisp:null)
                         :accessor
                         struct-shape-get-identity-verification-attributes-request-identities
                         :shape "IdentityList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-verification-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-verification-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-verification-attributes-request
                    'make-get-identity-verification-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-verification-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-verification-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identities))
      (common-lisp:list
       (common-lisp:cons "Identities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-verification-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-verification-attributes-response
                       common-lisp:nil
                       ((verification-attributes :initarg
                         :verification-attributes :initform
                         (common-lisp:error
                          ":verification-attributes is required")
                         :type
                         (common-lisp:or verification-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-identity-verification-attributes-response-verification-attributes
                         :shape "VerificationAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-verification-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-verification-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-verification-attributes-response
                    'make-get-identity-verification-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-verification-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-verification-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-attributes))
      (common-lisp:list
       (common-lisp:cons "VerificationAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-verification-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-send-quota-response common-lisp:nil
                       ((max24hour-send :initarg :max24hour-send :initform
                         common-lisp:nil :type
                         (common-lisp:or max24hour-send common-lisp:null)
                         :accessor
                         struct-shape-get-send-quota-response-max24hour-send
                         :shape "Max24HourSend" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-send-rate :initarg :max-send-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or max-send-rate common-lisp:null)
                         :accessor
                         struct-shape-get-send-quota-response-max-send-rate
                         :shape "MaxSendRate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sent-last24hours :initarg :sent-last24hours :initform
                         common-lisp:nil :type
                         (common-lisp:or sent-last24hours common-lisp:null)
                         :accessor
                         struct-shape-get-send-quota-response-sent-last24hours
                         :shape "SentLast24Hours" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-send-quota-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-send-quota-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-send-quota-response 'make-get-send-quota-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-send-quota-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-send-quota-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max24hour-send))
      (common-lisp:list
       (common-lisp:cons "Max24HourSend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-send-rate))
      (common-lisp:list
       (common-lisp:cons "MaxSendRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sent-last24hours))
      (common-lisp:list
       (common-lisp:cons "SentLast24Hours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-send-quota-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-send-statistics-response common-lisp:nil
                       ((send-data-points :initarg :send-data-points :initform
                         common-lisp:nil :type
                         (common-lisp:or send-data-point-list common-lisp:null)
                         :accessor
                         struct-shape-get-send-statistics-response-send-data-points
                         :shape "SendDataPointList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-send-statistics-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-send-statistics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-send-statistics-response
                    'make-get-send-statistics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-send-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-send-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'send-data-points))
      (common-lisp:list
       (common-lisp:cons "SendDataPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-send-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-request common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":template-name is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-get-template-request-template-name :shape
                         "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-template-request 'make-get-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-response common-lisp:nil
                       ((template :initarg :template :initform common-lisp:nil
                         :type (common-lisp:or template common-lisp:null)
                         :accessor struct-shape-get-template-response-template
                         :shape "Template" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-template-response 'make-get-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "Template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-response))
   common-lisp:nil))
(common-lisp:deftype header-name () 'common-lisp:string)
(common-lisp:deftype header-value () 'common-lisp:string)
(common-lisp:deftype html-part () 'common-lisp:string)
(common-lisp:deftype identity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass identity-dkim-attributes common-lisp:nil
                       ((dkim-enabled :initarg :dkim-enabled :initform
                         (common-lisp:error ":dkim-enabled is required") :type
                         (common-lisp:or enabled common-lisp:null) :accessor
                         struct-shape-identity-dkim-attributes-dkim-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dkim-verification-status :initarg
                         :dkim-verification-status :initform
                         (common-lisp:error
                          ":dkim-verification-status is required")
                         :type
                         (common-lisp:or verification-status common-lisp:null)
                         :accessor
                         struct-shape-identity-dkim-attributes-dkim-verification-status
                         :shape "VerificationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dkim-tokens :initarg :dkim-tokens :initform
                         common-lisp:nil :type
                         (common-lisp:or verification-token-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-dkim-attributes-dkim-tokens
                         :shape "VerificationTokenList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity-dkim-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'identity-dkim-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'identity-dkim-attributes 'make-identity-dkim-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-dkim-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-dkim-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dkim-enabled))
      (common-lisp:list
       (common-lisp:cons "DkimEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dkim-verification-status))
      (common-lisp:list
       (common-lisp:cons "DkimVerificationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dkim-tokens))
      (common-lisp:list
       (common-lisp:cons "DkimTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-dkim-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype identity-list () '(trivial-types:proper-list identity))
 (common-lisp:defun make-identity-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list identity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass identity-mail-from-domain-attributes common-lisp:nil
                       ((mail-from-domain :initarg :mail-from-domain :initform
                         (common-lisp:error ":mail-from-domain is required")
                         :type
                         (common-lisp:or mail-from-domain-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-mail-from-domain-attributes-mail-from-domain
                         :shape "MailFromDomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mail-from-domain-status :initarg
                         :mail-from-domain-status :initform
                         (common-lisp:error
                          ":mail-from-domain-status is required")
                         :type
                         (common-lisp:or custom-mail-from-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-mail-from-domain-attributes-mail-from-domain-status
                         :shape "CustomMailFromStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (behavior-on-mxfailure :initarg :behavior-on-mxfailure
                         :initform
                         (common-lisp:error
                          ":behavior-on-mxfailure is required")
                         :type
                         (common-lisp:or behavior-on-mxfailure
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-mail-from-domain-attributes-behavior-on-mxfailure
                         :shape "BehaviorOnMXFailure" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity-mail-from-domain-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'identity-mail-from-domain-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'identity-mail-from-domain-attributes
                    'make-identity-mail-from-domain-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-mail-from-domain-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-mail-from-domain-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mail-from-domain))
      (common-lisp:list
       (common-lisp:cons "MailFromDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mail-from-domain-status))
      (common-lisp:list
       (common-lisp:cons "MailFromDomainStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'behavior-on-mxfailure))
      (common-lisp:list
       (common-lisp:cons "BehaviorOnMXFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-mail-from-domain-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass identity-notification-attributes common-lisp:nil
                       ((bounce-topic :initarg :bounce-topic :initform
                         (common-lisp:error ":bounce-topic is required") :type
                         (common-lisp:or notification-topic common-lisp:null)
                         :accessor
                         struct-shape-identity-notification-attributes-bounce-topic
                         :shape "NotificationTopic" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (complaint-topic :initarg :complaint-topic :initform
                         (common-lisp:error ":complaint-topic is required")
                         :type
                         (common-lisp:or notification-topic common-lisp:null)
                         :accessor
                         struct-shape-identity-notification-attributes-complaint-topic
                         :shape "NotificationTopic" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delivery-topic :initarg :delivery-topic :initform
                         (common-lisp:error ":delivery-topic is required")
                         :type
                         (common-lisp:or notification-topic common-lisp:null)
                         :accessor
                         struct-shape-identity-notification-attributes-delivery-topic
                         :shape "NotificationTopic" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forwarding-enabled :initarg :forwarding-enabled
                         :initform
                         (common-lisp:error ":forwarding-enabled is required")
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor
                         struct-shape-identity-notification-attributes-forwarding-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (headers-in-bounce-notifications-enabled :initarg
                         :headers-in-bounce-notifications-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled common-lisp:null) :accessor
                         struct-shape-identity-notification-attributes-headers-in-bounce-notifications-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (headers-in-complaint-notifications-enabled :initarg
                         :headers-in-complaint-notifications-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled common-lisp:null) :accessor
                         struct-shape-identity-notification-attributes-headers-in-complaint-notifications-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (headers-in-delivery-notifications-enabled :initarg
                         :headers-in-delivery-notifications-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled common-lisp:null) :accessor
                         struct-shape-identity-notification-attributes-headers-in-delivery-notifications-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity-notification-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'identity-notification-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'identity-notification-attributes
                    'make-identity-notification-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-notification-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-notification-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounce-topic))
      (common-lisp:list
       (common-lisp:cons "BounceTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'complaint-topic))
      (common-lisp:list
       (common-lisp:cons "ComplaintTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-topic))
      (common-lisp:list
       (common-lisp:cons "DeliveryTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forwarding-enabled))
      (common-lisp:list
       (common-lisp:cons "ForwardingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'headers-in-bounce-notifications-enabled))
      (common-lisp:list
       (common-lisp:cons "HeadersInBounceNotificationsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'headers-in-complaint-notifications-enabled))
      (common-lisp:list
       (common-lisp:cons "HeadersInComplaintNotificationsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'headers-in-delivery-notifications-enabled))
      (common-lisp:list
       (common-lisp:cons "HeadersInDeliveryNotificationsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-notification-attributes))
   common-lisp:nil))
(common-lisp:deftype identity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass identity-verification-attributes common-lisp:nil
                       ((verification-status :initarg :verification-status
                         :initform
                         (common-lisp:error ":verification-status is required")
                         :type
                         (common-lisp:or verification-status common-lisp:null)
                         :accessor
                         struct-shape-identity-verification-attributes-verification-status
                         :shape "VerificationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (verification-token :initarg :verification-token
                         :initform common-lisp:nil :type
                         (common-lisp:or verification-token common-lisp:null)
                         :accessor
                         struct-shape-identity-verification-attributes-verification-token
                         :shape "VerificationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity-verification-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'identity-verification-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'identity-verification-attributes
                    'make-identity-verification-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-verification-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-verification-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-status))
      (common-lisp:list
       (common-lisp:cons "VerificationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-token))
      (common-lisp:list
       (common-lisp:cons "VerificationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-verification-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-cloud-watch-destination-exception
     (email-error)
     ((configuration-set-name :initarg :configuration-set-name :initform
       common-lisp:nil :reader
       invalid-cloud-watch-destination-exception-configuration-set-name)
      (event-destination-name :initarg :event-destination-name :initform
       common-lisp:nil :reader
       invalid-cloud-watch-destination-exception-event-destination-name)))
 (common-lisp:export
  (common-lisp:list 'invalid-cloud-watch-destination-exception
                    'invalid-cloud-watch-destination-exception-configuration-set-name
                    'invalid-cloud-watch-destination-exception-event-destination-name)))
(common-lisp:progn
 (common-lisp:define-condition invalid-configuration-set-exception
     (email-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-configuration-set-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-delivery-options-exception
     (email-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-delivery-options-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-firehose-destination-exception
     (email-error)
     ((configuration-set-name :initarg :configuration-set-name :initform
       common-lisp:nil :reader
       invalid-firehose-destination-exception-configuration-set-name)
      (event-destination-name :initarg :event-destination-name :initform
       common-lisp:nil :reader
       invalid-firehose-destination-exception-event-destination-name)))
 (common-lisp:export
  (common-lisp:list 'invalid-firehose-destination-exception
                    'invalid-firehose-destination-exception-configuration-set-name
                    'invalid-firehose-destination-exception-event-destination-name)))
(common-lisp:progn
 (common-lisp:define-condition invalid-lambda-function-exception
     (email-error)
     ((function-arn :initarg :function-arn :initform common-lisp:nil :reader
       invalid-lambda-function-exception-function-arn)))
 (common-lisp:export
  (common-lisp:list 'invalid-lambda-function-exception
                    'invalid-lambda-function-exception-function-arn)))
(common-lisp:progn
 (common-lisp:define-condition invalid-policy-exception
     (email-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-policy-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-rendering-parameter-exception
     (email-error)
     ((template-name :initarg :template-name :initform common-lisp:nil :reader
       invalid-rendering-parameter-exception-template-name)))
 (common-lisp:export
  (common-lisp:list 'invalid-rendering-parameter-exception
                    'invalid-rendering-parameter-exception-template-name)))
(common-lisp:progn
 (common-lisp:define-condition invalid-s3configuration-exception
     (email-error)
     ((bucket :initarg :bucket :initform common-lisp:nil :reader
       invalid-s3configuration-exception-bucket)))
 (common-lisp:export
  (common-lisp:list 'invalid-s3configuration-exception
                    'invalid-s3configuration-exception-bucket)))
(common-lisp:progn
 (common-lisp:define-condition invalid-snsdestination-exception
     (email-error)
     ((configuration-set-name :initarg :configuration-set-name :initform
       common-lisp:nil :reader
       invalid-snsdestination-exception-configuration-set-name)
      (event-destination-name :initarg :event-destination-name :initform
       common-lisp:nil :reader
       invalid-snsdestination-exception-event-destination-name)))
 (common-lisp:export
  (common-lisp:list 'invalid-snsdestination-exception
                    'invalid-snsdestination-exception-configuration-set-name
                    'invalid-snsdestination-exception-event-destination-name)))
(common-lisp:progn
 (common-lisp:define-condition invalid-sns-topic-exception
     (email-error)
     ((topic :initarg :topic :initform common-lisp:nil :reader
       invalid-sns-topic-exception-topic)))
 (common-lisp:export
  (common-lisp:list 'invalid-sns-topic-exception
                    'invalid-sns-topic-exception-topic)))
(common-lisp:progn
 (common-lisp:define-condition invalid-template-exception
     (email-error)
     ((template-name :initarg :template-name :initform common-lisp:nil :reader
       invalid-template-exception-template-name)))
 (common-lisp:export
  (common-lisp:list 'invalid-template-exception
                    'invalid-template-exception-template-name)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tracking-options-exception
     (email-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-tracking-options-exception)))
(common-lisp:deftype invocation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kinesis-firehose-destination common-lisp:nil
                       ((iamrole-arn :initarg :iamrole-arn :initform
                         (common-lisp:error ":iamrole-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-kinesis-firehose-destination-iamrole-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delivery-stream-arn :initarg :delivery-stream-arn
                         :initform
                         (common-lisp:error ":delivery-stream-arn is required")
                         :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-kinesis-firehose-destination-delivery-stream-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kinesis-firehose-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kinesis-firehose-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kinesis-firehose-destination
                    'make-kinesis-firehose-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iamrole-arn))
      (common-lisp:list
       (common-lisp:cons "IAMRoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-stream-arn))
      (common-lisp:list
       (common-lisp:cons "DeliveryStreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-firehose-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lambda-action common-lisp:nil
                       ((topic-arn :initarg :topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-lambda-action-topic-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-arn :initarg :function-arn :initform
                         (common-lisp:error ":function-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-lambda-action-function-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (invocation-type :initarg :invocation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or invocation-type common-lisp:null)
                         :accessor struct-shape-lambda-action-invocation-type
                         :shape "InvocationType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'lambda-action 'make-lambda-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-arn))
      (common-lisp:list
       (common-lisp:cons "FunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-type))
      (common-lisp:list
       (common-lisp:cons "InvocationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-action))
   common-lisp:nil))
(common-lisp:deftype last-attempt-date () 'common-lisp:string)
(common-lisp:deftype last-fresh-start () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (email-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass list-configuration-sets-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-configuration-sets-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or max-items common-lisp:null) :accessor
                         struct-shape-list-configuration-sets-request-max-items
                         :shape "MaxItems" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-configuration-sets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-configuration-sets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-configuration-sets-request
                    'make-list-configuration-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configuration-sets-response common-lisp:nil
                       ((configuration-sets :initarg :configuration-sets
                         :initform common-lisp:nil :type
                         (common-lisp:or configuration-sets common-lisp:null)
                         :accessor
                         struct-shape-list-configuration-sets-response-configuration-sets
                         :shape "ConfigurationSets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-configuration-sets-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-configuration-sets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-configuration-sets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-configuration-sets-response
                    'make-list-configuration-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-sets))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-verification-email-templates-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-custom-verification-email-templates-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-custom-verification-email-templates-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-verification-email-templates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-verification-email-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-verification-email-templates-request
                    'make-list-custom-verification-email-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-verification-email-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-verification-email-templates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-verification-email-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-verification-email-templates-response
                       common-lisp:nil
                       ((custom-verification-email-templates :initarg
                         :custom-verification-email-templates :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-verification-email-templates
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-custom-verification-email-templates-response-custom-verification-email-templates
                         :shape "CustomVerificationEmailTemplates" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-custom-verification-email-templates-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-verification-email-templates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-verification-email-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-verification-email-templates-response
                    'make-list-custom-verification-email-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-verification-email-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-verification-email-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-verification-email-templates))
      (common-lisp:list
       (common-lisp:cons "CustomVerificationEmailTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-verification-email-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identities-request common-lisp:nil
                       ((identity-type :initarg :identity-type :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-type common-lisp:null)
                         :accessor
                         struct-shape-list-identities-request-identity-type
                         :shape "IdentityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-identities-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or max-items common-lisp:null) :accessor
                         struct-shape-list-identities-request-max-items :shape
                         "MaxItems" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identities-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-identities-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identities-request 'make-list-identities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-type))
      (common-lisp:list
       (common-lisp:cons "IdentityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identities-response common-lisp:nil
                       ((identities :initarg :identities :initform
                         (common-lisp:error ":identities is required") :type
                         (common-lisp:or identity-list common-lisp:null)
                         :accessor
                         struct-shape-list-identities-response-identities
                         :shape "IdentityList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-identities-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identities-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-identities-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identities-response 'make-list-identities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identities))
      (common-lisp:list
       (common-lisp:cons "Identities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identity-policies-request common-lisp:nil
                       ((identity :initarg :identity :initform
                         (common-lisp:error ":identity is required") :type
                         (common-lisp:or identity common-lisp:null) :accessor
                         struct-shape-list-identity-policies-request-identity
                         :shape "Identity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identity-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identity-policies-request
                    'make-list-identity-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "Identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identity-policies-response common-lisp:nil
                       ((policy-names :initarg :policy-names :initform
                         (common-lisp:error ":policy-names is required") :type
                         (common-lisp:or policy-name-list common-lisp:null)
                         :accessor
                         struct-shape-list-identity-policies-response-policy-names
                         :shape "PolicyNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identity-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identity-policies-response
                    'make-list-identity-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-receipt-filters-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-receipt-filters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-receipt-filters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-receipt-filters-request
                    'make-list-receipt-filters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-receipt-filters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-receipt-filters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-receipt-filters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-receipt-filters-response common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or receipt-filter-list common-lisp:null)
                         :accessor
                         struct-shape-list-receipt-filters-response-filters
                         :shape "ReceiptFilterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-receipt-filters-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-receipt-filters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-receipt-filters-response
                    'make-list-receipt-filters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-receipt-filters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-receipt-filters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-receipt-filters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-receipt-rule-sets-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-receipt-rule-sets-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-receipt-rule-sets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-receipt-rule-sets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-receipt-rule-sets-request
                    'make-list-receipt-rule-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-receipt-rule-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-receipt-rule-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-receipt-rule-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-receipt-rule-sets-response common-lisp:nil
                       ((rule-sets :initarg :rule-sets :initform
                         common-lisp:nil :type
                         (common-lisp:or receipt-rule-sets-lists
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-receipt-rule-sets-response-rule-sets
                         :shape "ReceiptRuleSetsLists" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-receipt-rule-sets-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-receipt-rule-sets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-receipt-rule-sets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-receipt-rule-sets-response
                    'make-list-receipt-rule-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-receipt-rule-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-receipt-rule-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-sets))
      (common-lisp:list
       (common-lisp:cons "RuleSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-receipt-rule-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-templates-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-templates-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or max-items common-lisp:null) :accessor
                         struct-shape-list-templates-request-max-items :shape
                         "MaxItems" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-templates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-templates-request 'make-list-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-templates-response common-lisp:nil
                       ((templates-metadata :initarg :templates-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or template-metadata-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-templates-response-templates-metadata
                         :shape "TemplateMetadataList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-templates-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-templates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-templates-response 'make-list-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'templates-metadata))
      (common-lisp:list
       (common-lisp:cons "TemplatesMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-verified-email-addresses-response common-lisp:nil
                       ((verified-email-addresses :initarg
                         :verified-email-addresses :initform common-lisp:nil
                         :type (common-lisp:or address-list common-lisp:null)
                         :accessor
                         struct-shape-list-verified-email-addresses-response-verified-email-addresses
                         :shape "AddressList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-verified-email-addresses-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-verified-email-addresses-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-verified-email-addresses-response
                    'make-list-verified-email-addresses-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-verified-email-addresses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-verified-email-addresses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verified-email-addresses))
      (common-lisp:list
       (common-lisp:cons "VerifiedEmailAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-verified-email-addresses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mail-from-domain-attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-mail-from-domain-attributes
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype mail-from-domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition mail-from-domain-not-verified-exception
     (email-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'mail-from-domain-not-verified-exception)))
(common-lisp:deftype max24hour-send () 'common-lisp:double-float)
(common-lisp:deftype max-items () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype max-send-rate () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass message common-lisp:nil
                       ((subject :initarg :subject :initform
                         (common-lisp:error ":subject is required") :type
                         (common-lisp:or content common-lisp:null) :accessor
                         struct-shape-message-subject :shape "Content"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (body :initarg :body :initform
                         (common-lisp:error ":body is required") :type
                         (common-lisp:or body common-lisp:null) :accessor
                         struct-shape-message-body :shape "Body" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'message
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'message 'make-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message))
   common-lisp:nil))
(common-lisp:deftype message-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass message-dsn common-lisp:nil
                       ((reporting-mta :initarg :reporting-mta :initform
                         (common-lisp:error ":reporting-mta is required") :type
                         (common-lisp:or reporting-mta common-lisp:null)
                         :accessor struct-shape-message-dsn-reporting-mta
                         :shape "ReportingMta" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arrival-date :initarg :arrival-date :initform
                         common-lisp:nil :type
                         (common-lisp:or arrival-date common-lisp:null)
                         :accessor struct-shape-message-dsn-arrival-date :shape
                         "ArrivalDate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (extension-fields :initarg :extension-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or extension-field-list common-lisp:null)
                         :accessor struct-shape-message-dsn-extension-fields
                         :shape "ExtensionFieldList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-message-dsn
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'message-dsn
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'message-dsn 'make-message-dsn))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message-dsn))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message-dsn))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reporting-mta))
      (common-lisp:list
       (common-lisp:cons "ReportingMta"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arrival-date))
      (common-lisp:list
       (common-lisp:cons "ArrivalDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extension-fields))
      (common-lisp:list
       (common-lisp:cons "ExtensionFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message-dsn))
   common-lisp:nil))
(common-lisp:deftype message-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition message-rejected
     (email-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'message-rejected)))
(common-lisp:progn
 (common-lisp:defclass message-tag common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or message-tag-name common-lisp:null)
                         :accessor struct-shape-message-tag-name :shape
                         "MessageTagName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or message-tag-value common-lisp:null)
                         :accessor struct-shape-message-tag-value :shape
                         "MessageTagValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-message-tag
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'message-tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'message-tag 'make-message-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message-tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype message-tag-list ()
   '(trivial-types:proper-list message-tag))
 (common-lisp:defun make-message-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list message-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype message-tag-name () 'common-lisp:string)
(common-lisp:deftype message-tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition missing-rendering-attribute-exception
     (email-error)
     ((template-name :initarg :template-name :initform common-lisp:nil :reader
       missing-rendering-attribute-exception-template-name)))
 (common-lisp:export
  (common-lisp:list 'missing-rendering-attribute-exception
                    'missing-rendering-attribute-exception-template-name)))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype notification-attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-notification-attributes
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype notification-topic () 'common-lisp:string)
(common-lisp:deftype notification-type () 'common-lisp:string)
(common-lisp:deftype policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policy-map () 'common-lisp:hash-table)
 (common-lisp:defun make-policy-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype policy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policy-name-list ()
   '(trivial-types:proper-list policy-name))
 (common-lisp:defun make-policy-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition production-access-not-granted-exception
     (email-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'production-access-not-granted-exception)))
(common-lisp:progn
 (common-lisp:defclass put-configuration-set-delivery-options-request
                       common-lisp:nil
                       ((configuration-set-name :initarg
                         :configuration-set-name :initform
                         (common-lisp:error
                          ":configuration-set-name is required")
                         :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-configuration-set-delivery-options-request-configuration-set-name
                         :shape "ConfigurationSetName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (delivery-options :initarg :delivery-options :initform
                         common-lisp:nil :type
                         (common-lisp:or delivery-options common-lisp:null)
                         :accessor
                         struct-shape-put-configuration-set-delivery-options-request-delivery-options
                         :shape "DeliveryOptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-configuration-set-delivery-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-configuration-set-delivery-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-configuration-set-delivery-options-request
                    'make-put-configuration-set-delivery-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-configuration-set-delivery-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-configuration-set-delivery-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-options))
      (common-lisp:list
       (common-lisp:cons "DeliveryOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-configuration-set-delivery-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-configuration-set-delivery-options-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-configuration-set-delivery-options-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-configuration-set-delivery-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-configuration-set-delivery-options-response
                    'make-put-configuration-set-delivery-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-configuration-set-delivery-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-configuration-set-delivery-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-configuration-set-delivery-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-identity-policy-request common-lisp:nil
                       ((identity :initarg :identity :initform
                         (common-lisp:error ":identity is required") :type
                         (common-lisp:or identity common-lisp:null) :accessor
                         struct-shape-put-identity-policy-request-identity
                         :shape "Identity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-put-identity-policy-request-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         struct-shape-put-identity-policy-request-policy :shape
                         "Policy" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-identity-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-identity-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-identity-policy-request
                    'make-put-identity-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-identity-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-identity-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "Identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-identity-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-identity-policy-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-identity-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-identity-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-identity-policy-response
                    'make-put-identity-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-identity-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-identity-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-identity-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass raw-message common-lisp:nil
                       ((data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or raw-message-data common-lisp:null)
                         :accessor struct-shape-raw-message-data :shape
                         "RawMessageData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-raw-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'raw-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'raw-message 'make-raw-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input raw-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input raw-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input raw-message))
   common-lisp:nil))
(common-lisp:deftype raw-message-data ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass receipt-action common-lisp:nil
                       ((s3action :initarg :s3action :initform common-lisp:nil
                         :type (common-lisp:or s3action common-lisp:null)
                         :accessor struct-shape-receipt-action-s3action :shape
                         "S3Action" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bounce-action :initarg :bounce-action :initform
                         common-lisp:nil :type
                         (common-lisp:or bounce-action common-lisp:null)
                         :accessor struct-shape-receipt-action-bounce-action
                         :shape "BounceAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workmail-action :initarg :workmail-action :initform
                         common-lisp:nil :type
                         (common-lisp:or workmail-action common-lisp:null)
                         :accessor struct-shape-receipt-action-workmail-action
                         :shape "WorkmailAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lambda-action :initarg :lambda-action :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-action common-lisp:null)
                         :accessor struct-shape-receipt-action-lambda-action
                         :shape "LambdaAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stop-action :initarg :stop-action :initform
                         common-lisp:nil :type
                         (common-lisp:or stop-action common-lisp:null)
                         :accessor struct-shape-receipt-action-stop-action
                         :shape "StopAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (add-header-action :initarg :add-header-action
                         :initform common-lisp:nil :type
                         (common-lisp:or add-header-action common-lisp:null)
                         :accessor
                         struct-shape-receipt-action-add-header-action :shape
                         "AddHeaderAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snsaction :initarg :snsaction :initform
                         common-lisp:nil :type
                         (common-lisp:or snsaction common-lisp:null) :accessor
                         struct-shape-receipt-action-snsaction :shape
                         "SNSAction" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-receipt-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'receipt-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'receipt-action 'make-receipt-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input receipt-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input receipt-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3action))
      (common-lisp:list
       (common-lisp:cons "S3Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounce-action))
      (common-lisp:list
       (common-lisp:cons "BounceAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workmail-action))
      (common-lisp:list
       (common-lisp:cons "WorkmailAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-action))
      (common-lisp:list
       (common-lisp:cons "LambdaAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-action))
      (common-lisp:list
       (common-lisp:cons "StopAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-header-action))
      (common-lisp:list
       (common-lisp:cons "AddHeaderAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snsaction))
      (common-lisp:list
       (common-lisp:cons "SNSAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input receipt-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype receipt-actions-list ()
   '(trivial-types:proper-list receipt-action))
 (common-lisp:defun make-receipt-actions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list receipt-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass receipt-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or receipt-filter-name common-lisp:null)
                         :accessor struct-shape-receipt-filter-name :shape
                         "ReceiptFilterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-filter :initarg :ip-filter :initform
                         (common-lisp:error ":ip-filter is required") :type
                         (common-lisp:or receipt-ip-filter common-lisp:null)
                         :accessor struct-shape-receipt-filter-ip-filter :shape
                         "ReceiptIpFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-receipt-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'receipt-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'receipt-filter 'make-receipt-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input receipt-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input receipt-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-filter))
      (common-lisp:list
       (common-lisp:cons "IpFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input receipt-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype receipt-filter-list ()
   '(trivial-types:proper-list receipt-filter))
 (common-lisp:defun make-receipt-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list receipt-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype receipt-filter-name () 'common-lisp:string)
(common-lisp:deftype receipt-filter-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass receipt-ip-filter common-lisp:nil
                       ((policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or receipt-filter-policy
                                         common-lisp:null)
                         :accessor struct-shape-receipt-ip-filter-policy :shape
                         "ReceiptFilterPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cidr :initarg :cidr :initform
                         (common-lisp:error ":cidr is required") :type
                         (common-lisp:or cidr common-lisp:null) :accessor
                         struct-shape-receipt-ip-filter-cidr :shape "Cidr"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-receipt-ip-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'receipt-ip-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'receipt-ip-filter 'make-receipt-ip-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input receipt-ip-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input receipt-ip-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input receipt-ip-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass receipt-rule common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or receipt-rule-name common-lisp:null)
                         :accessor struct-shape-receipt-rule-name :shape
                         "ReceiptRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor struct-shape-receipt-rule-enabled :shape
                         "Enabled" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tls-policy :initarg :tls-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or tls-policy common-lisp:null) :accessor
                         struct-shape-receipt-rule-tls-policy :shape
                         "TlsPolicy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recipients :initarg :recipients :initform
                         common-lisp:nil :type
                         (common-lisp:or recipients-list common-lisp:null)
                         :accessor struct-shape-receipt-rule-recipients :shape
                         "RecipientsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform common-lisp:nil
                         :type
                         (common-lisp:or receipt-actions-list common-lisp:null)
                         :accessor struct-shape-receipt-rule-actions :shape
                         "ReceiptActionsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scan-enabled :initarg :scan-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled common-lisp:null) :accessor
                         struct-shape-receipt-rule-scan-enabled :shape
                         "Enabled" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-receipt-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'receipt-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'receipt-rule 'make-receipt-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input receipt-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input receipt-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-policy))
      (common-lisp:list
       (common-lisp:cons "TlsPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipients))
      (common-lisp:list
       (common-lisp:cons "Recipients"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-enabled))
      (common-lisp:list
       (common-lisp:cons "ScanEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input receipt-rule))
   common-lisp:nil))
(common-lisp:deftype receipt-rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype receipt-rule-names-list ()
   '(trivial-types:proper-list receipt-rule-name))
 (common-lisp:defun make-receipt-rule-names-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list receipt-rule-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass receipt-rule-set-metadata common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or receipt-rule-set-name
                                         common-lisp:null)
                         :accessor struct-shape-receipt-rule-set-metadata-name
                         :shape "ReceiptRuleSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-receipt-rule-set-metadata-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-receipt-rule-set-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'receipt-rule-set-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'receipt-rule-set-metadata
                    'make-receipt-rule-set-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          receipt-rule-set-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          receipt-rule-set-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          receipt-rule-set-metadata))
   common-lisp:nil))
(common-lisp:deftype receipt-rule-set-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype receipt-rule-sets-lists ()
   '(trivial-types:proper-list receipt-rule-set-metadata))
 (common-lisp:defun make-receipt-rule-sets-lists
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            receipt-rule-set-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype receipt-rules-list ()
   '(trivial-types:proper-list receipt-rule))
 (common-lisp:defun make-receipt-rules-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list receipt-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recipient () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass recipient-dsn-fields common-lisp:nil
                       ((final-recipient :initarg :final-recipient :initform
                         common-lisp:nil :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-recipient-dsn-fields-final-recipient
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or dsn-action common-lisp:null) :accessor
                         struct-shape-recipient-dsn-fields-action :shape
                         "DsnAction" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (remote-mta :initarg :remote-mta :initform
                         common-lisp:nil :type
                         (common-lisp:or remote-mta common-lisp:null) :accessor
                         struct-shape-recipient-dsn-fields-remote-mta :shape
                         "RemoteMta" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or dsn-status common-lisp:null) :accessor
                         struct-shape-recipient-dsn-fields-status :shape
                         "DsnStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (diagnostic-code :initarg :diagnostic-code :initform
                         common-lisp:nil :type
                         (common-lisp:or diagnostic-code common-lisp:null)
                         :accessor
                         struct-shape-recipient-dsn-fields-diagnostic-code
                         :shape "DiagnosticCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-attempt-date :initarg :last-attempt-date
                         :initform common-lisp:nil :type
                         (common-lisp:or last-attempt-date common-lisp:null)
                         :accessor
                         struct-shape-recipient-dsn-fields-last-attempt-date
                         :shape "LastAttemptDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extension-fields :initarg :extension-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or extension-field-list common-lisp:null)
                         :accessor
                         struct-shape-recipient-dsn-fields-extension-fields
                         :shape "ExtensionFieldList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recipient-dsn-fields
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recipient-dsn-fields
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recipient-dsn-fields 'make-recipient-dsn-fields))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recipient-dsn-fields))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recipient-dsn-fields))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-recipient))
      (common-lisp:list
       (common-lisp:cons "FinalRecipient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-mta))
      (common-lisp:list
       (common-lisp:cons "RemoteMta"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'diagnostic-code))
      (common-lisp:list
       (common-lisp:cons "DiagnosticCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-attempt-date))
      (common-lisp:list
       (common-lisp:cons "LastAttemptDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extension-fields))
      (common-lisp:list
       (common-lisp:cons "ExtensionFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recipient-dsn-fields))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recipients-list ()
   '(trivial-types:proper-list recipient))
 (common-lisp:defun make-recipients-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recipient))
   aws-sdk/generator/shape::members))
(common-lisp:deftype remote-mta () 'common-lisp:string)
(common-lisp:deftype rendered-template () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reorder-receipt-rule-set-request common-lisp:nil
                       ((rule-set-name :initarg :rule-set-name :initform
                         (common-lisp:error ":rule-set-name is required") :type
                         (common-lisp:or receipt-rule-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-reorder-receipt-rule-set-request-rule-set-name
                         :shape "ReceiptRuleSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-names :initarg :rule-names :initform
                         (common-lisp:error ":rule-names is required") :type
                         (common-lisp:or receipt-rule-names-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-reorder-receipt-rule-set-request-rule-names
                         :shape "ReceiptRuleNamesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reorder-receipt-rule-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reorder-receipt-rule-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reorder-receipt-rule-set-request
                    'make-reorder-receipt-rule-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reorder-receipt-rule-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reorder-receipt-rule-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-name))
      (common-lisp:list
       (common-lisp:cons "RuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-names))
      (common-lisp:list
       (common-lisp:cons "RuleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reorder-receipt-rule-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reorder-receipt-rule-set-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reorder-receipt-rule-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reorder-receipt-rule-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reorder-receipt-rule-set-response
                    'make-reorder-receipt-rule-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reorder-receipt-rule-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reorder-receipt-rule-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reorder-receipt-rule-set-response))
   common-lisp:nil))
(common-lisp:deftype reporting-mta () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reputation-options common-lisp:nil
                       ((sending-enabled :initarg :sending-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or enabled common-lisp:null) :accessor
                         struct-shape-reputation-options-sending-enabled :shape
                         "Enabled" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reputation-metrics-enabled :initarg
                         :reputation-metrics-enabled :initform common-lisp:nil
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor
                         struct-shape-reputation-options-reputation-metrics-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-fresh-start :initarg :last-fresh-start :initform
                         common-lisp:nil :type
                         (common-lisp:or last-fresh-start common-lisp:null)
                         :accessor
                         struct-shape-reputation-options-last-fresh-start
                         :shape "LastFreshStart" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reputation-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reputation-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reputation-options 'make-reputation-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reputation-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reputation-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sending-enabled))
      (common-lisp:list
       (common-lisp:cons "SendingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reputation-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "ReputationMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-fresh-start))
      (common-lisp:list
       (common-lisp:cons "LastFreshStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reputation-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition rule-does-not-exist-exception
     (email-error)
     ((name :initarg :name :initform common-lisp:nil :reader
       rule-does-not-exist-exception-name)))
 (common-lisp:export
  (common-lisp:list 'rule-does-not-exist-exception
                    'rule-does-not-exist-exception-name)))
(common-lisp:deftype rule-or-rule-set-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition rule-set-does-not-exist-exception
     (email-error)
     ((name :initarg :name :initform common-lisp:nil :reader
       rule-set-does-not-exist-exception-name)))
 (common-lisp:export
  (common-lisp:list 'rule-set-does-not-exist-exception
                    'rule-set-does-not-exist-exception-name)))
(common-lisp:progn
 (common-lisp:defclass s3action common-lisp:nil
                       ((topic-arn :initarg :topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-s3action-topic-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bucket-name :initarg :bucket-name :initform
                         (common-lisp:error ":bucket-name is required") :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor struct-shape-s3action-bucket-name :shape
                         "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-key-prefix :initarg :object-key-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor struct-shape-s3action-object-key-prefix
                         :shape "S3KeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-s3action-kms-key-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3action 'make-s3action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-key-prefix))
      (common-lisp:list
       (common-lisp:cons "ObjectKeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3action))
   common-lisp:nil))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3key-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass snsaction common-lisp:nil
                       ((topic-arn :initarg :topic-arn :initform
                         (common-lisp:error ":topic-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-snsaction-topic-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encoding :initarg :encoding :initform common-lisp:nil
                         :type
                         (common-lisp:or snsaction-encoding common-lisp:null)
                         :accessor struct-shape-snsaction-encoding :shape
                         "SNSActionEncoding" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snsaction
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snsaction
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'snsaction 'make-snsaction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snsaction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snsaction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding))
      (common-lisp:list
       (common-lisp:cons "Encoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snsaction))
   common-lisp:nil))
(common-lisp:deftype snsaction-encoding () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass snsdestination common-lisp:nil
                       ((topic-arn :initarg :topic-arn :initform
                         (common-lisp:error ":topic-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-snsdestination-topic-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snsdestination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snsdestination
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'snsdestination 'make-snsdestination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snsdestination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snsdestination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snsdestination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-bounce-request common-lisp:nil
                       ((original-message-id :initarg :original-message-id
                         :initform
                         (common-lisp:error ":original-message-id is required")
                         :type (common-lisp:or message-id common-lisp:null)
                         :accessor
                         struct-shape-send-bounce-request-original-message-id
                         :shape "MessageId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bounce-sender :initarg :bounce-sender :initform
                         (common-lisp:error ":bounce-sender is required") :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-send-bounce-request-bounce-sender :shape
                         "Address" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (explanation :initarg :explanation :initform
                         common-lisp:nil :type
                         (common-lisp:or explanation common-lisp:null)
                         :accessor struct-shape-send-bounce-request-explanation
                         :shape "Explanation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message-dsn :initarg :message-dsn :initform
                         common-lisp:nil :type
                         (common-lisp:or message-dsn common-lisp:null)
                         :accessor struct-shape-send-bounce-request-message-dsn
                         :shape "MessageDsn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bounced-recipient-info-list :initarg
                         :bounced-recipient-info-list :initform
                         (common-lisp:error
                          ":bounced-recipient-info-list is required")
                         :type
                         (common-lisp:or bounced-recipient-info-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-bounce-request-bounced-recipient-info-list
                         :shape "BouncedRecipientInfoList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bounce-sender-arn :initarg :bounce-sender-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-send-bounce-request-bounce-sender-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-bounce-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-bounce-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-bounce-request 'make-send-bounce-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-bounce-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-bounce-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original-message-id))
      (common-lisp:list
       (common-lisp:cons "OriginalMessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounce-sender))
      (common-lisp:list
       (common-lisp:cons "BounceSender"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explanation))
      (common-lisp:list
       (common-lisp:cons "Explanation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-dsn))
      (common-lisp:list
       (common-lisp:cons "MessageDsn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bounced-recipient-info-list))
      (common-lisp:list
       (common-lisp:cons "BouncedRecipientInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounce-sender-arn))
      (common-lisp:list
       (common-lisp:cons "BounceSenderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-bounce-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-bounce-response common-lisp:nil
                       ((message-id :initarg :message-id :initform
                         common-lisp:nil :type
                         (common-lisp:or message-id common-lisp:null) :accessor
                         struct-shape-send-bounce-response-message-id :shape
                         "MessageId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-bounce-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-bounce-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-bounce-response 'make-send-bounce-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-bounce-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-bounce-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-bounce-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-bulk-templated-email-request common-lisp:nil
                       ((source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-send-bulk-templated-email-request-source
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-arn :initarg :source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-send-bulk-templated-email-request-source-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reply-to-addresses :initarg :reply-to-addresses
                         :initform common-lisp:nil :type
                         (common-lisp:or address-list common-lisp:null)
                         :accessor
                         struct-shape-send-bulk-templated-email-request-reply-to-addresses
                         :shape "AddressList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (return-path :initarg :return-path :initform
                         common-lisp:nil :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-send-bulk-templated-email-request-return-path
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (return-path-arn :initarg :return-path-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-send-bulk-templated-email-request-return-path-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-set-name :initarg
                         :configuration-set-name :initform common-lisp:nil
                         :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-bulk-templated-email-request-configuration-set-name
                         :shape "ConfigurationSetName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-tags :initarg :default-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or message-tag-list common-lisp:null)
                         :accessor
                         struct-shape-send-bulk-templated-email-request-default-tags
                         :shape "MessageTagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template :initarg :template :initform
                         (common-lisp:error ":template is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-send-bulk-templated-email-request-template
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-send-bulk-templated-email-request-template-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-template-data :initarg :default-template-data
                         :initform common-lisp:nil :type
                         (common-lisp:or template-data common-lisp:null)
                         :accessor
                         struct-shape-send-bulk-templated-email-request-default-template-data
                         :shape "TemplateData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destinations :initarg :destinations :initform
                         (common-lisp:error ":destinations is required") :type
                         (common-lisp:or bulk-email-destination-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-bulk-templated-email-request-destinations
                         :shape "BulkEmailDestinationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-bulk-templated-email-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-bulk-templated-email-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-bulk-templated-email-request
                    'make-send-bulk-templated-email-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-bulk-templated-email-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-bulk-templated-email-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reply-to-addresses))
      (common-lisp:list
       (common-lisp:cons "ReplyToAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-path))
      (common-lisp:list
       (common-lisp:cons "ReturnPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-path-arn))
      (common-lisp:list
       (common-lisp:cons "ReturnPathArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-tags))
      (common-lisp:list
       (common-lisp:cons "DefaultTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "Template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-template-data))
      (common-lisp:list
       (common-lisp:cons "DefaultTemplateData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-bulk-templated-email-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-bulk-templated-email-response common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or bulk-email-destination-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-bulk-templated-email-response-status
                         :shape "BulkEmailDestinationStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-bulk-templated-email-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-bulk-templated-email-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-bulk-templated-email-response
                    'make-send-bulk-templated-email-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-bulk-templated-email-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-bulk-templated-email-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-bulk-templated-email-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-custom-verification-email-request common-lisp:nil
                       ((email-address :initarg :email-address :initform
                         (common-lisp:error ":email-address is required") :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-send-custom-verification-email-request-email-address
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":template-name is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-send-custom-verification-email-request-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-set-name :initarg
                         :configuration-set-name :initform common-lisp:nil
                         :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-custom-verification-email-request-configuration-set-name
                         :shape "ConfigurationSetName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-custom-verification-email-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-custom-verification-email-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-custom-verification-email-request
                    'make-send-custom-verification-email-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-custom-verification-email-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-custom-verification-email-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-custom-verification-email-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-custom-verification-email-response common-lisp:nil
                       ((message-id :initarg :message-id :initform
                         common-lisp:nil :type
                         (common-lisp:or message-id common-lisp:null) :accessor
                         struct-shape-send-custom-verification-email-response-message-id
                         :shape "MessageId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-custom-verification-email-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-custom-verification-email-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-custom-verification-email-response
                    'make-send-custom-verification-email-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-custom-verification-email-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-custom-verification-email-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-custom-verification-email-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-data-point common-lisp:nil
                       ((timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-send-data-point-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (delivery-attempts :initarg :delivery-attempts
                         :initform common-lisp:nil :type
                         (common-lisp:or counter common-lisp:null) :accessor
                         struct-shape-send-data-point-delivery-attempts :shape
                         "Counter" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bounces :initarg :bounces :initform common-lisp:nil
                         :type (common-lisp:or counter common-lisp:null)
                         :accessor struct-shape-send-data-point-bounces :shape
                         "Counter" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (complaints :initarg :complaints :initform
                         common-lisp:nil :type
                         (common-lisp:or counter common-lisp:null) :accessor
                         struct-shape-send-data-point-complaints :shape
                         "Counter" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rejects :initarg :rejects :initform common-lisp:nil
                         :type (common-lisp:or counter common-lisp:null)
                         :accessor struct-shape-send-data-point-rejects :shape
                         "Counter" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-data-point
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-data-point
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'send-data-point 'make-send-data-point))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-data-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-data-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-attempts))
      (common-lisp:list
       (common-lisp:cons "DeliveryAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounces))
      (common-lisp:list
       (common-lisp:cons "Bounces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'complaints))
      (common-lisp:list
       (common-lisp:cons "Complaints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rejects))
      (common-lisp:list
       (common-lisp:cons "Rejects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-data-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype send-data-point-list ()
   '(trivial-types:proper-list send-data-point))
 (common-lisp:defun make-send-data-point-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list send-data-point))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass send-email-request common-lisp:nil
                       ((source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-send-email-request-source :shape
                         "Address" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or destination common-lisp:null)
                         :accessor struct-shape-send-email-request-destination
                         :shape "Destination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-send-email-request-message :shape
                         "Message" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reply-to-addresses :initarg :reply-to-addresses
                         :initform common-lisp:nil :type
                         (common-lisp:or address-list common-lisp:null)
                         :accessor
                         struct-shape-send-email-request-reply-to-addresses
                         :shape "AddressList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (return-path :initarg :return-path :initform
                         common-lisp:nil :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-send-email-request-return-path :shape
                         "Address" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-arn :initarg :source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-send-email-request-source-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (return-path-arn :initarg :return-path-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-send-email-request-return-path-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or message-tag-list common-lisp:null)
                         :accessor struct-shape-send-email-request-tags :shape
                         "MessageTagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-set-name :initarg
                         :configuration-set-name :initform common-lisp:nil
                         :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-email-request-configuration-set-name
                         :shape "ConfigurationSetName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-email-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-email-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-email-request 'make-send-email-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-email-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-email-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reply-to-addresses))
      (common-lisp:list
       (common-lisp:cons "ReplyToAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-path))
      (common-lisp:list
       (common-lisp:cons "ReturnPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-path-arn))
      (common-lisp:list
       (common-lisp:cons "ReturnPathArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-email-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-email-response common-lisp:nil
                       ((message-id :initarg :message-id :initform
                         (common-lisp:error ":message-id is required") :type
                         (common-lisp:or message-id common-lisp:null) :accessor
                         struct-shape-send-email-response-message-id :shape
                         "MessageId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-email-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-email-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-email-response 'make-send-email-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-email-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-email-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-email-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-raw-email-request common-lisp:nil
                       ((source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or address common-lisp:null)
                         :accessor struct-shape-send-raw-email-request-source
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or address-list common-lisp:null)
                         :accessor
                         struct-shape-send-raw-email-request-destinations
                         :shape "AddressList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (raw-message :initarg :raw-message :initform
                         (common-lisp:error ":raw-message is required") :type
                         (common-lisp:or raw-message common-lisp:null)
                         :accessor
                         struct-shape-send-raw-email-request-raw-message :shape
                         "RawMessage" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (from-arn :initarg :from-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-send-raw-email-request-from-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-arn :initarg :source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-send-raw-email-request-source-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (return-path-arn :initarg :return-path-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-send-raw-email-request-return-path-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or message-tag-list common-lisp:null)
                         :accessor struct-shape-send-raw-email-request-tags
                         :shape "MessageTagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-set-name :initarg
                         :configuration-set-name :initform common-lisp:nil
                         :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-raw-email-request-configuration-set-name
                         :shape "ConfigurationSetName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-raw-email-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-raw-email-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-raw-email-request 'make-send-raw-email-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-raw-email-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-raw-email-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-message))
      (common-lisp:list
       (common-lisp:cons "RawMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-arn))
      (common-lisp:list
       (common-lisp:cons "FromArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-path-arn))
      (common-lisp:list
       (common-lisp:cons "ReturnPathArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-raw-email-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-raw-email-response common-lisp:nil
                       ((message-id :initarg :message-id :initform
                         (common-lisp:error ":message-id is required") :type
                         (common-lisp:or message-id common-lisp:null) :accessor
                         struct-shape-send-raw-email-response-message-id :shape
                         "MessageId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-raw-email-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-raw-email-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-raw-email-response 'make-send-raw-email-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-raw-email-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-raw-email-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-raw-email-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-templated-email-request common-lisp:nil
                       ((source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-send-templated-email-request-source
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or destination common-lisp:null)
                         :accessor
                         struct-shape-send-templated-email-request-destination
                         :shape "Destination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reply-to-addresses :initarg :reply-to-addresses
                         :initform common-lisp:nil :type
                         (common-lisp:or address-list common-lisp:null)
                         :accessor
                         struct-shape-send-templated-email-request-reply-to-addresses
                         :shape "AddressList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (return-path :initarg :return-path :initform
                         common-lisp:nil :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-send-templated-email-request-return-path
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-arn :initarg :source-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-send-templated-email-request-source-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (return-path-arn :initarg :return-path-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-send-templated-email-request-return-path-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or message-tag-list common-lisp:null)
                         :accessor
                         struct-shape-send-templated-email-request-tags :shape
                         "MessageTagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-set-name :initarg
                         :configuration-set-name :initform common-lisp:nil
                         :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-templated-email-request-configuration-set-name
                         :shape "ConfigurationSetName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (template :initarg :template :initform
                         (common-lisp:error ":template is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-send-templated-email-request-template
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-send-templated-email-request-template-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-data :initarg :template-data :initform
                         (common-lisp:error ":template-data is required") :type
                         (common-lisp:or template-data common-lisp:null)
                         :accessor
                         struct-shape-send-templated-email-request-template-data
                         :shape "TemplateData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-templated-email-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-templated-email-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-templated-email-request
                    'make-send-templated-email-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-templated-email-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-templated-email-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reply-to-addresses))
      (common-lisp:list
       (common-lisp:cons "ReplyToAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-path))
      (common-lisp:list
       (common-lisp:cons "ReturnPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-path-arn))
      (common-lisp:list
       (common-lisp:cons "ReturnPathArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "Template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-data))
      (common-lisp:list
       (common-lisp:cons "TemplateData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-templated-email-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-templated-email-response common-lisp:nil
                       ((message-id :initarg :message-id :initform
                         (common-lisp:error ":message-id is required") :type
                         (common-lisp:or message-id common-lisp:null) :accessor
                         struct-shape-send-templated-email-response-message-id
                         :shape "MessageId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-templated-email-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-templated-email-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-templated-email-response
                    'make-send-templated-email-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-templated-email-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-templated-email-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-templated-email-response))
   common-lisp:nil))
(common-lisp:deftype sent-last24hours () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass set-active-receipt-rule-set-request common-lisp:nil
                       ((rule-set-name :initarg :rule-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or receipt-rule-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-active-receipt-rule-set-request-rule-set-name
                         :shape "ReceiptRuleSetName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-active-receipt-rule-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-active-receipt-rule-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-active-receipt-rule-set-request
                    'make-set-active-receipt-rule-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-active-receipt-rule-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-active-receipt-rule-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-name))
      (common-lisp:list
       (common-lisp:cons "RuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-active-receipt-rule-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-active-receipt-rule-set-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-active-receipt-rule-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-active-receipt-rule-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-active-receipt-rule-set-response
                    'make-set-active-receipt-rule-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-active-receipt-rule-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-active-receipt-rule-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-active-receipt-rule-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-identity-dkim-enabled-request common-lisp:nil
                       ((identity :initarg :identity :initform
                         (common-lisp:error ":identity is required") :type
                         (common-lisp:or identity common-lisp:null) :accessor
                         struct-shape-set-identity-dkim-enabled-request-identity
                         :shape "Identity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dkim-enabled :initarg :dkim-enabled :initform
                         (common-lisp:error ":dkim-enabled is required") :type
                         (common-lisp:or enabled common-lisp:null) :accessor
                         struct-shape-set-identity-dkim-enabled-request-dkim-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-identity-dkim-enabled-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-identity-dkim-enabled-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-identity-dkim-enabled-request
                    'make-set-identity-dkim-enabled-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-dkim-enabled-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-dkim-enabled-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "Identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dkim-enabled))
      (common-lisp:list
       (common-lisp:cons "DkimEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-dkim-enabled-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-identity-dkim-enabled-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-identity-dkim-enabled-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-identity-dkim-enabled-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-identity-dkim-enabled-response
                    'make-set-identity-dkim-enabled-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-dkim-enabled-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-dkim-enabled-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-dkim-enabled-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-identity-feedback-forwarding-enabled-request
                       common-lisp:nil
                       ((identity :initarg :identity :initform
                         (common-lisp:error ":identity is required") :type
                         (common-lisp:or identity common-lisp:null) :accessor
                         struct-shape-set-identity-feedback-forwarding-enabled-request-identity
                         :shape "Identity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forwarding-enabled :initarg :forwarding-enabled
                         :initform
                         (common-lisp:error ":forwarding-enabled is required")
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor
                         struct-shape-set-identity-feedback-forwarding-enabled-request-forwarding-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-identity-feedback-forwarding-enabled-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-identity-feedback-forwarding-enabled-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-identity-feedback-forwarding-enabled-request
                    'make-set-identity-feedback-forwarding-enabled-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-feedback-forwarding-enabled-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-feedback-forwarding-enabled-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "Identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forwarding-enabled))
      (common-lisp:list
       (common-lisp:cons "ForwardingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-feedback-forwarding-enabled-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-identity-feedback-forwarding-enabled-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-identity-feedback-forwarding-enabled-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-identity-feedback-forwarding-enabled-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-identity-feedback-forwarding-enabled-response
                    'make-set-identity-feedback-forwarding-enabled-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-feedback-forwarding-enabled-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-feedback-forwarding-enabled-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-feedback-forwarding-enabled-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-identity-headers-in-notifications-enabled-request
                       common-lisp:nil
                       ((identity :initarg :identity :initform
                         (common-lisp:error ":identity is required") :type
                         (common-lisp:or identity common-lisp:null) :accessor
                         struct-shape-set-identity-headers-in-notifications-enabled-request-identity
                         :shape "Identity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-type :initarg :notification-type
                         :initform
                         (common-lisp:error ":notification-type is required")
                         :type
                         (common-lisp:or notification-type common-lisp:null)
                         :accessor
                         struct-shape-set-identity-headers-in-notifications-enabled-request-notification-type
                         :shape "NotificationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or enabled common-lisp:null) :accessor
                         struct-shape-set-identity-headers-in-notifications-enabled-request-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-identity-headers-in-notifications-enabled-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-identity-headers-in-notifications-enabled-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-identity-headers-in-notifications-enabled-request
                    'make-set-identity-headers-in-notifications-enabled-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-headers-in-notifications-enabled-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-headers-in-notifications-enabled-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "Identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-type))
      (common-lisp:list
       (common-lisp:cons "NotificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-headers-in-notifications-enabled-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-identity-headers-in-notifications-enabled-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-identity-headers-in-notifications-enabled-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-identity-headers-in-notifications-enabled-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-identity-headers-in-notifications-enabled-response
                    'make-set-identity-headers-in-notifications-enabled-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-headers-in-notifications-enabled-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-headers-in-notifications-enabled-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-headers-in-notifications-enabled-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-identity-mail-from-domain-request common-lisp:nil
                       ((identity :initarg :identity :initform
                         (common-lisp:error ":identity is required") :type
                         (common-lisp:or identity common-lisp:null) :accessor
                         struct-shape-set-identity-mail-from-domain-request-identity
                         :shape "Identity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mail-from-domain :initarg :mail-from-domain :initform
                         common-lisp:nil :type
                         (common-lisp:or mail-from-domain-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-identity-mail-from-domain-request-mail-from-domain
                         :shape "MailFromDomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (behavior-on-mxfailure :initarg :behavior-on-mxfailure
                         :initform common-lisp:nil :type
                         (common-lisp:or behavior-on-mxfailure
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-identity-mail-from-domain-request-behavior-on-mxfailure
                         :shape "BehaviorOnMXFailure" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-identity-mail-from-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-identity-mail-from-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-identity-mail-from-domain-request
                    'make-set-identity-mail-from-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-mail-from-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-mail-from-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "Identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mail-from-domain))
      (common-lisp:list
       (common-lisp:cons "MailFromDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'behavior-on-mxfailure))
      (common-lisp:list
       (common-lisp:cons "BehaviorOnMXFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-mail-from-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-identity-mail-from-domain-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-identity-mail-from-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-identity-mail-from-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-identity-mail-from-domain-response
                    'make-set-identity-mail-from-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-mail-from-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-mail-from-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-mail-from-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-identity-notification-topic-request common-lisp:nil
                       ((identity :initarg :identity :initform
                         (common-lisp:error ":identity is required") :type
                         (common-lisp:or identity common-lisp:null) :accessor
                         struct-shape-set-identity-notification-topic-request-identity
                         :shape "Identity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-type :initarg :notification-type
                         :initform
                         (common-lisp:error ":notification-type is required")
                         :type
                         (common-lisp:or notification-type common-lisp:null)
                         :accessor
                         struct-shape-set-identity-notification-topic-request-notification-type
                         :shape "NotificationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sns-topic :initarg :sns-topic :initform
                         common-lisp:nil :type
                         (common-lisp:or notification-topic common-lisp:null)
                         :accessor
                         struct-shape-set-identity-notification-topic-request-sns-topic
                         :shape "NotificationTopic" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-identity-notification-topic-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-identity-notification-topic-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-identity-notification-topic-request
                    'make-set-identity-notification-topic-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-notification-topic-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-notification-topic-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "Identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-type))
      (common-lisp:list
       (common-lisp:cons "NotificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic))
      (common-lisp:list
       (common-lisp:cons "SnsTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-notification-topic-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-identity-notification-topic-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-identity-notification-topic-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-identity-notification-topic-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-identity-notification-topic-response
                    'make-set-identity-notification-topic-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-notification-topic-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-notification-topic-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-notification-topic-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-receipt-rule-position-request common-lisp:nil
                       ((rule-set-name :initarg :rule-set-name :initform
                         (common-lisp:error ":rule-set-name is required") :type
                         (common-lisp:or receipt-rule-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-receipt-rule-position-request-rule-set-name
                         :shape "ReceiptRuleSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-name :initarg :rule-name :initform
                         (common-lisp:error ":rule-name is required") :type
                         (common-lisp:or receipt-rule-name common-lisp:null)
                         :accessor
                         struct-shape-set-receipt-rule-position-request-rule-name
                         :shape "ReceiptRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (after :initarg :after :initform common-lisp:nil :type
                         (common-lisp:or receipt-rule-name common-lisp:null)
                         :accessor
                         struct-shape-set-receipt-rule-position-request-after
                         :shape "ReceiptRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-receipt-rule-position-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-receipt-rule-position-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-receipt-rule-position-request
                    'make-set-receipt-rule-position-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-receipt-rule-position-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-receipt-rule-position-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-name))
      (common-lisp:list
       (common-lisp:cons "RuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after))
      (common-lisp:list
       (common-lisp:cons "After"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-receipt-rule-position-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-receipt-rule-position-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-receipt-rule-position-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-receipt-rule-position-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-receipt-rule-position-response
                    'make-set-receipt-rule-position-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-receipt-rule-position-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-receipt-rule-position-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-receipt-rule-position-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-action common-lisp:nil
                       ((scope :initarg :scope :initform
                         (common-lisp:error ":scope is required") :type
                         (common-lisp:or stop-scope common-lisp:null) :accessor
                         struct-shape-stop-action-scope :shape "StopScope"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (topic-arn :initarg :topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-stop-action-topic-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'stop-action 'make-stop-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-action))
   common-lisp:nil))
(common-lisp:deftype stop-scope () 'common-lisp:string)
(common-lisp:deftype subject () 'common-lisp:string)
(common-lisp:deftype subject-part () 'common-lisp:string)
(common-lisp:deftype success-redirection-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass template common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":template-name is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor struct-shape-template-template-name :shape
                         "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subject-part :initarg :subject-part :initform
                         common-lisp:nil :type
                         (common-lisp:or subject-part common-lisp:null)
                         :accessor struct-shape-template-subject-part :shape
                         "SubjectPart" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (text-part :initarg :text-part :initform
                         common-lisp:nil :type
                         (common-lisp:or text-part common-lisp:null) :accessor
                         struct-shape-template-text-part :shape "TextPart"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (html-part :initarg :html-part :initform
                         common-lisp:nil :type
                         (common-lisp:or html-part common-lisp:null) :accessor
                         struct-shape-template-html-part :shape "HtmlPart"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-template
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'template
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'template 'make-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-part))
      (common-lisp:list
       (common-lisp:cons "SubjectPart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-part))
      (common-lisp:list
       (common-lisp:cons "TextPart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'html-part))
      (common-lisp:list
       (common-lisp:cons "HtmlPart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template))
   common-lisp:nil))
(common-lisp:deftype template-content () 'common-lisp:string)
(common-lisp:deftype template-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition template-does-not-exist-exception
     (email-error)
     ((template-name :initarg :template-name :initform common-lisp:nil :reader
       template-does-not-exist-exception-template-name)))
 (common-lisp:export
  (common-lisp:list 'template-does-not-exist-exception
                    'template-does-not-exist-exception-template-name)))
(common-lisp:progn
 (common-lisp:defclass template-metadata common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor struct-shape-template-metadata-name :shape
                         "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-template-metadata-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-template-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'template-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'template-metadata 'make-template-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-metadata-list ()
   '(trivial-types:proper-list template-metadata))
 (common-lisp:defun make-template-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype template-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass test-render-template-request common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":template-name is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-test-render-template-request-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-data :initarg :template-data :initform
                         (common-lisp:error ":template-data is required") :type
                         (common-lisp:or template-data common-lisp:null)
                         :accessor
                         struct-shape-test-render-template-request-template-data
                         :shape "TemplateData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-render-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-render-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-render-template-request
                    'make-test-render-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-render-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-render-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-data))
      (common-lisp:list
       (common-lisp:cons "TemplateData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-render-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-render-template-response common-lisp:nil
                       ((rendered-template :initarg :rendered-template
                         :initform common-lisp:nil :type
                         (common-lisp:or rendered-template common-lisp:null)
                         :accessor
                         struct-shape-test-render-template-response-rendered-template
                         :shape "RenderedTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-render-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-render-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-render-template-response
                    'make-test-render-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-render-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-render-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rendered-template))
      (common-lisp:list
       (common-lisp:cons "RenderedTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-render-template-response))
   common-lisp:nil))
(common-lisp:deftype text-part () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype tls-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tracking-options common-lisp:nil
                       ((custom-redirect-domain :initarg
                         :custom-redirect-domain :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-redirect-domain
                                         common-lisp:null)
                         :accessor
                         struct-shape-tracking-options-custom-redirect-domain
                         :shape "CustomRedirectDomain" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tracking-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tracking-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tracking-options 'make-tracking-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tracking-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tracking-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-redirect-domain))
      (common-lisp:list
       (common-lisp:cons "CustomRedirectDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tracking-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition tracking-options-already-exists-exception
     (email-error)
     ((configuration-set-name :initarg :configuration-set-name :initform
       common-lisp:nil :reader
       tracking-options-already-exists-exception-configuration-set-name)))
 (common-lisp:export
  (common-lisp:list 'tracking-options-already-exists-exception
                    'tracking-options-already-exists-exception-configuration-set-name)))
(common-lisp:progn
 (common-lisp:define-condition tracking-options-does-not-exist-exception
     (email-error)
     ((configuration-set-name :initarg :configuration-set-name :initform
       common-lisp:nil :reader
       tracking-options-does-not-exist-exception-configuration-set-name)))
 (common-lisp:export
  (common-lisp:list 'tracking-options-does-not-exist-exception
                    'tracking-options-does-not-exist-exception-configuration-set-name)))
(common-lisp:progn
 (common-lisp:defclass update-account-sending-enabled-request common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or enabled common-lisp:null)
                         :accessor
                         struct-shape-update-account-sending-enabled-request-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-account-sending-enabled-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-account-sending-enabled-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-account-sending-enabled-request
                    'make-update-account-sending-enabled-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-sending-enabled-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-sending-enabled-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-sending-enabled-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configuration-set-event-destination-request
                       common-lisp:nil
                       ((configuration-set-name :initarg
                         :configuration-set-name :initform
                         (common-lisp:error
                          ":configuration-set-name is required")
                         :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-configuration-set-event-destination-request-configuration-set-name
                         :shape "ConfigurationSetName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (event-destination :initarg :event-destination
                         :initform
                         (common-lisp:error ":event-destination is required")
                         :type
                         (common-lisp:or event-destination common-lisp:null)
                         :accessor
                         struct-shape-update-configuration-set-event-destination-request-event-destination
                         :shape "EventDestination" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-configuration-set-event-destination-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configuration-set-event-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-configuration-set-event-destination-request
                    'make-update-configuration-set-event-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-event-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-event-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-destination))
      (common-lisp:list
       (common-lisp:cons "EventDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-event-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configuration-set-event-destination-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-configuration-set-event-destination-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configuration-set-event-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-configuration-set-event-destination-response
                    'make-update-configuration-set-event-destination-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-event-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-event-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-event-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  update-configuration-set-reputation-metrics-enabled-request common-lisp:nil
  ((configuration-set-name :initarg :configuration-set-name :initform
    (common-lisp:error ":configuration-set-name is required") :type
    (common-lisp:or configuration-set-name common-lisp:null) :accessor
    struct-shape-update-configuration-set-reputation-metrics-enabled-request-configuration-set-name
    :shape "ConfigurationSetName" :location common-lisp:nil :location-name
    common-lisp:nil)
   (enabled :initarg :enabled :initform
    (common-lisp:error ":enabled is required") :type
    (common-lisp:or enabled common-lisp:null) :accessor
    struct-shape-update-configuration-set-reputation-metrics-enabled-request-enabled
    :shape "Enabled" :location common-lisp:nil :location-name common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-configuration-set-reputation-metrics-enabled-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configuration-set-reputation-metrics-enabled-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'update-configuration-set-reputation-metrics-enabled-request
   'make-update-configuration-set-reputation-metrics-enabled-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-reputation-metrics-enabled-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-reputation-metrics-enabled-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-reputation-metrics-enabled-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configuration-set-sending-enabled-request
                       common-lisp:nil
                       ((configuration-set-name :initarg
                         :configuration-set-name :initform
                         (common-lisp:error
                          ":configuration-set-name is required")
                         :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-configuration-set-sending-enabled-request-configuration-set-name
                         :shape "ConfigurationSetName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or enabled common-lisp:null) :accessor
                         struct-shape-update-configuration-set-sending-enabled-request-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-configuration-set-sending-enabled-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configuration-set-sending-enabled-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-configuration-set-sending-enabled-request
                    'make-update-configuration-set-sending-enabled-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-sending-enabled-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-sending-enabled-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-sending-enabled-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configuration-set-tracking-options-request
                       common-lisp:nil
                       ((configuration-set-name :initarg
                         :configuration-set-name :initform
                         (common-lisp:error
                          ":configuration-set-name is required")
                         :type
                         (common-lisp:or configuration-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-configuration-set-tracking-options-request-configuration-set-name
                         :shape "ConfigurationSetName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tracking-options :initarg :tracking-options :initform
                         (common-lisp:error ":tracking-options is required")
                         :type
                         (common-lisp:or tracking-options common-lisp:null)
                         :accessor
                         struct-shape-update-configuration-set-tracking-options-request-tracking-options
                         :shape "TrackingOptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-configuration-set-tracking-options-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configuration-set-tracking-options-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-configuration-set-tracking-options-request
                    'make-update-configuration-set-tracking-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-tracking-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-tracking-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-set-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracking-options))
      (common-lisp:list
       (common-lisp:cons "TrackingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-tracking-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configuration-set-tracking-options-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-configuration-set-tracking-options-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configuration-set-tracking-options-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-configuration-set-tracking-options-response
                    'make-update-configuration-set-tracking-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-tracking-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-tracking-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configuration-set-tracking-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-custom-verification-email-template-request
                       common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":template-name is required") :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         struct-shape-update-custom-verification-email-template-request-template-name
                         :shape "TemplateName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-email-address :initarg :from-email-address
                         :initform common-lisp:nil :type
                         (common-lisp:or from-address common-lisp:null)
                         :accessor
                         struct-shape-update-custom-verification-email-template-request-from-email-address
                         :shape "FromAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-subject :initarg :template-subject :initform
                         common-lisp:nil :type
                         (common-lisp:or subject common-lisp:null) :accessor
                         struct-shape-update-custom-verification-email-template-request-template-subject
                         :shape "Subject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-content :initarg :template-content :initform
                         common-lisp:nil :type
                         (common-lisp:or template-content common-lisp:null)
                         :accessor
                         struct-shape-update-custom-verification-email-template-request-template-content
                         :shape "TemplateContent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (success-redirection-url :initarg
                         :success-redirection-url :initform common-lisp:nil
                         :type
                         (common-lisp:or success-redirection-url
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-custom-verification-email-template-request-success-redirection-url
                         :shape "SuccessRedirectionURL" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-redirection-url :initarg
                         :failure-redirection-url :initform common-lisp:nil
                         :type
                         (common-lisp:or failure-redirection-url
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-custom-verification-email-template-request-failure-redirection-url
                         :shape "FailureRedirectionURL" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-custom-verification-email-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-custom-verification-email-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-custom-verification-email-template-request
                    'make-update-custom-verification-email-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-verification-email-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-verification-email-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-email-address))
      (common-lisp:list
       (common-lisp:cons "FromEmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-subject))
      (common-lisp:list
       (common-lisp:cons "TemplateSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-content))
      (common-lisp:list
       (common-lisp:cons "TemplateContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'success-redirection-url))
      (common-lisp:list
       (common-lisp:cons "SuccessRedirectionURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failure-redirection-url))
      (common-lisp:list
       (common-lisp:cons "FailureRedirectionURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-verification-email-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-receipt-rule-request common-lisp:nil
                       ((rule-set-name :initarg :rule-set-name :initform
                         (common-lisp:error ":rule-set-name is required") :type
                         (common-lisp:or receipt-rule-set-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-receipt-rule-request-rule-set-name
                         :shape "ReceiptRuleSetName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule :initarg :rule :initform
                         (common-lisp:error ":rule is required") :type
                         (common-lisp:or receipt-rule common-lisp:null)
                         :accessor
                         struct-shape-update-receipt-rule-request-rule :shape
                         "ReceiptRule" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-receipt-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-receipt-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-receipt-rule-request
                    'make-update-receipt-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-receipt-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-receipt-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-name))
      (common-lisp:list
       (common-lisp:cons "RuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-receipt-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-receipt-rule-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-receipt-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-receipt-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-receipt-rule-response
                    'make-update-receipt-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-receipt-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-receipt-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-receipt-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-template-request common-lisp:nil
                       ((template :initarg :template :initform
                         (common-lisp:error ":template is required") :type
                         (common-lisp:or template common-lisp:null) :accessor
                         struct-shape-update-template-request-template :shape
                         "Template" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-template-request 'make-update-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "Template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-template-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-template-response 'make-update-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype verification-attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-verification-attributes
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype verification-status () 'common-lisp:string)
(common-lisp:deftype verification-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype verification-token-list ()
   '(trivial-types:proper-list verification-token))
 (common-lisp:defun make-verification-token-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list verification-token))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass verify-domain-dkim-request common-lisp:nil
                       ((domain :initarg :domain :initform
                         (common-lisp:error ":domain is required") :type
                         (common-lisp:or domain common-lisp:null) :accessor
                         struct-shape-verify-domain-dkim-request-domain :shape
                         "Domain" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-verify-domain-dkim-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'verify-domain-dkim-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'verify-domain-dkim-request
                    'make-verify-domain-dkim-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-domain-dkim-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-domain-dkim-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-domain-dkim-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass verify-domain-dkim-response common-lisp:nil
                       ((dkim-tokens :initarg :dkim-tokens :initform
                         (common-lisp:error ":dkim-tokens is required") :type
                         (common-lisp:or verification-token-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-verify-domain-dkim-response-dkim-tokens
                         :shape "VerificationTokenList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-verify-domain-dkim-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'verify-domain-dkim-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'verify-domain-dkim-response
                    'make-verify-domain-dkim-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-domain-dkim-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-domain-dkim-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dkim-tokens))
      (common-lisp:list
       (common-lisp:cons "DkimTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-domain-dkim-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass verify-domain-identity-request common-lisp:nil
                       ((domain :initarg :domain :initform
                         (common-lisp:error ":domain is required") :type
                         (common-lisp:or domain common-lisp:null) :accessor
                         struct-shape-verify-domain-identity-request-domain
                         :shape "Domain" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-verify-domain-identity-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'verify-domain-identity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'verify-domain-identity-request
                    'make-verify-domain-identity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-domain-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-domain-identity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-domain-identity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass verify-domain-identity-response common-lisp:nil
                       ((verification-token :initarg :verification-token
                         :initform
                         (common-lisp:error ":verification-token is required")
                         :type
                         (common-lisp:or verification-token common-lisp:null)
                         :accessor
                         struct-shape-verify-domain-identity-response-verification-token
                         :shape "VerificationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-verify-domain-identity-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'verify-domain-identity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'verify-domain-identity-response
                    'make-verify-domain-identity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-domain-identity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-domain-identity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-token))
      (common-lisp:list
       (common-lisp:cons "VerificationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-domain-identity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass verify-email-address-request common-lisp:nil
                       ((email-address :initarg :email-address :initform
                         (common-lisp:error ":email-address is required") :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-verify-email-address-request-email-address
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-verify-email-address-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'verify-email-address-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'verify-email-address-request
                    'make-verify-email-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-email-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-email-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-email-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass verify-email-identity-request common-lisp:nil
                       ((email-address :initarg :email-address :initform
                         (common-lisp:error ":email-address is required") :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-verify-email-identity-request-email-address
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-verify-email-identity-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'verify-email-identity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'verify-email-identity-request
                    'make-verify-email-identity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-email-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-email-identity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-email-identity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass verify-email-identity-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-verify-email-identity-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'verify-email-identity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'verify-email-identity-response
                    'make-verify-email-identity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-email-identity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-email-identity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-email-identity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass workmail-action common-lisp:nil
                       ((topic-arn :initarg :topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor struct-shape-workmail-action-topic-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (organization-arn :initarg :organization-arn :initform
                         (common-lisp:error ":organization-arn is required")
                         :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-workmail-action-organization-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workmail-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workmail-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'workmail-action 'make-workmail-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workmail-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workmail-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-arn))
      (common-lisp:list
       (common-lisp:cons "OrganizationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workmail-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun clone-receipt-rule-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-set-name original-rule-set-name)
   (common-lisp:declare
    (common-lisp:ignorable rule-set-name original-rule-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-clone-receipt-rule-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CloneReceiptRuleSet"))
      common-lisp:nil "CloneReceiptRuleSetResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'clone-receipt-rule-set))
(common-lisp:progn
 (common-lisp:defun create-configuration-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set)
   (common-lisp:declare (common-lisp:ignorable configuration-set))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-configuration-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateConfigurationSet"))
      common-lisp:nil "CreateConfigurationSetResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-configuration-set))
(common-lisp:progn
 (common-lisp:defun create-configuration-set-event-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name event-destination)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name event-destination))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-configuration-set-event-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateConfigurationSetEventDestination"))
      common-lisp:nil "CreateConfigurationSetEventDestinationResult"
      *error-map* common-lisp:nil)))
 (common-lisp:export 'create-configuration-set-event-destination))
(common-lisp:progn
 (common-lisp:defun create-configuration-set-tracking-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name tracking-options)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name tracking-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-configuration-set-tracking-options-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateConfigurationSetTrackingOptions"))
      common-lisp:nil "CreateConfigurationSetTrackingOptionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-configuration-set-tracking-options))
(common-lisp:progn
 (common-lisp:defun create-custom-verification-email-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name from-email-address
                     template-subject template-content success-redirection-url
                     failure-redirection-url)
   (common-lisp:declare
    (common-lisp:ignorable template-name from-email-address template-subject
     template-content success-redirection-url failure-redirection-url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-custom-verification-email-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCustomVerificationEmailTemplate"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'create-custom-verification-email-template))
(common-lisp:progn
 (common-lisp:defun create-receipt-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter)
   (common-lisp:declare (common-lisp:ignorable filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-receipt-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateReceiptFilter"))
      common-lisp:nil "CreateReceiptFilterResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-receipt-filter))
(common-lisp:progn
 (common-lisp:defun create-receipt-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-set-name after rule)
   (common-lisp:declare (common-lisp:ignorable rule-set-name after rule))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-receipt-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateReceiptRule"))
      common-lisp:nil "CreateReceiptRuleResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-receipt-rule))
(common-lisp:progn
 (common-lisp:defun create-receipt-rule-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-set-name)
   (common-lisp:declare (common-lisp:ignorable rule-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-receipt-rule-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateReceiptRuleSet"))
      common-lisp:nil "CreateReceiptRuleSetResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-receipt-rule-set))
(common-lisp:progn
 (common-lisp:defun create-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template)
   (common-lisp:declare (common-lisp:ignorable template))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTemplate"))
      common-lisp:nil "CreateTemplateResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-template))
(common-lisp:progn
 (common-lisp:defun delete-configuration-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name)
   (common-lisp:declare (common-lisp:ignorable configuration-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-configuration-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteConfigurationSet"))
      common-lisp:nil "DeleteConfigurationSetResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-configuration-set))
(common-lisp:progn
 (common-lisp:defun delete-configuration-set-event-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name
                     event-destination-name)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name event-destination-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-configuration-set-event-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteConfigurationSetEventDestination"))
      common-lisp:nil "DeleteConfigurationSetEventDestinationResult"
      *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-configuration-set-event-destination))
(common-lisp:progn
 (common-lisp:defun delete-configuration-set-tracking-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name)
   (common-lisp:declare (common-lisp:ignorable configuration-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-configuration-set-tracking-options-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteConfigurationSetTrackingOptions"))
      common-lisp:nil "DeleteConfigurationSetTrackingOptionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-configuration-set-tracking-options))
(common-lisp:progn
 (common-lisp:defun delete-custom-verification-email-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name)
   (common-lisp:declare (common-lisp:ignorable template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-custom-verification-email-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCustomVerificationEmailTemplate"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-custom-verification-email-template))
(common-lisp:progn
 (common-lisp:defun delete-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity)
   (common-lisp:declare (common-lisp:ignorable identity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-identity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteIdentity"))
      common-lisp:nil "DeleteIdentityResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-identity))
(common-lisp:progn
 (common-lisp:defun delete-identity-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity policy-name)
   (common-lisp:declare (common-lisp:ignorable identity policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-identity-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteIdentityPolicy"))
      common-lisp:nil "DeleteIdentityPolicyResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-identity-policy))
(common-lisp:progn
 (common-lisp:defun delete-receipt-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-name)
   (common-lisp:declare (common-lisp:ignorable filter-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-receipt-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteReceiptFilter"))
      common-lisp:nil "DeleteReceiptFilterResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-receipt-filter))
(common-lisp:progn
 (common-lisp:defun delete-receipt-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-set-name rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-set-name rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-receipt-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteReceiptRule"))
      common-lisp:nil "DeleteReceiptRuleResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-receipt-rule))
(common-lisp:progn
 (common-lisp:defun delete-receipt-rule-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-set-name)
   (common-lisp:declare (common-lisp:ignorable rule-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-receipt-rule-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteReceiptRuleSet"))
      common-lisp:nil "DeleteReceiptRuleSetResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-receipt-rule-set))
(common-lisp:progn
 (common-lisp:defun delete-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name)
   (common-lisp:declare (common-lisp:ignorable template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTemplate"))
      common-lisp:nil "DeleteTemplateResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-template))
(common-lisp:progn
 (common-lisp:defun delete-verified-email-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key email-address)
   (common-lisp:declare (common-lisp:ignorable email-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-verified-email-address-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVerifiedEmailAddress"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-verified-email-address))
(common-lisp:progn
 (common-lisp:defun describe-active-receipt-rule-set ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'email-request :method "POST" :path "/"
                                :operation "DescribeActiveReceiptRuleSet"))
    common-lisp:nil "DescribeActiveReceiptRuleSetResult" *error-map*))
 (common-lisp:export 'describe-active-receipt-rule-set))
(common-lisp:progn
 (common-lisp:defun describe-configuration-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name
                     configuration-set-attribute-names)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name
     configuration-set-attribute-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-configuration-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConfigurationSet"))
      common-lisp:nil "DescribeConfigurationSetResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-configuration-set))
(common-lisp:progn
 (common-lisp:defun describe-receipt-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-set-name rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-set-name rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-receipt-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReceiptRule"))
      common-lisp:nil "DescribeReceiptRuleResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-receipt-rule))
(common-lisp:progn
 (common-lisp:defun describe-receipt-rule-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-set-name)
   (common-lisp:declare (common-lisp:ignorable rule-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-receipt-rule-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReceiptRuleSet"))
      common-lisp:nil "DescribeReceiptRuleSetResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-receipt-rule-set))
(common-lisp:progn
 (common-lisp:defun get-account-sending-enabled ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'email-request :method "POST" :path "/"
                                :operation "GetAccountSendingEnabled"))
    common-lisp:nil "GetAccountSendingEnabledResult" *error-map*))
 (common-lisp:export 'get-account-sending-enabled))
(common-lisp:progn
 (common-lisp:defun get-custom-verification-email-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name)
   (common-lisp:declare (common-lisp:ignorable template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-custom-verification-email-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCustomVerificationEmailTemplate"))
      common-lisp:nil "GetCustomVerificationEmailTemplateResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-custom-verification-email-template))
(common-lisp:progn
 (common-lisp:defun get-identity-dkim-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identities)
   (common-lisp:declare (common-lisp:ignorable identities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-identity-dkim-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetIdentityDkimAttributes"))
      common-lisp:nil "GetIdentityDkimAttributesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-identity-dkim-attributes))
(common-lisp:progn
 (common-lisp:defun get-identity-mail-from-domain-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identities)
   (common-lisp:declare (common-lisp:ignorable identities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-identity-mail-from-domain-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetIdentityMailFromDomainAttributes"))
      common-lisp:nil "GetIdentityMailFromDomainAttributesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-identity-mail-from-domain-attributes))
(common-lisp:progn
 (common-lisp:defun get-identity-notification-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identities)
   (common-lisp:declare (common-lisp:ignorable identities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-identity-notification-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetIdentityNotificationAttributes"))
      common-lisp:nil "GetIdentityNotificationAttributesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-identity-notification-attributes))
(common-lisp:progn
 (common-lisp:defun get-identity-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity policy-names)
   (common-lisp:declare (common-lisp:ignorable identity policy-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-identity-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetIdentityPolicies"))
      common-lisp:nil "GetIdentityPoliciesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-identity-policies))
(common-lisp:progn
 (common-lisp:defun get-identity-verification-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identities)
   (common-lisp:declare (common-lisp:ignorable identities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-identity-verification-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetIdentityVerificationAttributes"))
      common-lisp:nil "GetIdentityVerificationAttributesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-identity-verification-attributes))
(common-lisp:progn
 (common-lisp:defun get-send-quota ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'email-request :method "POST" :path "/"
                                :operation "GetSendQuota"))
    common-lisp:nil "GetSendQuotaResult" *error-map*))
 (common-lisp:export 'get-send-quota))
(common-lisp:progn
 (common-lisp:defun get-send-statistics ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'email-request :method "POST" :path "/"
                                :operation "GetSendStatistics"))
    common-lisp:nil "GetSendStatisticsResult" *error-map*))
 (common-lisp:export 'get-send-statistics))
(common-lisp:progn
 (common-lisp:defun get-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name)
   (common-lisp:declare (common-lisp:ignorable template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTemplate"))
      common-lisp:nil "GetTemplateResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'get-template))
(common-lisp:progn
 (common-lisp:defun list-configuration-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-items)
   (common-lisp:declare (common-lisp:ignorable next-token max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-configuration-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListConfigurationSets"))
      common-lisp:nil "ListConfigurationSetsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-configuration-sets))
(common-lisp:progn
 (common-lisp:defun list-custom-verification-email-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-custom-verification-email-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCustomVerificationEmailTemplates"))
      common-lisp:nil "ListCustomVerificationEmailTemplatesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-custom-verification-email-templates))
(common-lisp:progn
 (common-lisp:defun list-identities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-type next-token max-items)
   (common-lisp:declare
    (common-lisp:ignorable identity-type next-token max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-identities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListIdentities"))
      common-lisp:nil "ListIdentitiesResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-identities))
(common-lisp:progn
 (common-lisp:defun list-identity-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity)
   (common-lisp:declare (common-lisp:ignorable identity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-identity-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListIdentityPolicies"))
      common-lisp:nil "ListIdentityPoliciesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-identity-policies))
(common-lisp:progn
 (common-lisp:defun list-receipt-filters ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'email-request :method "POST" :path "/"
                                :operation "ListReceiptFilters"))
    common-lisp:nil "ListReceiptFiltersResult" *error-map*))
 (common-lisp:export 'list-receipt-filters))
(common-lisp:progn
 (common-lisp:defun list-receipt-rule-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-receipt-rule-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListReceiptRuleSets"))
      common-lisp:nil "ListReceiptRuleSetsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-receipt-rule-sets))
(common-lisp:progn
 (common-lisp:defun list-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-items)
   (common-lisp:declare (common-lisp:ignorable next-token max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-templates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTemplates"))
      common-lisp:nil "ListTemplatesResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-templates))
(common-lisp:progn
 (common-lisp:defun list-verified-email-addresses ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'email-request :method "POST" :path "/"
                                :operation "ListVerifiedEmailAddresses"))
    common-lisp:nil "ListVerifiedEmailAddressesResult" *error-map*))
 (common-lisp:export 'list-verified-email-addresses))
(common-lisp:progn
 (common-lisp:defun put-configuration-set-delivery-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name delivery-options)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name delivery-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-configuration-set-delivery-options-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutConfigurationSetDeliveryOptions"))
      common-lisp:nil "PutConfigurationSetDeliveryOptionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'put-configuration-set-delivery-options))
(common-lisp:progn
 (common-lisp:defun put-identity-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity policy-name policy)
   (common-lisp:declare (common-lisp:ignorable identity policy-name policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-identity-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutIdentityPolicy"))
      common-lisp:nil "PutIdentityPolicyResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'put-identity-policy))
(common-lisp:progn
 (common-lisp:defun reorder-receipt-rule-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-set-name rule-names)
   (common-lisp:declare (common-lisp:ignorable rule-set-name rule-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reorder-receipt-rule-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ReorderReceiptRuleSet"))
      common-lisp:nil "ReorderReceiptRuleSetResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'reorder-receipt-rule-set))
(common-lisp:progn
 (common-lisp:defun send-bounce
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key original-message-id bounce-sender
                     explanation message-dsn bounced-recipient-info-list
                     bounce-sender-arn)
   (common-lisp:declare
    (common-lisp:ignorable original-message-id bounce-sender explanation
     message-dsn bounced-recipient-info-list bounce-sender-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-bounce-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendBounce"))
      common-lisp:nil "SendBounceResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'send-bounce))
(common-lisp:progn
 (common-lisp:defun send-bulk-templated-email
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source source-arn reply-to-addresses
                     return-path return-path-arn configuration-set-name
                     default-tags template template-arn default-template-data
                     destinations)
   (common-lisp:declare
    (common-lisp:ignorable source source-arn reply-to-addresses return-path
     return-path-arn configuration-set-name default-tags template template-arn
     default-template-data destinations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-send-bulk-templated-email-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendBulkTemplatedEmail"))
      common-lisp:nil "SendBulkTemplatedEmailResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'send-bulk-templated-email))
(common-lisp:progn
 (common-lisp:defun send-custom-verification-email
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key email-address template-name
                     configuration-set-name)
   (common-lisp:declare
    (common-lisp:ignorable email-address template-name configuration-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-send-custom-verification-email-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendCustomVerificationEmail"))
      common-lisp:nil "SendCustomVerificationEmailResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'send-custom-verification-email))
(common-lisp:progn
 (common-lisp:defun send-email
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source destination message
                     reply-to-addresses return-path source-arn return-path-arn
                     tags configuration-set-name)
   (common-lisp:declare
    (common-lisp:ignorable source destination message reply-to-addresses
     return-path source-arn return-path-arn tags configuration-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-email-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendEmail"))
      common-lisp:nil "SendEmailResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'send-email))
(common-lisp:progn
 (common-lisp:defun send-raw-email
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source destinations raw-message from-arn
                     source-arn return-path-arn tags configuration-set-name)
   (common-lisp:declare
    (common-lisp:ignorable source destinations raw-message from-arn source-arn
     return-path-arn tags configuration-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-raw-email-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendRawEmail"))
      common-lisp:nil "SendRawEmailResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'send-raw-email))
(common-lisp:progn
 (common-lisp:defun send-templated-email
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source destination reply-to-addresses
                     return-path source-arn return-path-arn tags
                     configuration-set-name template template-arn
                     template-data)
   (common-lisp:declare
    (common-lisp:ignorable source destination reply-to-addresses return-path
     source-arn return-path-arn tags configuration-set-name template
     template-arn template-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-templated-email-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendTemplatedEmail"))
      common-lisp:nil "SendTemplatedEmailResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'send-templated-email))
(common-lisp:progn
 (common-lisp:defun set-active-receipt-rule-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-set-name)
   (common-lisp:declare (common-lisp:ignorable rule-set-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-active-receipt-rule-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetActiveReceiptRuleSet"))
      common-lisp:nil "SetActiveReceiptRuleSetResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'set-active-receipt-rule-set))
(common-lisp:progn
 (common-lisp:defun set-identity-dkim-enabled
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity dkim-enabled)
   (common-lisp:declare (common-lisp:ignorable identity dkim-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-identity-dkim-enabled-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetIdentityDkimEnabled"))
      common-lisp:nil "SetIdentityDkimEnabledResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'set-identity-dkim-enabled))
(common-lisp:progn
 (common-lisp:defun set-identity-feedback-forwarding-enabled
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity forwarding-enabled)
   (common-lisp:declare (common-lisp:ignorable identity forwarding-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-identity-feedback-forwarding-enabled-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetIdentityFeedbackForwardingEnabled"))
      common-lisp:nil "SetIdentityFeedbackForwardingEnabledResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'set-identity-feedback-forwarding-enabled))
(common-lisp:progn
 (common-lisp:defun set-identity-headers-in-notifications-enabled
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity notification-type enabled)
   (common-lisp:declare
    (common-lisp:ignorable identity notification-type enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-identity-headers-in-notifications-enabled-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetIdentityHeadersInNotificationsEnabled"))
      common-lisp:nil "SetIdentityHeadersInNotificationsEnabledResult"
      *error-map* common-lisp:nil)))
 (common-lisp:export 'set-identity-headers-in-notifications-enabled))
(common-lisp:progn
 (common-lisp:defun set-identity-mail-from-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity mail-from-domain
                     behavior-on-mxfailure)
   (common-lisp:declare
    (common-lisp:ignorable identity mail-from-domain behavior-on-mxfailure))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-identity-mail-from-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetIdentityMailFromDomain"))
      common-lisp:nil "SetIdentityMailFromDomainResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'set-identity-mail-from-domain))
(common-lisp:progn
 (common-lisp:defun set-identity-notification-topic
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity notification-type sns-topic)
   (common-lisp:declare
    (common-lisp:ignorable identity notification-type sns-topic))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-identity-notification-topic-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetIdentityNotificationTopic"))
      common-lisp:nil "SetIdentityNotificationTopicResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'set-identity-notification-topic))
(common-lisp:progn
 (common-lisp:defun set-receipt-rule-position
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-set-name rule-name after)
   (common-lisp:declare (common-lisp:ignorable rule-set-name rule-name after))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-receipt-rule-position-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetReceiptRulePosition"))
      common-lisp:nil "SetReceiptRulePositionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'set-receipt-rule-position))
(common-lisp:progn
 (common-lisp:defun test-render-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name template-data)
   (common-lisp:declare (common-lisp:ignorable template-name template-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-render-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TestRenderTemplate"))
      common-lisp:nil "TestRenderTemplateResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'test-render-template))
(common-lisp:progn
 (common-lisp:defun update-account-sending-enabled
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key enabled)
   (common-lisp:declare (common-lisp:ignorable enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-account-sending-enabled-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAccountSendingEnabled"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'update-account-sending-enabled))
(common-lisp:progn
 (common-lisp:defun update-configuration-set-event-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name event-destination)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name event-destination))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-configuration-set-event-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateConfigurationSetEventDestination"))
      common-lisp:nil "UpdateConfigurationSetEventDestinationResult"
      *error-map* common-lisp:nil)))
 (common-lisp:export 'update-configuration-set-event-destination))
(common-lisp:progn
 (common-lisp:defun update-configuration-set-reputation-metrics-enabled
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name enabled)
   (common-lisp:declare (common-lisp:ignorable configuration-set-name enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-configuration-set-reputation-metrics-enabled-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateConfigurationSetReputationMetricsEnabled"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'update-configuration-set-reputation-metrics-enabled))
(common-lisp:progn
 (common-lisp:defun update-configuration-set-sending-enabled
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name enabled)
   (common-lisp:declare (common-lisp:ignorable configuration-set-name enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-configuration-set-sending-enabled-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateConfigurationSetSendingEnabled"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'update-configuration-set-sending-enabled))
(common-lisp:progn
 (common-lisp:defun update-configuration-set-tracking-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-set-name tracking-options)
   (common-lisp:declare
    (common-lisp:ignorable configuration-set-name tracking-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-configuration-set-tracking-options-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateConfigurationSetTrackingOptions"))
      common-lisp:nil "UpdateConfigurationSetTrackingOptionsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'update-configuration-set-tracking-options))
(common-lisp:progn
 (common-lisp:defun update-custom-verification-email-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name from-email-address
                     template-subject template-content success-redirection-url
                     failure-redirection-url)
   (common-lisp:declare
    (common-lisp:ignorable template-name from-email-address template-subject
     template-content success-redirection-url failure-redirection-url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-custom-verification-email-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCustomVerificationEmailTemplate"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'update-custom-verification-email-template))
(common-lisp:progn
 (common-lisp:defun update-receipt-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-set-name rule)
   (common-lisp:declare (common-lisp:ignorable rule-set-name rule))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-receipt-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateReceiptRule"))
      common-lisp:nil "UpdateReceiptRuleResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'update-receipt-rule))
(common-lisp:progn
 (common-lisp:defun update-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template)
   (common-lisp:declare (common-lisp:ignorable template))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTemplate"))
      common-lisp:nil "UpdateTemplateResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'update-template))
(common-lisp:progn
 (common-lisp:defun verify-domain-dkim
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain)
   (common-lisp:declare (common-lisp:ignorable domain))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-verify-domain-dkim-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "VerifyDomainDkim"))
      common-lisp:nil "VerifyDomainDkimResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'verify-domain-dkim))
(common-lisp:progn
 (common-lisp:defun verify-domain-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain)
   (common-lisp:declare (common-lisp:ignorable domain))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-verify-domain-identity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "VerifyDomainIdentity"))
      common-lisp:nil "VerifyDomainIdentityResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'verify-domain-identity))
(common-lisp:progn
 (common-lisp:defun verify-email-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key email-address)
   (common-lisp:declare (common-lisp:ignorable email-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-verify-email-address-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "VerifyEmailAddress"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'verify-email-address))
(common-lisp:progn
 (common-lisp:defun verify-email-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key email-address)
   (common-lisp:declare (common-lisp:ignorable email-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-verify-email-identity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'email-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "VerifyEmailIdentity"))
      common-lisp:nil "VerifyEmailIdentityResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'verify-email-identity))
