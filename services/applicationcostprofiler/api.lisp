;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/applicationcostprofiler/api
                             (:use) (:nicknames #:aws/applicationcostprofiler)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/applicationcostprofiler/api)
(common-lisp:progn
 (common-lisp:define-condition applicationcostprofiler-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'applicationcostprofiler-error))
(common-lisp:progn
 (common-lisp:defclass applicationcostprofiler-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "applicationcostprofiler"
                        :api-version "2020-09-10" :host-prefix
                        "application-cost-profiler" :signing-name
                        "application-cost-profiler" :global-host
                        common-lisp:nil))
 (common-lisp:export 'applicationcostprofiler-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServerException" . internal-server-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (applicationcostprofiler-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass delete-report-definition-request common-lisp:nil
                       ((report-id :initarg :report-id :initform
                         (common-lisp:error ":reportid is required") :type
                         (common-lisp:or report-id common-lisp:null) :accessor
                         struct-shape-delete-report-definition-request-report-id
                         :shape "ReportId" :location "uri" :location-name
                         "reportId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-report-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-report-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-report-definition-request
                    'make-delete-report-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-report-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-report-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-report-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-report-definition-result common-lisp:nil
                       ((report-id :initarg :report-id :initform
                         common-lisp:nil :type
                         (common-lisp:or report-id common-lisp:null) :accessor
                         struct-shape-delete-report-definition-result-report-id
                         :shape "ReportId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-report-definition-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-report-definition-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-report-definition-result
                    'make-delete-report-definition-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-report-definition-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-report-definition-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-id))
      (common-lisp:list
       (common-lisp:cons "reportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-report-definition-result))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-report-definition-request common-lisp:nil
                       ((report-id :initarg :report-id :initform
                         (common-lisp:error ":reportid is required") :type
                         (common-lisp:or report-id common-lisp:null) :accessor
                         struct-shape-get-report-definition-request-report-id
                         :shape "ReportId" :location "uri" :location-name
                         "reportId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-report-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-report-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-report-definition-request
                    'make-get-report-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-report-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-report-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-report-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-report-definition-result common-lisp:nil
                       ((report-id :initarg :report-id :initform
                         (common-lisp:error ":reportid is required") :type
                         (common-lisp:or report-id common-lisp:null) :accessor
                         struct-shape-get-report-definition-result-report-id
                         :shape "ReportId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (report-description :initarg :report-description
                         :initform
                         (common-lisp:error ":reportdescription is required")
                         :type
                         (common-lisp:or report-description common-lisp:null)
                         :accessor
                         struct-shape-get-report-definition-result-report-description
                         :shape "ReportDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (report-frequency :initarg :report-frequency :initform
                         (common-lisp:error ":reportfrequency is required")
                         :type
                         (common-lisp:or report-frequency common-lisp:null)
                         :accessor
                         struct-shape-get-report-definition-result-report-frequency
                         :shape "ReportFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or format common-lisp:null) :accessor
                         struct-shape-get-report-definition-result-format
                         :shape "Format" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-s3location :initarg
                         :destination-s3location :initform
                         (common-lisp:error
                          ":destinations3location is required")
                         :type (common-lisp:or s3location common-lisp:null)
                         :accessor
                         struct-shape-get-report-definition-result-destination-s3location
                         :shape "S3Location" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-report-definition-result-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         (common-lisp:error ":lastupdated is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-report-definition-result-last-updated
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-report-definition-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-report-definition-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-report-definition-result
                    'make-get-report-definition-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-report-definition-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-report-definition-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-id))
      (common-lisp:list
       (common-lisp:cons "reportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-description))
      (common-lisp:list
       (common-lisp:cons "reportDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-frequency))
      (common-lisp:list
       (common-lisp:cons "reportFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-s3location))
      (common-lisp:list
       (common-lisp:cons "destinationS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-report-definition-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-application-usage-request common-lisp:nil
                       ((source-s3location :initarg :source-s3location
                         :initform
                         (common-lisp:error ":sources3location is required")
                         :type
                         (common-lisp:or source-s3location common-lisp:null)
                         :accessor
                         struct-shape-import-application-usage-request-source-s3location
                         :shape "SourceS3Location" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-application-usage-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-application-usage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-application-usage-request
                    'make-import-application-usage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-application-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-application-usage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-s3location))
      (common-lisp:list
       (common-lisp:cons "sourceS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-application-usage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-application-usage-result common-lisp:nil
                       ((import-id :initarg :import-id :initform
                         (common-lisp:error ":importid is required") :type
                         (common-lisp:or import-id common-lisp:null) :accessor
                         struct-shape-import-application-usage-result-import-id
                         :shape "ImportId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-application-usage-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-application-usage-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-application-usage-result
                    'make-import-application-usage-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-application-usage-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-application-usage-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "importId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-application-usage-result))
   common-lisp:nil))
(common-lisp:deftype import-id () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (applicationcostprofiler-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-report-definitions-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-report-definitions-request-next-token
                         :shape "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-report-definitions-request-max-results
                         :shape "Integer" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-report-definitions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-report-definitions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-report-definitions-request
                    'make-list-report-definitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-report-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-report-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-report-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-report-definitions-result common-lisp:nil
                       ((report-definitions :initarg :report-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or report-definition-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-report-definitions-result-report-definitions
                         :shape "ReportDefinitionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-report-definitions-result-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-report-definitions-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-report-definitions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-report-definitions-result
                    'make-list-report-definitions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-report-definitions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-report-definitions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-definitions))
      (common-lisp:list
       (common-lisp:cons "reportDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-report-definitions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-report-definition-request common-lisp:nil
                       ((report-id :initarg :report-id :initform
                         (common-lisp:error ":reportid is required") :type
                         (common-lisp:or report-id common-lisp:null) :accessor
                         struct-shape-put-report-definition-request-report-id
                         :shape "ReportId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (report-description :initarg :report-description
                         :initform
                         (common-lisp:error ":reportdescription is required")
                         :type
                         (common-lisp:or report-description common-lisp:null)
                         :accessor
                         struct-shape-put-report-definition-request-report-description
                         :shape "ReportDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (report-frequency :initarg :report-frequency :initform
                         (common-lisp:error ":reportfrequency is required")
                         :type
                         (common-lisp:or report-frequency common-lisp:null)
                         :accessor
                         struct-shape-put-report-definition-request-report-frequency
                         :shape "ReportFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or format common-lisp:null) :accessor
                         struct-shape-put-report-definition-request-format
                         :shape "Format" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-s3location :initarg
                         :destination-s3location :initform
                         (common-lisp:error
                          ":destinations3location is required")
                         :type (common-lisp:or s3location common-lisp:null)
                         :accessor
                         struct-shape-put-report-definition-request-destination-s3location
                         :shape "S3Location" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-report-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-report-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-report-definition-request
                    'make-put-report-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-report-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-report-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-id))
      (common-lisp:list
       (common-lisp:cons "reportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-description))
      (common-lisp:list
       (common-lisp:cons "reportDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-frequency))
      (common-lisp:list
       (common-lisp:cons "reportFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-s3location))
      (common-lisp:list
       (common-lisp:cons "destinationS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-report-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-report-definition-result common-lisp:nil
                       ((report-id :initarg :report-id :initform
                         common-lisp:nil :type
                         (common-lisp:or report-id common-lisp:null) :accessor
                         struct-shape-put-report-definition-result-report-id
                         :shape "ReportId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-report-definition-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-report-definition-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-report-definition-result
                    'make-put-report-definition-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-report-definition-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-report-definition-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-id))
      (common-lisp:list
       (common-lisp:cons "reportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-report-definition-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass report-definition common-lisp:nil
                       ((report-id :initarg :report-id :initform
                         common-lisp:nil :type
                         (common-lisp:or report-id common-lisp:null) :accessor
                         struct-shape-report-definition-report-id :shape
                         "ReportId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (report-description :initarg :report-description
                         :initform common-lisp:nil :type
                         (common-lisp:or report-description common-lisp:null)
                         :accessor
                         struct-shape-report-definition-report-description
                         :shape "ReportDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (report-frequency :initarg :report-frequency :initform
                         common-lisp:nil :type
                         (common-lisp:or report-frequency common-lisp:null)
                         :accessor
                         struct-shape-report-definition-report-frequency :shape
                         "ReportFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform common-lisp:nil
                         :type (common-lisp:or format common-lisp:null)
                         :accessor struct-shape-report-definition-format :shape
                         "Format" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination-s3location :initarg
                         :destination-s3location :initform common-lisp:nil
                         :type (common-lisp:or s3location common-lisp:null)
                         :accessor
                         struct-shape-report-definition-destination-s3location
                         :shape "S3Location" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-report-definition-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-report-definition-last-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-report-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'report-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'report-definition 'make-report-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input report-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input report-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-id))
      (common-lisp:list
       (common-lisp:cons "reportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-description))
      (common-lisp:list
       (common-lisp:cons "reportDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-frequency))
      (common-lisp:list
       (common-lisp:cons "reportFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-s3location))
      (common-lisp:list
       (common-lisp:cons "destinationS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input report-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype report-definition-list ()
   '(trivial-types:proper-list report-definition))
 (common-lisp:defun make-report-definition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list report-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype report-description () 'common-lisp:string)
(common-lisp:deftype report-frequency () 'common-lisp:string)
(common-lisp:deftype report-id () 'common-lisp:string)
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3bucket-region () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3location common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         struct-shape-s3location-bucket :shape "S3Bucket"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (prefix :initarg :prefix :initform
                         (common-lisp:error ":prefix is required") :type
                         (common-lisp:or s3prefix common-lisp:null) :accessor
                         struct-shape-s3location-prefix :shape "S3Prefix"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:deftype s3prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (applicationcostprofiler-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass source-s3location common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         struct-shape-source-s3location-bucket :shape
                         "S3Bucket" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-source-s3location-key :shape "S3Key"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type
                         (common-lisp:or s3bucket-region common-lisp:null)
                         :accessor struct-shape-source-s3location-region :shape
                         "S3BucketRegion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-s3location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-s3location
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-s3location 'make-source-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (applicationcostprofiler-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-report-definition-request common-lisp:nil
                       ((report-id :initarg :report-id :initform
                         (common-lisp:error ":reportid is required") :type
                         (common-lisp:or report-id common-lisp:null) :accessor
                         struct-shape-update-report-definition-request-report-id
                         :shape "ReportId" :location "uri" :location-name
                         "reportId")
                        (report-description :initarg :report-description
                         :initform
                         (common-lisp:error ":reportdescription is required")
                         :type
                         (common-lisp:or report-description common-lisp:null)
                         :accessor
                         struct-shape-update-report-definition-request-report-description
                         :shape "ReportDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (report-frequency :initarg :report-frequency :initform
                         (common-lisp:error ":reportfrequency is required")
                         :type
                         (common-lisp:or report-frequency common-lisp:null)
                         :accessor
                         struct-shape-update-report-definition-request-report-frequency
                         :shape "ReportFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or format common-lisp:null) :accessor
                         struct-shape-update-report-definition-request-format
                         :shape "Format" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-s3location :initarg
                         :destination-s3location :initform
                         (common-lisp:error
                          ":destinations3location is required")
                         :type (common-lisp:or s3location common-lisp:null)
                         :accessor
                         struct-shape-update-report-definition-request-destination-s3location
                         :shape "S3Location" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-report-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-report-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-report-definition-request
                    'make-update-report-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-report-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-report-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-description))
      (common-lisp:list
       (common-lisp:cons "reportDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-frequency))
      (common-lisp:list
       (common-lisp:cons "reportFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-s3location))
      (common-lisp:list
       (common-lisp:cons "destinationS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-report-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-report-definition-result common-lisp:nil
                       ((report-id :initarg :report-id :initform
                         common-lisp:nil :type
                         (common-lisp:or report-id common-lisp:null) :accessor
                         struct-shape-update-report-definition-result-report-id
                         :shape "ReportId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-report-definition-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-report-definition-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-report-definition-result
                    'make-update-report-definition-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-report-definition-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-report-definition-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-id))
      (common-lisp:list
       (common-lisp:cons "reportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-report-definition-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (applicationcostprofiler-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun delete-report-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key report-id)
   (common-lisp:declare (common-lisp:ignorable report-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-report-definition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'applicationcostprofiler-request aws-sdk/generator/operation::input
        "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/reportDefinition/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'report-id))))
        "DeleteReportDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-report-definition))
(common-lisp:progn
 (common-lisp:defun get-report-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key report-id)
   (common-lisp:declare (common-lisp:ignorable report-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-report-definition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'applicationcostprofiler-request aws-sdk/generator/operation::input
        "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/reportDefinition/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'report-id))))
        "GetReportDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-report-definition))
(common-lisp:progn
 (common-lisp:defun import-application-usage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-s3location)
   (common-lisp:declare (common-lisp:ignorable source-s3location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-application-usage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'applicationcostprofiler-request aws-sdk/generator/operation::input
        "POST" "/importApplicationUsage" "ImportApplicationUsage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'import-application-usage))
(common-lisp:progn
 (common-lisp:defun list-report-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-report-definitions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'applicationcostprofiler-request aws-sdk/generator/operation::input
        "GET" "/reportDefinition" "ListReportDefinitions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-report-definitions))
(common-lisp:progn
 (common-lisp:defun put-report-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key report-id report-description
                     report-frequency format destination-s3location)
   (common-lisp:declare
    (common-lisp:ignorable report-id report-description report-frequency format
     destination-s3location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-report-definition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'applicationcostprofiler-request aws-sdk/generator/operation::input
        "POST" "/reportDefinition" "PutReportDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-report-definition))
(common-lisp:progn
 (common-lisp:defun update-report-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key report-id report-description
                     report-frequency format destination-s3location)
   (common-lisp:declare
    (common-lisp:ignorable report-id report-description report-frequency format
     destination-s3location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-report-definition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'applicationcostprofiler-request aws-sdk/generator/operation::input
        "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/reportDefinition/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'report-id))))
        "UpdateReportDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-report-definition))
