;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/route53resolver/api (:use)
                             (:nicknames #:aws/route53resolver)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/route53resolver/api)
(common-lisp:progn
 (common-lisp:define-condition route53resolver-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'route53resolver-error))
(common-lisp:progn
 (common-lisp:defclass route53resolver-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "route53resolver"
                        :api-version "2018-04-01" :host-prefix
                        "route53resolver" :signing-name common-lisp:nil
                        :global-host common-lisp:nil :target-prefix
                        "Route53Resolver" :json-version "1.1"))
 (common-lisp:export 'route53resolver-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServiceErrorException" . internal-service-error-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidPolicyDocument" . invalid-policy-document)
    ("InvalidRequestException" . invalid-request-exception)
    ("InvalidTagException" . invalid-tag-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceExistsException" . resource-exists-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceUnavailableException" . resource-unavailable-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("UnknownResourceException" . unknown-resource-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype action () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-firewall-rule-group-request common-lisp:nil
                       ((creator-request-id :initarg :creator-request-id
                         :initform
                         (common-lisp:error ":creator-request-id is required")
                         :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-associate-firewall-rule-group-request-creator-request-id
                         :shape "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (firewall-rule-group-id :initarg
                         :firewall-rule-group-id :initform
                         (common-lisp:error
                          ":firewall-rule-group-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-associate-firewall-rule-group-request-firewall-rule-group-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform
                         (common-lisp:error ":vpc-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-associate-firewall-rule-group-request-vpc-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (priority :initarg :priority :initform
                         (common-lisp:error ":priority is required") :type
                         (common-lisp:or priority common-lisp:null) :accessor
                         struct-shape-associate-firewall-rule-group-request-priority
                         :shape "Priority" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-associate-firewall-rule-group-request-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mutation-protection :initarg :mutation-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or mutation-protection-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-firewall-rule-group-request-mutation-protection
                         :shape "MutationProtectionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-associate-firewall-rule-group-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-firewall-rule-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-firewall-rule-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-firewall-rule-group-request
                    'make-associate-firewall-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-firewall-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-firewall-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mutation-protection))
      (common-lisp:list
       (common-lisp:cons "MutationProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-firewall-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-firewall-rule-group-response common-lisp:nil
                       ((firewall-rule-group-association :initarg
                         :firewall-rule-group-association :initform
                         common-lisp:nil :type
                         (common-lisp:or firewall-rule-group-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-firewall-rule-group-response-firewall-rule-group-association
                         :shape "FirewallRuleGroupAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-firewall-rule-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-firewall-rule-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-firewall-rule-group-response
                    'make-associate-firewall-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-firewall-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-firewall-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-association))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-firewall-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-resolver-endpoint-ip-address-request
                       common-lisp:nil
                       ((resolver-endpoint-id :initarg :resolver-endpoint-id
                         :initform
                         (common-lisp:error
                          ":resolver-endpoint-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-associate-resolver-endpoint-ip-address-request-resolver-endpoint-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address :initarg :ip-address :initform
                         (common-lisp:error ":ip-address is required") :type
                         (common-lisp:or ip-address-update common-lisp:null)
                         :accessor
                         struct-shape-associate-resolver-endpoint-ip-address-request-ip-address
                         :shape "IpAddressUpdate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-resolver-endpoint-ip-address-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-resolver-endpoint-ip-address-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-resolver-endpoint-ip-address-request
                    'make-associate-resolver-endpoint-ip-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-endpoint-ip-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-endpoint-ip-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-endpoint-ip-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-resolver-endpoint-ip-address-response
                       common-lisp:nil
                       ((resolver-endpoint :initarg :resolver-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or resolver-endpoint common-lisp:null)
                         :accessor
                         struct-shape-associate-resolver-endpoint-ip-address-response-resolver-endpoint
                         :shape "ResolverEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-resolver-endpoint-ip-address-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-resolver-endpoint-ip-address-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-resolver-endpoint-ip-address-response
                    'make-associate-resolver-endpoint-ip-address-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-endpoint-ip-address-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-endpoint-ip-address-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-endpoint))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-endpoint-ip-address-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-resolver-query-log-config-request
                       common-lisp:nil
                       ((resolver-query-log-config-id :initarg
                         :resolver-query-log-config-id :initform
                         (common-lisp:error
                          ":resolver-query-log-config-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-associate-resolver-query-log-config-request-resolver-query-log-config-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-associate-resolver-query-log-config-request-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-resolver-query-log-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-resolver-query-log-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-resolver-query-log-config-request
                    'make-associate-resolver-query-log-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-query-log-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-query-log-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-id))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-query-log-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-resolver-query-log-config-response
                       common-lisp:nil
                       ((resolver-query-log-config-association :initarg
                         :resolver-query-log-config-association :initform
                         common-lisp:nil :type
                         (common-lisp:or resolver-query-log-config-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-resolver-query-log-config-response-resolver-query-log-config-association
                         :shape "ResolverQueryLogConfigAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-resolver-query-log-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-resolver-query-log-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-resolver-query-log-config-response
                    'make-associate-resolver-query-log-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-query-log-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-query-log-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-association))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-query-log-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-resolver-rule-request common-lisp:nil
                       ((resolver-rule-id :initarg :resolver-rule-id :initform
                         (common-lisp:error ":resolver-rule-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-associate-resolver-rule-request-resolver-rule-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-associate-resolver-rule-request-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpcid :initarg :vpcid :initform
                         (common-lisp:error ":vpcid is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-associate-resolver-rule-request-vpcid
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-resolver-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-resolver-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-resolver-rule-request
                    'make-associate-resolver-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule-id))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcid))
      (common-lisp:list
       (common-lisp:cons "VPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-resolver-rule-response common-lisp:nil
                       ((resolver-rule-association :initarg
                         :resolver-rule-association :initform common-lisp:nil
                         :type
                         (common-lisp:or resolver-rule-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-resolver-rule-response-resolver-rule-association
                         :shape "ResolverRuleAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-resolver-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-resolver-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-resolver-rule-response
                    'make-associate-resolver-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-rule-association))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-rule-response))
   common-lisp:nil))
(common-lisp:deftype autodefined-reverse-flag () 'common-lisp:string)
(common-lisp:deftype block-override-dns-type () 'common-lisp:string)
(common-lisp:deftype block-override-domain () 'common-lisp:string)
(common-lisp:deftype block-override-ttl () 'common-lisp:integer)
(common-lisp:deftype block-response () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-firewall-domain-list-request common-lisp:nil
                       ((creator-request-id :initarg :creator-request-id
                         :initform
                         (common-lisp:error ":creator-request-id is required")
                         :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-create-firewall-domain-list-request-creator-request-id
                         :shape "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-firewall-domain-list-request-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-firewall-domain-list-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-firewall-domain-list-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-firewall-domain-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-firewall-domain-list-request
                    'make-create-firewall-domain-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-domain-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-domain-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-domain-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-firewall-domain-list-response common-lisp:nil
                       ((firewall-domain-list :initarg :firewall-domain-list
                         :initform common-lisp:nil :type
                         (common-lisp:or firewall-domain-list common-lisp:null)
                         :accessor
                         struct-shape-create-firewall-domain-list-response-firewall-domain-list
                         :shape "FirewallDomainList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-firewall-domain-list-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-firewall-domain-list-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-firewall-domain-list-response
                    'make-create-firewall-domain-list-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-domain-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-domain-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-domain-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-firewall-rule-group-request common-lisp:nil
                       ((creator-request-id :initarg :creator-request-id
                         :initform
                         (common-lisp:error ":creator-request-id is required")
                         :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-create-firewall-rule-group-request-creator-request-id
                         :shape "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-firewall-rule-group-request-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-firewall-rule-group-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-firewall-rule-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-firewall-rule-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-firewall-rule-group-request
                    'make-create-firewall-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-firewall-rule-group-response common-lisp:nil
                       ((firewall-rule-group :initarg :firewall-rule-group
                         :initform common-lisp:nil :type
                         (common-lisp:or firewall-rule-group common-lisp:null)
                         :accessor
                         struct-shape-create-firewall-rule-group-response-firewall-rule-group
                         :shape "FirewallRuleGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-firewall-rule-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-firewall-rule-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-firewall-rule-group-response
                    'make-create-firewall-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-rule-group))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-firewall-rule-request common-lisp:nil
                       ((creator-request-id :initarg :creator-request-id
                         :initform
                         (common-lisp:error ":creator-request-id is required")
                         :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-create-firewall-rule-request-creator-request-id
                         :shape "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (firewall-rule-group-id :initarg
                         :firewall-rule-group-id :initform
                         (common-lisp:error
                          ":firewall-rule-group-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-create-firewall-rule-request-firewall-rule-group-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (firewall-domain-list-id :initarg
                         :firewall-domain-list-id :initform
                         (common-lisp:error
                          ":firewall-domain-list-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-create-firewall-rule-request-firewall-domain-list-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (priority :initarg :priority :initform
                         (common-lisp:error ":priority is required") :type
                         (common-lisp:or priority common-lisp:null) :accessor
                         struct-shape-create-firewall-rule-request-priority
                         :shape "Priority" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or action common-lisp:null) :accessor
                         struct-shape-create-firewall-rule-request-action
                         :shape "Action" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (block-response :initarg :block-response :initform
                         common-lisp:nil :type
                         (common-lisp:or block-response common-lisp:null)
                         :accessor
                         struct-shape-create-firewall-rule-request-block-response
                         :shape "BlockResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (block-override-domain :initarg :block-override-domain
                         :initform common-lisp:nil :type
                         (common-lisp:or block-override-domain
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-firewall-rule-request-block-override-domain
                         :shape "BlockOverrideDomain" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (block-override-dns-type :initarg
                         :block-override-dns-type :initform common-lisp:nil
                         :type
                         (common-lisp:or block-override-dns-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-firewall-rule-request-block-override-dns-type
                         :shape "BlockOverrideDnsType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (block-override-ttl :initarg :block-override-ttl
                         :initform common-lisp:nil :type
                         (common-lisp:or block-override-ttl common-lisp:null)
                         :accessor
                         struct-shape-create-firewall-rule-request-block-override-ttl
                         :shape "BlockOverrideTtl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-firewall-rule-request-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (qtype :initarg :qtype :initform common-lisp:nil :type
                         (common-lisp:or qtype common-lisp:null) :accessor
                         struct-shape-create-firewall-rule-request-qtype :shape
                         "Qtype" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-firewall-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-firewall-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-firewall-rule-request
                    'make-create-firewall-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-response))
      (common-lisp:list
       (common-lisp:cons "BlockResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-override-domain))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-override-dns-type))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideDnsType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-override-ttl))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideTtl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qtype))
      (common-lisp:list
       (common-lisp:cons "Qtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-firewall-rule-response common-lisp:nil
                       ((firewall-rule :initarg :firewall-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or firewall-rule common-lisp:null)
                         :accessor
                         struct-shape-create-firewall-rule-response-firewall-rule
                         :shape "FirewallRule" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-firewall-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-firewall-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-firewall-rule-response
                    'make-create-firewall-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-rule))
      (common-lisp:list
       (common-lisp:cons "FirewallRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-outpost-resolver-request common-lisp:nil
                       ((creator-request-id :initarg :creator-request-id
                         :initform
                         (common-lisp:error ":creator-request-id is required")
                         :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-create-outpost-resolver-request-creator-request-id
                         :shape "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or outpost-resolver-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-outpost-resolver-request-name
                         :shape "OutpostResolverName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-count :initarg :instance-count :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-count common-lisp:null)
                         :accessor
                         struct-shape-create-outpost-resolver-request-instance-count
                         :shape "InstanceCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-instance-type :initarg
                         :preferred-instance-type :initform
                         (common-lisp:error
                          ":preferred-instance-type is required")
                         :type
                         (common-lisp:or outpost-instance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-outpost-resolver-request-preferred-instance-type
                         :shape "OutpostInstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (outpost-arn :initarg :outpost-arn :initform
                         (common-lisp:error ":outpost-arn is required") :type
                         (common-lisp:or outpost-arn common-lisp:null)
                         :accessor
                         struct-shape-create-outpost-resolver-request-outpost-arn
                         :shape "OutpostArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-outpost-resolver-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-outpost-resolver-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-outpost-resolver-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-outpost-resolver-request
                    'make-create-outpost-resolver-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-outpost-resolver-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-outpost-resolver-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-instance-type))
      (common-lisp:list
       (common-lisp:cons "PreferredInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-arn))
      (common-lisp:list
       (common-lisp:cons "OutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-outpost-resolver-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-outpost-resolver-response common-lisp:nil
                       ((outpost-resolver :initarg :outpost-resolver :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-resolver common-lisp:null)
                         :accessor
                         struct-shape-create-outpost-resolver-response-outpost-resolver
                         :shape "OutpostResolver" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-outpost-resolver-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-outpost-resolver-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-outpost-resolver-response
                    'make-create-outpost-resolver-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-outpost-resolver-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-outpost-resolver-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-resolver))
      (common-lisp:list
       (common-lisp:cons "OutpostResolver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-outpost-resolver-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resolver-endpoint-request common-lisp:nil
                       ((creator-request-id :initarg :creator-request-id
                         :initform
                         (common-lisp:error ":creator-request-id is required")
                         :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-endpoint-request-creator-request-id
                         :shape "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-resolver-endpoint-request-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform
                         (common-lisp:error ":security-group-ids is required")
                         :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-endpoint-request-security-group-ids
                         :shape "SecurityGroupIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (direction :initarg :direction :initform
                         (common-lisp:error ":direction is required") :type
                         (common-lisp:or resolver-endpoint-direction
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-endpoint-request-direction
                         :shape "ResolverEndpointDirection" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ip-addresses :initarg :ip-addresses :initform
                         (common-lisp:error ":ip-addresses is required") :type
                         (common-lisp:or ip-addresses-request common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-endpoint-request-ip-addresses
                         :shape "IpAddressesRequest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (outpost-arn :initarg :outpost-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-arn common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-endpoint-request-outpost-arn
                         :shape "OutpostArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-instance-type :initarg
                         :preferred-instance-type :initform common-lisp:nil
                         :type
                         (common-lisp:or outpost-instance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-endpoint-request-preferred-instance-type
                         :shape "OutpostInstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-resolver-endpoint-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-endpoint-type :initarg
                         :resolver-endpoint-type :initform common-lisp:nil
                         :type
                         (common-lisp:or resolver-endpoint-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-endpoint-request-resolver-endpoint-type
                         :shape "ResolverEndpointType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (protocols :initarg :protocols :initform
                         common-lisp:nil :type
                         (common-lisp:or protocol-list common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-endpoint-request-protocols
                         :shape "ProtocolList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-resolver-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resolver-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-resolver-endpoint-request
                    'make-create-resolver-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direction))
      (common-lisp:list
       (common-lisp:cons "Direction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-addresses))
      (common-lisp:list
       (common-lisp:cons "IpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-arn))
      (common-lisp:list
       (common-lisp:cons "OutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-instance-type))
      (common-lisp:list
       (common-lisp:cons "PreferredInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-type))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resolver-endpoint-response common-lisp:nil
                       ((resolver-endpoint :initarg :resolver-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or resolver-endpoint common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-endpoint-response-resolver-endpoint
                         :shape "ResolverEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-resolver-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resolver-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-resolver-endpoint-response
                    'make-create-resolver-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-endpoint))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resolver-query-log-config-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resolver-query-log-config-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-query-log-config-request-name
                         :shape "ResolverQueryLogConfigName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination-arn :initarg :destination-arn :initform
                         (common-lisp:error ":destination-arn is required")
                         :type
                         (common-lisp:or destination-arn common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-query-log-config-request-destination-arn
                         :shape "DestinationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creator-request-id :initarg :creator-request-id
                         :initform
                         (common-lisp:error ":creator-request-id is required")
                         :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-query-log-config-request-creator-request-id
                         :shape "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-resolver-query-log-config-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-resolver-query-log-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resolver-query-log-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-resolver-query-log-config-request
                    'make-create-resolver-query-log-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-query-log-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-query-log-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-query-log-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resolver-query-log-config-response
                       common-lisp:nil
                       ((resolver-query-log-config :initarg
                         :resolver-query-log-config :initform common-lisp:nil
                         :type
                         (common-lisp:or resolver-query-log-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-query-log-config-response-resolver-query-log-config
                         :shape "ResolverQueryLogConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-resolver-query-log-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resolver-query-log-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-resolver-query-log-config-response
                    'make-create-resolver-query-log-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-query-log-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-query-log-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-query-log-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resolver-rule-request common-lisp:nil
                       ((creator-request-id :initarg :creator-request-id
                         :initform
                         (common-lisp:error ":creator-request-id is required")
                         :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-rule-request-creator-request-id
                         :shape "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-resolver-rule-request-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rule-type :initarg :rule-type :initform
                         (common-lisp:error ":rule-type is required") :type
                         (common-lisp:or rule-type-option common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-rule-request-rule-type
                         :shape "RuleTypeOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-rule-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-ips :initarg :target-ips :initform
                         common-lisp:nil :type
                         (common-lisp:or target-list common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-rule-request-target-ips
                         :shape "TargetList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-endpoint-id :initarg :resolver-endpoint-id
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-rule-request-resolver-endpoint-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-resolver-rule-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-resolver-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-resolver-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-resolver-rule-request
                    'make-create-resolver-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-type))
      (common-lisp:list
       (common-lisp:cons "RuleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-ips))
      (common-lisp:list
       (common-lisp:cons "TargetIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resolver-rule-response common-lisp:nil
                       ((resolver-rule :initarg :resolver-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or resolver-rule common-lisp:null)
                         :accessor
                         struct-shape-create-resolver-rule-response-resolver-rule
                         :shape "ResolverRule" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-resolver-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resolver-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-resolver-rule-response
                    'make-create-resolver-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule))
      (common-lisp:list
       (common-lisp:cons "ResolverRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-rule-response))
   common-lisp:nil))
(common-lisp:deftype creator-request-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-firewall-domain-list-request common-lisp:nil
                       ((firewall-domain-list-id :initarg
                         :firewall-domain-list-id :initform
                         (common-lisp:error
                          ":firewall-domain-list-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-delete-firewall-domain-list-request-firewall-domain-list-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-firewall-domain-list-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-firewall-domain-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-firewall-domain-list-request
                    'make-delete-firewall-domain-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-domain-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-domain-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-domain-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-firewall-domain-list-response common-lisp:nil
                       ((firewall-domain-list :initarg :firewall-domain-list
                         :initform common-lisp:nil :type
                         (common-lisp:or firewall-domain-list common-lisp:null)
                         :accessor
                         struct-shape-delete-firewall-domain-list-response-firewall-domain-list
                         :shape "FirewallDomainList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-firewall-domain-list-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-firewall-domain-list-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-firewall-domain-list-response
                    'make-delete-firewall-domain-list-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-domain-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-domain-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-domain-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-firewall-rule-group-request common-lisp:nil
                       ((firewall-rule-group-id :initarg
                         :firewall-rule-group-id :initform
                         (common-lisp:error
                          ":firewall-rule-group-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-delete-firewall-rule-group-request-firewall-rule-group-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-firewall-rule-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-firewall-rule-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-firewall-rule-group-request
                    'make-delete-firewall-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-firewall-rule-group-response common-lisp:nil
                       ((firewall-rule-group :initarg :firewall-rule-group
                         :initform common-lisp:nil :type
                         (common-lisp:or firewall-rule-group common-lisp:null)
                         :accessor
                         struct-shape-delete-firewall-rule-group-response-firewall-rule-group
                         :shape "FirewallRuleGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-firewall-rule-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-firewall-rule-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-firewall-rule-group-response
                    'make-delete-firewall-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-rule-group))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-firewall-rule-request common-lisp:nil
                       ((firewall-rule-group-id :initarg
                         :firewall-rule-group-id :initform
                         (common-lisp:error
                          ":firewall-rule-group-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-delete-firewall-rule-request-firewall-rule-group-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (firewall-domain-list-id :initarg
                         :firewall-domain-list-id :initform
                         (common-lisp:error
                          ":firewall-domain-list-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-delete-firewall-rule-request-firewall-domain-list-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (qtype :initarg :qtype :initform common-lisp:nil :type
                         (common-lisp:or qtype common-lisp:null) :accessor
                         struct-shape-delete-firewall-rule-request-qtype :shape
                         "Qtype" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-firewall-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-firewall-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-firewall-rule-request
                    'make-delete-firewall-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qtype))
      (common-lisp:list
       (common-lisp:cons "Qtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-firewall-rule-response common-lisp:nil
                       ((firewall-rule :initarg :firewall-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or firewall-rule common-lisp:null)
                         :accessor
                         struct-shape-delete-firewall-rule-response-firewall-rule
                         :shape "FirewallRule" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-firewall-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-firewall-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-firewall-rule-response
                    'make-delete-firewall-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-rule))
      (common-lisp:list
       (common-lisp:cons "FirewallRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-outpost-resolver-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-delete-outpost-resolver-request-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-outpost-resolver-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-outpost-resolver-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-outpost-resolver-request
                    'make-delete-outpost-resolver-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-outpost-resolver-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-outpost-resolver-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-outpost-resolver-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-outpost-resolver-response common-lisp:nil
                       ((outpost-resolver :initarg :outpost-resolver :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-resolver common-lisp:null)
                         :accessor
                         struct-shape-delete-outpost-resolver-response-outpost-resolver
                         :shape "OutpostResolver" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-outpost-resolver-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-outpost-resolver-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-outpost-resolver-response
                    'make-delete-outpost-resolver-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-outpost-resolver-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-outpost-resolver-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-resolver))
      (common-lisp:list
       (common-lisp:cons "OutpostResolver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-outpost-resolver-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resolver-endpoint-request common-lisp:nil
                       ((resolver-endpoint-id :initarg :resolver-endpoint-id
                         :initform
                         (common-lisp:error
                          ":resolver-endpoint-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-delete-resolver-endpoint-request-resolver-endpoint-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resolver-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resolver-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resolver-endpoint-request
                    'make-delete-resolver-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resolver-endpoint-response common-lisp:nil
                       ((resolver-endpoint :initarg :resolver-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or resolver-endpoint common-lisp:null)
                         :accessor
                         struct-shape-delete-resolver-endpoint-response-resolver-endpoint
                         :shape "ResolverEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resolver-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resolver-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resolver-endpoint-response
                    'make-delete-resolver-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-endpoint))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resolver-query-log-config-request common-lisp:nil
                       ((resolver-query-log-config-id :initarg
                         :resolver-query-log-config-id :initform
                         (common-lisp:error
                          ":resolver-query-log-config-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-delete-resolver-query-log-config-request-resolver-query-log-config-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resolver-query-log-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resolver-query-log-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resolver-query-log-config-request
                    'make-delete-resolver-query-log-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-query-log-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-query-log-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-id))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-query-log-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resolver-query-log-config-response
                       common-lisp:nil
                       ((resolver-query-log-config :initarg
                         :resolver-query-log-config :initform common-lisp:nil
                         :type
                         (common-lisp:or resolver-query-log-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-resolver-query-log-config-response-resolver-query-log-config
                         :shape "ResolverQueryLogConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resolver-query-log-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resolver-query-log-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resolver-query-log-config-response
                    'make-delete-resolver-query-log-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-query-log-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-query-log-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-query-log-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resolver-rule-request common-lisp:nil
                       ((resolver-rule-id :initarg :resolver-rule-id :initform
                         (common-lisp:error ":resolver-rule-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-delete-resolver-rule-request-resolver-rule-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resolver-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-resolver-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resolver-rule-request
                    'make-delete-resolver-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule-id))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resolver-rule-response common-lisp:nil
                       ((resolver-rule :initarg :resolver-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or resolver-rule common-lisp:null)
                         :accessor
                         struct-shape-delete-resolver-rule-response-resolver-rule
                         :shape "ResolverRule" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resolver-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resolver-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resolver-rule-response
                    'make-delete-resolver-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule))
      (common-lisp:list
       (common-lisp:cons "ResolverRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-rule-response))
   common-lisp:nil))
(common-lisp:deftype destination-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-firewall-rule-group-request common-lisp:nil
                       ((firewall-rule-group-association-id :initarg
                         :firewall-rule-group-association-id :initform
                         (common-lisp:error
                          ":firewall-rule-group-association-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-firewall-rule-group-request-firewall-rule-group-association-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-firewall-rule-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-firewall-rule-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-firewall-rule-group-request
                    'make-disassociate-firewall-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-firewall-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-firewall-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-association-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-firewall-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-firewall-rule-group-response
                       common-lisp:nil
                       ((firewall-rule-group-association :initarg
                         :firewall-rule-group-association :initform
                         common-lisp:nil :type
                         (common-lisp:or firewall-rule-group-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-disassociate-firewall-rule-group-response-firewall-rule-group-association
                         :shape "FirewallRuleGroupAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-firewall-rule-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-firewall-rule-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-firewall-rule-group-response
                    'make-disassociate-firewall-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-firewall-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-firewall-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-association))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-firewall-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-resolver-endpoint-ip-address-request
                       common-lisp:nil
                       ((resolver-endpoint-id :initarg :resolver-endpoint-id
                         :initform
                         (common-lisp:error
                          ":resolver-endpoint-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-resolver-endpoint-ip-address-request-resolver-endpoint-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address :initarg :ip-address :initform
                         (common-lisp:error ":ip-address is required") :type
                         (common-lisp:or ip-address-update common-lisp:null)
                         :accessor
                         struct-shape-disassociate-resolver-endpoint-ip-address-request-ip-address
                         :shape "IpAddressUpdate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-resolver-endpoint-ip-address-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-resolver-endpoint-ip-address-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-resolver-endpoint-ip-address-request
                    'make-disassociate-resolver-endpoint-ip-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-endpoint-ip-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-endpoint-ip-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-endpoint-ip-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-resolver-endpoint-ip-address-response
                       common-lisp:nil
                       ((resolver-endpoint :initarg :resolver-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or resolver-endpoint common-lisp:null)
                         :accessor
                         struct-shape-disassociate-resolver-endpoint-ip-address-response-resolver-endpoint
                         :shape "ResolverEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-resolver-endpoint-ip-address-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-resolver-endpoint-ip-address-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-resolver-endpoint-ip-address-response
                    'make-disassociate-resolver-endpoint-ip-address-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-endpoint-ip-address-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-endpoint-ip-address-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-endpoint))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-endpoint-ip-address-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-resolver-query-log-config-request
                       common-lisp:nil
                       ((resolver-query-log-config-id :initarg
                         :resolver-query-log-config-id :initform
                         (common-lisp:error
                          ":resolver-query-log-config-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-resolver-query-log-config-request-resolver-query-log-config-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-resolver-query-log-config-request-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-resolver-query-log-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-resolver-query-log-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-resolver-query-log-config-request
                    'make-disassociate-resolver-query-log-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-query-log-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-query-log-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-id))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-query-log-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-resolver-query-log-config-response
                       common-lisp:nil
                       ((resolver-query-log-config-association :initarg
                         :resolver-query-log-config-association :initform
                         common-lisp:nil :type
                         (common-lisp:or resolver-query-log-config-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-disassociate-resolver-query-log-config-response-resolver-query-log-config-association
                         :shape "ResolverQueryLogConfigAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-resolver-query-log-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-resolver-query-log-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-resolver-query-log-config-response
                    'make-disassociate-resolver-query-log-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-query-log-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-query-log-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-association))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-query-log-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-resolver-rule-request common-lisp:nil
                       ((vpcid :initarg :vpcid :initform
                         (common-lisp:error ":vpcid is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-resolver-rule-request-vpcid
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-rule-id :initarg :resolver-rule-id :initform
                         (common-lisp:error ":resolver-rule-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-resolver-rule-request-resolver-rule-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-resolver-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-resolver-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-resolver-rule-request
                    'make-disassociate-resolver-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcid))
      (common-lisp:list
       (common-lisp:cons "VPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule-id))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-resolver-rule-response common-lisp:nil
                       ((resolver-rule-association :initarg
                         :resolver-rule-association :initform common-lisp:nil
                         :type
                         (common-lisp:or resolver-rule-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-disassociate-resolver-rule-response-resolver-rule-association
                         :shape "ResolverRuleAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-resolver-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-resolver-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-resolver-rule-response
                    'make-disassociate-resolver-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-rule-association))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-rule-response))
   common-lisp:nil))
(common-lisp:deftype domain-list-file-url () 'common-lisp:string)
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor struct-shape-filter-name :shape "FilterName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type (common-lisp:or filter-values common-lisp:null)
                         :accessor struct-shape-filter-values :shape
                         "FilterValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun make-filter-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filters () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass firewall-config common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-firewall-config-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-firewall-config-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-id :initarg :owner-id :initform common-lisp:nil
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor struct-shape-firewall-config-owner-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (firewall-fail-open :initarg :firewall-fail-open
                         :initform common-lisp:nil :type
                         (common-lisp:or firewall-fail-open-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-firewall-config-firewall-fail-open :shape
                         "FirewallFailOpenStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-firewall-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'firewall-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'firewall-config 'make-firewall-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input firewall-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input firewall-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-fail-open))
      (common-lisp:list
       (common-lisp:cons "FirewallFailOpen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input firewall-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype firewall-config-list ()
   '(trivial-types:proper-list firewall-config))
 (common-lisp:defun make-firewall-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list firewall-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype firewall-domain-import-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass firewall-domain-list common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-firewall-domain-list-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-firewall-domain-list-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-firewall-domain-list-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-count :initarg :domain-count :initform
                         common-lisp:nil :type
                         (common-lisp:or unsigned common-lisp:null) :accessor
                         struct-shape-firewall-domain-list-domain-count :shape
                         "Unsigned" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or firewall-domain-list-status
                                         common-lisp:null)
                         :accessor struct-shape-firewall-domain-list-status
                         :shape "FirewallDomainListStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-firewall-domain-list-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (managed-owner-name :initarg :managed-owner-name
                         :initform common-lisp:nil :type
                         (common-lisp:or service-principle common-lisp:null)
                         :accessor
                         struct-shape-firewall-domain-list-managed-owner-name
                         :shape "ServicePrinciple" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creator-request-id :initarg :creator-request-id
                         :initform common-lisp:nil :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-firewall-domain-list-creator-request-id
                         :shape "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor
                         struct-shape-firewall-domain-list-creation-time :shape
                         "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modification-time :initarg :modification-time
                         :initform common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor
                         struct-shape-firewall-domain-list-modification-time
                         :shape "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-firewall-domain-list
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'firewall-domain-list
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'firewall-domain-list 'make-firewall-domain-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input firewall-domain-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input firewall-domain-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-count))
      (common-lisp:list
       (common-lisp:cons "DomainCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-owner-name))
      (common-lisp:list
       (common-lisp:cons "ManagedOwnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-time))
      (common-lisp:list
       (common-lisp:cons "ModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input firewall-domain-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass firewall-domain-list-metadata common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-firewall-domain-list-metadata-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-firewall-domain-list-metadata-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-firewall-domain-list-metadata-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creator-request-id :initarg :creator-request-id
                         :initform common-lisp:nil :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-firewall-domain-list-metadata-creator-request-id
                         :shape "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (managed-owner-name :initarg :managed-owner-name
                         :initform common-lisp:nil :type
                         (common-lisp:or service-principle common-lisp:null)
                         :accessor
                         struct-shape-firewall-domain-list-metadata-managed-owner-name
                         :shape "ServicePrinciple" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-firewall-domain-list-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'firewall-domain-list-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'firewall-domain-list-metadata
                    'make-firewall-domain-list-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-domain-list-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-domain-list-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-owner-name))
      (common-lisp:list
       (common-lisp:cons "ManagedOwnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-domain-list-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype firewall-domain-list-metadata-list ()
   '(trivial-types:proper-list firewall-domain-list-metadata))
 (common-lisp:defun make-firewall-domain-list-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            firewall-domain-list-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype firewall-domain-list-status () 'common-lisp:string)
(common-lisp:deftype firewall-domain-name () 'common-lisp:string)
(common-lisp:deftype firewall-domain-update-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype firewall-domains ()
   '(trivial-types:proper-list firewall-domain-name))
 (common-lisp:defun make-firewall-domains
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list firewall-domain-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype firewall-fail-open-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass firewall-rule common-lisp:nil
                       ((firewall-rule-group-id :initarg
                         :firewall-rule-group-id :initform common-lisp:nil
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-firewall-rule-group-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (firewall-domain-list-id :initarg
                         :firewall-domain-list-id :initform common-lisp:nil
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-firewall-domain-list-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-firewall-rule-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (priority :initarg :priority :initform common-lisp:nil
                         :type (common-lisp:or priority common-lisp:null)
                         :accessor struct-shape-firewall-rule-priority :shape
                         "Priority" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or action common-lisp:null)
                         :accessor struct-shape-firewall-rule-action :shape
                         "Action" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (block-response :initarg :block-response :initform
                         common-lisp:nil :type
                         (common-lisp:or block-response common-lisp:null)
                         :accessor struct-shape-firewall-rule-block-response
                         :shape "BlockResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (block-override-domain :initarg :block-override-domain
                         :initform common-lisp:nil :type
                         (common-lisp:or block-override-domain
                                         common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-block-override-domain
                         :shape "BlockOverrideDomain" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (block-override-dns-type :initarg
                         :block-override-dns-type :initform common-lisp:nil
                         :type
                         (common-lisp:or block-override-dns-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-block-override-dns-type
                         :shape "BlockOverrideDnsType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (block-override-ttl :initarg :block-override-ttl
                         :initform common-lisp:nil :type
                         (common-lisp:or unsigned common-lisp:null) :accessor
                         struct-shape-firewall-rule-block-override-ttl :shape
                         "Unsigned" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creator-request-id :initarg :creator-request-id
                         :initform common-lisp:nil :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-creator-request-id :shape
                         "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor struct-shape-firewall-rule-creation-time
                         :shape "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modification-time :initarg :modification-time
                         :initform common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor struct-shape-firewall-rule-modification-time
                         :shape "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (qtype :initarg :qtype :initform common-lisp:nil :type
                         (common-lisp:or qtype common-lisp:null) :accessor
                         struct-shape-firewall-rule-qtype :shape "Qtype"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-firewall-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'firewall-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'firewall-rule 'make-firewall-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input firewall-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input firewall-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-response))
      (common-lisp:list
       (common-lisp:cons "BlockResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-override-domain))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-override-dns-type))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideDnsType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-override-ttl))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideTtl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-time))
      (common-lisp:list
       (common-lisp:cons "ModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qtype))
      (common-lisp:list
       (common-lisp:cons "Qtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input firewall-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass firewall-rule-group common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-firewall-rule-group-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-firewall-rule-group-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-firewall-rule-group-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rule-count :initarg :rule-count :initform
                         common-lisp:nil :type
                         (common-lisp:or unsigned common-lisp:null) :accessor
                         struct-shape-firewall-rule-group-rule-count :shape
                         "Unsigned" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or firewall-rule-group-status
                                         common-lisp:null)
                         :accessor struct-shape-firewall-rule-group-status
                         :shape "FirewallRuleGroupStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-status-message :shape
                         "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-id :initarg :owner-id :initform common-lisp:nil
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor struct-shape-firewall-rule-group-owner-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creator-request-id :initarg :creator-request-id
                         :initform common-lisp:nil :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-creator-request-id
                         :shape "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (share-status :initarg :share-status :initform
                         common-lisp:nil :type
                         (common-lisp:or share-status common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-share-status :shape
                         "ShareStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-creation-time :shape
                         "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modification-time :initarg :modification-time
                         :initform common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-modification-time
                         :shape "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-firewall-rule-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'firewall-rule-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'firewall-rule-group 'make-firewall-rule-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input firewall-rule-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input firewall-rule-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-count))
      (common-lisp:list
       (common-lisp:cons "RuleCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-status))
      (common-lisp:list
       (common-lisp:cons "ShareStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-time))
      (common-lisp:list
       (common-lisp:cons "ModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input firewall-rule-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass firewall-rule-group-association common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-association-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-firewall-rule-group-association-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (firewall-rule-group-id :initarg
                         :firewall-rule-group-id :initform common-lisp:nil
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-association-firewall-rule-group-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-association-vpc-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-firewall-rule-group-association-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (priority :initarg :priority :initform common-lisp:nil
                         :type (common-lisp:or priority common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-association-priority
                         :shape "Priority" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mutation-protection :initarg :mutation-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or mutation-protection-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-association-mutation-protection
                         :shape "MutationProtectionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (managed-owner-name :initarg :managed-owner-name
                         :initform common-lisp:nil :type
                         (common-lisp:or service-principle common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-association-managed-owner-name
                         :shape "ServicePrinciple" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or firewall-rule-group-association-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-association-status
                         :shape "FirewallRuleGroupAssociationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-association-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creator-request-id :initarg :creator-request-id
                         :initform common-lisp:nil :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-association-creator-request-id
                         :shape "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-association-creation-time
                         :shape "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modification-time :initarg :modification-time
                         :initform common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-association-modification-time
                         :shape "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-firewall-rule-group-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'firewall-rule-group-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'firewall-rule-group-association
                    'make-firewall-rule-group-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-rule-group-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-rule-group-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mutation-protection))
      (common-lisp:list
       (common-lisp:cons "MutationProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-owner-name))
      (common-lisp:list
       (common-lisp:cons "ManagedOwnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-time))
      (common-lisp:list
       (common-lisp:cons "ModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-rule-group-association))
   common-lisp:nil))
(common-lisp:deftype firewall-rule-group-association-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype firewall-rule-group-associations ()
   '(trivial-types:proper-list firewall-rule-group-association))
 (common-lisp:defun make-firewall-rule-group-associations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            firewall-rule-group-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass firewall-rule-group-metadata common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-firewall-rule-group-metadata-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-firewall-rule-group-metadata-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-firewall-rule-group-metadata-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owner-id :initarg :owner-id :initform common-lisp:nil
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-metadata-owner-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creator-request-id :initarg :creator-request-id
                         :initform common-lisp:nil :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-metadata-creator-request-id
                         :shape "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (share-status :initarg :share-status :initform
                         common-lisp:nil :type
                         (common-lisp:or share-status common-lisp:null)
                         :accessor
                         struct-shape-firewall-rule-group-metadata-share-status
                         :shape "ShareStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-firewall-rule-group-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'firewall-rule-group-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'firewall-rule-group-metadata
                    'make-firewall-rule-group-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-rule-group-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-rule-group-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-status))
      (common-lisp:list
       (common-lisp:cons "ShareStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-rule-group-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype firewall-rule-group-metadata-list ()
   '(trivial-types:proper-list firewall-rule-group-metadata))
 (common-lisp:defun make-firewall-rule-group-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            firewall-rule-group-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype firewall-rule-group-policy () 'common-lisp:string)
(common-lisp:deftype firewall-rule-group-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype firewall-rules ()
   '(trivial-types:proper-list firewall-rule))
 (common-lisp:defun make-firewall-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list firewall-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-firewall-config-request common-lisp:nil
                       ((resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-get-firewall-config-request-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-firewall-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-firewall-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-firewall-config-request
                    'make-get-firewall-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-firewall-config-response common-lisp:nil
                       ((firewall-config :initarg :firewall-config :initform
                         common-lisp:nil :type
                         (common-lisp:or firewall-config common-lisp:null)
                         :accessor
                         struct-shape-get-firewall-config-response-firewall-config
                         :shape "FirewallConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-firewall-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-firewall-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-firewall-config-response
                    'make-get-firewall-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-config))
      (common-lisp:list
       (common-lisp:cons "FirewallConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-firewall-domain-list-request common-lisp:nil
                       ((firewall-domain-list-id :initarg
                         :firewall-domain-list-id :initform
                         (common-lisp:error
                          ":firewall-domain-list-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-get-firewall-domain-list-request-firewall-domain-list-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-firewall-domain-list-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-firewall-domain-list-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-firewall-domain-list-request
                    'make-get-firewall-domain-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-domain-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-domain-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-domain-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-firewall-domain-list-response common-lisp:nil
                       ((firewall-domain-list :initarg :firewall-domain-list
                         :initform common-lisp:nil :type
                         (common-lisp:or firewall-domain-list common-lisp:null)
                         :accessor
                         struct-shape-get-firewall-domain-list-response-firewall-domain-list
                         :shape "FirewallDomainList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-firewall-domain-list-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-firewall-domain-list-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-firewall-domain-list-response
                    'make-get-firewall-domain-list-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-domain-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-domain-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-domain-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-firewall-rule-group-association-request
                       common-lisp:nil
                       ((firewall-rule-group-association-id :initarg
                         :firewall-rule-group-association-id :initform
                         (common-lisp:error
                          ":firewall-rule-group-association-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-get-firewall-rule-group-association-request-firewall-rule-group-association-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-firewall-rule-group-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-firewall-rule-group-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-firewall-rule-group-association-request
                    'make-get-firewall-rule-group-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-association-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-firewall-rule-group-association-response
                       common-lisp:nil
                       ((firewall-rule-group-association :initarg
                         :firewall-rule-group-association :initform
                         common-lisp:nil :type
                         (common-lisp:or firewall-rule-group-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-firewall-rule-group-association-response-firewall-rule-group-association
                         :shape "FirewallRuleGroupAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-firewall-rule-group-association-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-firewall-rule-group-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-firewall-rule-group-association-response
                    'make-get-firewall-rule-group-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-association))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-firewall-rule-group-policy-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-firewall-rule-group-policy-request-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-firewall-rule-group-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-firewall-rule-group-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-firewall-rule-group-policy-request
                    'make-get-firewall-rule-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-firewall-rule-group-policy-response common-lisp:nil
                       ((firewall-rule-group-policy :initarg
                         :firewall-rule-group-policy :initform common-lisp:nil
                         :type
                         (common-lisp:or firewall-rule-group-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-firewall-rule-group-policy-response-firewall-rule-group-policy
                         :shape "FirewallRuleGroupPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-firewall-rule-group-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-firewall-rule-group-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-firewall-rule-group-policy-response
                    'make-get-firewall-rule-group-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-policy))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-firewall-rule-group-request common-lisp:nil
                       ((firewall-rule-group-id :initarg
                         :firewall-rule-group-id :initform
                         (common-lisp:error
                          ":firewall-rule-group-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-get-firewall-rule-group-request-firewall-rule-group-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-firewall-rule-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-firewall-rule-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-firewall-rule-group-request
                    'make-get-firewall-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-firewall-rule-group-response common-lisp:nil
                       ((firewall-rule-group :initarg :firewall-rule-group
                         :initform common-lisp:nil :type
                         (common-lisp:or firewall-rule-group common-lisp:null)
                         :accessor
                         struct-shape-get-firewall-rule-group-response-firewall-rule-group
                         :shape "FirewallRuleGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-firewall-rule-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-firewall-rule-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-firewall-rule-group-response
                    'make-get-firewall-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-rule-group))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-outpost-resolver-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-get-outpost-resolver-request-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-outpost-resolver-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-outpost-resolver-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-outpost-resolver-request
                    'make-get-outpost-resolver-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-outpost-resolver-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-outpost-resolver-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-outpost-resolver-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-outpost-resolver-response common-lisp:nil
                       ((outpost-resolver :initarg :outpost-resolver :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-resolver common-lisp:null)
                         :accessor
                         struct-shape-get-outpost-resolver-response-outpost-resolver
                         :shape "OutpostResolver" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-outpost-resolver-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-outpost-resolver-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-outpost-resolver-response
                    'make-get-outpost-resolver-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-outpost-resolver-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-outpost-resolver-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-resolver))
      (common-lisp:list
       (common-lisp:cons "OutpostResolver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-outpost-resolver-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-config-request common-lisp:nil
                       ((resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-get-resolver-config-request-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resolver-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-config-request
                    'make-get-resolver-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-config-response common-lisp:nil
                       ((resolver-config :initarg :resolver-config :initform
                         common-lisp:nil :type
                         (common-lisp:or resolver-config common-lisp:null)
                         :accessor
                         struct-shape-get-resolver-config-response-resolver-config
                         :shape "ResolverConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resolver-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-config-response
                    'make-get-resolver-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-config))
      (common-lisp:list
       (common-lisp:cons "ResolverConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-dnssec-config-request common-lisp:nil
                       ((resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-get-resolver-dnssec-config-request-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-dnssec-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resolver-dnssec-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-dnssec-config-request
                    'make-get-resolver-dnssec-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-dnssec-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-dnssec-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-dnssec-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-dnssec-config-response common-lisp:nil
                       ((resolver-dnssecconfig :initarg :resolver-dnssecconfig
                         :initform common-lisp:nil :type
                         (common-lisp:or resolver-dnssec-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-resolver-dnssec-config-response-resolver-dnssecconfig
                         :shape "ResolverDnssecConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-dnssec-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resolver-dnssec-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-dnssec-config-response
                    'make-get-resolver-dnssec-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-dnssec-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-dnssec-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-dnssecconfig))
      (common-lisp:list
       (common-lisp:cons "ResolverDNSSECConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-dnssec-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-endpoint-request common-lisp:nil
                       ((resolver-endpoint-id :initarg :resolver-endpoint-id
                         :initform
                         (common-lisp:error
                          ":resolver-endpoint-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-get-resolver-endpoint-request-resolver-endpoint-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resolver-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-endpoint-request
                    'make-get-resolver-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-endpoint-response common-lisp:nil
                       ((resolver-endpoint :initarg :resolver-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or resolver-endpoint common-lisp:null)
                         :accessor
                         struct-shape-get-resolver-endpoint-response-resolver-endpoint
                         :shape "ResolverEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resolver-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-endpoint-response
                    'make-get-resolver-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-endpoint))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-query-log-config-association-request
                       common-lisp:nil
                       ((resolver-query-log-config-association-id :initarg
                         :resolver-query-log-config-association-id :initform
                         (common-lisp:error
                          ":resolver-query-log-config-association-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-get-resolver-query-log-config-association-request-resolver-query-log-config-association-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-query-log-config-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resolver-query-log-config-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-query-log-config-association-request
                    'make-get-resolver-query-log-config-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-association-id))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-query-log-config-association-response
                       common-lisp:nil
                       ((resolver-query-log-config-association :initarg
                         :resolver-query-log-config-association :initform
                         common-lisp:nil :type
                         (common-lisp:or resolver-query-log-config-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-resolver-query-log-config-association-response-resolver-query-log-config-association
                         :shape "ResolverQueryLogConfigAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-query-log-config-association-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resolver-query-log-config-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-query-log-config-association-response
                    'make-get-resolver-query-log-config-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-association))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-query-log-config-policy-request
                       common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-resolver-query-log-config-policy-request-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-query-log-config-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resolver-query-log-config-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-query-log-config-policy-request
                    'make-get-resolver-query-log-config-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-query-log-config-policy-response
                       common-lisp:nil
                       ((resolver-query-log-config-policy :initarg
                         :resolver-query-log-config-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or resolver-query-log-config-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-resolver-query-log-config-policy-response-resolver-query-log-config-policy
                         :shape "ResolverQueryLogConfigPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-query-log-config-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resolver-query-log-config-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-query-log-config-policy-response
                    'make-get-resolver-query-log-config-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-policy))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-query-log-config-request common-lisp:nil
                       ((resolver-query-log-config-id :initarg
                         :resolver-query-log-config-id :initform
                         (common-lisp:error
                          ":resolver-query-log-config-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-get-resolver-query-log-config-request-resolver-query-log-config-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-query-log-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resolver-query-log-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-query-log-config-request
                    'make-get-resolver-query-log-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-id))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-query-log-config-response common-lisp:nil
                       ((resolver-query-log-config :initarg
                         :resolver-query-log-config :initform common-lisp:nil
                         :type
                         (common-lisp:or resolver-query-log-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-resolver-query-log-config-response-resolver-query-log-config
                         :shape "ResolverQueryLogConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-query-log-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resolver-query-log-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-query-log-config-response
                    'make-get-resolver-query-log-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-rule-association-request common-lisp:nil
                       ((resolver-rule-association-id :initarg
                         :resolver-rule-association-id :initform
                         (common-lisp:error
                          ":resolver-rule-association-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-get-resolver-rule-association-request-resolver-rule-association-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-rule-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resolver-rule-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-rule-association-request
                    'make-get-resolver-rule-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-rule-association-id))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-rule-association-response common-lisp:nil
                       ((resolver-rule-association :initarg
                         :resolver-rule-association :initform common-lisp:nil
                         :type
                         (common-lisp:or resolver-rule-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-resolver-rule-association-response-resolver-rule-association
                         :shape "ResolverRuleAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-rule-association-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resolver-rule-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-rule-association-response
                    'make-get-resolver-rule-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-rule-association))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-rule-policy-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-resolver-rule-policy-request-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-rule-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resolver-rule-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-rule-policy-request
                    'make-get-resolver-rule-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-rule-policy-response common-lisp:nil
                       ((resolver-rule-policy :initarg :resolver-rule-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or resolver-rule-policy common-lisp:null)
                         :accessor
                         struct-shape-get-resolver-rule-policy-response-resolver-rule-policy
                         :shape "ResolverRulePolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-rule-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resolver-rule-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-rule-policy-response
                    'make-get-resolver-rule-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-rule-policy))
      (common-lisp:list
       (common-lisp:cons "ResolverRulePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-rule-request common-lisp:nil
                       ((resolver-rule-id :initarg :resolver-rule-id :initform
                         (common-lisp:error ":resolver-rule-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-get-resolver-rule-request-resolver-rule-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resolver-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-rule-request
                    'make-get-resolver-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule-id))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resolver-rule-response common-lisp:nil
                       ((resolver-rule :initarg :resolver-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or resolver-rule common-lisp:null)
                         :accessor
                         struct-shape-get-resolver-rule-response-resolver-rule
                         :shape "ResolverRule" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resolver-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resolver-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resolver-rule-response
                    'make-get-resolver-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule))
      (common-lisp:list
       (common-lisp:cons "ResolverRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-firewall-domains-request common-lisp:nil
                       ((firewall-domain-list-id :initarg
                         :firewall-domain-list-id :initform
                         (common-lisp:error
                          ":firewall-domain-list-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-import-firewall-domains-request-firewall-domain-list-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operation :initarg :operation :initform
                         (common-lisp:error ":operation is required") :type
                         (common-lisp:or firewall-domain-import-operation
                                         common-lisp:null)
                         :accessor
                         struct-shape-import-firewall-domains-request-operation
                         :shape "FirewallDomainImportOperation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-file-url :initarg :domain-file-url :initform
                         (common-lisp:error ":domain-file-url is required")
                         :type
                         (common-lisp:or domain-list-file-url common-lisp:null)
                         :accessor
                         struct-shape-import-firewall-domains-request-domain-file-url
                         :shape "DomainListFileUrl" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-firewall-domains-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-firewall-domains-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-firewall-domains-request
                    'make-import-firewall-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-firewall-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-firewall-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-file-url))
      (common-lisp:list
       (common-lisp:cons "DomainFileUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-firewall-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-firewall-domains-response common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-import-firewall-domains-response-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-import-firewall-domains-response-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or firewall-domain-list-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-import-firewall-domains-response-status
                         :shape "FirewallDomainListStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-import-firewall-domains-response-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-firewall-domains-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-firewall-domains-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-firewall-domains-response
                    'make-import-firewall-domains-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-firewall-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-firewall-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-firewall-domains-response))
   common-lisp:nil))
(common-lisp:deftype instance-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-service-error-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-error-exception
                    'internal-service-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)
      (field-name :initarg :field-name :initform common-lisp:nil :reader
       invalid-parameter-exception-field-name)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message
                    'invalid-parameter-exception-field-name)))
(common-lisp:progn
 (common-lisp:define-condition invalid-policy-document
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-policy-document-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-policy-document 'invalid-policy-document-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tag-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-tag-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-tag-exception 'invalid-tag-exception-message)))
(common-lisp:deftype ip () 'common-lisp:string)
(common-lisp:deftype ip-address-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass ip-address-request common-lisp:nil
                       ((subnet-id :initarg :subnet-id :initform
                         (common-lisp:error ":subnet-id is required") :type
                         (common-lisp:or subnet-id common-lisp:null) :accessor
                         struct-shape-ip-address-request-subnet-id :shape
                         "SubnetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ip :initarg :ip :initform common-lisp:nil :type
                         (common-lisp:or ip common-lisp:null) :accessor
                         struct-shape-ip-address-request-ip :shape "Ip"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ipv6 :initarg :ipv6 :initform common-lisp:nil :type
                         (common-lisp:or ipv6 common-lisp:null) :accessor
                         struct-shape-ip-address-request-ipv6 :shape "Ipv6"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ip-address-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ip-address-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ip-address-request 'make-ip-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip))
      (common-lisp:list
       (common-lisp:cons "Ip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6))
      (common-lisp:list
       (common-lisp:cons "Ipv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ip-address-response common-lisp:nil
                       ((ip-id :initarg :ip-id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-ip-address-response-ip-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-id :initarg :subnet-id :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-id common-lisp:null) :accessor
                         struct-shape-ip-address-response-subnet-id :shape
                         "SubnetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ip :initarg :ip :initform common-lisp:nil :type
                         (common-lisp:or ip common-lisp:null) :accessor
                         struct-shape-ip-address-response-ip :shape "Ip"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ipv6 :initarg :ipv6 :initform common-lisp:nil :type
                         (common-lisp:or ipv6 common-lisp:null) :accessor
                         struct-shape-ip-address-response-ipv6 :shape "Ipv6"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or ip-address-status common-lisp:null)
                         :accessor struct-shape-ip-address-response-status
                         :shape "IpAddressStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-ip-address-response-status-message :shape
                         "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor
                         struct-shape-ip-address-response-creation-time :shape
                         "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modification-time :initarg :modification-time
                         :initform common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor
                         struct-shape-ip-address-response-modification-time
                         :shape "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ip-address-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ip-address-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ip-address-response 'make-ip-address-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-address-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-address-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-id))
      (common-lisp:list
       (common-lisp:cons "IpId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip))
      (common-lisp:list
       (common-lisp:cons "Ip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6))
      (common-lisp:list
       (common-lisp:cons "Ipv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-time))
      (common-lisp:list
       (common-lisp:cons "ModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-address-response))
   common-lisp:nil))
(common-lisp:deftype ip-address-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ip-address-update common-lisp:nil
                       ((ip-id :initarg :ip-id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-ip-address-update-ip-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-id :initarg :subnet-id :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-id common-lisp:null) :accessor
                         struct-shape-ip-address-update-subnet-id :shape
                         "SubnetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ip :initarg :ip :initform common-lisp:nil :type
                         (common-lisp:or ip common-lisp:null) :accessor
                         struct-shape-ip-address-update-ip :shape "Ip"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ipv6 :initarg :ipv6 :initform common-lisp:nil :type
                         (common-lisp:or ipv6 common-lisp:null) :accessor
                         struct-shape-ip-address-update-ipv6 :shape "Ipv6"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ip-address-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ip-address-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ip-address-update 'make-ip-address-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-address-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-address-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-id))
      (common-lisp:list
       (common-lisp:cons "IpId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip))
      (common-lisp:list
       (common-lisp:cons "Ip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6))
      (common-lisp:list
       (common-lisp:cons "Ipv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-address-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ip-addresses-request ()
   '(trivial-types:proper-list ip-address-request))
 (common-lisp:defun make-ip-addresses-request
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-address-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ip-addresses-response ()
   '(trivial-types:proper-list ip-address-response))
 (common-lisp:defun make-ip-addresses-response
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-address-response))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ipv6 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       limit-exceeded-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-message
                    'limit-exceeded-exception-resource-type)))
(common-lisp:deftype list-domain-max-results () 'common-lisp:integer)
(common-lisp:deftype list-firewall-configs-max-result () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-firewall-configs-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-firewall-configs-max-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-configs-request-max-results
                         :shape "ListFirewallConfigsMaxResult" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-firewall-configs-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-firewall-configs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-firewall-configs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-firewall-configs-request
                    'make-list-firewall-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-configs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-firewall-configs-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-firewall-configs-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (firewall-configs :initarg :firewall-configs :initform
                         common-lisp:nil :type
                         (common-lisp:or firewall-config-list common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-configs-response-firewall-configs
                         :shape "FirewallConfigList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-firewall-configs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-firewall-configs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-firewall-configs-response
                    'make-list-firewall-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-configs))
      (common-lisp:list
       (common-lisp:cons "FirewallConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-firewall-domain-lists-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-domain-lists-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-firewall-domain-lists-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-firewall-domain-lists-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-firewall-domain-lists-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-firewall-domain-lists-request
                    'make-list-firewall-domain-lists-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domain-lists-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domain-lists-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domain-lists-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-firewall-domain-lists-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-firewall-domain-lists-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (firewall-domain-lists :initarg :firewall-domain-lists
                         :initform common-lisp:nil :type
                         (common-lisp:or firewall-domain-list-metadata-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-domain-lists-response-firewall-domain-lists
                         :shape "FirewallDomainListMetadataList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-firewall-domain-lists-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-firewall-domain-lists-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-firewall-domain-lists-response
                    'make-list-firewall-domain-lists-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domain-lists-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domain-lists-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-lists))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainLists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domain-lists-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-firewall-domains-request common-lisp:nil
                       ((firewall-domain-list-id :initarg
                         :firewall-domain-list-id :initform
                         (common-lisp:error
                          ":firewall-domain-list-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-domains-request-firewall-domain-list-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-domain-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-domains-request-max-results
                         :shape "ListDomainMaxResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-firewall-domains-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-firewall-domains-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-firewall-domains-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-firewall-domains-request
                    'make-list-firewall-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-firewall-domains-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-firewall-domains-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domains :initarg :domains :initform common-lisp:nil
                         :type
                         (common-lisp:or firewall-domains common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-domains-response-domains
                         :shape "FirewallDomains" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-firewall-domains-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-firewall-domains-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-firewall-domains-response
                    'make-list-firewall-domains-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "Domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-firewall-rule-group-associations-request
                       common-lisp:nil
                       ((firewall-rule-group-id :initarg
                         :firewall-rule-group-id :initform common-lisp:nil
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-rule-group-associations-request-firewall-rule-group-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-rule-group-associations-request-vpc-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (priority :initarg :priority :initform common-lisp:nil
                         :type (common-lisp:or priority common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-rule-group-associations-request-priority
                         :shape "Priority" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or firewall-rule-group-association-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-rule-group-associations-request-status
                         :shape "FirewallRuleGroupAssociationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-rule-group-associations-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-firewall-rule-group-associations-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-firewall-rule-group-associations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-firewall-rule-group-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-firewall-rule-group-associations-request
                    'make-list-firewall-rule-group-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-group-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-group-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-group-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-firewall-rule-group-associations-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-firewall-rule-group-associations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (firewall-rule-group-associations :initarg
                         :firewall-rule-group-associations :initform
                         common-lisp:nil :type
                         (common-lisp:or firewall-rule-group-associations
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-rule-group-associations-response-firewall-rule-group-associations
                         :shape "FirewallRuleGroupAssociations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-firewall-rule-group-associations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-firewall-rule-group-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-firewall-rule-group-associations-response
                    'make-list-firewall-rule-group-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-group-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-group-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-associations))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-group-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-firewall-rule-groups-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-rule-groups-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-firewall-rule-groups-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-firewall-rule-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-firewall-rule-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-firewall-rule-groups-request
                    'make-list-firewall-rule-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-firewall-rule-groups-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-firewall-rule-groups-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (firewall-rule-groups :initarg :firewall-rule-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or firewall-rule-group-metadata-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-rule-groups-response-firewall-rule-groups
                         :shape "FirewallRuleGroupMetadataList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-firewall-rule-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-firewall-rule-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-firewall-rule-groups-response
                    'make-list-firewall-rule-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-groups))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-firewall-rules-request common-lisp:nil
                       ((firewall-rule-group-id :initarg
                         :firewall-rule-group-id :initform
                         (common-lisp:error
                          ":firewall-rule-group-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-rules-request-firewall-rule-group-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (priority :initarg :priority :initform common-lisp:nil
                         :type (common-lisp:or priority common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-rules-request-priority
                         :shape "Priority" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or action common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-rules-request-action :shape
                         "Action" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-rules-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-firewall-rules-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-firewall-rules-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-firewall-rules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-firewall-rules-request
                    'make-list-firewall-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-firewall-rules-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-firewall-rules-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (firewall-rules :initarg :firewall-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or firewall-rules common-lisp:null)
                         :accessor
                         struct-shape-list-firewall-rules-response-firewall-rules
                         :shape "FirewallRules" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-firewall-rules-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-firewall-rules-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-firewall-rules-response
                    'make-list-firewall-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-rules))
      (common-lisp:list
       (common-lisp:cons "FirewallRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-outpost-resolvers-request common-lisp:nil
                       ((outpost-arn :initarg :outpost-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-arn common-lisp:null)
                         :accessor
                         struct-shape-list-outpost-resolvers-request-outpost-arn
                         :shape "OutpostArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-outpost-resolvers-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-outpost-resolvers-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-outpost-resolvers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-outpost-resolvers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-outpost-resolvers-request
                    'make-list-outpost-resolvers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-outpost-resolvers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-outpost-resolvers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-arn))
      (common-lisp:list
       (common-lisp:cons "OutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-outpost-resolvers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-outpost-resolvers-response common-lisp:nil
                       ((outpost-resolvers :initarg :outpost-resolvers
                         :initform common-lisp:nil :type
                         (common-lisp:or outpost-resolver-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-outpost-resolvers-response-outpost-resolvers
                         :shape "OutpostResolverList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-outpost-resolvers-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-outpost-resolvers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-outpost-resolvers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-outpost-resolvers-response
                    'make-list-outpost-resolvers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-outpost-resolvers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-outpost-resolvers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-resolvers))
      (common-lisp:list
       (common-lisp:cons "OutpostResolvers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-outpost-resolvers-response))
   common-lisp:nil))
(common-lisp:deftype list-resolver-configs-max-result () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-resolver-configs-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or list-resolver-configs-max-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-configs-request-max-results
                         :shape "ListResolverConfigsMaxResult" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resolver-configs-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolver-configs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolver-configs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolver-configs-request
                    'make-list-resolver-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-configs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolver-configs-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resolver-configs-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-configs :initarg :resolver-configs :initform
                         common-lisp:nil :type
                         (common-lisp:or resolver-config-list common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-configs-response-resolver-configs
                         :shape "ResolverConfigList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolver-configs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolver-configs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolver-configs-response
                    'make-list-resolver-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-configs))
      (common-lisp:list
       (common-lisp:cons "ResolverConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolver-dnssec-configs-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-dnssec-configs-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resolver-dnssec-configs-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-dnssec-configs-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolver-dnssec-configs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolver-dnssec-configs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolver-dnssec-configs-request
                    'make-list-resolver-dnssec-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-dnssec-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-dnssec-configs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-dnssec-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolver-dnssec-configs-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resolver-dnssec-configs-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-dnssec-configs :initarg
                         :resolver-dnssec-configs :initform common-lisp:nil
                         :type
                         (common-lisp:or resolver-dnssec-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-dnssec-configs-response-resolver-dnssec-configs
                         :shape "ResolverDnssecConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolver-dnssec-configs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolver-dnssec-configs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolver-dnssec-configs-response
                    'make-list-resolver-dnssec-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-dnssec-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-dnssec-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-dnssec-configs))
      (common-lisp:list
       (common-lisp:cons "ResolverDnssecConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-dnssec-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolver-endpoint-ip-addresses-request
                       common-lisp:nil
                       ((resolver-endpoint-id :initarg :resolver-endpoint-id
                         :initform
                         (common-lisp:error
                          ":resolver-endpoint-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-endpoint-ip-addresses-request-resolver-endpoint-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-endpoint-ip-addresses-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resolver-endpoint-ip-addresses-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolver-endpoint-ip-addresses-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolver-endpoint-ip-addresses-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolver-endpoint-ip-addresses-request
                    'make-list-resolver-endpoint-ip-addresses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoint-ip-addresses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoint-ip-addresses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoint-ip-addresses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolver-endpoint-ip-addresses-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resolver-endpoint-ip-addresses-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-endpoint-ip-addresses-response-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-addresses :initarg :ip-addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-addresses-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-endpoint-ip-addresses-response-ip-addresses
                         :shape "IpAddressesResponse" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolver-endpoint-ip-addresses-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolver-endpoint-ip-addresses-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolver-endpoint-ip-addresses-response
                    'make-list-resolver-endpoint-ip-addresses-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoint-ip-addresses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoint-ip-addresses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-addresses))
      (common-lisp:list
       (common-lisp:cons "IpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoint-ip-addresses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolver-endpoints-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-endpoints-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resolver-endpoints-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-endpoints-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolver-endpoints-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolver-endpoints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolver-endpoints-request
                    'make-list-resolver-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolver-endpoints-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resolver-endpoints-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-endpoints-response-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-endpoints :initarg :resolver-endpoints
                         :initform common-lisp:nil :type
                         (common-lisp:or resolver-endpoints common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-endpoints-response-resolver-endpoints
                         :shape "ResolverEndpoints" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolver-endpoints-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolver-endpoints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolver-endpoints-response
                    'make-list-resolver-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-endpoints))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolver-query-log-config-associations-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-query-log-config-associations-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resolver-query-log-config-associations-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-query-log-config-associations-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type (common-lisp:or sort-by-key common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-query-log-config-associations-request-sort-by
                         :shape "SortByKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-list-resolver-query-log-config-associations-request-sort-order
                         :shape "SortOrder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolver-query-log-config-associations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolver-query-log-config-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolver-query-log-config-associations-request
                    'make-list-resolver-query-log-config-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-config-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-config-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-config-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolver-query-log-config-associations-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resolver-query-log-config-associations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-count :initarg :total-count :initform
                         common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-list-resolver-query-log-config-associations-response-total-count
                         :shape "Count" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-filtered-count :initarg :total-filtered-count
                         :initform common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-list-resolver-query-log-config-associations-response-total-filtered-count
                         :shape "Count" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-query-log-config-associations :initarg
                         :resolver-query-log-config-associations :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resolver-query-log-config-association-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-query-log-config-associations-response-resolver-query-log-config-associations
                         :shape "ResolverQueryLogConfigAssociationList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolver-query-log-config-associations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolver-query-log-config-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolver-query-log-config-associations-response
                    'make-list-resolver-query-log-config-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-config-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-config-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-filtered-count))
      (common-lisp:list
       (common-lisp:cons "TotalFilteredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-associations))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-config-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolver-query-log-configs-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-query-log-configs-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resolver-query-log-configs-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-query-log-configs-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type (common-lisp:or sort-by-key common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-query-log-configs-request-sort-by
                         :shape "SortByKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-list-resolver-query-log-configs-request-sort-order
                         :shape "SortOrder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolver-query-log-configs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolver-query-log-configs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolver-query-log-configs-request
                    'make-list-resolver-query-log-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-configs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolver-query-log-configs-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resolver-query-log-configs-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-count :initarg :total-count :initform
                         common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-list-resolver-query-log-configs-response-total-count
                         :shape "Count" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-filtered-count :initarg :total-filtered-count
                         :initform common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-list-resolver-query-log-configs-response-total-filtered-count
                         :shape "Count" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-query-log-configs :initarg
                         :resolver-query-log-configs :initform common-lisp:nil
                         :type
                         (common-lisp:or resolver-query-log-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-query-log-configs-response-resolver-query-log-configs
                         :shape "ResolverQueryLogConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolver-query-log-configs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolver-query-log-configs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolver-query-log-configs-response
                    'make-list-resolver-query-log-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-filtered-count))
      (common-lisp:list
       (common-lisp:cons "TotalFilteredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-configs))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolver-rule-associations-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-rule-associations-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resolver-rule-associations-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-rule-associations-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolver-rule-associations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolver-rule-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolver-rule-associations-request
                    'make-list-resolver-rule-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rule-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rule-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rule-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolver-rule-associations-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resolver-rule-associations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-rule-associations-response-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-rule-associations :initarg
                         :resolver-rule-associations :initform common-lisp:nil
                         :type
                         (common-lisp:or resolver-rule-associations
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-rule-associations-response-resolver-rule-associations
                         :shape "ResolverRuleAssociations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolver-rule-associations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resolver-rule-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolver-rule-associations-response
                    'make-list-resolver-rule-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rule-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rule-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-rule-associations))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rule-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolver-rules-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-rules-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resolver-rules-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-rules-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolver-rules-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-resolver-rules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolver-rules-request
                    'make-list-resolver-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resolver-rules-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-resolver-rules-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-rules-response-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-rules :initarg :resolver-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or resolver-rules common-lisp:null)
                         :accessor
                         struct-shape-list-resolver-rules-response-resolver-rules
                         :shape "ResolverRules" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resolver-rules-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-resolver-rules-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resolver-rules-response
                    'make-list-resolver-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rules))
      (common-lisp:list
       (common-lisp:cons "ResolverRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype mutation-protection-status () 'common-lisp:string)
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype outpost-arn () 'common-lisp:string)
(common-lisp:deftype outpost-instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass outpost-resolver common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-outpost-resolver-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor struct-shape-outpost-resolver-creation-time
                         :shape "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modification-time :initarg :modification-time
                         :initform common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor
                         struct-shape-outpost-resolver-modification-time :shape
                         "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creator-request-id :initarg :creator-request-id
                         :initform common-lisp:nil :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-outpost-resolver-creator-request-id
                         :shape "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-outpost-resolver-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-count :initarg :instance-count :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-count common-lisp:null)
                         :accessor struct-shape-outpost-resolver-instance-count
                         :shape "InstanceCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-instance-type :initarg
                         :preferred-instance-type :initform common-lisp:nil
                         :type
                         (common-lisp:or outpost-instance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-outpost-resolver-preferred-instance-type
                         :shape "OutpostInstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or outpost-resolver-name
                                         common-lisp:null)
                         :accessor struct-shape-outpost-resolver-name :shape
                         "OutpostResolverName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or outpost-resolver-status
                                         common-lisp:null)
                         :accessor struct-shape-outpost-resolver-status :shape
                         "OutpostResolverStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-resolver-status-message
                                         common-lisp:null)
                         :accessor struct-shape-outpost-resolver-status-message
                         :shape "OutpostResolverStatusMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (outpost-arn :initarg :outpost-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-arn common-lisp:null)
                         :accessor struct-shape-outpost-resolver-outpost-arn
                         :shape "OutpostArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-outpost-resolver
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'outpost-resolver
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'outpost-resolver 'make-outpost-resolver))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input outpost-resolver))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input outpost-resolver))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-time))
      (common-lisp:list
       (common-lisp:cons "ModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-instance-type))
      (common-lisp:list
       (common-lisp:cons "PreferredInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-arn))
      (common-lisp:list
       (common-lisp:cons "OutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input outpost-resolver))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype outpost-resolver-list ()
   '(trivial-types:proper-list outpost-resolver))
 (common-lisp:defun make-outpost-resolver-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list outpost-resolver))
   aws-sdk/generator/shape::members))
(common-lisp:deftype outpost-resolver-name () 'common-lisp:string)
(common-lisp:deftype outpost-resolver-status () 'common-lisp:string)
(common-lisp:deftype outpost-resolver-status-message () 'common-lisp:string)
(common-lisp:deftype port () 'common-lisp:integer)
(common-lisp:deftype priority () 'common-lisp:integer)
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype protocol-list () '(trivial-types:proper-list protocol))
 (common-lisp:defun make-protocol-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list protocol))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-firewall-rule-group-policy-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-put-firewall-rule-group-policy-request-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (firewall-rule-group-policy :initarg
                         :firewall-rule-group-policy :initform
                         (common-lisp:error
                          ":firewall-rule-group-policy is required")
                         :type
                         (common-lisp:or firewall-rule-group-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-firewall-rule-group-policy-request-firewall-rule-group-policy
                         :shape "FirewallRuleGroupPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-firewall-rule-group-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-firewall-rule-group-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-firewall-rule-group-policy-request
                    'make-put-firewall-rule-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-firewall-rule-group-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-firewall-rule-group-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-policy))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-firewall-rule-group-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-firewall-rule-group-policy-response common-lisp:nil
                       ((return-value :initarg :return-value :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-put-firewall-rule-group-policy-response-return-value
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-firewall-rule-group-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-firewall-rule-group-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-firewall-rule-group-policy-response
                    'make-put-firewall-rule-group-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-firewall-rule-group-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-firewall-rule-group-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-value))
      (common-lisp:list
       (common-lisp:cons "ReturnValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-firewall-rule-group-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resolver-query-log-config-policy-request
                       common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-put-resolver-query-log-config-policy-request-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resolver-query-log-config-policy :initarg
                         :resolver-query-log-config-policy :initform
                         (common-lisp:error
                          ":resolver-query-log-config-policy is required")
                         :type
                         (common-lisp:or resolver-query-log-config-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-resolver-query-log-config-policy-request-resolver-query-log-config-policy
                         :shape "ResolverQueryLogConfigPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resolver-query-log-config-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-resolver-query-log-config-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resolver-query-log-config-policy-request
                    'make-put-resolver-query-log-config-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-query-log-config-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-query-log-config-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-policy))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-query-log-config-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resolver-query-log-config-policy-response
                       common-lisp:nil
                       ((return-value :initarg :return-value :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-put-resolver-query-log-config-policy-response-return-value
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resolver-query-log-config-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-resolver-query-log-config-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resolver-query-log-config-policy-response
                    'make-put-resolver-query-log-config-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-query-log-config-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-query-log-config-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-value))
      (common-lisp:list
       (common-lisp:cons "ReturnValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-query-log-config-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resolver-rule-policy-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-put-resolver-rule-policy-request-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resolver-rule-policy :initarg :resolver-rule-policy
                         :initform
                         (common-lisp:error
                          ":resolver-rule-policy is required")
                         :type
                         (common-lisp:or resolver-rule-policy common-lisp:null)
                         :accessor
                         struct-shape-put-resolver-rule-policy-request-resolver-rule-policy
                         :shape "ResolverRulePolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resolver-rule-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-resolver-rule-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resolver-rule-policy-request
                    'make-put-resolver-rule-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-rule-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-rule-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-rule-policy))
      (common-lisp:list
       (common-lisp:cons "ResolverRulePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-rule-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resolver-rule-policy-response common-lisp:nil
                       ((return-value :initarg :return-value :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-put-resolver-rule-policy-response-return-value
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resolver-rule-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-resolver-rule-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resolver-rule-policy-response
                    'make-put-resolver-rule-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-rule-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-rule-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-value))
      (common-lisp:list
       (common-lisp:cons "ReturnValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-rule-policy-response))
   common-lisp:nil))
(common-lisp:deftype qtype () 'common-lisp:string)
(common-lisp:deftype resolver-autodefined-reverse-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resolver-config common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-resolver-config-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-resolver-config-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-id :initarg :owner-id :initform common-lisp:nil
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor struct-shape-resolver-config-owner-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (autodefined-reverse :initarg :autodefined-reverse
                         :initform common-lisp:nil :type
                         (common-lisp:or resolver-autodefined-reverse-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-resolver-config-autodefined-reverse
                         :shape "ResolverAutodefinedReverseStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resolver-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resolver-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resolver-config 'make-resolver-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolver-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolver-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'autodefined-reverse))
      (common-lisp:list
       (common-lisp:cons "AutodefinedReverse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolver-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resolver-config-list ()
   '(trivial-types:proper-list resolver-config))
 (common-lisp:defun make-resolver-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resolver-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resolver-dnssecvalidation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resolver-dnssec-config common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-resolver-dnssec-config-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-id :initarg :owner-id :initform common-lisp:nil
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor struct-shape-resolver-dnssec-config-owner-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-resolver-dnssec-config-resource-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (validation-status :initarg :validation-status
                         :initform common-lisp:nil :type
                         (common-lisp:or resolver-dnssecvalidation-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-resolver-dnssec-config-validation-status
                         :shape "ResolverDNSSECValidationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resolver-dnssec-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resolver-dnssec-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resolver-dnssec-config 'make-resolver-dnssec-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resolver-dnssec-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resolver-dnssec-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-status))
      (common-lisp:list
       (common-lisp:cons "ValidationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resolver-dnssec-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resolver-dnssec-config-list ()
   '(trivial-types:proper-list resolver-dnssec-config))
 (common-lisp:defun make-resolver-dnssec-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resolver-dnssec-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resolver-endpoint common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-resolver-endpoint-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creator-request-id :initarg :creator-request-id
                         :initform common-lisp:nil :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-resolver-endpoint-creator-request-id
                         :shape "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-resolver-endpoint-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-resolver-endpoint-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor
                         struct-shape-resolver-endpoint-security-group-ids
                         :shape "SecurityGroupIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (direction :initarg :direction :initform
                         common-lisp:nil :type
                         (common-lisp:or resolver-endpoint-direction
                                         common-lisp:null)
                         :accessor struct-shape-resolver-endpoint-direction
                         :shape "ResolverEndpointDirection" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ip-address-count :initarg :ip-address-count :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-count common-lisp:null)
                         :accessor
                         struct-shape-resolver-endpoint-ip-address-count :shape
                         "IpAddressCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (host-vpcid :initarg :host-vpcid :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-resolver-endpoint-host-vpcid
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or resolver-endpoint-status
                                         common-lisp:null)
                         :accessor struct-shape-resolver-endpoint-status :shape
                         "ResolverEndpointStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-resolver-endpoint-status-message :shape
                         "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor struct-shape-resolver-endpoint-creation-time
                         :shape "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modification-time :initarg :modification-time
                         :initform common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor
                         struct-shape-resolver-endpoint-modification-time
                         :shape "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (outpost-arn :initarg :outpost-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-arn common-lisp:null)
                         :accessor struct-shape-resolver-endpoint-outpost-arn
                         :shape "OutpostArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-instance-type :initarg
                         :preferred-instance-type :initform common-lisp:nil
                         :type
                         (common-lisp:or outpost-instance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-resolver-endpoint-preferred-instance-type
                         :shape "OutpostInstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-endpoint-type :initarg
                         :resolver-endpoint-type :initform common-lisp:nil
                         :type
                         (common-lisp:or resolver-endpoint-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-resolver-endpoint-resolver-endpoint-type
                         :shape "ResolverEndpointType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (protocols :initarg :protocols :initform
                         common-lisp:nil :type
                         (common-lisp:or protocol-list common-lisp:null)
                         :accessor struct-shape-resolver-endpoint-protocols
                         :shape "ProtocolList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resolver-endpoint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resolver-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resolver-endpoint 'make-resolver-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolver-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolver-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direction))
      (common-lisp:list
       (common-lisp:cons "Direction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-count))
      (common-lisp:list
       (common-lisp:cons "IpAddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-vpcid))
      (common-lisp:list
       (common-lisp:cons "HostVPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-time))
      (common-lisp:list
       (common-lisp:cons "ModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-arn))
      (common-lisp:list
       (common-lisp:cons "OutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-instance-type))
      (common-lisp:list
       (common-lisp:cons "PreferredInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-type))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolver-endpoint))
   common-lisp:nil))
(common-lisp:deftype resolver-endpoint-direction () 'common-lisp:string)
(common-lisp:deftype resolver-endpoint-status () 'common-lisp:string)
(common-lisp:deftype resolver-endpoint-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resolver-endpoints ()
   '(trivial-types:proper-list resolver-endpoint))
 (common-lisp:defun make-resolver-endpoints
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resolver-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resolver-query-log-config common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-resolver-query-log-config-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-id :initarg :owner-id :initform common-lisp:nil
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-resolver-query-log-config-owner-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or resolver-query-log-config-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-resolver-query-log-config-status :shape
                         "ResolverQueryLogConfigStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (share-status :initarg :share-status :initform
                         common-lisp:nil :type
                         (common-lisp:or share-status common-lisp:null)
                         :accessor
                         struct-shape-resolver-query-log-config-share-status
                         :shape "ShareStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (association-count :initarg :association-count
                         :initform common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-resolver-query-log-config-association-count
                         :shape "Count" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-resolver-query-log-config-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or resolver-query-log-config-name
                                         common-lisp:null)
                         :accessor struct-shape-resolver-query-log-config-name
                         :shape "ResolverQueryLogConfigName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination-arn :initarg :destination-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or destination-arn common-lisp:null)
                         :accessor
                         struct-shape-resolver-query-log-config-destination-arn
                         :shape "DestinationArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creator-request-id :initarg :creator-request-id
                         :initform common-lisp:nil :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-resolver-query-log-config-creator-request-id
                         :shape "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor
                         struct-shape-resolver-query-log-config-creation-time
                         :shape "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resolver-query-log-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resolver-query-log-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resolver-query-log-config
                    'make-resolver-query-log-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resolver-query-log-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resolver-query-log-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-status))
      (common-lisp:list
       (common-lisp:cons "ShareStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-count))
      (common-lisp:list
       (common-lisp:cons "AssociationCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resolver-query-log-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resolver-query-log-config-association common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-resolver-query-log-config-association-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-query-log-config-id :initarg
                         :resolver-query-log-config-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-resolver-query-log-config-association-resolver-query-log-config-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-resolver-query-log-config-association-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          resolver-query-log-config-association-status
                          common-lisp:null)
                         :accessor
                         struct-shape-resolver-query-log-config-association-status
                         :shape "ResolverQueryLogConfigAssociationStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or
                          resolver-query-log-config-association-error
                          common-lisp:null)
                         :accessor
                         struct-shape-resolver-query-log-config-association-error
                         :shape "ResolverQueryLogConfigAssociationError"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          resolver-query-log-config-association-error-message
                          common-lisp:null)
                         :accessor
                         struct-shape-resolver-query-log-config-association-error-message
                         :shape "ResolverQueryLogConfigAssociationErrorMessage"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor
                         struct-shape-resolver-query-log-config-association-creation-time
                         :shape "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resolver-query-log-config-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resolver-query-log-config-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resolver-query-log-config-association
                    'make-resolver-query-log-config-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resolver-query-log-config-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resolver-query-log-config-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-id))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resolver-query-log-config-association))
   common-lisp:nil))
(common-lisp:deftype resolver-query-log-config-association-error ()
  'common-lisp:string)
(common-lisp:deftype resolver-query-log-config-association-error-message ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resolver-query-log-config-association-list ()
   '(trivial-types:proper-list resolver-query-log-config-association))
 (common-lisp:defun make-resolver-query-log-config-association-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resolver-query-log-config-association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resolver-query-log-config-association-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resolver-query-log-config-list ()
   '(trivial-types:proper-list resolver-query-log-config))
 (common-lisp:defun make-resolver-query-log-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resolver-query-log-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resolver-query-log-config-name () 'common-lisp:string)
(common-lisp:deftype resolver-query-log-config-policy () 'common-lisp:string)
(common-lisp:deftype resolver-query-log-config-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resolver-rule common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-resolver-rule-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creator-request-id :initarg :creator-request-id
                         :initform common-lisp:nil :type
                         (common-lisp:or creator-request-id common-lisp:null)
                         :accessor
                         struct-shape-resolver-rule-creator-request-id :shape
                         "CreatorRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-resolver-rule-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor struct-shape-resolver-rule-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or resolver-rule-status common-lisp:null)
                         :accessor struct-shape-resolver-rule-status :shape
                         "ResolverRuleStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor struct-shape-resolver-rule-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-type :initarg :rule-type :initform
                         common-lisp:nil :type
                         (common-lisp:or rule-type-option common-lisp:null)
                         :accessor struct-shape-resolver-rule-rule-type :shape
                         "RuleTypeOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-resolver-rule-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-ips :initarg :target-ips :initform
                         common-lisp:nil :type
                         (common-lisp:or target-list common-lisp:null)
                         :accessor struct-shape-resolver-rule-target-ips :shape
                         "TargetList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resolver-endpoint-id :initarg :resolver-endpoint-id
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-resolver-rule-resolver-endpoint-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owner-id :initarg :owner-id :initform common-lisp:nil
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor struct-shape-resolver-rule-owner-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (share-status :initarg :share-status :initform
                         common-lisp:nil :type
                         (common-lisp:or share-status common-lisp:null)
                         :accessor struct-shape-resolver-rule-share-status
                         :shape "ShareStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor struct-shape-resolver-rule-creation-time
                         :shape "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modification-time :initarg :modification-time
                         :initform common-lisp:nil :type
                         (common-lisp:or rfc3339time-string common-lisp:null)
                         :accessor struct-shape-resolver-rule-modification-time
                         :shape "Rfc3339TimeString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resolver-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resolver-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resolver-rule 'make-resolver-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolver-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolver-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-type))
      (common-lisp:list
       (common-lisp:cons "RuleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-ips))
      (common-lisp:list
       (common-lisp:cons "TargetIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-status))
      (common-lisp:list
       (common-lisp:cons "ShareStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-time))
      (common-lisp:list
       (common-lisp:cons "ModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolver-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resolver-rule-association common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-resolver-rule-association-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-rule-id :initarg :resolver-rule-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-resolver-rule-association-resolver-rule-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-resolver-rule-association-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpcid :initarg :vpcid :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-resolver-rule-association-vpcid
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or resolver-rule-association-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-resolver-rule-association-status :shape
                         "ResolverRuleAssociationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-resolver-rule-association-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resolver-rule-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resolver-rule-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resolver-rule-association
                    'make-resolver-rule-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resolver-rule-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resolver-rule-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule-id))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcid))
      (common-lisp:list
       (common-lisp:cons "VPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resolver-rule-association))
   common-lisp:nil))
(common-lisp:deftype resolver-rule-association-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resolver-rule-associations ()
   '(trivial-types:proper-list resolver-rule-association))
 (common-lisp:defun make-resolver-rule-associations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resolver-rule-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resolver-rule-config common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-resolver-rule-config-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-ips :initarg :target-ips :initform
                         common-lisp:nil :type
                         (common-lisp:or target-list common-lisp:null)
                         :accessor struct-shape-resolver-rule-config-target-ips
                         :shape "TargetList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolver-endpoint-id :initarg :resolver-endpoint-id
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-resolver-rule-config-resolver-endpoint-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resolver-rule-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resolver-rule-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resolver-rule-config 'make-resolver-rule-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolver-rule-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolver-rule-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-ips))
      (common-lisp:list
       (common-lisp:cons "TargetIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolver-rule-config))
   common-lisp:nil))
(common-lisp:deftype resolver-rule-policy () 'common-lisp:string)
(common-lisp:deftype resolver-rule-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resolver-rules ()
   '(trivial-types:proper-list resolver-rule))
 (common-lisp:defun make-resolver-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resolver-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-exists-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-exists-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-exists-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-exists-exception
                    'resource-exists-exception-message
                    'resource-exists-exception-resource-type)))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-in-use-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message
                    'resource-in-use-exception-resource-type)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-type)))
(common-lisp:progn
 (common-lisp:define-condition resource-unavailable-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-unavailable-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-unavailable-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-unavailable-exception
                    'resource-unavailable-exception-message
                    'resource-unavailable-exception-resource-type)))
(common-lisp:deftype rfc3339time-string () 'common-lisp:string)
(common-lisp:deftype rule-type-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list resource-id))
 (common-lisp:defun make-security-group-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-principle () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype share-status () 'common-lisp:string)
(common-lisp:deftype sort-by-key () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-address common-lisp:nil
                       ((ip :initarg :ip :initform common-lisp:nil :type
                         (common-lisp:or ip common-lisp:null) :accessor
                         struct-shape-target-address-ip :shape "Ip" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-target-address-port :shape "Port"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ipv6 :initarg :ipv6 :initform common-lisp:nil :type
                         (common-lisp:or ipv6 common-lisp:null) :accessor
                         struct-shape-target-address-ipv6 :shape "Ipv6"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or protocol common-lisp:null)
                         :accessor struct-shape-target-address-protocol :shape
                         "Protocol" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-address
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target-address
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'target-address 'make-target-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip))
      (common-lisp:list
       (common-lisp:cons "Ip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6))
      (common-lisp:list
       (common-lisp:cons "Ipv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-list ()
   '(trivial-types:proper-list target-address))
 (common-lisp:defun make-target-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unknown-resource-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unknown-resource-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unknown-resource-exception
                    'unknown-resource-exception-message)))
(common-lisp:deftype unsigned () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-firewall-config-request common-lisp:nil
                       ((resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-config-request-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (firewall-fail-open :initarg :firewall-fail-open
                         :initform
                         (common-lisp:error ":firewall-fail-open is required")
                         :type
                         (common-lisp:or firewall-fail-open-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-config-request-firewall-fail-open
                         :shape "FirewallFailOpenStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-firewall-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-firewall-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-firewall-config-request
                    'make-update-firewall-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-fail-open))
      (common-lisp:list
       (common-lisp:cons "FirewallFailOpen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-firewall-config-response common-lisp:nil
                       ((firewall-config :initarg :firewall-config :initform
                         common-lisp:nil :type
                         (common-lisp:or firewall-config common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-config-response-firewall-config
                         :shape "FirewallConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-firewall-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-firewall-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-firewall-config-response
                    'make-update-firewall-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-config))
      (common-lisp:list
       (common-lisp:cons "FirewallConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-firewall-domains-request common-lisp:nil
                       ((firewall-domain-list-id :initarg
                         :firewall-domain-list-id :initform
                         (common-lisp:error
                          ":firewall-domain-list-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-domains-request-firewall-domain-list-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operation :initarg :operation :initform
                         (common-lisp:error ":operation is required") :type
                         (common-lisp:or firewall-domain-update-operation
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-domains-request-operation
                         :shape "FirewallDomainUpdateOperation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domains :initarg :domains :initform
                         (common-lisp:error ":domains is required") :type
                         (common-lisp:or firewall-domains common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-domains-request-domains
                         :shape "FirewallDomains" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-firewall-domains-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-firewall-domains-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-firewall-domains-request
                    'make-update-firewall-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "Domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-firewall-domains-response common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-domains-response-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-firewall-domains-response-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or firewall-domain-list-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-domains-response-status
                         :shape "FirewallDomainListStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-domains-response-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-firewall-domains-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-firewall-domains-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-firewall-domains-response
                    'make-update-firewall-domains-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-firewall-rule-group-association-request
                       common-lisp:nil
                       ((firewall-rule-group-association-id :initarg
                         :firewall-rule-group-association-id :initform
                         (common-lisp:error
                          ":firewall-rule-group-association-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-rule-group-association-request-firewall-rule-group-association-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (priority :initarg :priority :initform common-lisp:nil
                         :type (common-lisp:or priority common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-rule-group-association-request-priority
                         :shape "Priority" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mutation-protection :initarg :mutation-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or mutation-protection-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-rule-group-association-request-mutation-protection
                         :shape "MutationProtectionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-firewall-rule-group-association-request-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-firewall-rule-group-association-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-firewall-rule-group-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-firewall-rule-group-association-request
                    'make-update-firewall-rule-group-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-group-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-group-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-association-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mutation-protection))
      (common-lisp:list
       (common-lisp:cons "MutationProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-group-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-firewall-rule-group-association-response
                       common-lisp:nil
                       ((firewall-rule-group-association :initarg
                         :firewall-rule-group-association :initform
                         common-lisp:nil :type
                         (common-lisp:or firewall-rule-group-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-rule-group-association-response-firewall-rule-group-association
                         :shape "FirewallRuleGroupAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-firewall-rule-group-association-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-firewall-rule-group-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-firewall-rule-group-association-response
                    'make-update-firewall-rule-group-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-group-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-group-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-association))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-group-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-firewall-rule-request common-lisp:nil
                       ((firewall-rule-group-id :initarg
                         :firewall-rule-group-id :initform
                         (common-lisp:error
                          ":firewall-rule-group-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-rule-request-firewall-rule-group-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (firewall-domain-list-id :initarg
                         :firewall-domain-list-id :initform
                         (common-lisp:error
                          ":firewall-domain-list-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-rule-request-firewall-domain-list-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (priority :initarg :priority :initform common-lisp:nil
                         :type (common-lisp:or priority common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-rule-request-priority
                         :shape "Priority" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or action common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-rule-request-action
                         :shape "Action" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (block-response :initarg :block-response :initform
                         common-lisp:nil :type
                         (common-lisp:or block-response common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-rule-request-block-response
                         :shape "BlockResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (block-override-domain :initarg :block-override-domain
                         :initform common-lisp:nil :type
                         (common-lisp:or block-override-domain
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-rule-request-block-override-domain
                         :shape "BlockOverrideDomain" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (block-override-dns-type :initarg
                         :block-override-dns-type :initform common-lisp:nil
                         :type
                         (common-lisp:or block-override-dns-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-rule-request-block-override-dns-type
                         :shape "BlockOverrideDnsType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (block-override-ttl :initarg :block-override-ttl
                         :initform common-lisp:nil :type
                         (common-lisp:or block-override-ttl common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-rule-request-block-override-ttl
                         :shape "BlockOverrideTtl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-firewall-rule-request-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (qtype :initarg :qtype :initform common-lisp:nil :type
                         (common-lisp:or qtype common-lisp:null) :accessor
                         struct-shape-update-firewall-rule-request-qtype :shape
                         "Qtype" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-firewall-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-firewall-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-firewall-rule-request
                    'make-update-firewall-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-response))
      (common-lisp:list
       (common-lisp:cons "BlockResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-override-domain))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-override-dns-type))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideDnsType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-override-ttl))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideTtl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qtype))
      (common-lisp:list
       (common-lisp:cons "Qtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-firewall-rule-response common-lisp:nil
                       ((firewall-rule :initarg :firewall-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or firewall-rule common-lisp:null)
                         :accessor
                         struct-shape-update-firewall-rule-response-firewall-rule
                         :shape "FirewallRule" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-firewall-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-firewall-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-firewall-rule-response
                    'make-update-firewall-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-rule))
      (common-lisp:list
       (common-lisp:cons "FirewallRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ip-address common-lisp:nil
                       ((ip-id :initarg :ip-id :initform
                         (common-lisp:error ":ip-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-update-ip-address-ip-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ipv6 :initarg :ipv6 :initform
                         (common-lisp:error ":ipv6 is required") :type
                         (common-lisp:or ipv6 common-lisp:null) :accessor
                         struct-shape-update-ip-address-ipv6 :shape "Ipv6"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-ip-address
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-ip-address
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-ip-address 'make-update-ip-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-ip-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-ip-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-id))
      (common-lisp:list
       (common-lisp:cons "IpId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6))
      (common-lisp:list
       (common-lisp:cons "Ipv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-ip-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-ip-addresses ()
   '(trivial-types:proper-list update-ip-address))
 (common-lisp:defun make-update-ip-addresses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-ip-address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-outpost-resolver-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-update-outpost-resolver-request-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or outpost-resolver-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-outpost-resolver-request-name
                         :shape "OutpostResolverName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-count :initarg :instance-count :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-count common-lisp:null)
                         :accessor
                         struct-shape-update-outpost-resolver-request-instance-count
                         :shape "InstanceCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-instance-type :initarg
                         :preferred-instance-type :initform common-lisp:nil
                         :type
                         (common-lisp:or outpost-instance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-outpost-resolver-request-preferred-instance-type
                         :shape "OutpostInstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-outpost-resolver-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-outpost-resolver-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-outpost-resolver-request
                    'make-update-outpost-resolver-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-outpost-resolver-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-outpost-resolver-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-instance-type))
      (common-lisp:list
       (common-lisp:cons "PreferredInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-outpost-resolver-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-outpost-resolver-response common-lisp:nil
                       ((outpost-resolver :initarg :outpost-resolver :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-resolver common-lisp:null)
                         :accessor
                         struct-shape-update-outpost-resolver-response-outpost-resolver
                         :shape "OutpostResolver" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-outpost-resolver-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-outpost-resolver-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-outpost-resolver-response
                    'make-update-outpost-resolver-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-outpost-resolver-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-outpost-resolver-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-resolver))
      (common-lisp:list
       (common-lisp:cons "OutpostResolver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-outpost-resolver-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resolver-config-request common-lisp:nil
                       ((resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-config-request-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (autodefined-reverse-flag :initarg
                         :autodefined-reverse-flag :initform
                         (common-lisp:error
                          ":autodefined-reverse-flag is required")
                         :type
                         (common-lisp:or autodefined-reverse-flag
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-config-request-autodefined-reverse-flag
                         :shape "AutodefinedReverseFlag" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-resolver-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resolver-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-resolver-config-request
                    'make-update-resolver-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'autodefined-reverse-flag))
      (common-lisp:list
       (common-lisp:cons "AutodefinedReverseFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resolver-config-response common-lisp:nil
                       ((resolver-config :initarg :resolver-config :initform
                         common-lisp:nil :type
                         (common-lisp:or resolver-config common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-config-response-resolver-config
                         :shape "ResolverConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-resolver-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resolver-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-resolver-config-response
                    'make-update-resolver-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-config))
      (common-lisp:list
       (common-lisp:cons "ResolverConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resolver-dnssec-config-request common-lisp:nil
                       ((resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-dnssec-config-request-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validation :initarg :validation :initform
                         (common-lisp:error ":validation is required") :type
                         (common-lisp:or validation common-lisp:null) :accessor
                         struct-shape-update-resolver-dnssec-config-request-validation
                         :shape "Validation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-resolver-dnssec-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resolver-dnssec-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-resolver-dnssec-config-request
                    'make-update-resolver-dnssec-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-dnssec-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-dnssec-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation))
      (common-lisp:list
       (common-lisp:cons "Validation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-dnssec-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resolver-dnssec-config-response common-lisp:nil
                       ((resolver-dnssecconfig :initarg :resolver-dnssecconfig
                         :initform common-lisp:nil :type
                         (common-lisp:or resolver-dnssec-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-dnssec-config-response-resolver-dnssecconfig
                         :shape "ResolverDnssecConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-resolver-dnssec-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resolver-dnssec-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-resolver-dnssec-config-response
                    'make-update-resolver-dnssec-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-dnssec-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-dnssec-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-dnssecconfig))
      (common-lisp:list
       (common-lisp:cons "ResolverDNSSECConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-dnssec-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resolver-endpoint-request common-lisp:nil
                       ((resolver-endpoint-id :initarg :resolver-endpoint-id
                         :initform
                         (common-lisp:error
                          ":resolver-endpoint-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-endpoint-request-resolver-endpoint-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-resolver-endpoint-request-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resolver-endpoint-type :initarg
                         :resolver-endpoint-type :initform common-lisp:nil
                         :type
                         (common-lisp:or resolver-endpoint-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-endpoint-request-resolver-endpoint-type
                         :shape "ResolverEndpointType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (update-ip-addresses :initarg :update-ip-addresses
                         :initform common-lisp:nil :type
                         (common-lisp:or update-ip-addresses common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-endpoint-request-update-ip-addresses
                         :shape "UpdateIpAddresses" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocols :initarg :protocols :initform
                         common-lisp:nil :type
                         (common-lisp:or protocol-list common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-endpoint-request-protocols
                         :shape "ProtocolList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-resolver-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resolver-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-resolver-endpoint-request
                    'make-update-resolver-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-type))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "UpdateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resolver-endpoint-response common-lisp:nil
                       ((resolver-endpoint :initarg :resolver-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or resolver-endpoint common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-endpoint-response-resolver-endpoint
                         :shape "ResolverEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-resolver-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resolver-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-resolver-endpoint-response
                    'make-update-resolver-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-endpoint))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resolver-rule-request common-lisp:nil
                       ((resolver-rule-id :initarg :resolver-rule-id :initform
                         (common-lisp:error ":resolver-rule-id is required")
                         :type (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-rule-request-resolver-rule-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (config :initarg :config :initform
                         (common-lisp:error ":config is required") :type
                         (common-lisp:or resolver-rule-config common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-rule-request-config
                         :shape "ResolverRuleConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-resolver-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-resolver-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-resolver-rule-request
                    'make-update-resolver-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule-id))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config))
      (common-lisp:list
       (common-lisp:cons "Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resolver-rule-response common-lisp:nil
                       ((resolver-rule :initarg :resolver-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or resolver-rule common-lisp:null)
                         :accessor
                         struct-shape-update-resolver-rule-response-resolver-rule
                         :shape "ResolverRule" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-resolver-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resolver-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-resolver-rule-response
                    'make-update-resolver-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule))
      (common-lisp:list
       (common-lisp:cons "ResolverRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-rule-response))
   common-lisp:nil))
(common-lisp:deftype validation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun associate-firewall-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creator-request-id firewall-rule-group-id
                     vpc-id priority name mutation-protection tags)
   (common-lisp:declare
    (common-lisp:ignorable creator-request-id firewall-rule-group-id vpc-id
     priority name mutation-protection tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-firewall-rule-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "AssociateFirewallRuleGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-firewall-rule-group))
(common-lisp:progn
 (common-lisp:defun associate-resolver-endpoint-ip-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-endpoint-id ip-address)
   (common-lisp:declare
    (common-lisp:ignorable resolver-endpoint-id ip-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-resolver-endpoint-ip-address-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "AssociateResolverEndpointIpAddress"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-resolver-endpoint-ip-address))
(common-lisp:progn
 (common-lisp:defun associate-resolver-query-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-query-log-config-id resource-id)
   (common-lisp:declare
    (common-lisp:ignorable resolver-query-log-config-id resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-resolver-query-log-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "AssociateResolverQueryLogConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-resolver-query-log-config))
(common-lisp:progn
 (common-lisp:defun associate-resolver-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-rule-id name vpcid)
   (common-lisp:declare (common-lisp:ignorable resolver-rule-id name vpcid))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-resolver-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "AssociateResolverRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-resolver-rule))
(common-lisp:progn
 (common-lisp:defun create-firewall-domain-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creator-request-id name tags)
   (common-lisp:declare (common-lisp:ignorable creator-request-id name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-firewall-domain-list-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "CreateFirewallDomainList"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-firewall-domain-list))
(common-lisp:progn
 (common-lisp:defun create-firewall-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creator-request-id firewall-rule-group-id
                     firewall-domain-list-id priority action block-response
                     block-override-domain block-override-dns-type
                     block-override-ttl name qtype)
   (common-lisp:declare
    (common-lisp:ignorable creator-request-id firewall-rule-group-id
     firewall-domain-list-id priority action block-response
     block-override-domain block-override-dns-type block-override-ttl name
     qtype))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-firewall-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "CreateFirewallRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-firewall-rule))
(common-lisp:progn
 (common-lisp:defun create-firewall-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creator-request-id name tags)
   (common-lisp:declare (common-lisp:ignorable creator-request-id name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-firewall-rule-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "CreateFirewallRuleGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-firewall-rule-group))
(common-lisp:progn
 (common-lisp:defun create-outpost-resolver
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creator-request-id name instance-count
                     preferred-instance-type outpost-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable creator-request-id name instance-count
     preferred-instance-type outpost-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-outpost-resolver-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "CreateOutpostResolver"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-outpost-resolver))
(common-lisp:progn
 (common-lisp:defun create-resolver-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creator-request-id name
                     security-group-ids direction ip-addresses outpost-arn
                     preferred-instance-type tags resolver-endpoint-type
                     protocols)
   (common-lisp:declare
    (common-lisp:ignorable creator-request-id name security-group-ids direction
     ip-addresses outpost-arn preferred-instance-type tags
     resolver-endpoint-type protocols))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-resolver-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "CreateResolverEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-resolver-endpoint))
(common-lisp:progn
 (common-lisp:defun create-resolver-query-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name destination-arn creator-request-id
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable name destination-arn creator-request-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-resolver-query-log-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "CreateResolverQueryLogConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-resolver-query-log-config))
(common-lisp:progn
 (common-lisp:defun create-resolver-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creator-request-id name rule-type
                     domain-name target-ips resolver-endpoint-id tags)
   (common-lisp:declare
    (common-lisp:ignorable creator-request-id name rule-type domain-name
     target-ips resolver-endpoint-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-resolver-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "CreateResolverRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-resolver-rule))
(common-lisp:progn
 (common-lisp:defun delete-firewall-domain-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-domain-list-id)
   (common-lisp:declare (common-lisp:ignorable firewall-domain-list-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-firewall-domain-list-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteFirewallDomainList"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-firewall-domain-list))
(common-lisp:progn
 (common-lisp:defun delete-firewall-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-id
                     firewall-domain-list-id qtype)
   (common-lisp:declare
    (common-lisp:ignorable firewall-rule-group-id firewall-domain-list-id
     qtype))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-firewall-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteFirewallRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-firewall-rule))
(common-lisp:progn
 (common-lisp:defun delete-firewall-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-id)
   (common-lisp:declare (common-lisp:ignorable firewall-rule-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-firewall-rule-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteFirewallRuleGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-firewall-rule-group))
(common-lisp:progn
 (common-lisp:defun delete-outpost-resolver
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-outpost-resolver-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteOutpostResolver"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-outpost-resolver))
(common-lisp:progn
 (common-lisp:defun delete-resolver-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-endpoint-id)
   (common-lisp:declare (common-lisp:ignorable resolver-endpoint-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resolver-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteResolverEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-resolver-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-resolver-query-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-query-log-config-id)
   (common-lisp:declare (common-lisp:ignorable resolver-query-log-config-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-resolver-query-log-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteResolverQueryLogConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-resolver-query-log-config))
(common-lisp:progn
 (common-lisp:defun delete-resolver-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-rule-id)
   (common-lisp:declare (common-lisp:ignorable resolver-rule-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resolver-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteResolverRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-resolver-rule))
(common-lisp:progn
 (common-lisp:defun disassociate-firewall-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-association-id)
   (common-lisp:declare
    (common-lisp:ignorable firewall-rule-group-association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-firewall-rule-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DisassociateFirewallRuleGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-firewall-rule-group))
(common-lisp:progn
 (common-lisp:defun disassociate-resolver-endpoint-ip-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-endpoint-id ip-address)
   (common-lisp:declare
    (common-lisp:ignorable resolver-endpoint-id ip-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-resolver-endpoint-ip-address-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DisassociateResolverEndpointIpAddress"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-resolver-endpoint-ip-address))
(common-lisp:progn
 (common-lisp:defun disassociate-resolver-query-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-query-log-config-id resource-id)
   (common-lisp:declare
    (common-lisp:ignorable resolver-query-log-config-id resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-resolver-query-log-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DisassociateResolverQueryLogConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-resolver-query-log-config))
(common-lisp:progn
 (common-lisp:defun disassociate-resolver-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpcid resolver-rule-id)
   (common-lisp:declare (common-lisp:ignorable vpcid resolver-rule-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-resolver-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DisassociateResolverRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-resolver-rule))
(common-lisp:progn
 (common-lisp:defun get-firewall-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id)
   (common-lisp:declare (common-lisp:ignorable resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-firewall-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetFirewallConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-firewall-config))
(common-lisp:progn
 (common-lisp:defun get-firewall-domain-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-domain-list-id)
   (common-lisp:declare (common-lisp:ignorable firewall-domain-list-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-firewall-domain-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetFirewallDomainList"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-firewall-domain-list))
(common-lisp:progn
 (common-lisp:defun get-firewall-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-id)
   (common-lisp:declare (common-lisp:ignorable firewall-rule-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-firewall-rule-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetFirewallRuleGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-firewall-rule-group))
(common-lisp:progn
 (common-lisp:defun get-firewall-rule-group-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-association-id)
   (common-lisp:declare
    (common-lisp:ignorable firewall-rule-group-association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-firewall-rule-group-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetFirewallRuleGroupAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-firewall-rule-group-association))
(common-lisp:progn
 (common-lisp:defun get-firewall-rule-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-firewall-rule-group-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetFirewallRuleGroupPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-firewall-rule-group-policy))
(common-lisp:progn
 (common-lisp:defun get-outpost-resolver
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-outpost-resolver-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetOutpostResolver"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-outpost-resolver))
(common-lisp:progn
 (common-lisp:defun get-resolver-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id)
   (common-lisp:declare (common-lisp:ignorable resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resolver-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resolver-config))
(common-lisp:progn
 (common-lisp:defun get-resolver-dnssec-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id)
   (common-lisp:declare (common-lisp:ignorable resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-resolver-dnssec-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverDnssecConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resolver-dnssec-config))
(common-lisp:progn
 (common-lisp:defun get-resolver-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-endpoint-id)
   (common-lisp:declare (common-lisp:ignorable resolver-endpoint-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resolver-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resolver-endpoint))
(common-lisp:progn
 (common-lisp:defun get-resolver-query-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-query-log-config-id)
   (common-lisp:declare (common-lisp:ignorable resolver-query-log-config-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-resolver-query-log-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverQueryLogConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resolver-query-log-config))
(common-lisp:progn
 (common-lisp:defun get-resolver-query-log-config-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-query-log-config-association-id)
   (common-lisp:declare
    (common-lisp:ignorable resolver-query-log-config-association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-resolver-query-log-config-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverQueryLogConfigAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resolver-query-log-config-association))
(common-lisp:progn
 (common-lisp:defun get-resolver-query-log-config-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-resolver-query-log-config-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverQueryLogConfigPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resolver-query-log-config-policy))
(common-lisp:progn
 (common-lisp:defun get-resolver-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-rule-id)
   (common-lisp:declare (common-lisp:ignorable resolver-rule-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resolver-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resolver-rule))
(common-lisp:progn
 (common-lisp:defun get-resolver-rule-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-rule-association-id)
   (common-lisp:declare (common-lisp:ignorable resolver-rule-association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-resolver-rule-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverRuleAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resolver-rule-association))
(common-lisp:progn
 (common-lisp:defun get-resolver-rule-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resolver-rule-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverRulePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resolver-rule-policy))
(common-lisp:progn
 (common-lisp:defun import-firewall-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-domain-list-id operation
                     domain-file-url)
   (common-lisp:declare
    (common-lisp:ignorable firewall-domain-list-id operation domain-file-url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-firewall-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ImportFirewallDomains"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'import-firewall-domains))
(common-lisp:progn
 (common-lisp:defun list-firewall-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-firewall-configs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListFirewallConfigs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-firewall-configs))
(common-lisp:progn
 (common-lisp:defun list-firewall-domain-lists
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-firewall-domain-lists-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListFirewallDomainLists"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-firewall-domain-lists))
(common-lisp:progn
 (common-lisp:defun list-firewall-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-domain-list-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable firewall-domain-list-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-firewall-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListFirewallDomains"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-firewall-domains))
(common-lisp:progn
 (common-lisp:defun list-firewall-rule-group-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-id vpc-id priority
                     status max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable firewall-rule-group-id vpc-id priority status
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-firewall-rule-group-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListFirewallRuleGroupAssociations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-firewall-rule-group-associations))
(common-lisp:progn
 (common-lisp:defun list-firewall-rule-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-firewall-rule-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListFirewallRuleGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-firewall-rule-groups))
(common-lisp:progn
 (common-lisp:defun list-firewall-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-id priority action
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable firewall-rule-group-id priority action max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-firewall-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListFirewallRules"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-firewall-rules))
(common-lisp:progn
 (common-lisp:defun list-outpost-resolvers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key outpost-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable outpost-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-outpost-resolvers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListOutpostResolvers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-outpost-resolvers))
(common-lisp:progn
 (common-lisp:defun list-resolver-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resolver-configs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListResolverConfigs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-resolver-configs))
(common-lisp:progn
 (common-lisp:defun list-resolver-dnssec-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:declare (common-lisp:ignorable max-results next-token filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resolver-dnssec-configs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListResolverDnssecConfigs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-resolver-dnssec-configs))
(common-lisp:progn
 (common-lisp:defun list-resolver-endpoint-ip-addresses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-endpoint-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable resolver-endpoint-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resolver-endpoint-ip-addresses-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListResolverEndpointIpAddresses"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-resolver-endpoint-ip-addresses))
(common-lisp:progn
 (common-lisp:defun list-resolver-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:declare (common-lisp:ignorable max-results next-token filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resolver-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListResolverEndpoints"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-resolver-endpoints))
(common-lisp:progn
 (common-lisp:defun list-resolver-query-log-config-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token filters sort-by
                     sort-order)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token filters sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resolver-query-log-config-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListResolverQueryLogConfigAssociations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-resolver-query-log-config-associations))
(common-lisp:progn
 (common-lisp:defun list-resolver-query-log-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token filters sort-by
                     sort-order)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token filters sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resolver-query-log-configs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListResolverQueryLogConfigs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-resolver-query-log-configs))
(common-lisp:progn
 (common-lisp:defun list-resolver-rule-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:declare (common-lisp:ignorable max-results next-token filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resolver-rule-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListResolverRuleAssociations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-resolver-rule-associations))
(common-lisp:progn
 (common-lisp:defun list-resolver-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:declare (common-lisp:ignorable max-results next-token filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resolver-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListResolverRules"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-resolver-rules))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-firewall-rule-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn firewall-rule-group-policy)
   (common-lisp:declare (common-lisp:ignorable arn firewall-rule-group-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-firewall-rule-group-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "PutFirewallRuleGroupPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-firewall-rule-group-policy))
(common-lisp:progn
 (common-lisp:defun put-resolver-query-log-config-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn resolver-query-log-config-policy)
   (common-lisp:declare
    (common-lisp:ignorable arn resolver-query-log-config-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-resolver-query-log-config-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "PutResolverQueryLogConfigPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-resolver-query-log-config-policy))
(common-lisp:progn
 (common-lisp:defun put-resolver-rule-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn resolver-rule-policy)
   (common-lisp:declare (common-lisp:ignorable arn resolver-rule-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resolver-rule-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "PutResolverRulePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-resolver-rule-policy))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-firewall-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id firewall-fail-open)
   (common-lisp:declare (common-lisp:ignorable resource-id firewall-fail-open))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-firewall-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateFirewallConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-firewall-config))
(common-lisp:progn
 (common-lisp:defun update-firewall-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-domain-list-id operation
                     domains)
   (common-lisp:declare
    (common-lisp:ignorable firewall-domain-list-id operation domains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-firewall-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateFirewallDomains"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-firewall-domains))
(common-lisp:progn
 (common-lisp:defun update-firewall-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-id
                     firewall-domain-list-id priority action block-response
                     block-override-domain block-override-dns-type
                     block-override-ttl name qtype)
   (common-lisp:declare
    (common-lisp:ignorable firewall-rule-group-id firewall-domain-list-id
     priority action block-response block-override-domain
     block-override-dns-type block-override-ttl name qtype))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-firewall-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateFirewallRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-firewall-rule))
(common-lisp:progn
 (common-lisp:defun update-firewall-rule-group-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-association-id
                     priority mutation-protection name)
   (common-lisp:declare
    (common-lisp:ignorable firewall-rule-group-association-id priority
     mutation-protection name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-firewall-rule-group-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateFirewallRuleGroupAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-firewall-rule-group-association))
(common-lisp:progn
 (common-lisp:defun update-outpost-resolver
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id name instance-count
                     preferred-instance-type)
   (common-lisp:declare
    (common-lisp:ignorable id name instance-count preferred-instance-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-outpost-resolver-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateOutpostResolver"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-outpost-resolver))
(common-lisp:progn
 (common-lisp:defun update-resolver-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id autodefined-reverse-flag)
   (common-lisp:declare
    (common-lisp:ignorable resource-id autodefined-reverse-flag))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resolver-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateResolverConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-resolver-config))
(common-lisp:progn
 (common-lisp:defun update-resolver-dnssec-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id validation)
   (common-lisp:declare (common-lisp:ignorable resource-id validation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-resolver-dnssec-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateResolverDnssecConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-resolver-dnssec-config))
(common-lisp:progn
 (common-lisp:defun update-resolver-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-endpoint-id name
                     resolver-endpoint-type update-ip-addresses protocols)
   (common-lisp:declare
    (common-lisp:ignorable resolver-endpoint-id name resolver-endpoint-type
     update-ip-addresses protocols))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resolver-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateResolverEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-resolver-endpoint))
(common-lisp:progn
 (common-lisp:defun update-resolver-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-rule-id config)
   (common-lisp:declare (common-lisp:ignorable resolver-rule-id config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resolver-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateResolverRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-resolver-rule))
