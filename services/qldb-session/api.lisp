;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/qldb-session/api (:use)
                             (:nicknames #:aws/qldb-session)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/qldb-session/api)
(common-lisp:progn
 (common-lisp:define-condition qldb-session-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'qldb-session-error))
(common-lisp:progn
 (common-lisp:defclass qldb-session-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "qldb-session" :api-version
                        "2019-07-11" :host-prefix "session.qldb" :signing-name
                        "qldb" :global-host common-lisp:nil :target-prefix
                        "QLDBSession" :json-version "1.0"))
 (common-lisp:export 'qldb-session-request))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("CapacityExceededException" . capacity-exceeded-exception)
    ("InvalidSessionException" . invalid-session-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("OccConflictException" . occ-conflict-exception)
    ("RateExceededException" . rate-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass abort-transaction-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-abort-transaction-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'abort-transaction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'abort-transaction-request
                    'make-abort-transaction-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass abort-transaction-result common-lisp:nil
                       ((timing-information :initarg :timing-information
                         :initform common-lisp:nil :type
                         (common-lisp:or timing-information common-lisp:null)
                         :accessor
                         struct-shape-abort-transaction-result-timing-information
                         :shape "TimingInformation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-abort-transaction-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'abort-transaction-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'abort-transaction-result 'make-abort-transaction-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-transaction-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-transaction-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timing-information))
      (common-lisp:list
       (common-lisp:cons "TimingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-transaction-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (qldb-session-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       bad-request-exception-code)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message
                    'bad-request-exception-code)))
(common-lisp:progn
 (common-lisp:define-condition capacity-exceeded-exception
     (qldb-session-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       capacity-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'capacity-exceeded-exception
                    'capacity-exceeded-exception-message)))
(common-lisp:deftype commit-digest ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass commit-transaction-request common-lisp:nil
                       ((transaction-id :initarg :transaction-id :initform
                         (common-lisp:error ":transaction-id is required")
                         :type (common-lisp:or transaction-id common-lisp:null)
                         :accessor
                         struct-shape-commit-transaction-request-transaction-id
                         :shape "TransactionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (commit-digest :initarg :commit-digest :initform
                         (common-lisp:error ":commit-digest is required") :type
                         (common-lisp:or commit-digest common-lisp:null)
                         :accessor
                         struct-shape-commit-transaction-request-commit-digest
                         :shape "CommitDigest" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-commit-transaction-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'commit-transaction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'commit-transaction-request
                    'make-commit-transaction-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-digest))
      (common-lisp:list
       (common-lisp:cons "CommitDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass commit-transaction-result common-lisp:nil
                       ((transaction-id :initarg :transaction-id :initform
                         common-lisp:nil :type
                         (common-lisp:or transaction-id common-lisp:null)
                         :accessor
                         struct-shape-commit-transaction-result-transaction-id
                         :shape "TransactionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (commit-digest :initarg :commit-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or commit-digest common-lisp:null)
                         :accessor
                         struct-shape-commit-transaction-result-commit-digest
                         :shape "CommitDigest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timing-information :initarg :timing-information
                         :initform common-lisp:nil :type
                         (common-lisp:or timing-information common-lisp:null)
                         :accessor
                         struct-shape-commit-transaction-result-timing-information
                         :shape "TimingInformation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumed-ios :initarg :consumed-ios :initform
                         common-lisp:nil :type
                         (common-lisp:or iousage common-lisp:null) :accessor
                         struct-shape-commit-transaction-result-consumed-ios
                         :shape "IOUsage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-commit-transaction-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'commit-transaction-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'commit-transaction-result
                    'make-commit-transaction-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-digest))
      (common-lisp:list
       (common-lisp:cons "CommitDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timing-information))
      (common-lisp:list
       (common-lisp:cons "TimingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-ios))
      (common-lisp:list
       (common-lisp:cons "ConsumedIOs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass end-session-request common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-end-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'end-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'end-session-request 'make-end-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input end-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input end-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input end-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass end-session-result common-lisp:nil
                       ((timing-information :initarg :timing-information
                         :initform common-lisp:nil :type
                         (common-lisp:or timing-information common-lisp:null)
                         :accessor
                         struct-shape-end-session-result-timing-information
                         :shape "TimingInformation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-end-session-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'end-session-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'end-session-result 'make-end-session-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input end-session-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input end-session-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timing-information))
      (common-lisp:list
       (common-lisp:cons "TimingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input end-session-result))
   common-lisp:nil))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execute-statement-request common-lisp:nil
                       ((transaction-id :initarg :transaction-id :initform
                         (common-lisp:error ":transaction-id is required")
                         :type (common-lisp:or transaction-id common-lisp:null)
                         :accessor
                         struct-shape-execute-statement-request-transaction-id
                         :shape "TransactionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statement :initarg :statement :initform
                         (common-lisp:error ":statement is required") :type
                         (common-lisp:or statement common-lisp:null) :accessor
                         struct-shape-execute-statement-request-statement
                         :shape "Statement" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or statement-parameters common-lisp:null)
                         :accessor
                         struct-shape-execute-statement-request-parameters
                         :shape "StatementParameters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-statement-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-statement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-statement-request
                    'make-execute-statement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement))
      (common-lisp:list
       (common-lisp:cons "Statement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-statement-result common-lisp:nil
                       ((first-page :initarg :first-page :initform
                         common-lisp:nil :type
                         (common-lisp:or page common-lisp:null) :accessor
                         struct-shape-execute-statement-result-first-page
                         :shape "Page" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timing-information :initarg :timing-information
                         :initform common-lisp:nil :type
                         (common-lisp:or timing-information common-lisp:null)
                         :accessor
                         struct-shape-execute-statement-result-timing-information
                         :shape "TimingInformation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumed-ios :initarg :consumed-ios :initform
                         common-lisp:nil :type
                         (common-lisp:or iousage common-lisp:null) :accessor
                         struct-shape-execute-statement-result-consumed-ios
                         :shape "IOUsage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-statement-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-statement-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-statement-result 'make-execute-statement-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-page))
      (common-lisp:list
       (common-lisp:cons "FirstPage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timing-information))
      (common-lisp:list
       (common-lisp:cons "TimingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-ios))
      (common-lisp:list
       (common-lisp:cons "ConsumedIOs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fetch-page-request common-lisp:nil
                       ((transaction-id :initarg :transaction-id :initform
                         (common-lisp:error ":transaction-id is required")
                         :type (common-lisp:or transaction-id common-lisp:null)
                         :accessor
                         struct-shape-fetch-page-request-transaction-id :shape
                         "TransactionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         (common-lisp:error ":next-page-token is required")
                         :type (common-lisp:or page-token common-lisp:null)
                         :accessor
                         struct-shape-fetch-page-request-next-page-token :shape
                         "PageToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fetch-page-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fetch-page-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fetch-page-request 'make-fetch-page-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fetch-page-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fetch-page-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fetch-page-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fetch-page-result common-lisp:nil
                       ((page :initarg :page :initform common-lisp:nil :type
                         (common-lisp:or page common-lisp:null) :accessor
                         struct-shape-fetch-page-result-page :shape "Page"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timing-information :initarg :timing-information
                         :initform common-lisp:nil :type
                         (common-lisp:or timing-information common-lisp:null)
                         :accessor
                         struct-shape-fetch-page-result-timing-information
                         :shape "TimingInformation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (consumed-ios :initarg :consumed-ios :initform
                         common-lisp:nil :type
                         (common-lisp:or iousage common-lisp:null) :accessor
                         struct-shape-fetch-page-result-consumed-ios :shape
                         "IOUsage" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fetch-page-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fetch-page-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fetch-page-result 'make-fetch-page-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fetch-page-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fetch-page-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page))
      (common-lisp:list
       (common-lisp:cons "Page"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timing-information))
      (common-lisp:list
       (common-lisp:cons "TimingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-ios))
      (common-lisp:list
       (common-lisp:cons "ConsumedIOs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fetch-page-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass iousage common-lisp:nil
                       ((read-ios :initarg :read-ios :initform common-lisp:nil
                         :type (common-lisp:or read-ios common-lisp:null)
                         :accessor struct-shape-iousage-read-ios :shape
                         "ReadIOs" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (write-ios :initarg :write-ios :initform
                         common-lisp:nil :type
                         (common-lisp:or write-ios common-lisp:null) :accessor
                         struct-shape-iousage-write-ios :shape "WriteIOs"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iousage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'iousage
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'iousage 'make-iousage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iousage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iousage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-ios))
      (common-lisp:list
       (common-lisp:cons "ReadIOs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'write-ios))
      (common-lisp:list
       (common-lisp:cons "WriteIOs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iousage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-session-exception
     (qldb-session-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-session-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       invalid-session-exception-code)))
 (common-lisp:export
  (common-lisp:list 'invalid-session-exception
                    'invalid-session-exception-message
                    'invalid-session-exception-code)))
(common-lisp:deftype ion-binary ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype ion-text () 'common-lisp:string)
(common-lisp:deftype ledger-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (qldb-session-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition occ-conflict-exception
     (qldb-session-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       occ-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'occ-conflict-exception 'occ-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass page common-lisp:nil
                       ((values :initarg :values :initform common-lisp:nil
                         :type (common-lisp:or value-holders common-lisp:null)
                         :accessor struct-shape-page-values :shape
                         "ValueHolders" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         struct-shape-page-next-page-token :shape "PageToken"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-page (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'page
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'page 'make-page))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input page))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input page))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input page))
   common-lisp:nil))
(common-lisp:deftype page-token () 'common-lisp:string)
(common-lisp:deftype processing-time-milliseconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition rate-exceeded-exception
     (qldb-session-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       rate-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'rate-exceeded-exception 'rate-exceeded-exception-message)))
(common-lisp:deftype read-ios () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass send-command-request common-lisp:nil
                       ((session-token :initarg :session-token :initform
                         common-lisp:nil :type
                         (common-lisp:or session-token common-lisp:null)
                         :accessor
                         struct-shape-send-command-request-session-token :shape
                         "SessionToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-session :initarg :start-session :initform
                         common-lisp:nil :type
                         (common-lisp:or start-session-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-command-request-start-session :shape
                         "StartSessionRequest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-transaction :initarg :start-transaction
                         :initform common-lisp:nil :type
                         (common-lisp:or start-transaction-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-command-request-start-transaction
                         :shape "StartTransactionRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (end-session :initarg :end-session :initform
                         common-lisp:nil :type
                         (common-lisp:or end-session-request common-lisp:null)
                         :accessor
                         struct-shape-send-command-request-end-session :shape
                         "EndSessionRequest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (commit-transaction :initarg :commit-transaction
                         :initform common-lisp:nil :type
                         (common-lisp:or commit-transaction-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-command-request-commit-transaction
                         :shape "CommitTransactionRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (abort-transaction :initarg :abort-transaction
                         :initform common-lisp:nil :type
                         (common-lisp:or abort-transaction-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-command-request-abort-transaction
                         :shape "AbortTransactionRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execute-statement :initarg :execute-statement
                         :initform common-lisp:nil :type
                         (common-lisp:or execute-statement-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-command-request-execute-statement
                         :shape "ExecuteStatementRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (fetch-page :initarg :fetch-page :initform
                         common-lisp:nil :type
                         (common-lisp:or fetch-page-request common-lisp:null)
                         :accessor struct-shape-send-command-request-fetch-page
                         :shape "FetchPageRequest" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-command-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-command-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-command-request 'make-send-command-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-command-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-command-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "SessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-session))
      (common-lisp:list
       (common-lisp:cons "StartSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-transaction))
      (common-lisp:list
       (common-lisp:cons "StartTransaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-session))
      (common-lisp:list
       (common-lisp:cons "EndSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-transaction))
      (common-lisp:list
       (common-lisp:cons "CommitTransaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-transaction))
      (common-lisp:list
       (common-lisp:cons "AbortTransaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execute-statement))
      (common-lisp:list
       (common-lisp:cons "ExecuteStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fetch-page))
      (common-lisp:list
       (common-lisp:cons "FetchPage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-command-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-command-result common-lisp:nil
                       ((start-session :initarg :start-session :initform
                         common-lisp:nil :type
                         (common-lisp:or start-session-result common-lisp:null)
                         :accessor
                         struct-shape-send-command-result-start-session :shape
                         "StartSessionResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-transaction :initarg :start-transaction
                         :initform common-lisp:nil :type
                         (common-lisp:or start-transaction-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-command-result-start-transaction
                         :shape "StartTransactionResult" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (end-session :initarg :end-session :initform
                         common-lisp:nil :type
                         (common-lisp:or end-session-result common-lisp:null)
                         :accessor struct-shape-send-command-result-end-session
                         :shape "EndSessionResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (commit-transaction :initarg :commit-transaction
                         :initform common-lisp:nil :type
                         (common-lisp:or commit-transaction-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-command-result-commit-transaction
                         :shape "CommitTransactionResult" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (abort-transaction :initarg :abort-transaction
                         :initform common-lisp:nil :type
                         (common-lisp:or abort-transaction-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-command-result-abort-transaction
                         :shape "AbortTransactionResult" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execute-statement :initarg :execute-statement
                         :initform common-lisp:nil :type
                         (common-lisp:or execute-statement-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-command-result-execute-statement
                         :shape "ExecuteStatementResult" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (fetch-page :initarg :fetch-page :initform
                         common-lisp:nil :type
                         (common-lisp:or fetch-page-result common-lisp:null)
                         :accessor struct-shape-send-command-result-fetch-page
                         :shape "FetchPageResult" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-command-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-command-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-command-result 'make-send-command-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-command-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-command-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-session))
      (common-lisp:list
       (common-lisp:cons "StartSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-transaction))
      (common-lisp:list
       (common-lisp:cons "StartTransaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-session))
      (common-lisp:list
       (common-lisp:cons "EndSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-transaction))
      (common-lisp:list
       (common-lisp:cons "CommitTransaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-transaction))
      (common-lisp:list
       (common-lisp:cons "AbortTransaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execute-statement))
      (common-lisp:list
       (common-lisp:cons "ExecuteStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fetch-page))
      (common-lisp:list
       (common-lisp:cons "FetchPage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-command-result))
   common-lisp:nil))
(common-lisp:deftype session-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-session-request common-lisp:nil
                       ((ledger-name :initarg :ledger-name :initform
                         (common-lisp:error ":ledger-name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor
                         struct-shape-start-session-request-ledger-name :shape
                         "LedgerName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-session-request 'make-start-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ledger-name))
      (common-lisp:list
       (common-lisp:cons "LedgerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-session-result common-lisp:nil
                       ((session-token :initarg :session-token :initform
                         common-lisp:nil :type
                         (common-lisp:or session-token common-lisp:null)
                         :accessor
                         struct-shape-start-session-result-session-token :shape
                         "SessionToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timing-information :initarg :timing-information
                         :initform common-lisp:nil :type
                         (common-lisp:or timing-information common-lisp:null)
                         :accessor
                         struct-shape-start-session-result-timing-information
                         :shape "TimingInformation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-session-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-session-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-session-result 'make-start-session-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-session-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-session-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "SessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timing-information))
      (common-lisp:list
       (common-lisp:cons "TimingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-session-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-transaction-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-transaction-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-transaction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-transaction-request
                    'make-start-transaction-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-transaction-result common-lisp:nil
                       ((transaction-id :initarg :transaction-id :initform
                         common-lisp:nil :type
                         (common-lisp:or transaction-id common-lisp:null)
                         :accessor
                         struct-shape-start-transaction-result-transaction-id
                         :shape "TransactionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timing-information :initarg :timing-information
                         :initform common-lisp:nil :type
                         (common-lisp:or timing-information common-lisp:null)
                         :accessor
                         struct-shape-start-transaction-result-timing-information
                         :shape "TimingInformation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-transaction-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-transaction-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-transaction-result 'make-start-transaction-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timing-information))
      (common-lisp:list
       (common-lisp:cons "TimingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-result))
   common-lisp:nil))
(common-lisp:deftype statement () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype statement-parameters ()
   '(trivial-types:proper-list value-holder))
 (common-lisp:defun make-statement-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value-holder))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass timing-information common-lisp:nil
                       ((processing-time-milliseconds :initarg
                         :processing-time-milliseconds :initform
                         common-lisp:nil :type
                         (common-lisp:or processing-time-milliseconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-timing-information-processing-time-milliseconds
                         :shape "ProcessingTimeMilliseconds" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timing-information
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'timing-information
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'timing-information 'make-timing-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timing-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timing-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-time-milliseconds))
      (common-lisp:list
       (common-lisp:cons "ProcessingTimeMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timing-information))
   common-lisp:nil))
(common-lisp:deftype transaction-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass value-holder common-lisp:nil
                       ((ion-binary :initarg :ion-binary :initform
                         common-lisp:nil :type
                         (common-lisp:or ion-binary common-lisp:null) :accessor
                         struct-shape-value-holder-ion-binary :shape
                         "IonBinary" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ion-text :initarg :ion-text :initform common-lisp:nil
                         :type (common-lisp:or ion-text common-lisp:null)
                         :accessor struct-shape-value-holder-ion-text :shape
                         "IonText" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-value-holder
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'value-holder
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'value-holder 'make-value-holder))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input value-holder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input value-holder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ion-binary))
      (common-lisp:list
       (common-lisp:cons "IonBinary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ion-text))
      (common-lisp:list
       (common-lisp:cons "IonText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input value-holder))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype value-holders ()
   '(trivial-types:proper-list value-holder))
 (common-lisp:defun make-value-holders
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value-holder))
   aws-sdk/generator/shape::members))
(common-lisp:deftype write-ios () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun send-command
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-token start-session
                     start-transaction end-session commit-transaction
                     abort-transaction execute-statement fetch-page)
   (common-lisp:declare
    (common-lisp:ignorable session-token start-session start-transaction
     end-session commit-transaction abort-transaction execute-statement
     fetch-page))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-command-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-session-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendCommand"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'send-command))
