;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/alexaforbusiness/api (:use)
                             (:nicknames #:aws/alexaforbusiness)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/alexaforbusiness/api)
(common-lisp:progn
 (common-lisp:define-condition alexaforbusiness-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'alexaforbusiness-error))
(common-lisp:progn
 (common-lisp:defclass alexaforbusiness-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "alexaforbusiness"
                        :api-version "2017-11-09" :host-prefix "a4b"
                        :signing-name common-lisp:nil :global-host
                        common-lisp:nil :target-prefix "AlexaForBusiness"
                        :json-version "1.1"))
 (common-lisp:export 'alexaforbusiness-request))
(common-lisp:defvar *error-map*
  '(("AlreadyExistsException" . already-exists-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("DeviceNotRegisteredException" . device-not-registered-exception)
    ("InvalidCertificateAuthorityException"
     . invalid-certificate-authority-exception)
    ("InvalidDeviceException" . invalid-device-exception)
    ("InvalidSecretsManagerResourceException"
     . invalid-secrets-manager-resource-exception)
    ("InvalidServiceLinkedRoleStateException"
     . invalid-service-linked-role-state-exception)
    ("InvalidUserStatusException" . invalid-user-status-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NameInUseException" . name-in-use-exception)
    ("NotFoundException" . not-found-exception)
    ("ResourceAssociatedException" . resource-associated-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("SkillNotLinkedException" . skill-not-linked-exception)
    ("UnauthorizedException" . unauthorized-exception)))
(common-lisp:deftype address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass address-book common-lisp:nil
                       ((address-book-arn :initarg :address-book-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-address-book-address-book-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or address-book-name common-lisp:null)
                         :accessor struct-shape-address-book-name :shape
                         "AddressBookName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or address-book-description
                                         common-lisp:null)
                         :accessor struct-shape-address-book-description :shape
                         "AddressBookDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-address-book
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'address-book
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'address-book 'make-address-book))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input address-book))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input address-book))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-book-arn))
      (common-lisp:list
       (common-lisp:cons "AddressBookArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input address-book))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass address-book-data common-lisp:nil
                       ((address-book-arn :initarg :address-book-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-address-book-data-address-book-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or address-book-name common-lisp:null)
                         :accessor struct-shape-address-book-data-name :shape
                         "AddressBookName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or address-book-description
                                         common-lisp:null)
                         :accessor struct-shape-address-book-data-description
                         :shape "AddressBookDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-address-book-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'address-book-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'address-book-data 'make-address-book-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input address-book-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input address-book-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-book-arn))
      (common-lisp:list
       (common-lisp:cons "AddressBookArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input address-book-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype address-book-data-list ()
   '(trivial-types:proper-list address-book-data))
 (common-lisp:defun make-address-book-data-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list address-book-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype address-book-description () 'common-lisp:string)
(common-lisp:deftype address-book-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition already-exists-exception
     (alexaforbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'already-exists-exception
                    'already-exists-exception-message)))
(common-lisp:deftype amazon-id () 'common-lisp:string)
(common-lisp:deftype appliance-description () 'common-lisp:string)
(common-lisp:deftype appliance-friendly-name () 'common-lisp:string)
(common-lisp:deftype appliance-manufacturer-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass approve-skill-request common-lisp:nil
                       ((skill-id :initarg :skill-id :initform
                         (common-lisp:error ":skill-id is required") :type
                         (common-lisp:or skill-id common-lisp:null) :accessor
                         struct-shape-approve-skill-request-skill-id :shape
                         "SkillId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-approve-skill-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'approve-skill-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'approve-skill-request 'make-approve-skill-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          approve-skill-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          approve-skill-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-id))
      (common-lisp:list
       (common-lisp:cons "SkillId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          approve-skill-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass approve-skill-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-approve-skill-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'approve-skill-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'approve-skill-response 'make-approve-skill-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          approve-skill-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          approve-skill-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          approve-skill-response))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-contact-with-address-book-request
                       common-lisp:nil
                       ((contact-arn :initarg :contact-arn :initform
                         (common-lisp:error ":contact-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-contact-with-address-book-request-contact-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (address-book-arn :initarg :address-book-arn :initform
                         (common-lisp:error ":address-book-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-contact-with-address-book-request-address-book-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-contact-with-address-book-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-contact-with-address-book-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-contact-with-address-book-request
                    'make-associate-contact-with-address-book-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-contact-with-address-book-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-contact-with-address-book-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-book-arn))
      (common-lisp:list
       (common-lisp:cons "AddressBookArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-contact-with-address-book-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-contact-with-address-book-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-contact-with-address-book-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-contact-with-address-book-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-contact-with-address-book-response
                    'make-associate-contact-with-address-book-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-contact-with-address-book-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-contact-with-address-book-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-contact-with-address-book-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-device-with-network-profile-request
                       common-lisp:nil
                       ((device-arn :initarg :device-arn :initform
                         (common-lisp:error ":device-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-device-with-network-profile-request-device-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (network-profile-arn :initarg :network-profile-arn
                         :initform
                         (common-lisp:error ":network-profile-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-device-with-network-profile-request-network-profile-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-device-with-network-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-device-with-network-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-device-with-network-profile-request
                    'make-associate-device-with-network-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-device-with-network-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-device-with-network-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-profile-arn))
      (common-lisp:list
       (common-lisp:cons "NetworkProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-device-with-network-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-device-with-network-profile-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-device-with-network-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-device-with-network-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-device-with-network-profile-response
                    'make-associate-device-with-network-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-device-with-network-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-device-with-network-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-device-with-network-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-device-with-room-request common-lisp:nil
                       ((device-arn :initarg :device-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-device-with-room-request-device-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-device-with-room-request-room-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-device-with-room-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-device-with-room-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-device-with-room-request
                    'make-associate-device-with-room-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-device-with-room-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-device-with-room-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-device-with-room-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-device-with-room-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-device-with-room-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-device-with-room-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-device-with-room-response
                    'make-associate-device-with-room-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-device-with-room-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-device-with-room-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-device-with-room-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-skill-group-with-room-request common-lisp:nil
                       ((skill-group-arn :initarg :skill-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-skill-group-with-room-request-skill-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-skill-group-with-room-request-room-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-skill-group-with-room-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-skill-group-with-room-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-skill-group-with-room-request
                    'make-associate-skill-group-with-room-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-group-with-room-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-group-with-room-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-group-arn))
      (common-lisp:list
       (common-lisp:cons "SkillGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-group-with-room-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-skill-group-with-room-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-skill-group-with-room-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-skill-group-with-room-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-skill-group-with-room-response
                    'make-associate-skill-group-with-room-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-group-with-room-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-group-with-room-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-group-with-room-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-skill-with-skill-group-request common-lisp:nil
                       ((skill-group-arn :initarg :skill-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-associate-skill-with-skill-group-request-skill-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (skill-id :initarg :skill-id :initform
                         (common-lisp:error ":skill-id is required") :type
                         (common-lisp:or skill-id common-lisp:null) :accessor
                         struct-shape-associate-skill-with-skill-group-request-skill-id
                         :shape "SkillId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-skill-with-skill-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-skill-with-skill-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-skill-with-skill-group-request
                    'make-associate-skill-with-skill-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-with-skill-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-with-skill-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-group-arn))
      (common-lisp:list
       (common-lisp:cons "SkillGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-id))
      (common-lisp:list
       (common-lisp:cons "SkillId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-with-skill-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-skill-with-skill-group-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-skill-with-skill-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-skill-with-skill-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-skill-with-skill-group-response
                    'make-associate-skill-with-skill-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-with-skill-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-with-skill-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-with-skill-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-skill-with-users-request common-lisp:nil
                       ((skill-id :initarg :skill-id :initform
                         (common-lisp:error ":skill-id is required") :type
                         (common-lisp:or skill-id common-lisp:null) :accessor
                         struct-shape-associate-skill-with-users-request-skill-id
                         :shape "SkillId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-skill-with-users-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-skill-with-users-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-skill-with-users-request
                    'make-associate-skill-with-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-with-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-with-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-id))
      (common-lisp:list
       (common-lisp:cons "SkillId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-with-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-skill-with-users-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-skill-with-users-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-skill-with-users-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-skill-with-users-response
                    'make-associate-skill-with-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-with-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-with-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-skill-with-users-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio common-lisp:nil
                       ((locale :initarg :locale :initform
                         (common-lisp:error ":locale is required") :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         struct-shape-audio-locale :shape "Locale" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (location :initarg :location :initform
                         (common-lisp:error ":location is required") :type
                         (common-lisp:or audio-location common-lisp:null)
                         :accessor struct-shape-audio-location :shape
                         "AudioLocation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'audio 'make-audio))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype audio-list () '(trivial-types:proper-list audio))
 (common-lisp:defun make-audio-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audio))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audio-location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype authorization-result () 'common-lisp:hash-table)
 (common-lisp:defun make-authorization-result
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype bullet-point () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype bullet-points ()
   '(trivial-types:proper-list bullet-point))
 (common-lisp:defun make-bullet-points
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bullet-point))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass business-report common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or business-report-status
                                         common-lisp:null)
                         :accessor struct-shape-business-report-status :shape
                         "BusinessReportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-code :initarg :failure-code :initform
                         common-lisp:nil :type
                         (common-lisp:or business-report-failure-code
                                         common-lisp:null)
                         :accessor struct-shape-business-report-failure-code
                         :shape "BusinessReportFailureCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3location :initarg :s3location :initform
                         common-lisp:nil :type
                         (common-lisp:or business-report-s3location
                                         common-lisp:null)
                         :accessor struct-shape-business-report-s3location
                         :shape "BusinessReportS3Location" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (delivery-time :initarg :delivery-time :initform
                         common-lisp:nil :type
                         (common-lisp:or business-report-delivery-time
                                         common-lisp:null)
                         :accessor struct-shape-business-report-delivery-time
                         :shape "BusinessReportDeliveryTime" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (download-url :initarg :download-url :initform
                         common-lisp:nil :type
                         (common-lisp:or business-report-download-url
                                         common-lisp:null)
                         :accessor struct-shape-business-report-download-url
                         :shape "BusinessReportDownloadUrl" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-business-report
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'business-report
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'business-report 'make-business-report))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input business-report))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input business-report))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "FailureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "S3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-time))
      (common-lisp:list
       (common-lisp:cons "DeliveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-url))
      (common-lisp:list
       (common-lisp:cons "DownloadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input business-report))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass business-report-content-range common-lisp:nil
                       ((interval :initarg :interval :initform
                         (common-lisp:error ":interval is required") :type
                         (common-lisp:or business-report-interval
                                         common-lisp:null)
                         :accessor
                         struct-shape-business-report-content-range-interval
                         :shape "BusinessReportInterval" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-business-report-content-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'business-report-content-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'business-report-content-range
                    'make-business-report-content-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          business-report-content-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          business-report-content-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          business-report-content-range))
   common-lisp:nil))
(common-lisp:deftype business-report-delivery-time () 'common-lisp:string)
(common-lisp:deftype business-report-download-url () 'common-lisp:string)
(common-lisp:deftype business-report-failure-code () 'common-lisp:string)
(common-lisp:deftype business-report-format () 'common-lisp:string)
(common-lisp:deftype business-report-interval () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass business-report-recurrence common-lisp:nil
                       ((start-date :initarg :start-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-business-report-recurrence-start-date
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-business-report-recurrence
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'business-report-recurrence
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'business-report-recurrence
                    'make-business-report-recurrence))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          business-report-recurrence))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          business-report-recurrence))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          business-report-recurrence))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass business-report-s3location common-lisp:nil
                       ((path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or business-report-s3path
                                         common-lisp:null)
                         :accessor struct-shape-business-report-s3location-path
                         :shape "BusinessReportS3Path" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bucket-name :initarg :bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-s3bucket-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-business-report-s3location-bucket-name
                         :shape "CustomerS3BucketName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-business-report-s3location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'business-report-s3location
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'business-report-s3location
                    'make-business-report-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          business-report-s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          business-report-s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          business-report-s3location))
   common-lisp:nil))
(common-lisp:deftype business-report-s3path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass business-report-schedule common-lisp:nil
                       ((schedule-arn :initarg :schedule-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-business-report-schedule-schedule-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schedule-name :initarg :schedule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or business-report-schedule-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-business-report-schedule-schedule-name
                         :shape "BusinessReportScheduleName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-s3bucket-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-business-report-schedule-s3bucket-name
                         :shape "CustomerS3BucketName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3key-prefix :initarg :s3key-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor
                         struct-shape-business-report-schedule-s3key-prefix
                         :shape "S3KeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform common-lisp:nil
                         :type
                         (common-lisp:or business-report-format
                                         common-lisp:null)
                         :accessor struct-shape-business-report-schedule-format
                         :shape "BusinessReportFormat" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content-range :initarg :content-range :initform
                         common-lisp:nil :type
                         (common-lisp:or business-report-content-range
                                         common-lisp:null)
                         :accessor
                         struct-shape-business-report-schedule-content-range
                         :shape "BusinessReportContentRange" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recurrence :initarg :recurrence :initform
                         common-lisp:nil :type
                         (common-lisp:or business-report-recurrence
                                         common-lisp:null)
                         :accessor
                         struct-shape-business-report-schedule-recurrence
                         :shape "BusinessReportRecurrence" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-business-report :initarg :last-business-report
                         :initform common-lisp:nil :type
                         (common-lisp:or business-report common-lisp:null)
                         :accessor
                         struct-shape-business-report-schedule-last-business-report
                         :shape "BusinessReport" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-business-report-schedule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'business-report-schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'business-report-schedule 'make-business-report-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          business-report-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          business-report-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-arn))
      (common-lisp:list
       (common-lisp:cons "ScheduleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-name))
      (common-lisp:list
       (common-lisp:cons "ScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-range))
      (common-lisp:list
       (common-lisp:cons "ContentRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurrence))
      (common-lisp:list
       (common-lisp:cons "Recurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-business-report))
      (common-lisp:list
       (common-lisp:cons "LastBusinessReport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          business-report-schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype business-report-schedule-list ()
   '(trivial-types:proper-list business-report-schedule))
 (common-lisp:defun make-business-report-schedule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            business-report-schedule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype business-report-schedule-name () 'common-lisp:string)
(common-lisp:deftype business-report-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass category common-lisp:nil
                       ((category-id :initarg :category-id :initform
                         common-lisp:nil :type
                         (common-lisp:or category-id common-lisp:null)
                         :accessor struct-shape-category-category-id :shape
                         "CategoryId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (category-name :initarg :category-name :initform
                         common-lisp:nil :type
                         (common-lisp:or category-name common-lisp:null)
                         :accessor struct-shape-category-category-name :shape
                         "CategoryName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-category
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'category
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'category 'make-category))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input category))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input category))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-id))
      (common-lisp:list
       (common-lisp:cons "CategoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-name))
      (common-lisp:list
       (common-lisp:cons "CategoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input category))
   common-lisp:nil))
(common-lisp:deftype category-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype category-list () '(trivial-types:proper-list category))
 (common-lisp:defun make-category-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list category))
   aws-sdk/generator/shape::members))
(common-lisp:deftype category-name () 'common-lisp:string)
(common-lisp:deftype certificate-time () 'common-lisp:string)
(common-lisp:deftype client-id () 'common-lisp:string)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype comms-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (alexaforbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:defclass conference-preference common-lisp:nil
                       ((default-conference-provider-arn :initarg
                         :default-conference-provider-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-conference-preference-default-conference-provider-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conference-preference
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'conference-preference
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conference-preference 'make-conference-preference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conference-preference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conference-preference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-conference-provider-arn))
      (common-lisp:list
       (common-lisp:cons "DefaultConferenceProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conference-preference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass conference-provider common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-conference-provider-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or conference-provider-name
                                         common-lisp:null)
                         :accessor struct-shape-conference-provider-name :shape
                         "ConferenceProviderName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or conference-provider-type
                                         common-lisp:null)
                         :accessor struct-shape-conference-provider-type :shape
                         "ConferenceProviderType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ipdial-in :initarg :ipdial-in :initform
                         common-lisp:nil :type
                         (common-lisp:or ipdial-in common-lisp:null) :accessor
                         struct-shape-conference-provider-ipdial-in :shape
                         "IPDialIn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pstndial-in :initarg :pstndial-in :initform
                         common-lisp:nil :type
                         (common-lisp:or pstndial-in common-lisp:null)
                         :accessor struct-shape-conference-provider-pstndial-in
                         :shape "PSTNDialIn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (meeting-setting :initarg :meeting-setting :initform
                         common-lisp:nil :type
                         (common-lisp:or meeting-setting common-lisp:null)
                         :accessor
                         struct-shape-conference-provider-meeting-setting
                         :shape "MeetingSetting" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conference-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'conference-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conference-provider 'make-conference-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input conference-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input conference-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipdial-in))
      (common-lisp:list
       (common-lisp:cons "IPDialIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pstndial-in))
      (common-lisp:list
       (common-lisp:cons "PSTNDialIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meeting-setting))
      (common-lisp:list
       (common-lisp:cons "MeetingSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input conference-provider))
   common-lisp:nil))
(common-lisp:deftype conference-provider-name () 'common-lisp:string)
(common-lisp:deftype conference-provider-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype conference-providers-list ()
   '(trivial-types:proper-list conference-provider))
 (common-lisp:defun make-conference-providers-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list conference-provider))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connection-status () 'common-lisp:string)
(common-lisp:deftype connection-status-updated-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass contact common-lisp:nil
                       ((contact-arn :initarg :contact-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-contact-contact-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor struct-shape-contact-display-name :shape
                         "ContactName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor struct-shape-contact-first-name :shape
                         "ContactName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor struct-shape-contact-last-name :shape
                         "ContactName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or raw-phone-number common-lisp:null)
                         :accessor struct-shape-contact-phone-number :shape
                         "RawPhoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (phone-numbers :initarg :phone-numbers :initform
                         common-lisp:nil :type
                         (common-lisp:or phone-number-list common-lisp:null)
                         :accessor struct-shape-contact-phone-numbers :shape
                         "PhoneNumberList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sip-addresses :initarg :sip-addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or sip-address-list common-lisp:null)
                         :accessor struct-shape-contact-sip-addresses :shape
                         "SipAddressList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-contact
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'contact
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'contact 'make-contact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-numbers))
      (common-lisp:list
       (common-lisp:cons "PhoneNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sip-addresses))
      (common-lisp:list
       (common-lisp:cons "SipAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass contact-data common-lisp:nil
                       ((contact-arn :initarg :contact-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-contact-data-contact-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor struct-shape-contact-data-display-name
                         :shape "ContactName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor struct-shape-contact-data-first-name :shape
                         "ContactName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor struct-shape-contact-data-last-name :shape
                         "ContactName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or raw-phone-number common-lisp:null)
                         :accessor struct-shape-contact-data-phone-number
                         :shape "RawPhoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (phone-numbers :initarg :phone-numbers :initform
                         common-lisp:nil :type
                         (common-lisp:or phone-number-list common-lisp:null)
                         :accessor struct-shape-contact-data-phone-numbers
                         :shape "PhoneNumberList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sip-addresses :initarg :sip-addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or sip-address-list common-lisp:null)
                         :accessor struct-shape-contact-data-sip-addresses
                         :shape "SipAddressList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-contact-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'contact-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'contact-data 'make-contact-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-numbers))
      (common-lisp:list
       (common-lisp:cons "PhoneNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sip-addresses))
      (common-lisp:list
       (common-lisp:cons "SipAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype contact-data-list ()
   '(trivial-types:proper-list contact-data))
 (common-lisp:defun make-contact-data-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype contact-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass content common-lisp:nil
                       ((text-list :initarg :text-list :initform
                         common-lisp:nil :type
                         (common-lisp:or text-list common-lisp:null) :accessor
                         struct-shape-content-text-list :shape "TextList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ssml-list :initarg :ssml-list :initform
                         common-lisp:nil :type
                         (common-lisp:or ssml-list common-lisp:null) :accessor
                         struct-shape-content-ssml-list :shape "SsmlList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (audio-list :initarg :audio-list :initform
                         common-lisp:nil :type
                         (common-lisp:or audio-list common-lisp:null) :accessor
                         struct-shape-content-audio-list :shape "AudioList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-content
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'content
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'content 'make-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-list))
      (common-lisp:list
       (common-lisp:cons "TextList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssml-list))
      (common-lisp:list
       (common-lisp:cons "SsmlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-list))
      (common-lisp:list
       (common-lisp:cons "AudioList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input content))
   common-lisp:nil))
(common-lisp:deftype country-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-address-book-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or address-book-name common-lisp:null)
                         :accessor
                         struct-shape-create-address-book-request-name :shape
                         "AddressBookName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or address-book-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-address-book-request-description
                         :shape "AddressBookDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-address-book-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-address-book-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-address-book-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-address-book-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-address-book-request
                    'make-create-address-book-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-address-book-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-address-book-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-address-book-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-address-book-response common-lisp:nil
                       ((address-book-arn :initarg :address-book-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-address-book-response-address-book-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-address-book-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-address-book-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-address-book-response
                    'make-create-address-book-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-address-book-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-address-book-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-book-arn))
      (common-lisp:list
       (common-lisp:cons "AddressBookArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-address-book-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-business-report-schedule-request common-lisp:nil
                       ((schedule-name :initarg :schedule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or business-report-schedule-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-business-report-schedule-request-schedule-name
                         :shape "BusinessReportScheduleName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-s3bucket-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-business-report-schedule-request-s3bucket-name
                         :shape "CustomerS3BucketName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3key-prefix :initarg :s3key-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor
                         struct-shape-create-business-report-schedule-request-s3key-prefix
                         :shape "S3KeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or business-report-format
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-business-report-schedule-request-format
                         :shape "BusinessReportFormat" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content-range :initarg :content-range :initform
                         (common-lisp:error ":content-range is required") :type
                         (common-lisp:or business-report-content-range
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-business-report-schedule-request-content-range
                         :shape "BusinessReportContentRange" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recurrence :initarg :recurrence :initform
                         common-lisp:nil :type
                         (common-lisp:or business-report-recurrence
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-business-report-schedule-request-recurrence
                         :shape "BusinessReportRecurrence" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-business-report-schedule-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-business-report-schedule-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-business-report-schedule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-business-report-schedule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-business-report-schedule-request
                    'make-create-business-report-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-business-report-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-business-report-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-name))
      (common-lisp:list
       (common-lisp:cons "ScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-range))
      (common-lisp:list
       (common-lisp:cons "ContentRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurrence))
      (common-lisp:list
       (common-lisp:cons "Recurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-business-report-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-business-report-schedule-response common-lisp:nil
                       ((schedule-arn :initarg :schedule-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-business-report-schedule-response-schedule-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-business-report-schedule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-business-report-schedule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-business-report-schedule-response
                    'make-create-business-report-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-business-report-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-business-report-schedule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-arn))
      (common-lisp:list
       (common-lisp:cons "ScheduleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-business-report-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-conference-provider-request common-lisp:nil
                       ((conference-provider-name :initarg
                         :conference-provider-name :initform
                         (common-lisp:error
                          ":conference-provider-name is required")
                         :type
                         (common-lisp:or conference-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-conference-provider-request-conference-provider-name
                         :shape "ConferenceProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (conference-provider-type :initarg
                         :conference-provider-type :initform
                         (common-lisp:error
                          ":conference-provider-type is required")
                         :type
                         (common-lisp:or conference-provider-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-conference-provider-request-conference-provider-type
                         :shape "ConferenceProviderType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ipdial-in :initarg :ipdial-in :initform
                         common-lisp:nil :type
                         (common-lisp:or ipdial-in common-lisp:null) :accessor
                         struct-shape-create-conference-provider-request-ipdial-in
                         :shape "IPDialIn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pstndial-in :initarg :pstndial-in :initform
                         common-lisp:nil :type
                         (common-lisp:or pstndial-in common-lisp:null)
                         :accessor
                         struct-shape-create-conference-provider-request-pstndial-in
                         :shape "PSTNDialIn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (meeting-setting :initarg :meeting-setting :initform
                         (common-lisp:error ":meeting-setting is required")
                         :type
                         (common-lisp:or meeting-setting common-lisp:null)
                         :accessor
                         struct-shape-create-conference-provider-request-meeting-setting
                         :shape "MeetingSetting" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-conference-provider-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-conference-provider-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-conference-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-conference-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-conference-provider-request
                    'make-create-conference-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-conference-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-conference-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conference-provider-name))
      (common-lisp:list
       (common-lisp:cons "ConferenceProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conference-provider-type))
      (common-lisp:list
       (common-lisp:cons "ConferenceProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipdial-in))
      (common-lisp:list
       (common-lisp:cons "IPDialIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pstndial-in))
      (common-lisp:list
       (common-lisp:cons "PSTNDialIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meeting-setting))
      (common-lisp:list
       (common-lisp:cons "MeetingSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-conference-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-conference-provider-response common-lisp:nil
                       ((conference-provider-arn :initarg
                         :conference-provider-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-conference-provider-response-conference-provider-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-conference-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-conference-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-conference-provider-response
                    'make-create-conference-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-conference-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-conference-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conference-provider-arn))
      (common-lisp:list
       (common-lisp:cons "ConferenceProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-conference-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-contact-request common-lisp:nil
                       ((display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor
                         struct-shape-create-contact-request-display-name
                         :shape "ContactName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         (common-lisp:error ":first-name is required") :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor
                         struct-shape-create-contact-request-first-name :shape
                         "ContactName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor
                         struct-shape-create-contact-request-last-name :shape
                         "ContactName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or raw-phone-number common-lisp:null)
                         :accessor
                         struct-shape-create-contact-request-phone-number
                         :shape "RawPhoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (phone-numbers :initarg :phone-numbers :initform
                         common-lisp:nil :type
                         (common-lisp:or phone-number-list common-lisp:null)
                         :accessor
                         struct-shape-create-contact-request-phone-numbers
                         :shape "PhoneNumberList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sip-addresses :initarg :sip-addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or sip-address-list common-lisp:null)
                         :accessor
                         struct-shape-create-contact-request-sip-addresses
                         :shape "SipAddressList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-contact-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-contact-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-contact-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-contact-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-contact-request 'make-create-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-numbers))
      (common-lisp:list
       (common-lisp:cons "PhoneNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sip-addresses))
      (common-lisp:list
       (common-lisp:cons "SipAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-contact-response common-lisp:nil
                       ((contact-arn :initarg :contact-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-contact-response-contact-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-contact-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-contact-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-contact-response 'make-create-contact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-end-of-meeting-reminder common-lisp:nil
                       ((reminder-at-minutes :initarg :reminder-at-minutes
                         :initform
                         (common-lisp:error ":reminder-at-minutes is required")
                         :type
                         (common-lisp:or end-of-meeting-reminder-minutes-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-end-of-meeting-reminder-reminder-at-minutes
                         :shape "EndOfMeetingReminderMinutesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (reminder-type :initarg :reminder-type :initform
                         (common-lisp:error ":reminder-type is required") :type
                         (common-lisp:or end-of-meeting-reminder-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-end-of-meeting-reminder-reminder-type
                         :shape "EndOfMeetingReminderType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-end-of-meeting-reminder-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-end-of-meeting-reminder
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-end-of-meeting-reminder
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-end-of-meeting-reminder
                    'make-create-end-of-meeting-reminder))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-end-of-meeting-reminder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-end-of-meeting-reminder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reminder-at-minutes))
      (common-lisp:list
       (common-lisp:cons "ReminderAtMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reminder-type))
      (common-lisp:list
       (common-lisp:cons "ReminderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-end-of-meeting-reminder))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-gateway-group-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or gateway-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-gateway-group-request-name :shape
                         "GatewayGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-group-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-gateway-group-request-description
                         :shape "GatewayGroupDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-gateway-group-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-gateway-group-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-gateway-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-gateway-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-gateway-group-request
                    'make-create-gateway-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-gateway-group-response common-lisp:nil
                       ((gateway-group-arn :initarg :gateway-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-gateway-group-response-gateway-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-gateway-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-gateway-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-gateway-group-response
                    'make-create-gateway-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-group-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-instant-booking common-lisp:nil
                       ((duration-in-minutes :initarg :duration-in-minutes
                         :initform
                         (common-lisp:error ":duration-in-minutes is required")
                         :type (common-lisp:or minutes common-lisp:null)
                         :accessor
                         struct-shape-create-instant-booking-duration-in-minutes
                         :shape "Minutes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-instant-booking-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-instant-booking
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-instant-booking
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-instant-booking 'make-create-instant-booking))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instant-booking))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instant-booking))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "DurationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instant-booking))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-meeting-room-configuration common-lisp:nil
                       ((room-utilization-metrics-enabled :initarg
                         :room-utilization-metrics-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-meeting-room-configuration-room-utilization-metrics-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-of-meeting-reminder :initarg
                         :end-of-meeting-reminder :initform common-lisp:nil
                         :type
                         (common-lisp:or create-end-of-meeting-reminder
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-room-configuration-end-of-meeting-reminder
                         :shape "CreateEndOfMeetingReminder" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (instant-booking :initarg :instant-booking :initform
                         common-lisp:nil :type
                         (common-lisp:or create-instant-booking
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-room-configuration-instant-booking
                         :shape "CreateInstantBooking" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (require-check-in :initarg :require-check-in :initform
                         common-lisp:nil :type
                         (common-lisp:or create-require-check-in
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-room-configuration-require-check-in
                         :shape "CreateRequireCheckIn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (proactive-join :initarg :proactive-join :initform
                         common-lisp:nil :type
                         (common-lisp:or create-proactive-join
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-meeting-room-configuration-proactive-join
                         :shape "CreateProactiveJoin" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-meeting-room-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-meeting-room-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-meeting-room-configuration
                    'make-create-meeting-room-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-meeting-room-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-meeting-room-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'room-utilization-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "RoomUtilizationMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'end-of-meeting-reminder))
      (common-lisp:list
       (common-lisp:cons "EndOfMeetingReminder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instant-booking))
      (common-lisp:list
       (common-lisp:cons "InstantBooking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-check-in))
      (common-lisp:list
       (common-lisp:cons "RequireCheckIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proactive-join))
      (common-lisp:list
       (common-lisp:cons "ProactiveJoin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-meeting-room-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-network-profile-request common-lisp:nil
                       ((network-profile-name :initarg :network-profile-name
                         :initform
                         (common-lisp:error
                          ":network-profile-name is required")
                         :type
                         (common-lisp:or network-profile-name common-lisp:null)
                         :accessor
                         struct-shape-create-network-profile-request-network-profile-name
                         :shape "NetworkProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or network-profile-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-network-profile-request-description
                         :shape "NetworkProfileDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ssid :initarg :ssid :initform
                         (common-lisp:error ":ssid is required") :type
                         (common-lisp:or network-ssid common-lisp:null)
                         :accessor
                         struct-shape-create-network-profile-request-ssid
                         :shape "NetworkSsid" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-type :initarg :security-type :initform
                         (common-lisp:error ":security-type is required") :type
                         (common-lisp:or network-security-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-network-profile-request-security-type
                         :shape "NetworkSecurityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (eap-method :initarg :eap-method :initform
                         common-lisp:nil :type
                         (common-lisp:or network-eap-method common-lisp:null)
                         :accessor
                         struct-shape-create-network-profile-request-eap-method
                         :shape "NetworkEapMethod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-password :initarg :current-password :initform
                         common-lisp:nil :type
                         (common-lisp:or current-wi-fi-password
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-network-profile-request-current-password
                         :shape "CurrentWiFiPassword" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-password :initarg :next-password :initform
                         common-lisp:nil :type
                         (common-lisp:or next-wi-fi-password common-lisp:null)
                         :accessor
                         struct-shape-create-network-profile-request-next-password
                         :shape "NextWiFiPassword" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-authority-arn :initarg
                         :certificate-authority-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-network-profile-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (trust-anchors :initarg :trust-anchors :initform
                         common-lisp:nil :type
                         (common-lisp:or trust-anchor-list common-lisp:null)
                         :accessor
                         struct-shape-create-network-profile-request-trust-anchors
                         :shape "TrustAnchorList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-network-profile-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-network-profile-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-network-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-network-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-network-profile-request
                    'make-create-network-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-profile-name))
      (common-lisp:list
       (common-lisp:cons "NetworkProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssid))
      (common-lisp:list
       (common-lisp:cons "Ssid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-type))
      (common-lisp:list
       (common-lisp:cons "SecurityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eap-method))
      (common-lisp:list
       (common-lisp:cons "EapMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-password))
      (common-lisp:list
       (common-lisp:cons "CurrentPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-password))
      (common-lisp:list
       (common-lisp:cons "NextPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-anchors))
      (common-lisp:list
       (common-lisp:cons "TrustAnchors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-network-profile-response common-lisp:nil
                       ((network-profile-arn :initarg :network-profile-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-network-profile-response-network-profile-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-network-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-network-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-network-profile-response
                    'make-create-network-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-profile-arn))
      (common-lisp:list
       (common-lisp:cons "NetworkProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-proactive-join common-lisp:nil
                       ((enabled-by-motion :initarg :enabled-by-motion
                         :initform
                         (common-lisp:error ":enabled-by-motion is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-proactive-join-enabled-by-motion
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-proactive-join
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-proactive-join
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-proactive-join 'make-create-proactive-join))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-proactive-join))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-proactive-join))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-by-motion))
      (common-lisp:list
       (common-lisp:cons "EnabledByMotion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-proactive-join))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-profile-request common-lisp:nil
                       ((profile-name :initarg :profile-name :initform
                         (common-lisp:error ":profile-name is required") :type
                         (common-lisp:or profile-name common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-profile-name
                         :shape "ProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timezone :initarg :timezone :initform
                         (common-lisp:error ":timezone is required") :type
                         (common-lisp:or timezone common-lisp:null) :accessor
                         struct-shape-create-profile-request-timezone :shape
                         "Timezone" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (address :initarg :address :initform
                         (common-lisp:error ":address is required") :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-create-profile-request-address :shape
                         "Address" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (distance-unit :initarg :distance-unit :initform
                         (common-lisp:error ":distance-unit is required") :type
                         (common-lisp:or distance-unit common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-distance-unit
                         :shape "DistanceUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (temperature-unit :initarg :temperature-unit :initform
                         (common-lisp:error ":temperature-unit is required")
                         :type
                         (common-lisp:or temperature-unit common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-temperature-unit
                         :shape "TemperatureUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (wake-word :initarg :wake-word :initform
                         (common-lisp:error ":wake-word is required") :type
                         (common-lisp:or wake-word common-lisp:null) :accessor
                         struct-shape-create-profile-request-wake-word :shape
                         "WakeWord" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (locale :initarg :locale :initform common-lisp:nil
                         :type (common-lisp:or device-locale common-lisp:null)
                         :accessor struct-shape-create-profile-request-locale
                         :shape "DeviceLocale" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (setup-mode-disabled :initarg :setup-mode-disabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-profile-request-setup-mode-disabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-volume-limit :initarg :max-volume-limit :initform
                         common-lisp:nil :type
                         (common-lisp:or max-volume-limit common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-max-volume-limit
                         :shape "MaxVolumeLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pstnenabled :initarg :pstnenabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-profile-request-pstnenabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-retention-opt-in :initarg :data-retention-opt-in
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-profile-request-data-retention-opt-in
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (meeting-room-configuration :initarg
                         :meeting-room-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or create-meeting-room-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profile-request-meeting-room-configuration
                         :shape "CreateMeetingRoomConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-profile-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-profile-request 'make-create-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-name))
      (common-lisp:list
       (common-lisp:cons "ProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distance-unit))
      (common-lisp:list
       (common-lisp:cons "DistanceUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'temperature-unit))
      (common-lisp:list
       (common-lisp:cons "TemperatureUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wake-word))
      (common-lisp:list
       (common-lisp:cons "WakeWord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setup-mode-disabled))
      (common-lisp:list
       (common-lisp:cons "SetupModeDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-volume-limit))
      (common-lisp:list
       (common-lisp:cons "MaxVolumeLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pstnenabled))
      (common-lisp:list
       (common-lisp:cons "PSTNEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-retention-opt-in))
      (common-lisp:list
       (common-lisp:cons "DataRetentionOptIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'meeting-room-configuration))
      (common-lisp:list
       (common-lisp:cons "MeetingRoomConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-profile-response common-lisp:nil
                       ((profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-profile-response-profile-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-profile-response 'make-create-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-require-check-in common-lisp:nil
                       ((release-after-minutes :initarg :release-after-minutes
                         :initform
                         (common-lisp:error
                          ":release-after-minutes is required")
                         :type (common-lisp:or minutes common-lisp:null)
                         :accessor
                         struct-shape-create-require-check-in-release-after-minutes
                         :shape "Minutes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-require-check-in-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-require-check-in
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-require-check-in
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-require-check-in 'make-create-require-check-in))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-require-check-in))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-require-check-in))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'release-after-minutes))
      (common-lisp:list
       (common-lisp:cons "ReleaseAfterMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-require-check-in))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-room-request common-lisp:nil
                       ((room-name :initarg :room-name :initform
                         (common-lisp:error ":room-name is required") :type
                         (common-lisp:or room-name common-lisp:null) :accessor
                         struct-shape-create-room-request-room-name :shape
                         "RoomName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or room-description common-lisp:null)
                         :accessor struct-shape-create-room-request-description
                         :shape "RoomDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-room-request-profile-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider-calendar-id :initarg :provider-calendar-id
                         :initform common-lisp:nil :type
                         (common-lisp:or provider-calendar-id common-lisp:null)
                         :accessor
                         struct-shape-create-room-request-provider-calendar-id
                         :shape "ProviderCalendarId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-room-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-room-request-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-room-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-room-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-room-request 'make-create-room-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-room-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-room-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-name))
      (common-lisp:list
       (common-lisp:cons "RoomName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provider-calendar-id))
      (common-lisp:list
       (common-lisp:cons "ProviderCalendarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-room-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-room-response common-lisp:nil
                       ((room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-room-response-room-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-room-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-room-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-room-response 'make-create-room-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-room-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-room-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-room-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-skill-group-request common-lisp:nil
                       ((skill-group-name :initarg :skill-group-name :initform
                         (common-lisp:error ":skill-group-name is required")
                         :type
                         (common-lisp:or skill-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-skill-group-request-skill-group-name
                         :shape "SkillGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-group-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-skill-group-request-description
                         :shape "SkillGroupDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-skill-group-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-skill-group-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-skill-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-skill-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-skill-group-request
                    'make-create-skill-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-skill-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-skill-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-group-name))
      (common-lisp:list
       (common-lisp:cons "SkillGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-skill-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-skill-group-response common-lisp:nil
                       ((skill-group-arn :initarg :skill-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-skill-group-response-skill-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-skill-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-skill-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-skill-group-response
                    'make-create-skill-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-skill-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-skill-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-group-arn))
      (common-lisp:list
       (common-lisp:cons "SkillGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-skill-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-request common-lisp:nil
                       ((user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or |user_UserId| common-lisp:null)
                         :accessor struct-shape-create-user-request-user-id
                         :shape "user_UserId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |user_FirstName| common-lisp:null)
                         :accessor struct-shape-create-user-request-first-name
                         :shape "user_FirstName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |user_LastName| common-lisp:null)
                         :accessor struct-shape-create-user-request-last-name
                         :shape "user_LastName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email :initarg :email :initform common-lisp:nil :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-create-user-request-email :shape "Email"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-user-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-user-request-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-response common-lisp:nil
                       ((user-arn :initarg :user-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-user-response-user-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "UserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-response))
   common-lisp:nil))
(common-lisp:deftype current-wi-fi-password () 'common-lisp:string)
(common-lisp:deftype customer-s3bucket-name () 'common-lisp:string)
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-address-book-request common-lisp:nil
                       ((address-book-arn :initarg :address-book-arn :initform
                         (common-lisp:error ":address-book-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-address-book-request-address-book-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-address-book-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-address-book-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-address-book-request
                    'make-delete-address-book-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-address-book-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-address-book-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-book-arn))
      (common-lisp:list
       (common-lisp:cons "AddressBookArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-address-book-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-address-book-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-address-book-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-address-book-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-address-book-response
                    'make-delete-address-book-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-address-book-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-address-book-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-address-book-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-business-report-schedule-request common-lisp:nil
                       ((schedule-arn :initarg :schedule-arn :initform
                         (common-lisp:error ":schedule-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-business-report-schedule-request-schedule-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-business-report-schedule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-business-report-schedule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-business-report-schedule-request
                    'make-delete-business-report-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-business-report-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-business-report-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-arn))
      (common-lisp:list
       (common-lisp:cons "ScheduleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-business-report-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-business-report-schedule-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-business-report-schedule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-business-report-schedule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-business-report-schedule-response
                    'make-delete-business-report-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-business-report-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-business-report-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-business-report-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-conference-provider-request common-lisp:nil
                       ((conference-provider-arn :initarg
                         :conference-provider-arn :initform
                         (common-lisp:error
                          ":conference-provider-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-conference-provider-request-conference-provider-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-conference-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-conference-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-conference-provider-request
                    'make-delete-conference-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-conference-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-conference-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conference-provider-arn))
      (common-lisp:list
       (common-lisp:cons "ConferenceProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-conference-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-conference-provider-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-conference-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-conference-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-conference-provider-response
                    'make-delete-conference-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-conference-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-conference-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-conference-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-contact-request common-lisp:nil
                       ((contact-arn :initarg :contact-arn :initform
                         (common-lisp:error ":contact-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-contact-request-contact-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-contact-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-contact-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-contact-request 'make-delete-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-contact-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-contact-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-contact-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-contact-response 'make-delete-contact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-device-request common-lisp:nil
                       ((device-arn :initarg :device-arn :initform
                         (common-lisp:error ":device-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-device-request-device-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-device-request 'make-delete-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-device-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-device-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-device-response 'make-delete-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-device-usage-data-request common-lisp:nil
                       ((device-arn :initarg :device-arn :initform
                         (common-lisp:error ":device-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-device-usage-data-request-device-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-usage-type :initarg :device-usage-type
                         :initform
                         (common-lisp:error ":device-usage-type is required")
                         :type
                         (common-lisp:or device-usage-type common-lisp:null)
                         :accessor
                         struct-shape-delete-device-usage-data-request-device-usage-type
                         :shape "DeviceUsageType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-device-usage-data-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-device-usage-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-device-usage-data-request
                    'make-delete-device-usage-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-usage-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-usage-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-usage-type))
      (common-lisp:list
       (common-lisp:cons "DeviceUsageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-usage-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-device-usage-data-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-device-usage-data-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-device-usage-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-device-usage-data-response
                    'make-delete-device-usage-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-usage-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-usage-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-usage-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-gateway-group-request common-lisp:nil
                       ((gateway-group-arn :initarg :gateway-group-arn
                         :initform
                         (common-lisp:error ":gateway-group-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-gateway-group-request-gateway-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-gateway-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-gateway-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-gateway-group-request
                    'make-delete-gateway-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-group-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-gateway-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-gateway-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-gateway-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-gateway-group-response
                    'make-delete-gateway-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-network-profile-request common-lisp:nil
                       ((network-profile-arn :initarg :network-profile-arn
                         :initform
                         (common-lisp:error ":network-profile-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-network-profile-request-network-profile-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-network-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-network-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-network-profile-request
                    'make-delete-network-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-profile-arn))
      (common-lisp:list
       (common-lisp:cons "NetworkProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-network-profile-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-network-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-network-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-network-profile-response
                    'make-delete-network-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-profile-request common-lisp:nil
                       ((profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-profile-request-profile-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-profile-request 'make-delete-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-profile-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-profile-response 'make-delete-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-room-request common-lisp:nil
                       ((room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-room-request-room-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-room-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-room-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-room-request 'make-delete-room-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-room-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-room-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-room-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-room-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-room-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-room-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-room-response 'make-delete-room-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-room-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-room-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-room-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-room-skill-parameter-request common-lisp:nil
                       ((room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-room-skill-parameter-request-room-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (skill-id :initarg :skill-id :initform
                         (common-lisp:error ":skill-id is required") :type
                         (common-lisp:or skill-id common-lisp:null) :accessor
                         struct-shape-delete-room-skill-parameter-request-skill-id
                         :shape "SkillId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-key :initarg :parameter-key :initform
                         (common-lisp:error ":parameter-key is required") :type
                         (common-lisp:or room-skill-parameter-key
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-room-skill-parameter-request-parameter-key
                         :shape "RoomSkillParameterKey" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-room-skill-parameter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-room-skill-parameter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-room-skill-parameter-request
                    'make-delete-room-skill-parameter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-room-skill-parameter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-room-skill-parameter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-id))
      (common-lisp:list
       (common-lisp:cons "SkillId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-key))
      (common-lisp:list
       (common-lisp:cons "ParameterKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-room-skill-parameter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-room-skill-parameter-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-room-skill-parameter-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-room-skill-parameter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-room-skill-parameter-response
                    'make-delete-room-skill-parameter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-room-skill-parameter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-room-skill-parameter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-room-skill-parameter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-skill-authorization-request common-lisp:nil
                       ((skill-id :initarg :skill-id :initform
                         (common-lisp:error ":skill-id is required") :type
                         (common-lisp:or skill-id common-lisp:null) :accessor
                         struct-shape-delete-skill-authorization-request-skill-id
                         :shape "SkillId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-skill-authorization-request-room-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-skill-authorization-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-skill-authorization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-skill-authorization-request
                    'make-delete-skill-authorization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-skill-authorization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-skill-authorization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-id))
      (common-lisp:list
       (common-lisp:cons "SkillId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-skill-authorization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-skill-authorization-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-skill-authorization-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-skill-authorization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-skill-authorization-response
                    'make-delete-skill-authorization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-skill-authorization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-skill-authorization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-skill-authorization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-skill-group-request common-lisp:nil
                       ((skill-group-arn :initarg :skill-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-skill-group-request-skill-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-skill-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-skill-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-skill-group-request
                    'make-delete-skill-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-skill-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-skill-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-group-arn))
      (common-lisp:list
       (common-lisp:cons "SkillGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-skill-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-skill-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-skill-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-skill-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-skill-group-response
                    'make-delete-skill-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-skill-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-skill-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-skill-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-request common-lisp:nil
                       ((user-arn :initarg :user-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-user-request-user-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enrollment-id :initarg :enrollment-id :initform
                         (common-lisp:error ":enrollment-id is required") :type
                         (common-lisp:or enrollment-id common-lisp:null)
                         :accessor
                         struct-shape-delete-user-request-enrollment-id :shape
                         "EnrollmentId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "UserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enrollment-id))
      (common-lisp:list
       (common-lisp:cons "EnrollmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-response 'make-delete-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass developer-info common-lisp:nil
                       ((developer-name :initarg :developer-name :initform
                         common-lisp:nil :type
                         (common-lisp:or developer-name common-lisp:null)
                         :accessor struct-shape-developer-info-developer-name
                         :shape "DeveloperName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (privacy-policy :initarg :privacy-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or privacy-policy common-lisp:null)
                         :accessor struct-shape-developer-info-privacy-policy
                         :shape "PrivacyPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email :initarg :email :initform common-lisp:nil :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-developer-info-email :shape "Email"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-developer-info-url :shape "Url" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-developer-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'developer-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'developer-info 'make-developer-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input developer-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input developer-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'developer-name))
      (common-lisp:list
       (common-lisp:cons "DeveloperName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privacy-policy))
      (common-lisp:list
       (common-lisp:cons "PrivacyPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input developer-info))
   common-lisp:nil))
(common-lisp:deftype developer-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass device common-lisp:nil
                       ((device-arn :initarg :device-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-device-device-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-serial-number :initarg :device-serial-number
                         :initform common-lisp:nil :type
                         (common-lisp:or device-serial-number common-lisp:null)
                         :accessor struct-shape-device-device-serial-number
                         :shape "DeviceSerialNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-type :initarg :device-type :initform
                         common-lisp:nil :type
                         (common-lisp:or device-type common-lisp:null)
                         :accessor struct-shape-device-device-type :shape
                         "DeviceType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-name :initarg :device-name :initform
                         common-lisp:nil :type
                         (common-lisp:or device-name common-lisp:null)
                         :accessor struct-shape-device-device-name :shape
                         "DeviceName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (software-version :initarg :software-version :initform
                         common-lisp:nil :type
                         (common-lisp:or software-version common-lisp:null)
                         :accessor struct-shape-device-software-version :shape
                         "SoftwareVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mac-address :initarg :mac-address :initform
                         common-lisp:nil :type
                         (common-lisp:or mac-address common-lisp:null)
                         :accessor struct-shape-device-mac-address :shape
                         "MacAddress" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-device-room-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-status :initarg :device-status :initform
                         common-lisp:nil :type
                         (common-lisp:or device-status common-lisp:null)
                         :accessor struct-shape-device-device-status :shape
                         "DeviceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-status-info :initarg :device-status-info
                         :initform common-lisp:nil :type
                         (common-lisp:or device-status-info common-lisp:null)
                         :accessor struct-shape-device-device-status-info
                         :shape "DeviceStatusInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-profile-info :initarg :network-profile-info
                         :initform common-lisp:nil :type
                         (common-lisp:or device-network-profile-info
                                         common-lisp:null)
                         :accessor struct-shape-device-network-profile-info
                         :shape "DeviceNetworkProfileInfo" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'device 'make-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-serial-number))
      (common-lisp:list
       (common-lisp:cons "DeviceSerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "DeviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'software-version))
      (common-lisp:list
       (common-lisp:cons "SoftwareVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "MacAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-status))
      (common-lisp:list
       (common-lisp:cons "DeviceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-status-info))
      (common-lisp:list
       (common-lisp:cons "DeviceStatusInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-profile-info))
      (common-lisp:list
       (common-lisp:cons "NetworkProfileInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass device-data common-lisp:nil
                       ((device-arn :initarg :device-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-device-data-device-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-serial-number :initarg :device-serial-number
                         :initform common-lisp:nil :type
                         (common-lisp:or device-serial-number common-lisp:null)
                         :accessor
                         struct-shape-device-data-device-serial-number :shape
                         "DeviceSerialNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-type :initarg :device-type :initform
                         common-lisp:nil :type
                         (common-lisp:or device-type common-lisp:null)
                         :accessor struct-shape-device-data-device-type :shape
                         "DeviceType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-name :initarg :device-name :initform
                         common-lisp:nil :type
                         (common-lisp:or device-name common-lisp:null)
                         :accessor struct-shape-device-data-device-name :shape
                         "DeviceName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (software-version :initarg :software-version :initform
                         common-lisp:nil :type
                         (common-lisp:or software-version common-lisp:null)
                         :accessor struct-shape-device-data-software-version
                         :shape "SoftwareVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mac-address :initarg :mac-address :initform
                         common-lisp:nil :type
                         (common-lisp:or mac-address common-lisp:null)
                         :accessor struct-shape-device-data-mac-address :shape
                         "MacAddress" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-status :initarg :device-status :initform
                         common-lisp:nil :type
                         (common-lisp:or device-status common-lisp:null)
                         :accessor struct-shape-device-data-device-status
                         :shape "DeviceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-profile-arn :initarg :network-profile-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-device-data-network-profile-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (network-profile-name :initarg :network-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or network-profile-name common-lisp:null)
                         :accessor
                         struct-shape-device-data-network-profile-name :shape
                         "NetworkProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-device-data-room-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (room-name :initarg :room-name :initform
                         common-lisp:nil :type
                         (common-lisp:or device-room-name common-lisp:null)
                         :accessor struct-shape-device-data-room-name :shape
                         "DeviceRoomName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-status-info :initarg :device-status-info
                         :initform common-lisp:nil :type
                         (common-lisp:or device-status-info common-lisp:null)
                         :accessor struct-shape-device-data-device-status-info
                         :shape "DeviceStatusInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or device-data-created-time
                                         common-lisp:null)
                         :accessor struct-shape-device-data-created-time :shape
                         "DeviceDataCreatedTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'device-data 'make-device-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-serial-number))
      (common-lisp:list
       (common-lisp:cons "DeviceSerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "DeviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'software-version))
      (common-lisp:list
       (common-lisp:cons "SoftwareVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "MacAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-status))
      (common-lisp:list
       (common-lisp:cons "DeviceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-profile-arn))
      (common-lisp:list
       (common-lisp:cons "NetworkProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-profile-name))
      (common-lisp:list
       (common-lisp:cons "NetworkProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-name))
      (common-lisp:list
       (common-lisp:cons "RoomName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-status-info))
      (common-lisp:list
       (common-lisp:cons "DeviceStatusInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-data))
   common-lisp:nil))
(common-lisp:deftype device-data-created-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-data-list ()
   '(trivial-types:proper-list device-data))
 (common-lisp:defun make-device-data-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-data))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass device-event common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or device-event-type common-lisp:null)
                         :accessor struct-shape-device-event-type :shape
                         "DeviceEventType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or device-event-value common-lisp:null)
                         :accessor struct-shape-device-event-value :shape
                         "DeviceEventValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or device-event-time common-lisp:null)
                         :accessor struct-shape-device-event-timestamp :shape
                         "DeviceEventTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'device-event 'make-device-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype device-event-list ()
   '(trivial-types:proper-list device-event))
 (common-lisp:defun make-device-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-event-time () 'common-lisp:string)
(common-lisp:deftype device-event-type () 'common-lisp:string)
(common-lisp:deftype device-event-value () 'common-lisp:string)
(common-lisp:deftype device-locale () 'common-lisp:string)
(common-lisp:deftype device-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass device-network-profile-info common-lisp:nil
                       ((network-profile-arn :initarg :network-profile-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-device-network-profile-info-network-profile-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-device-network-profile-info-certificate-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (certificate-expiration-time :initarg
                         :certificate-expiration-time :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-time common-lisp:null)
                         :accessor
                         struct-shape-device-network-profile-info-certificate-expiration-time
                         :shape "CertificateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-network-profile-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device-network-profile-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'device-network-profile-info
                    'make-device-network-profile-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          device-network-profile-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          device-network-profile-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-profile-arn))
      (common-lisp:list
       (common-lisp:cons "NetworkProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-expiration-time))
      (common-lisp:list
       (common-lisp:cons "CertificateExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          device-network-profile-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition device-not-registered-exception
     (alexaforbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       device-not-registered-exception-message)))
 (common-lisp:export
  (common-lisp:list 'device-not-registered-exception
                    'device-not-registered-exception-message)))
(common-lisp:deftype device-room-name () 'common-lisp:string)
(common-lisp:deftype device-serial-number () 'common-lisp:string)
(common-lisp:deftype device-serial-number-for-avs () 'common-lisp:string)
(common-lisp:deftype device-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass device-status-detail common-lisp:nil
                       ((feature :initarg :feature :initform common-lisp:nil
                         :type (common-lisp:or feature common-lisp:null)
                         :accessor struct-shape-device-status-detail-feature
                         :shape "Feature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or device-status-detail-code
                                         common-lisp:null)
                         :accessor struct-shape-device-status-detail-code
                         :shape "DeviceStatusDetailCode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-status-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device-status-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'device-status-detail 'make-device-status-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-status-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-status-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature))
      (common-lisp:list
       (common-lisp:cons "Feature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-status-detail))
   common-lisp:nil))
(common-lisp:deftype device-status-detail-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-status-details ()
   '(trivial-types:proper-list device-status-detail))
 (common-lisp:defun make-device-status-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-status-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass device-status-info common-lisp:nil
                       ((device-status-details :initarg :device-status-details
                         :initform common-lisp:nil :type
                         (common-lisp:or device-status-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-device-status-info-device-status-details
                         :shape "DeviceStatusDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-status :initarg :connection-status
                         :initform common-lisp:nil :type
                         (common-lisp:or connection-status common-lisp:null)
                         :accessor
                         struct-shape-device-status-info-connection-status
                         :shape "ConnectionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-status-updated-time :initarg
                         :connection-status-updated-time :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-status-updated-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-device-status-info-connection-status-updated-time
                         :shape "ConnectionStatusUpdatedTime" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device-status-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device-status-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'device-status-info 'make-device-status-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-status-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-status-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-status-details))
      (common-lisp:list
       (common-lisp:cons "DeviceStatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-status-updated-time))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatusUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-status-info))
   common-lisp:nil))
(common-lisp:deftype device-type () 'common-lisp:string)
(common-lisp:deftype device-usage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-contact-from-address-book-request
                       common-lisp:nil
                       ((contact-arn :initarg :contact-arn :initform
                         (common-lisp:error ":contact-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-disassociate-contact-from-address-book-request-contact-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (address-book-arn :initarg :address-book-arn :initform
                         (common-lisp:error ":address-book-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-disassociate-contact-from-address-book-request-address-book-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-contact-from-address-book-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-contact-from-address-book-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-contact-from-address-book-request
                    'make-disassociate-contact-from-address-book-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-contact-from-address-book-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-contact-from-address-book-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-book-arn))
      (common-lisp:list
       (common-lisp:cons "AddressBookArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-contact-from-address-book-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-contact-from-address-book-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-contact-from-address-book-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-contact-from-address-book-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-contact-from-address-book-response
                    'make-disassociate-contact-from-address-book-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-contact-from-address-book-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-contact-from-address-book-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-contact-from-address-book-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-device-from-room-request common-lisp:nil
                       ((device-arn :initarg :device-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-disassociate-device-from-room-request-device-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-device-from-room-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-device-from-room-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-device-from-room-request
                    'make-disassociate-device-from-room-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-device-from-room-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-device-from-room-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-device-from-room-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-device-from-room-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-device-from-room-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-device-from-room-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-device-from-room-response
                    'make-disassociate-device-from-room-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-device-from-room-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-device-from-room-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-device-from-room-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-skill-from-skill-group-request
                       common-lisp:nil
                       ((skill-group-arn :initarg :skill-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-disassociate-skill-from-skill-group-request-skill-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (skill-id :initarg :skill-id :initform
                         (common-lisp:error ":skill-id is required") :type
                         (common-lisp:or skill-id common-lisp:null) :accessor
                         struct-shape-disassociate-skill-from-skill-group-request-skill-id
                         :shape "SkillId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-skill-from-skill-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-skill-from-skill-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-skill-from-skill-group-request
                    'make-disassociate-skill-from-skill-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-from-skill-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-from-skill-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-group-arn))
      (common-lisp:list
       (common-lisp:cons "SkillGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-id))
      (common-lisp:list
       (common-lisp:cons "SkillId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-from-skill-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-skill-from-skill-group-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-skill-from-skill-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-skill-from-skill-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-skill-from-skill-group-response
                    'make-disassociate-skill-from-skill-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-from-skill-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-from-skill-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-from-skill-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-skill-from-users-request common-lisp:nil
                       ((skill-id :initarg :skill-id :initform
                         (common-lisp:error ":skill-id is required") :type
                         (common-lisp:or skill-id common-lisp:null) :accessor
                         struct-shape-disassociate-skill-from-users-request-skill-id
                         :shape "SkillId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-skill-from-users-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-skill-from-users-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-skill-from-users-request
                    'make-disassociate-skill-from-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-from-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-from-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-id))
      (common-lisp:list
       (common-lisp:cons "SkillId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-from-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-skill-from-users-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-skill-from-users-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-skill-from-users-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-skill-from-users-response
                    'make-disassociate-skill-from-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-from-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-from-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-from-users-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-skill-group-from-room-request
                       common-lisp:nil
                       ((skill-group-arn :initarg :skill-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-disassociate-skill-group-from-room-request-skill-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-disassociate-skill-group-from-room-request-room-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-skill-group-from-room-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-skill-group-from-room-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-skill-group-from-room-request
                    'make-disassociate-skill-group-from-room-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-group-from-room-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-group-from-room-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-group-arn))
      (common-lisp:list
       (common-lisp:cons "SkillGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-group-from-room-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-skill-group-from-room-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-skill-group-from-room-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-skill-group-from-room-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-skill-group-from-room-response
                    'make-disassociate-skill-group-from-room-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-group-from-room-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-group-from-room-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-skill-group-from-room-response))
   common-lisp:nil))
(common-lisp:deftype distance-unit () 'common-lisp:string)
(common-lisp:deftype email () 'common-lisp:string)
(common-lisp:deftype enablement-type () 'common-lisp:string)
(common-lisp:deftype enablement-type-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass end-of-meeting-reminder common-lisp:nil
                       ((reminder-at-minutes :initarg :reminder-at-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or end-of-meeting-reminder-minutes-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-end-of-meeting-reminder-reminder-at-minutes
                         :shape "EndOfMeetingReminderMinutesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (reminder-type :initarg :reminder-type :initform
                         common-lisp:nil :type
                         (common-lisp:or end-of-meeting-reminder-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-end-of-meeting-reminder-reminder-type
                         :shape "EndOfMeetingReminderType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-end-of-meeting-reminder-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-end-of-meeting-reminder
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'end-of-meeting-reminder
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'end-of-meeting-reminder 'make-end-of-meeting-reminder))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          end-of-meeting-reminder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          end-of-meeting-reminder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reminder-at-minutes))
      (common-lisp:list
       (common-lisp:cons "ReminderAtMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reminder-type))
      (common-lisp:list
       (common-lisp:cons "ReminderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          end-of-meeting-reminder))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype end-of-meeting-reminder-minutes-list ()
   '(trivial-types:proper-list minutes))
 (common-lisp:defun make-end-of-meeting-reminder-minutes-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list minutes))
   aws-sdk/generator/shape::members))
(common-lisp:deftype end-of-meeting-reminder-type () 'common-lisp:string)
(common-lisp:deftype end-user-license-agreement () 'common-lisp:string)
(common-lisp:deftype endpoint () 'common-lisp:string)
(common-lisp:deftype enrollment-id () 'common-lisp:string)
(common-lisp:deftype enrollment-status () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype feature () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype features () '(trivial-types:proper-list feature))
 (common-lisp:defun make-features
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list feature))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or filter-key common-lisp:null) :accessor
                         struct-shape-filter-key :shape "FilterKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or filter-value-list common-lisp:null)
                         :accessor struct-shape-filter-values :shape
                         "FilterValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:deftype filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-value-list ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun make-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass forget-smart-home-appliances-request common-lisp:nil
                       ((room-arn :initarg :room-arn :initform
                         (common-lisp:error ":room-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-forget-smart-home-appliances-request-room-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-forget-smart-home-appliances-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'forget-smart-home-appliances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'forget-smart-home-appliances-request
                    'make-forget-smart-home-appliances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          forget-smart-home-appliances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          forget-smart-home-appliances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          forget-smart-home-appliances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass forget-smart-home-appliances-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-forget-smart-home-appliances-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'forget-smart-home-appliances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'forget-smart-home-appliances-response
                    'make-forget-smart-home-appliances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          forget-smart-home-appliances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          forget-smart-home-appliances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          forget-smart-home-appliances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-gateway-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or gateway-name common-lisp:null)
                         :accessor struct-shape-gateway-name :shape
                         "GatewayName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-description common-lisp:null)
                         :accessor struct-shape-gateway-description :shape
                         "GatewayDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (gateway-group-arn :initarg :gateway-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-gateway-gateway-group-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (software-version :initarg :software-version :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-version common-lisp:null)
                         :accessor struct-shape-gateway-software-version :shape
                         "GatewayVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gateway
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'gateway 'make-gateway))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-group-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'software-version))
      (common-lisp:list
       (common-lisp:cons "SoftwareVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway))
   common-lisp:nil))
(common-lisp:deftype gateway-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass gateway-group common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-gateway-group-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or gateway-group-name common-lisp:null)
                         :accessor struct-shape-gateway-group-name :shape
                         "GatewayGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-group-description
                                         common-lisp:null)
                         :accessor struct-shape-gateway-group-description
                         :shape "GatewayGroupDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'gateway-group 'make-gateway-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-group))
   common-lisp:nil))
(common-lisp:deftype gateway-group-description () 'common-lisp:string)
(common-lisp:deftype gateway-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype gateway-group-summaries ()
   '(trivial-types:proper-list gateway-group-summary))
 (common-lisp:defun make-gateway-group-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list gateway-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass gateway-group-summary common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-gateway-group-summary-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or gateway-group-name common-lisp:null)
                         :accessor struct-shape-gateway-group-summary-name
                         :shape "GatewayGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-group-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-gateway-group-summary-description :shape
                         "GatewayGroupDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway-group-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-group-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'gateway-group-summary 'make-gateway-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gateway-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gateway-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gateway-group-summary))
   common-lisp:nil))
(common-lisp:deftype gateway-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype gateway-summaries ()
   '(trivial-types:proper-list gateway-summary))
 (common-lisp:defun make-gateway-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list gateway-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass gateway-summary common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-gateway-summary-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or gateway-name common-lisp:null)
                         :accessor struct-shape-gateway-summary-name :shape
                         "GatewayName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-description common-lisp:null)
                         :accessor struct-shape-gateway-summary-description
                         :shape "GatewayDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (gateway-group-arn :initarg :gateway-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-gateway-summary-gateway-group-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (software-version :initarg :software-version :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-version common-lisp:null)
                         :accessor
                         struct-shape-gateway-summary-software-version :shape
                         "GatewayVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'gateway-summary 'make-gateway-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-group-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'software-version))
      (common-lisp:list
       (common-lisp:cons "SoftwareVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-summary))
   common-lisp:nil))
(common-lisp:deftype gateway-version () 'common-lisp:string)
(common-lisp:deftype generic-keyword () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype generic-keywords ()
   '(trivial-types:proper-list generic-keyword))
 (common-lisp:defun make-generic-keywords
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-keyword))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-address-book-request common-lisp:nil
                       ((address-book-arn :initarg :address-book-arn :initform
                         (common-lisp:error ":address-book-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-address-book-request-address-book-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-address-book-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-address-book-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-address-book-request 'make-get-address-book-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-address-book-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-address-book-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-book-arn))
      (common-lisp:list
       (common-lisp:cons "AddressBookArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-address-book-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-address-book-response common-lisp:nil
                       ((address-book :initarg :address-book :initform
                         common-lisp:nil :type
                         (common-lisp:or address-book common-lisp:null)
                         :accessor
                         struct-shape-get-address-book-response-address-book
                         :shape "AddressBook" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-address-book-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-address-book-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-address-book-response
                    'make-get-address-book-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-address-book-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-address-book-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-book))
      (common-lisp:list
       (common-lisp:cons "AddressBook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-address-book-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-conference-preference-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-conference-preference-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-conference-preference-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-conference-preference-request
                    'make-get-conference-preference-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-conference-preference-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-conference-preference-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-conference-preference-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-conference-preference-response common-lisp:nil
                       ((preference :initarg :preference :initform
                         common-lisp:nil :type
                         (common-lisp:or conference-preference
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-conference-preference-response-preference
                         :shape "ConferencePreference" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-conference-preference-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-conference-preference-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-conference-preference-response
                    'make-get-conference-preference-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-conference-preference-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-conference-preference-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preference))
      (common-lisp:list
       (common-lisp:cons "Preference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-conference-preference-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-conference-provider-request common-lisp:nil
                       ((conference-provider-arn :initarg
                         :conference-provider-arn :initform
                         (common-lisp:error
                          ":conference-provider-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-conference-provider-request-conference-provider-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-conference-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-conference-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-conference-provider-request
                    'make-get-conference-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-conference-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-conference-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conference-provider-arn))
      (common-lisp:list
       (common-lisp:cons "ConferenceProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-conference-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-conference-provider-response common-lisp:nil
                       ((conference-provider :initarg :conference-provider
                         :initform common-lisp:nil :type
                         (common-lisp:or conference-provider common-lisp:null)
                         :accessor
                         struct-shape-get-conference-provider-response-conference-provider
                         :shape "ConferenceProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-conference-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-conference-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-conference-provider-response
                    'make-get-conference-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-conference-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-conference-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conference-provider))
      (common-lisp:list
       (common-lisp:cons "ConferenceProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-conference-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-contact-request common-lisp:nil
                       ((contact-arn :initarg :contact-arn :initform
                         (common-lisp:error ":contact-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-contact-request-contact-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-contact-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-contact-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-contact-request 'make-get-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-contact-response common-lisp:nil
                       ((contact :initarg :contact :initform common-lisp:nil
                         :type (common-lisp:or contact common-lisp:null)
                         :accessor struct-shape-get-contact-response-contact
                         :shape "Contact" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-contact-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-contact-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-contact-response 'make-get-contact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-contact-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact))
      (common-lisp:list
       (common-lisp:cons "Contact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-contact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-device-request common-lisp:nil
                       ((device-arn :initarg :device-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-device-request-device-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-device-request 'make-get-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-device-response common-lisp:nil
                       ((device :initarg :device :initform common-lisp:nil
                         :type (common-lisp:or device common-lisp:null)
                         :accessor struct-shape-get-device-response-device
                         :shape "Device" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-device-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-device-response 'make-get-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "Device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-gateway-group-request common-lisp:nil
                       ((gateway-group-arn :initarg :gateway-group-arn
                         :initform
                         (common-lisp:error ":gateway-group-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-gateway-group-request-gateway-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-gateway-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-gateway-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-gateway-group-request
                    'make-get-gateway-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-gateway-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-gateway-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-group-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-gateway-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-gateway-group-response common-lisp:nil
                       ((gateway-group :initarg :gateway-group :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-group common-lisp:null)
                         :accessor
                         struct-shape-get-gateway-group-response-gateway-group
                         :shape "GatewayGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-gateway-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-gateway-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-gateway-group-response
                    'make-get-gateway-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-gateway-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-gateway-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-group))
      (common-lisp:list
       (common-lisp:cons "GatewayGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-gateway-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-gateway-request common-lisp:nil
                       ((gateway-arn :initarg :gateway-arn :initform
                         (common-lisp:error ":gateway-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-gateway-request-gateway-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-gateway-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-gateway-request 'make-get-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-gateway-response common-lisp:nil
                       ((gateway :initarg :gateway :initform common-lisp:nil
                         :type (common-lisp:or gateway common-lisp:null)
                         :accessor struct-shape-get-gateway-response-gateway
                         :shape "Gateway" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-gateway-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-gateway-response 'make-get-gateway-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway))
      (common-lisp:list
       (common-lisp:cons "Gateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-invitation-configuration-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-invitation-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-invitation-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-invitation-configuration-request
                    'make-get-invitation-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-invitation-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-invitation-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-invitation-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-invitation-configuration-response common-lisp:nil
                       ((organization-name :initarg :organization-name
                         :initform common-lisp:nil :type
                         (common-lisp:or organization-name common-lisp:null)
                         :accessor
                         struct-shape-get-invitation-configuration-response-organization-name
                         :shape "OrganizationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contact-email :initarg :contact-email :initform
                         common-lisp:nil :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-get-invitation-configuration-response-contact-email
                         :shape "Email" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-skill-ids :initarg :private-skill-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or short-skill-id-list common-lisp:null)
                         :accessor
                         struct-shape-get-invitation-configuration-response-private-skill-ids
                         :shape "ShortSkillIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-invitation-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-invitation-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-invitation-configuration-response
                    'make-get-invitation-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-invitation-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-invitation-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-email))
      (common-lisp:list
       (common-lisp:cons "ContactEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-skill-ids))
      (common-lisp:list
       (common-lisp:cons "PrivateSkillIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-invitation-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-profile-request common-lisp:nil
                       ((network-profile-arn :initarg :network-profile-arn
                         :initform
                         (common-lisp:error ":network-profile-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-network-profile-request-network-profile-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-network-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-profile-request
                    'make-get-network-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-profile-arn))
      (common-lisp:list
       (common-lisp:cons "NetworkProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-profile-response common-lisp:nil
                       ((network-profile :initarg :network-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or network-profile common-lisp:null)
                         :accessor
                         struct-shape-get-network-profile-response-network-profile
                         :shape "NetworkProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-network-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-profile-response
                    'make-get-network-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-profile))
      (common-lisp:list
       (common-lisp:cons "NetworkProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-profile-request common-lisp:nil
                       ((profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-profile-request-profile-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-profile-request 'make-get-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-profile-response common-lisp:nil
                       ((profile :initarg :profile :initform common-lisp:nil
                         :type (common-lisp:or profile common-lisp:null)
                         :accessor struct-shape-get-profile-response-profile
                         :shape "Profile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-profile-response 'make-get-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-room-request common-lisp:nil
                       ((room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-room-request-room-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-room-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-room-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-room-request 'make-get-room-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-room-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-room-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-room-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-room-response common-lisp:nil
                       ((room :initarg :room :initform common-lisp:nil :type
                         (common-lisp:or room common-lisp:null) :accessor
                         struct-shape-get-room-response-room :shape "Room"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-room-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-room-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-room-response 'make-get-room-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-room-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-room-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room))
      (common-lisp:list
       (common-lisp:cons "Room"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-room-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-room-skill-parameter-request common-lisp:nil
                       ((room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-room-skill-parameter-request-room-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (skill-id :initarg :skill-id :initform
                         (common-lisp:error ":skill-id is required") :type
                         (common-lisp:or skill-id common-lisp:null) :accessor
                         struct-shape-get-room-skill-parameter-request-skill-id
                         :shape "SkillId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-key :initarg :parameter-key :initform
                         (common-lisp:error ":parameter-key is required") :type
                         (common-lisp:or room-skill-parameter-key
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-room-skill-parameter-request-parameter-key
                         :shape "RoomSkillParameterKey" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-room-skill-parameter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-room-skill-parameter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-room-skill-parameter-request
                    'make-get-room-skill-parameter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-room-skill-parameter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-room-skill-parameter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-id))
      (common-lisp:list
       (common-lisp:cons "SkillId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-key))
      (common-lisp:list
       (common-lisp:cons "ParameterKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-room-skill-parameter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-room-skill-parameter-response common-lisp:nil
                       ((room-skill-parameter :initarg :room-skill-parameter
                         :initform common-lisp:nil :type
                         (common-lisp:or room-skill-parameter common-lisp:null)
                         :accessor
                         struct-shape-get-room-skill-parameter-response-room-skill-parameter
                         :shape "RoomSkillParameter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-room-skill-parameter-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-room-skill-parameter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-room-skill-parameter-response
                    'make-get-room-skill-parameter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-room-skill-parameter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-room-skill-parameter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'room-skill-parameter))
      (common-lisp:list
       (common-lisp:cons "RoomSkillParameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-room-skill-parameter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-skill-group-request common-lisp:nil
                       ((skill-group-arn :initarg :skill-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-skill-group-request-skill-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-skill-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-skill-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-skill-group-request 'make-get-skill-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-skill-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-skill-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-group-arn))
      (common-lisp:list
       (common-lisp:cons "SkillGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-skill-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-skill-group-response common-lisp:nil
                       ((skill-group :initarg :skill-group :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-group common-lisp:null)
                         :accessor
                         struct-shape-get-skill-group-response-skill-group
                         :shape "SkillGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-skill-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-skill-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-skill-group-response 'make-get-skill-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-skill-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-skill-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-group))
      (common-lisp:list
       (common-lisp:cons "SkillGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-skill-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ipdial-in common-lisp:nil
                       ((endpoint :initarg :endpoint :initform
                         (common-lisp:error ":endpoint is required") :type
                         (common-lisp:or endpoint common-lisp:null) :accessor
                         struct-shape-ipdial-in-endpoint :shape "Endpoint"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (comms-protocol :initarg :comms-protocol :initform
                         (common-lisp:error ":comms-protocol is required")
                         :type (common-lisp:or comms-protocol common-lisp:null)
                         :accessor struct-shape-ipdial-in-comms-protocol :shape
                         "CommsProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ipdial-in
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ipdial-in
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ipdial-in 'make-ipdial-in))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ipdial-in))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ipdial-in))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comms-protocol))
      (common-lisp:list
       (common-lisp:cons "CommsProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ipdial-in))
   common-lisp:nil))
(common-lisp:deftype icon-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instant-booking common-lisp:nil
                       ((duration-in-minutes :initarg :duration-in-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or minutes common-lisp:null) :accessor
                         struct-shape-instant-booking-duration-in-minutes
                         :shape "Minutes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-instant-booking-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instant-booking
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instant-booking
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'instant-booking 'make-instant-booking))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instant-booking))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instant-booking))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "DurationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instant-booking))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-certificate-authority-exception
     (alexaforbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-certificate-authority-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-certificate-authority-exception
                    'invalid-certificate-authority-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-device-exception
     (alexaforbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-device-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-device-exception
                    'invalid-device-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-secrets-manager-resource-exception
     (alexaforbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-secrets-manager-resource-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-secrets-manager-resource-exception
                    'invalid-secrets-manager-resource-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-service-linked-role-state-exception
     (alexaforbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-service-linked-role-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-service-linked-role-state-exception
                    'invalid-service-linked-role-state-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-user-status-exception
     (alexaforbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-user-status-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-user-status-exception
                    'invalid-user-status-exception-message)))
(common-lisp:deftype invocation-phrase () 'common-lisp:string)
(common-lisp:deftype key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (alexaforbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-business-report-schedules-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-business-report-schedules-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-business-report-schedules-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-business-report-schedules-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-business-report-schedules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-business-report-schedules-request
                    'make-list-business-report-schedules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-business-report-schedules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-business-report-schedules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-business-report-schedules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-business-report-schedules-response common-lisp:nil
                       ((business-report-schedules :initarg
                         :business-report-schedules :initform common-lisp:nil
                         :type
                         (common-lisp:or business-report-schedule-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-business-report-schedules-response-business-report-schedules
                         :shape "BusinessReportScheduleList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-business-report-schedules-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-business-report-schedules-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-business-report-schedules-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-business-report-schedules-response
                    'make-list-business-report-schedules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-business-report-schedules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-business-report-schedules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'business-report-schedules))
      (common-lisp:list
       (common-lisp:cons "BusinessReportSchedules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-business-report-schedules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-conference-providers-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-conference-providers-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-conference-providers-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-conference-providers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-conference-providers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-conference-providers-request
                    'make-list-conference-providers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-conference-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-conference-providers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-conference-providers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-conference-providers-response common-lisp:nil
                       ((conference-providers :initarg :conference-providers
                         :initform common-lisp:nil :type
                         (common-lisp:or conference-providers-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-conference-providers-response-conference-providers
                         :shape "ConferenceProvidersList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-conference-providers-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-conference-providers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-conference-providers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-conference-providers-response
                    'make-list-conference-providers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-conference-providers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-conference-providers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conference-providers))
      (common-lisp:list
       (common-lisp:cons "ConferenceProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-conference-providers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-device-events-request common-lisp:nil
                       ((device-arn :initarg :device-arn :initform
                         (common-lisp:error ":device-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-device-events-request-device-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-type :initarg :event-type :initform
                         common-lisp:nil :type
                         (common-lisp:or device-event-type common-lisp:null)
                         :accessor
                         struct-shape-list-device-events-request-event-type
                         :shape "DeviceEventType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-device-events-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-device-events-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-device-events-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-device-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-device-events-request
                    'make-list-device-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-device-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-device-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "EventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-device-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-device-events-response common-lisp:nil
                       ((device-events :initarg :device-events :initform
                         common-lisp:nil :type
                         (common-lisp:or device-event-list common-lisp:null)
                         :accessor
                         struct-shape-list-device-events-response-device-events
                         :shape "DeviceEventList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-device-events-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-device-events-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-device-events-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-device-events-response
                    'make-list-device-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-device-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-device-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-events))
      (common-lisp:list
       (common-lisp:cons "DeviceEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-device-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-gateway-groups-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-gateway-groups-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-gateway-groups-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-gateway-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-gateway-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-gateway-groups-request
                    'make-list-gateway-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-gateway-groups-response common-lisp:nil
                       ((gateway-groups :initarg :gateway-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-group-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-gateway-groups-response-gateway-groups
                         :shape "GatewayGroupSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-gateway-groups-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-gateway-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-gateway-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-gateway-groups-response
                    'make-list-gateway-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-groups))
      (common-lisp:list
       (common-lisp:cons "GatewayGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-gateways-request common-lisp:nil
                       ((gateway-group-arn :initarg :gateway-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-gateways-request-gateway-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-gateways-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-gateways-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-gateways-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-gateways-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-gateways-request 'make-list-gateways-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-group-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-gateways-response common-lisp:nil
                       ((gateways :initarg :gateways :initform common-lisp:nil
                         :type
                         (common-lisp:or gateway-summaries common-lisp:null)
                         :accessor struct-shape-list-gateways-response-gateways
                         :shape "GatewaySummaries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-gateways-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-gateways-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-gateways-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-gateways-response 'make-list-gateways-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateways))
      (common-lisp:list
       (common-lisp:cons "Gateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-skills-request common-lisp:nil
                       ((skill-group-arn :initarg :skill-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-skills-request-skill-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enablement-type :initarg :enablement-type :initform
                         common-lisp:nil :type
                         (common-lisp:or enablement-type-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-skills-request-enablement-type
                         :shape "EnablementTypeFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (skill-type :initarg :skill-type :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-type-filter common-lisp:null)
                         :accessor struct-shape-list-skills-request-skill-type
                         :shape "SkillTypeFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-skills-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-list-max-results
                                         common-lisp:null)
                         :accessor struct-shape-list-skills-request-max-results
                         :shape "SkillListMaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-skills-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-skills-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-skills-request 'make-list-skills-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-skills-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-skills-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-group-arn))
      (common-lisp:list
       (common-lisp:cons "SkillGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enablement-type))
      (common-lisp:list
       (common-lisp:cons "EnablementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-type))
      (common-lisp:list
       (common-lisp:cons "SkillType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-skills-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-skills-response common-lisp:nil
                       ((skill-summaries :initarg :skill-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-summary-list common-lisp:null)
                         :accessor
                         struct-shape-list-skills-response-skill-summaries
                         :shape "SkillSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-skills-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-skills-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-skills-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-skills-response 'make-list-skills-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-skills-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-skills-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-summaries))
      (common-lisp:list
       (common-lisp:cons "SkillSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-skills-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-skills-store-categories-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-skills-store-categories-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-skills-store-categories-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-skills-store-categories-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-skills-store-categories-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-skills-store-categories-request
                    'make-list-skills-store-categories-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-skills-store-categories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-skills-store-categories-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-skills-store-categories-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-skills-store-categories-response common-lisp:nil
                       ((category-list :initarg :category-list :initform
                         common-lisp:nil :type
                         (common-lisp:or category-list common-lisp:null)
                         :accessor
                         struct-shape-list-skills-store-categories-response-category-list
                         :shape "CategoryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-skills-store-categories-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-skills-store-categories-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-skills-store-categories-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-skills-store-categories-response
                    'make-list-skills-store-categories-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-skills-store-categories-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-skills-store-categories-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-list))
      (common-lisp:list
       (common-lisp:cons "CategoryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-skills-store-categories-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-skills-store-skills-by-category-request
                       common-lisp:nil
                       ((category-id :initarg :category-id :initform
                         (common-lisp:error ":category-id is required") :type
                         (common-lisp:or category-id common-lisp:null)
                         :accessor
                         struct-shape-list-skills-store-skills-by-category-request-category-id
                         :shape "CategoryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-skills-store-skills-by-category-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-list-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-skills-store-skills-by-category-request-max-results
                         :shape "SkillListMaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-skills-store-skills-by-category-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-skills-store-skills-by-category-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-skills-store-skills-by-category-request
                    'make-list-skills-store-skills-by-category-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-skills-store-skills-by-category-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-skills-store-skills-by-category-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-id))
      (common-lisp:list
       (common-lisp:cons "CategoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-skills-store-skills-by-category-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-skills-store-skills-by-category-response
                       common-lisp:nil
                       ((skills-store-skills :initarg :skills-store-skills
                         :initform common-lisp:nil :type
                         (common-lisp:or skills-store-skill-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-skills-store-skills-by-category-response-skills-store-skills
                         :shape "SkillsStoreSkillList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-skills-store-skills-by-category-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-skills-store-skills-by-category-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-skills-store-skills-by-category-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-skills-store-skills-by-category-response
                    'make-list-skills-store-skills-by-category-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-skills-store-skills-by-category-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-skills-store-skills-by-category-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skills-store-skills))
      (common-lisp:list
       (common-lisp:cons "SkillsStoreSkills"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-skills-store-skills-by-category-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-smart-home-appliances-request common-lisp:nil
                       ((room-arn :initarg :room-arn :initform
                         (common-lisp:error ":room-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-smart-home-appliances-request-room-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-smart-home-appliances-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-smart-home-appliances-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-smart-home-appliances-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-smart-home-appliances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-smart-home-appliances-request
                    'make-list-smart-home-appliances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-smart-home-appliances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-smart-home-appliances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-smart-home-appliances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-smart-home-appliances-response common-lisp:nil
                       ((smart-home-appliances :initarg :smart-home-appliances
                         :initform common-lisp:nil :type
                         (common-lisp:or smart-home-appliance-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-smart-home-appliances-response-smart-home-appliances
                         :shape "SmartHomeApplianceList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-smart-home-appliances-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-smart-home-appliances-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-smart-home-appliances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-smart-home-appliances-response
                    'make-list-smart-home-appliances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-smart-home-appliances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-smart-home-appliances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'smart-home-appliances))
      (common-lisp:list
       (common-lisp:cons "SmartHomeAppliances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-smart-home-appliances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-request-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-tags-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-request 'make-list-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-response-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-response 'make-list-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-response))
   common-lisp:nil))
(common-lisp:deftype locale () 'common-lisp:string)
(common-lisp:deftype mac-address () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype max-volume-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass meeting-room-configuration common-lisp:nil
                       ((room-utilization-metrics-enabled :initarg
                         :room-utilization-metrics-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-meeting-room-configuration-room-utilization-metrics-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-of-meeting-reminder :initarg
                         :end-of-meeting-reminder :initform common-lisp:nil
                         :type
                         (common-lisp:or end-of-meeting-reminder
                                         common-lisp:null)
                         :accessor
                         struct-shape-meeting-room-configuration-end-of-meeting-reminder
                         :shape "EndOfMeetingReminder" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (instant-booking :initarg :instant-booking :initform
                         common-lisp:nil :type
                         (common-lisp:or instant-booking common-lisp:null)
                         :accessor
                         struct-shape-meeting-room-configuration-instant-booking
                         :shape "InstantBooking" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-check-in :initarg :require-check-in :initform
                         common-lisp:nil :type
                         (common-lisp:or require-check-in common-lisp:null)
                         :accessor
                         struct-shape-meeting-room-configuration-require-check-in
                         :shape "RequireCheckIn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (proactive-join :initarg :proactive-join :initform
                         common-lisp:nil :type
                         (common-lisp:or proactive-join common-lisp:null)
                         :accessor
                         struct-shape-meeting-room-configuration-proactive-join
                         :shape "ProactiveJoin" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-meeting-room-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'meeting-room-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'meeting-room-configuration
                    'make-meeting-room-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          meeting-room-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          meeting-room-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'room-utilization-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "RoomUtilizationMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'end-of-meeting-reminder))
      (common-lisp:list
       (common-lisp:cons "EndOfMeetingReminder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instant-booking))
      (common-lisp:list
       (common-lisp:cons "InstantBooking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-check-in))
      (common-lisp:list
       (common-lisp:cons "RequireCheckIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proactive-join))
      (common-lisp:list
       (common-lisp:cons "ProactiveJoin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          meeting-room-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass meeting-setting common-lisp:nil
                       ((require-pin :initarg :require-pin :initform
                         (common-lisp:error ":require-pin is required") :type
                         (common-lisp:or require-pin common-lisp:null)
                         :accessor struct-shape-meeting-setting-require-pin
                         :shape "RequirePin" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-meeting-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'meeting-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'meeting-setting 'make-meeting-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input meeting-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input meeting-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-pin))
      (common-lisp:list
       (common-lisp:cons "RequirePin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input meeting-setting))
   common-lisp:nil))
(common-lisp:deftype minutes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition name-in-use-exception
     (alexaforbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       name-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'name-in-use-exception 'name-in-use-exception-message)))
(common-lisp:deftype network-eap-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-profile common-lisp:nil
                       ((network-profile-arn :initarg :network-profile-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-network-profile-network-profile-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (network-profile-name :initarg :network-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or network-profile-name common-lisp:null)
                         :accessor
                         struct-shape-network-profile-network-profile-name
                         :shape "NetworkProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or network-profile-description
                                         common-lisp:null)
                         :accessor struct-shape-network-profile-description
                         :shape "NetworkProfileDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ssid :initarg :ssid :initform common-lisp:nil :type
                         (common-lisp:or network-ssid common-lisp:null)
                         :accessor struct-shape-network-profile-ssid :shape
                         "NetworkSsid" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (security-type :initarg :security-type :initform
                         common-lisp:nil :type
                         (common-lisp:or network-security-type
                                         common-lisp:null)
                         :accessor struct-shape-network-profile-security-type
                         :shape "NetworkSecurityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (eap-method :initarg :eap-method :initform
                         common-lisp:nil :type
                         (common-lisp:or network-eap-method common-lisp:null)
                         :accessor struct-shape-network-profile-eap-method
                         :shape "NetworkEapMethod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-password :initarg :current-password :initform
                         common-lisp:nil :type
                         (common-lisp:or current-wi-fi-password
                                         common-lisp:null)
                         :accessor
                         struct-shape-network-profile-current-password :shape
                         "CurrentWiFiPassword" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-password :initarg :next-password :initform
                         common-lisp:nil :type
                         (common-lisp:or next-wi-fi-password common-lisp:null)
                         :accessor struct-shape-network-profile-next-password
                         :shape "NextWiFiPassword" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-authority-arn :initarg
                         :certificate-authority-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-network-profile-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (trust-anchors :initarg :trust-anchors :initform
                         common-lisp:nil :type
                         (common-lisp:or trust-anchor-list common-lisp:null)
                         :accessor struct-shape-network-profile-trust-anchors
                         :shape "TrustAnchorList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-profile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'network-profile 'make-network-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-profile-arn))
      (common-lisp:list
       (common-lisp:cons "NetworkProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-profile-name))
      (common-lisp:list
       (common-lisp:cons "NetworkProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssid))
      (common-lisp:list
       (common-lisp:cons "Ssid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-type))
      (common-lisp:list
       (common-lisp:cons "SecurityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eap-method))
      (common-lisp:list
       (common-lisp:cons "EapMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-password))
      (common-lisp:list
       (common-lisp:cons "CurrentPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-password))
      (common-lisp:list
       (common-lisp:cons "NextPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-anchors))
      (common-lisp:list
       (common-lisp:cons "TrustAnchors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-profile-data common-lisp:nil
                       ((network-profile-arn :initarg :network-profile-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-network-profile-data-network-profile-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (network-profile-name :initarg :network-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or network-profile-name common-lisp:null)
                         :accessor
                         struct-shape-network-profile-data-network-profile-name
                         :shape "NetworkProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or network-profile-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-network-profile-data-description :shape
                         "NetworkProfileDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssid :initarg :ssid :initform common-lisp:nil :type
                         (common-lisp:or network-ssid common-lisp:null)
                         :accessor struct-shape-network-profile-data-ssid
                         :shape "NetworkSsid" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-type :initarg :security-type :initform
                         common-lisp:nil :type
                         (common-lisp:or network-security-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-network-profile-data-security-type :shape
                         "NetworkSecurityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (eap-method :initarg :eap-method :initform
                         common-lisp:nil :type
                         (common-lisp:or network-eap-method common-lisp:null)
                         :accessor struct-shape-network-profile-data-eap-method
                         :shape "NetworkEapMethod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-authority-arn :initarg
                         :certificate-authority-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-network-profile-data-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-profile-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-profile-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-profile-data 'make-network-profile-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-profile-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-profile-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-profile-arn))
      (common-lisp:list
       (common-lisp:cons "NetworkProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-profile-name))
      (common-lisp:list
       (common-lisp:cons "NetworkProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssid))
      (common-lisp:list
       (common-lisp:cons "Ssid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-type))
      (common-lisp:list
       (common-lisp:cons "SecurityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eap-method))
      (common-lisp:list
       (common-lisp:cons "EapMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-profile-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-profile-data-list ()
   '(trivial-types:proper-list network-profile-data))
 (common-lisp:defun make-network-profile-data-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-profile-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype network-profile-description () 'common-lisp:string)
(common-lisp:deftype network-profile-name () 'common-lisp:string)
(common-lisp:deftype network-security-type () 'common-lisp:string)
(common-lisp:deftype network-ssid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype new-in-this-version-bullet-points ()
   '(trivial-types:proper-list bullet-point))
 (common-lisp:defun make-new-in-this-version-bullet-points
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bullet-point))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype next-wi-fi-password () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (alexaforbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype one-click-id-delay () 'common-lisp:string)
(common-lisp:deftype one-click-pin-delay () 'common-lisp:string)
(common-lisp:deftype organization-name () 'common-lisp:string)
(common-lisp:deftype outbound-phone-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pstndial-in common-lisp:nil
                       ((country-code :initarg :country-code :initform
                         (common-lisp:error ":country-code is required") :type
                         (common-lisp:or country-code common-lisp:null)
                         :accessor struct-shape-pstndial-in-country-code :shape
                         "CountryCode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         (common-lisp:error ":phone-number is required") :type
                         (common-lisp:or outbound-phone-number
                                         common-lisp:null)
                         :accessor struct-shape-pstndial-in-phone-number :shape
                         "OutboundPhoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (one-click-id-delay :initarg :one-click-id-delay
                         :initform
                         (common-lisp:error ":one-click-id-delay is required")
                         :type
                         (common-lisp:or one-click-id-delay common-lisp:null)
                         :accessor struct-shape-pstndial-in-one-click-id-delay
                         :shape "OneClickIdDelay" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (one-click-pin-delay :initarg :one-click-pin-delay
                         :initform
                         (common-lisp:error ":one-click-pin-delay is required")
                         :type
                         (common-lisp:or one-click-pin-delay common-lisp:null)
                         :accessor struct-shape-pstndial-in-one-click-pin-delay
                         :shape "OneClickPinDelay" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pstndial-in
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pstndial-in
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'pstndial-in 'make-pstndial-in))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pstndial-in))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pstndial-in))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-code))
      (common-lisp:list
       (common-lisp:cons "CountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'one-click-id-delay))
      (common-lisp:list
       (common-lisp:cons "OneClickIdDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'one-click-pin-delay))
      (common-lisp:list
       (common-lisp:cons "OneClickPinDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pstndial-in))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass phone-number common-lisp:nil
                       ((number :initarg :number :initform
                         (common-lisp:error ":number is required") :type
                         (common-lisp:or raw-phone-number common-lisp:null)
                         :accessor struct-shape-phone-number-number :shape
                         "RawPhoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or phone-number-type common-lisp:null)
                         :accessor struct-shape-phone-number-type :shape
                         "PhoneNumberType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-phone-number
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'phone-number
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'phone-number 'make-phone-number))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input phone-number))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input phone-number))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number))
      (common-lisp:list
       (common-lisp:cons "Number"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input phone-number))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype phone-number-list ()
   '(trivial-types:proper-list phone-number))
 (common-lisp:defun make-phone-number-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list phone-number))
   aws-sdk/generator/shape::members))
(common-lisp:deftype phone-number-type () 'common-lisp:string)
(common-lisp:deftype privacy-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass proactive-join common-lisp:nil
                       ((enabled-by-motion :initarg :enabled-by-motion
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-proactive-join-enabled-by-motion :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-proactive-join
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'proactive-join
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'proactive-join 'make-proactive-join))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input proactive-join))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input proactive-join))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-by-motion))
      (common-lisp:list
       (common-lisp:cons "EnabledByMotion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input proactive-join))
   common-lisp:nil))
(common-lisp:deftype product-description () 'common-lisp:string)
(common-lisp:deftype product-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass profile common-lisp:nil
                       ((profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-profile-profile-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (profile-name :initarg :profile-name :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-name common-lisp:null)
                         :accessor struct-shape-profile-profile-name :shape
                         "ProfileName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-default :initarg :is-default :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-profile-is-default :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (address :initarg :address :initform common-lisp:nil
                         :type (common-lisp:or address common-lisp:null)
                         :accessor struct-shape-profile-address :shape
                         "Address" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timezone :initarg :timezone :initform common-lisp:nil
                         :type (common-lisp:or timezone common-lisp:null)
                         :accessor struct-shape-profile-timezone :shape
                         "Timezone" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (distance-unit :initarg :distance-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or distance-unit common-lisp:null)
                         :accessor struct-shape-profile-distance-unit :shape
                         "DistanceUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (temperature-unit :initarg :temperature-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or temperature-unit common-lisp:null)
                         :accessor struct-shape-profile-temperature-unit :shape
                         "TemperatureUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (wake-word :initarg :wake-word :initform
                         common-lisp:nil :type
                         (common-lisp:or wake-word common-lisp:null) :accessor
                         struct-shape-profile-wake-word :shape "WakeWord"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (locale :initarg :locale :initform common-lisp:nil
                         :type (common-lisp:or device-locale common-lisp:null)
                         :accessor struct-shape-profile-locale :shape
                         "DeviceLocale" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (setup-mode-disabled :initarg :setup-mode-disabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-profile-setup-mode-disabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-volume-limit :initarg :max-volume-limit :initform
                         common-lisp:nil :type
                         (common-lisp:or max-volume-limit common-lisp:null)
                         :accessor struct-shape-profile-max-volume-limit :shape
                         "MaxVolumeLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pstnenabled :initarg :pstnenabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-profile-pstnenabled :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-retention-opt-in :initarg :data-retention-opt-in
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-profile-data-retention-opt-in :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (address-book-arn :initarg :address-book-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-profile-address-book-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (meeting-room-configuration :initarg
                         :meeting-room-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or meeting-room-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-profile-meeting-room-configuration :shape
                         "MeetingRoomConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-profile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'profile
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'profile 'make-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-name))
      (common-lisp:list
       (common-lisp:cons "ProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distance-unit))
      (common-lisp:list
       (common-lisp:cons "DistanceUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'temperature-unit))
      (common-lisp:list
       (common-lisp:cons "TemperatureUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wake-word))
      (common-lisp:list
       (common-lisp:cons "WakeWord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setup-mode-disabled))
      (common-lisp:list
       (common-lisp:cons "SetupModeDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-volume-limit))
      (common-lisp:list
       (common-lisp:cons "MaxVolumeLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pstnenabled))
      (common-lisp:list
       (common-lisp:cons "PSTNEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-retention-opt-in))
      (common-lisp:list
       (common-lisp:cons "DataRetentionOptIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-book-arn))
      (common-lisp:list
       (common-lisp:cons "AddressBookArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'meeting-room-configuration))
      (common-lisp:list
       (common-lisp:cons "MeetingRoomConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass profile-data common-lisp:nil
                       ((profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-profile-data-profile-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (profile-name :initarg :profile-name :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-name common-lisp:null)
                         :accessor struct-shape-profile-data-profile-name
                         :shape "ProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-default :initarg :is-default :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-profile-data-is-default :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (address :initarg :address :initform common-lisp:nil
                         :type (common-lisp:or address common-lisp:null)
                         :accessor struct-shape-profile-data-address :shape
                         "Address" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timezone :initarg :timezone :initform common-lisp:nil
                         :type (common-lisp:or timezone common-lisp:null)
                         :accessor struct-shape-profile-data-timezone :shape
                         "Timezone" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (distance-unit :initarg :distance-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or distance-unit common-lisp:null)
                         :accessor struct-shape-profile-data-distance-unit
                         :shape "DistanceUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (temperature-unit :initarg :temperature-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or temperature-unit common-lisp:null)
                         :accessor struct-shape-profile-data-temperature-unit
                         :shape "TemperatureUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (wake-word :initarg :wake-word :initform
                         common-lisp:nil :type
                         (common-lisp:or wake-word common-lisp:null) :accessor
                         struct-shape-profile-data-wake-word :shape "WakeWord"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (locale :initarg :locale :initform common-lisp:nil
                         :type (common-lisp:or device-locale common-lisp:null)
                         :accessor struct-shape-profile-data-locale :shape
                         "DeviceLocale" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-profile-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'profile-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'profile-data 'make-profile-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profile-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profile-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-name))
      (common-lisp:list
       (common-lisp:cons "ProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distance-unit))
      (common-lisp:list
       (common-lisp:cons "DistanceUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'temperature-unit))
      (common-lisp:list
       (common-lisp:cons "TemperatureUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wake-word))
      (common-lisp:list
       (common-lisp:cons "WakeWord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profile-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype profile-data-list ()
   '(trivial-types:proper-list profile-data))
 (common-lisp:defun make-profile-data-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype profile-name () 'common-lisp:string)
(common-lisp:deftype provider-calendar-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-conference-preference-request common-lisp:nil
                       ((conference-preference :initarg :conference-preference
                         :initform
                         (common-lisp:error
                          ":conference-preference is required")
                         :type
                         (common-lisp:or conference-preference
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-conference-preference-request-conference-preference
                         :shape "ConferencePreference" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-conference-preference-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-conference-preference-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-conference-preference-request
                    'make-put-conference-preference-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-conference-preference-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-conference-preference-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conference-preference))
      (common-lisp:list
       (common-lisp:cons "ConferencePreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-conference-preference-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-conference-preference-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-conference-preference-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-conference-preference-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-conference-preference-response
                    'make-put-conference-preference-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-conference-preference-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-conference-preference-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-conference-preference-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-invitation-configuration-request common-lisp:nil
                       ((organization-name :initarg :organization-name
                         :initform
                         (common-lisp:error ":organization-name is required")
                         :type
                         (common-lisp:or organization-name common-lisp:null)
                         :accessor
                         struct-shape-put-invitation-configuration-request-organization-name
                         :shape "OrganizationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contact-email :initarg :contact-email :initform
                         common-lisp:nil :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-put-invitation-configuration-request-contact-email
                         :shape "Email" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-skill-ids :initarg :private-skill-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or short-skill-id-list common-lisp:null)
                         :accessor
                         struct-shape-put-invitation-configuration-request-private-skill-ids
                         :shape "ShortSkillIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-invitation-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-invitation-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-invitation-configuration-request
                    'make-put-invitation-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-invitation-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-invitation-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-email))
      (common-lisp:list
       (common-lisp:cons "ContactEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-skill-ids))
      (common-lisp:list
       (common-lisp:cons "PrivateSkillIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-invitation-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-invitation-configuration-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-invitation-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-invitation-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-invitation-configuration-response
                    'make-put-invitation-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-invitation-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-invitation-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-invitation-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-room-skill-parameter-request common-lisp:nil
                       ((room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-put-room-skill-parameter-request-room-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (skill-id :initarg :skill-id :initform
                         (common-lisp:error ":skill-id is required") :type
                         (common-lisp:or skill-id common-lisp:null) :accessor
                         struct-shape-put-room-skill-parameter-request-skill-id
                         :shape "SkillId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (room-skill-parameter :initarg :room-skill-parameter
                         :initform
                         (common-lisp:error
                          ":room-skill-parameter is required")
                         :type
                         (common-lisp:or room-skill-parameter common-lisp:null)
                         :accessor
                         struct-shape-put-room-skill-parameter-request-room-skill-parameter
                         :shape "RoomSkillParameter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-room-skill-parameter-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-room-skill-parameter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-room-skill-parameter-request
                    'make-put-room-skill-parameter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-room-skill-parameter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-room-skill-parameter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-id))
      (common-lisp:list
       (common-lisp:cons "SkillId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'room-skill-parameter))
      (common-lisp:list
       (common-lisp:cons "RoomSkillParameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-room-skill-parameter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-room-skill-parameter-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-room-skill-parameter-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-room-skill-parameter-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-room-skill-parameter-response
                    'make-put-room-skill-parameter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-room-skill-parameter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-room-skill-parameter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-room-skill-parameter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-skill-authorization-request common-lisp:nil
                       ((authorization-result :initarg :authorization-result
                         :initform
                         (common-lisp:error
                          ":authorization-result is required")
                         :type
                         (common-lisp:or authorization-result common-lisp:null)
                         :accessor
                         struct-shape-put-skill-authorization-request-authorization-result
                         :shape "AuthorizationResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skill-id :initarg :skill-id :initform
                         (common-lisp:error ":skill-id is required") :type
                         (common-lisp:or skill-id common-lisp:null) :accessor
                         struct-shape-put-skill-authorization-request-skill-id
                         :shape "SkillId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-put-skill-authorization-request-room-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-skill-authorization-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-skill-authorization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-skill-authorization-request
                    'make-put-skill-authorization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-skill-authorization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-skill-authorization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-result))
      (common-lisp:list
       (common-lisp:cons "AuthorizationResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-id))
      (common-lisp:list
       (common-lisp:cons "SkillId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-skill-authorization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-skill-authorization-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-skill-authorization-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-skill-authorization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-skill-authorization-response
                    'make-put-skill-authorization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-skill-authorization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-skill-authorization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-skill-authorization-response))
   common-lisp:nil))
(common-lisp:deftype raw-phone-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-avsdevice-request common-lisp:nil
                       ((client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or client-id common-lisp:null) :accessor
                         struct-shape-register-avsdevice-request-client-id
                         :shape "ClientId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-code :initarg :user-code :initform
                         (common-lisp:error ":user-code is required") :type
                         (common-lisp:or user-code common-lisp:null) :accessor
                         struct-shape-register-avsdevice-request-user-code
                         :shape "UserCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product-id :initarg :product-id :initform
                         (common-lisp:error ":product-id is required") :type
                         (common-lisp:or product-id common-lisp:null) :accessor
                         struct-shape-register-avsdevice-request-product-id
                         :shape "ProductId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-serial-number :initarg :device-serial-number
                         :initform common-lisp:nil :type
                         (common-lisp:or device-serial-number-for-avs
                                         common-lisp:null)
                         :accessor
                         struct-shape-register-avsdevice-request-device-serial-number
                         :shape "DeviceSerialNumberForAVS" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (amazon-id :initarg :amazon-id :initform
                         (common-lisp:error ":amazon-id is required") :type
                         (common-lisp:or amazon-id common-lisp:null) :accessor
                         struct-shape-register-avsdevice-request-amazon-id
                         :shape "AmazonId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-register-avsdevice-request-room-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-register-avsdevice-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-avsdevice-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-avsdevice-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-avsdevice-request
                    'make-register-avsdevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-avsdevice-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-avsdevice-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-code))
      (common-lisp:list
       (common-lisp:cons "UserCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-serial-number))
      (common-lisp:list
       (common-lisp:cons "DeviceSerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-id))
      (common-lisp:list
       (common-lisp:cons "AmazonId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-avsdevice-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-avsdevice-response common-lisp:nil
                       ((device-arn :initarg :device-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-register-avsdevice-response-device-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-avsdevice-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-avsdevice-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-avsdevice-response
                    'make-register-avsdevice-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-avsdevice-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-avsdevice-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-avsdevice-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-skill-request common-lisp:nil
                       ((skill-id :initarg :skill-id :initform
                         (common-lisp:error ":skill-id is required") :type
                         (common-lisp:or skill-id common-lisp:null) :accessor
                         struct-shape-reject-skill-request-skill-id :shape
                         "SkillId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-skill-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reject-skill-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-skill-request 'make-reject-skill-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reject-skill-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reject-skill-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-id))
      (common-lisp:list
       (common-lisp:cons "SkillId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reject-skill-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-skill-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-skill-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reject-skill-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-skill-response 'make-reject-skill-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-skill-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-skill-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-skill-response))
   common-lisp:nil))
(common-lisp:deftype release-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass require-check-in common-lisp:nil
                       ((release-after-minutes :initarg :release-after-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or minutes common-lisp:null) :accessor
                         struct-shape-require-check-in-release-after-minutes
                         :shape "Minutes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-require-check-in-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-require-check-in
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'require-check-in
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'require-check-in 'make-require-check-in))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input require-check-in))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input require-check-in))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'release-after-minutes))
      (common-lisp:list
       (common-lisp:cons "ReleaseAfterMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input require-check-in))
   common-lisp:nil))
(common-lisp:deftype require-pin () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resolve-room-request common-lisp:nil
                       ((user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-resolve-room-request-user-id :shape
                         "UserId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (skill-id :initarg :skill-id :initform
                         (common-lisp:error ":skill-id is required") :type
                         (common-lisp:or skill-id common-lisp:null) :accessor
                         struct-shape-resolve-room-request-skill-id :shape
                         "SkillId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resolve-room-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resolve-room-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resolve-room-request 'make-resolve-room-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolve-room-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolve-room-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-id))
      (common-lisp:list
       (common-lisp:cons "SkillId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolve-room-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resolve-room-response common-lisp:nil
                       ((room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-resolve-room-response-room-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (room-name :initarg :room-name :initform
                         common-lisp:nil :type
                         (common-lisp:or room-name common-lisp:null) :accessor
                         struct-shape-resolve-room-response-room-name :shape
                         "RoomName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (room-skill-parameters :initarg :room-skill-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or room-skill-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-resolve-room-response-room-skill-parameters
                         :shape "RoomSkillParameters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resolve-room-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resolve-room-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resolve-room-response 'make-resolve-room-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resolve-room-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resolve-room-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-name))
      (common-lisp:list
       (common-lisp:cons "RoomName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'room-skill-parameters))
      (common-lisp:list
       (common-lisp:cons "RoomSkillParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resolve-room-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-associated-exception
     (alexaforbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-associated-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-associated-exception
                    'resource-associated-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (alexaforbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)
      (client-request-token :initarg :client-request-token :initform
       common-lisp:nil :reader
       resource-in-use-exception-client-request-token)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message
                    'resource-in-use-exception-client-request-token)))
(common-lisp:deftype review-key () 'common-lisp:string)
(common-lisp:deftype review-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype reviews () 'common-lisp:hash-table)
 (common-lisp:defun make-reviews (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass revoke-invitation-request common-lisp:nil
                       ((user-arn :initarg :user-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-revoke-invitation-request-user-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enrollment-id :initarg :enrollment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or enrollment-id common-lisp:null)
                         :accessor
                         struct-shape-revoke-invitation-request-enrollment-id
                         :shape "EnrollmentId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-invitation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'revoke-invitation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-invitation-request
                    'make-revoke-invitation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-invitation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-invitation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "UserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enrollment-id))
      (common-lisp:list
       (common-lisp:cons "EnrollmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-invitation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-invitation-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-invitation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'revoke-invitation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-invitation-response
                    'make-revoke-invitation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-invitation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass room common-lisp:nil
                       ((room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-room-room-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (room-name :initarg :room-name :initform
                         common-lisp:nil :type
                         (common-lisp:or room-name common-lisp:null) :accessor
                         struct-shape-room-room-name :shape "RoomName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or room-description common-lisp:null)
                         :accessor struct-shape-room-description :shape
                         "RoomDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-calendar-id :initarg :provider-calendar-id
                         :initform common-lisp:nil :type
                         (common-lisp:or provider-calendar-id common-lisp:null)
                         :accessor struct-shape-room-provider-calendar-id
                         :shape "ProviderCalendarId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-room-profile-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-room (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'room
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'room 'make-room))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input room))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input room))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-name))
      (common-lisp:list
       (common-lisp:cons "RoomName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provider-calendar-id))
      (common-lisp:list
       (common-lisp:cons "ProviderCalendarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input room))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass room-data common-lisp:nil
                       ((room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-room-data-room-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (room-name :initarg :room-name :initform
                         common-lisp:nil :type
                         (common-lisp:or room-name common-lisp:null) :accessor
                         struct-shape-room-data-room-name :shape "RoomName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or room-description common-lisp:null)
                         :accessor struct-shape-room-data-description :shape
                         "RoomDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-calendar-id :initarg :provider-calendar-id
                         :initform common-lisp:nil :type
                         (common-lisp:or provider-calendar-id common-lisp:null)
                         :accessor struct-shape-room-data-provider-calendar-id
                         :shape "ProviderCalendarId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-room-data-profile-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (profile-name :initarg :profile-name :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-name common-lisp:null)
                         :accessor struct-shape-room-data-profile-name :shape
                         "ProfileName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-room-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'room-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'room-data 'make-room-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input room-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input room-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-name))
      (common-lisp:list
       (common-lisp:cons "RoomName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provider-calendar-id))
      (common-lisp:list
       (common-lisp:cons "ProviderCalendarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-name))
      (common-lisp:list
       (common-lisp:cons "ProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input room-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype room-data-list () '(trivial-types:proper-list room-data))
 (common-lisp:defun make-room-data-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list room-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype room-description () 'common-lisp:string)
(common-lisp:deftype room-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass room-skill-parameter common-lisp:nil
                       ((parameter-key :initarg :parameter-key :initform
                         (common-lisp:error ":parameter-key is required") :type
                         (common-lisp:or room-skill-parameter-key
                                         common-lisp:null)
                         :accessor
                         struct-shape-room-skill-parameter-parameter-key :shape
                         "RoomSkillParameterKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-value :initarg :parameter-value :initform
                         (common-lisp:error ":parameter-value is required")
                         :type
                         (common-lisp:or room-skill-parameter-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-room-skill-parameter-parameter-value
                         :shape "RoomSkillParameterValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-room-skill-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'room-skill-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'room-skill-parameter 'make-room-skill-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input room-skill-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input room-skill-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-key))
      (common-lisp:list
       (common-lisp:cons "ParameterKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input room-skill-parameter))
   common-lisp:nil))
(common-lisp:deftype room-skill-parameter-key () 'common-lisp:string)
(common-lisp:deftype room-skill-parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype room-skill-parameters ()
   '(trivial-types:proper-list room-skill-parameter))
 (common-lisp:defun make-room-skill-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list room-skill-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3key-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sample-utterances ()
   '(trivial-types:proper-list utterance))
 (common-lisp:defun make-sample-utterances
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list utterance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-address-books-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-search-address-books-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-criteria :initarg :sort-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-list common-lisp:null) :accessor
                         struct-shape-search-address-books-request-sort-criteria
                         :shape "SortList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-address-books-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-search-address-books-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-address-books-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-address-books-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-address-books-request
                    'make-search-address-books-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-address-books-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-address-books-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-address-books-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-address-books-response common-lisp:nil
                       ((address-books :initarg :address-books :initform
                         common-lisp:nil :type
                         (common-lisp:or address-book-data-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-address-books-response-address-books
                         :shape "AddressBookDataList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-address-books-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-count :initarg :total-count :initform
                         common-lisp:nil :type
                         (common-lisp:or total-count common-lisp:null)
                         :accessor
                         struct-shape-search-address-books-response-total-count
                         :shape "TotalCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-address-books-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-address-books-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-address-books-response
                    'make-search-address-books-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-address-books-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-address-books-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-books))
      (common-lisp:list
       (common-lisp:cons "AddressBooks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-address-books-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-contacts-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor struct-shape-search-contacts-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-criteria :initarg :sort-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-list common-lisp:null) :accessor
                         struct-shape-search-contacts-request-sort-criteria
                         :shape "SortList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-contacts-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-search-contacts-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-contacts-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-contacts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-contacts-request 'make-search-contacts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-contacts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-contacts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-contacts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-contacts-response common-lisp:nil
                       ((contacts :initarg :contacts :initform common-lisp:nil
                         :type
                         (common-lisp:or contact-data-list common-lisp:null)
                         :accessor
                         struct-shape-search-contacts-response-contacts :shape
                         "ContactDataList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-contacts-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-count :initarg :total-count :initform
                         common-lisp:nil :type
                         (common-lisp:or total-count common-lisp:null)
                         :accessor
                         struct-shape-search-contacts-response-total-count
                         :shape "TotalCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-contacts-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-contacts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-contacts-response 'make-search-contacts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-contacts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-contacts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contacts))
      (common-lisp:list
       (common-lisp:cons "Contacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-contacts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-devices-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-devices-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-search-devices-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor struct-shape-search-devices-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-criteria :initarg :sort-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-list common-lisp:null) :accessor
                         struct-shape-search-devices-request-sort-criteria
                         :shape "SortList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-devices-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-devices-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-devices-request 'make-search-devices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-devices-response common-lisp:nil
                       ((devices :initarg :devices :initform common-lisp:nil
                         :type
                         (common-lisp:or device-data-list common-lisp:null)
                         :accessor struct-shape-search-devices-response-devices
                         :shape "DeviceDataList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-devices-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-count :initarg :total-count :initform
                         common-lisp:nil :type
                         (common-lisp:or total-count common-lisp:null)
                         :accessor
                         struct-shape-search-devices-response-total-count
                         :shape "TotalCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-devices-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-devices-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-devices-response 'make-search-devices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'devices))
      (common-lisp:list
       (common-lisp:cons "Devices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-network-profiles-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-network-profiles-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-search-network-profiles-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-search-network-profiles-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-criteria :initarg :sort-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-list common-lisp:null) :accessor
                         struct-shape-search-network-profiles-request-sort-criteria
                         :shape "SortList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-network-profiles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-network-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-network-profiles-request
                    'make-search-network-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-network-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-network-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-network-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-network-profiles-response common-lisp:nil
                       ((network-profiles :initarg :network-profiles :initform
                         common-lisp:nil :type
                         (common-lisp:or network-profile-data-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-network-profiles-response-network-profiles
                         :shape "NetworkProfileDataList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-network-profiles-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-count :initarg :total-count :initform
                         common-lisp:nil :type
                         (common-lisp:or total-count common-lisp:null)
                         :accessor
                         struct-shape-search-network-profiles-response-total-count
                         :shape "TotalCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-network-profiles-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-network-profiles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-network-profiles-response
                    'make-search-network-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-network-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-network-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-profiles))
      (common-lisp:list
       (common-lisp:cons "NetworkProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-network-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-profiles-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-profiles-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-search-profiles-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor struct-shape-search-profiles-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-criteria :initarg :sort-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-list common-lisp:null) :accessor
                         struct-shape-search-profiles-request-sort-criteria
                         :shape "SortList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-profiles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-profiles-request 'make-search-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-profiles-response common-lisp:nil
                       ((profiles :initarg :profiles :initform common-lisp:nil
                         :type
                         (common-lisp:or profile-data-list common-lisp:null)
                         :accessor
                         struct-shape-search-profiles-response-profiles :shape
                         "ProfileDataList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-profiles-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-count :initarg :total-count :initform
                         common-lisp:nil :type
                         (common-lisp:or total-count common-lisp:null)
                         :accessor
                         struct-shape-search-profiles-response-total-count
                         :shape "TotalCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-profiles-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-profiles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-profiles-response 'make-search-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiles))
      (common-lisp:list
       (common-lisp:cons "Profiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-rooms-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-rooms-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-search-rooms-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor struct-shape-search-rooms-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-criteria :initarg :sort-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-list common-lisp:null) :accessor
                         struct-shape-search-rooms-request-sort-criteria :shape
                         "SortList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-rooms-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-rooms-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-rooms-request 'make-search-rooms-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-rooms-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-rooms-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-rooms-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-rooms-response common-lisp:nil
                       ((rooms :initarg :rooms :initform common-lisp:nil :type
                         (common-lisp:or room-data-list common-lisp:null)
                         :accessor struct-shape-search-rooms-response-rooms
                         :shape "RoomDataList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-rooms-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-count :initarg :total-count :initform
                         common-lisp:nil :type
                         (common-lisp:or total-count common-lisp:null)
                         :accessor
                         struct-shape-search-rooms-response-total-count :shape
                         "TotalCount" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-rooms-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-rooms-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-rooms-response 'make-search-rooms-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-rooms-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-rooms-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rooms))
      (common-lisp:list
       (common-lisp:cons "Rooms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-rooms-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-skill-groups-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-skill-groups-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-search-skill-groups-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-search-skill-groups-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-criteria :initarg :sort-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-list common-lisp:null) :accessor
                         struct-shape-search-skill-groups-request-sort-criteria
                         :shape "SortList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-skill-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-skill-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-skill-groups-request
                    'make-search-skill-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-skill-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-skill-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-skill-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-skill-groups-response common-lisp:nil
                       ((skill-groups :initarg :skill-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-group-data-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-skill-groups-response-skill-groups
                         :shape "SkillGroupDataList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-skill-groups-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-count :initarg :total-count :initform
                         common-lisp:nil :type
                         (common-lisp:or total-count common-lisp:null)
                         :accessor
                         struct-shape-search-skill-groups-response-total-count
                         :shape "TotalCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-skill-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-skill-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-skill-groups-response
                    'make-search-skill-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-skill-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-skill-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-groups))
      (common-lisp:list
       (common-lisp:cons "SkillGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-skill-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-users-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-users-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-search-users-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor struct-shape-search-users-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-criteria :initarg :sort-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-list common-lisp:null) :accessor
                         struct-shape-search-users-request-sort-criteria :shape
                         "SortList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-users-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-users-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-users-request 'make-search-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-users-response common-lisp:nil
                       ((users :initarg :users :initform common-lisp:nil :type
                         (common-lisp:or user-data-list common-lisp:null)
                         :accessor struct-shape-search-users-response-users
                         :shape "UserDataList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-search-users-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-count :initarg :total-count :initform
                         common-lisp:nil :type
                         (common-lisp:or total-count common-lisp:null)
                         :accessor
                         struct-shape-search-users-response-total-count :shape
                         "TotalCount" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-users-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-users-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-users-response 'make-search-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-users-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-announcement-request common-lisp:nil
                       ((room-filters :initarg :room-filters :initform
                         (common-lisp:error ":room-filters is required") :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-send-announcement-request-room-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content :initarg :content :initform
                         (common-lisp:error ":content is required") :type
                         (common-lisp:or content common-lisp:null) :accessor
                         struct-shape-send-announcement-request-content :shape
                         "Content" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (time-to-live-in-seconds :initarg
                         :time-to-live-in-seconds :initform common-lisp:nil
                         :type
                         (common-lisp:or time-to-live-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-send-announcement-request-time-to-live-in-seconds
                         :shape "TimeToLiveInSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform
                         (common-lisp:error
                          ":client-request-token is required")
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-send-announcement-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-announcement-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-announcement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-announcement-request
                    'make-send-announcement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-announcement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-announcement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-filters))
      (common-lisp:list
       (common-lisp:cons "RoomFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-to-live-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TimeToLiveInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-announcement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-announcement-response common-lisp:nil
                       ((announcement-arn :initarg :announcement-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-send-announcement-response-announcement-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-announcement-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-announcement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-announcement-response
                    'make-send-announcement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-announcement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-announcement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'announcement-arn))
      (common-lisp:list
       (common-lisp:cons "AnnouncementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-announcement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-invitation-request common-lisp:nil
                       ((user-arn :initarg :user-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-send-invitation-request-user-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-invitation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-invitation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-invitation-request 'make-send-invitation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-invitation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-invitation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "UserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-invitation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-invitation-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-send-invitation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'send-invitation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'send-invitation-response 'make-send-invitation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-invitation-response))
   common-lisp:nil))
(common-lisp:deftype short-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype short-skill-id-list ()
   '(trivial-types:proper-list skill-id))
 (common-lisp:defun make-short-skill-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list skill-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sip-address common-lisp:nil
                       ((uri :initarg :uri :initform
                         (common-lisp:error ":uri is required") :type
                         (common-lisp:or sip-uri common-lisp:null) :accessor
                         struct-shape-sip-address-uri :shape "SipUri" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or sip-type common-lisp:null) :accessor
                         struct-shape-sip-address-type :shape "SipType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sip-address
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sip-address
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sip-address 'make-sip-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sip-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sip-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sip-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sip-address-list ()
   '(trivial-types:proper-list sip-address))
 (common-lisp:defun make-sip-address-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sip-address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sip-type () 'common-lisp:string)
(common-lisp:deftype sip-uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass skill-details common-lisp:nil
                       ((product-description :initarg :product-description
                         :initform common-lisp:nil :type
                         (common-lisp:or product-description common-lisp:null)
                         :accessor
                         struct-shape-skill-details-product-description :shape
                         "ProductDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (invocation-phrase :initarg :invocation-phrase
                         :initform common-lisp:nil :type
                         (common-lisp:or invocation-phrase common-lisp:null)
                         :accessor struct-shape-skill-details-invocation-phrase
                         :shape "InvocationPhrase" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (release-date :initarg :release-date :initform
                         common-lisp:nil :type
                         (common-lisp:or release-date common-lisp:null)
                         :accessor struct-shape-skill-details-release-date
                         :shape "ReleaseDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-user-license-agreement :initarg
                         :end-user-license-agreement :initform common-lisp:nil
                         :type
                         (common-lisp:or end-user-license-agreement
                                         common-lisp:null)
                         :accessor
                         struct-shape-skill-details-end-user-license-agreement
                         :shape "EndUserLicenseAgreement" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (generic-keywords :initarg :generic-keywords :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-keywords common-lisp:null)
                         :accessor struct-shape-skill-details-generic-keywords
                         :shape "GenericKeywords" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bullet-points :initarg :bullet-points :initform
                         common-lisp:nil :type
                         (common-lisp:or bullet-points common-lisp:null)
                         :accessor struct-shape-skill-details-bullet-points
                         :shape "BulletPoints" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-in-this-version-bullet-points :initarg
                         :new-in-this-version-bullet-points :initform
                         common-lisp:nil :type
                         (common-lisp:or new-in-this-version-bullet-points
                                         common-lisp:null)
                         :accessor
                         struct-shape-skill-details-new-in-this-version-bullet-points
                         :shape "NewInThisVersionBulletPoints" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (skill-types :initarg :skill-types :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-types common-lisp:null)
                         :accessor struct-shape-skill-details-skill-types
                         :shape "SkillTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reviews :initarg :reviews :initform common-lisp:nil
                         :type (common-lisp:or reviews common-lisp:null)
                         :accessor struct-shape-skill-details-reviews :shape
                         "Reviews" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (developer-info :initarg :developer-info :initform
                         common-lisp:nil :type
                         (common-lisp:or developer-info common-lisp:null)
                         :accessor struct-shape-skill-details-developer-info
                         :shape "DeveloperInfo" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-skill-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'skill-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'skill-details 'make-skill-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input skill-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input skill-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-phrase))
      (common-lisp:list
       (common-lisp:cons "InvocationPhrase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-date))
      (common-lisp:list
       (common-lisp:cons "ReleaseDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'end-user-license-agreement))
      (common-lisp:list
       (common-lisp:cons "EndUserLicenseAgreement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generic-keywords))
      (common-lisp:list
       (common-lisp:cons "GenericKeywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bullet-points))
      (common-lisp:list
       (common-lisp:cons "BulletPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-in-this-version-bullet-points))
      (common-lisp:list
       (common-lisp:cons "NewInThisVersionBulletPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-types))
      (common-lisp:list
       (common-lisp:cons "SkillTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviews))
      (common-lisp:list
       (common-lisp:cons "Reviews"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'developer-info))
      (common-lisp:list
       (common-lisp:cons "DeveloperInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input skill-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass skill-group common-lisp:nil
                       ((skill-group-arn :initarg :skill-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-skill-group-skill-group-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (skill-group-name :initarg :skill-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-group-name common-lisp:null)
                         :accessor struct-shape-skill-group-skill-group-name
                         :shape "SkillGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-group-description
                                         common-lisp:null)
                         :accessor struct-shape-skill-group-description :shape
                         "SkillGroupDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-skill-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'skill-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'skill-group 'make-skill-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input skill-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input skill-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-group-arn))
      (common-lisp:list
       (common-lisp:cons "SkillGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-group-name))
      (common-lisp:list
       (common-lisp:cons "SkillGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input skill-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass skill-group-data common-lisp:nil
                       ((skill-group-arn :initarg :skill-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-skill-group-data-skill-group-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (skill-group-name :initarg :skill-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-group-name common-lisp:null)
                         :accessor
                         struct-shape-skill-group-data-skill-group-name :shape
                         "SkillGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-group-description
                                         common-lisp:null)
                         :accessor struct-shape-skill-group-data-description
                         :shape "SkillGroupDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-skill-group-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'skill-group-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'skill-group-data 'make-skill-group-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input skill-group-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input skill-group-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-group-arn))
      (common-lisp:list
       (common-lisp:cons "SkillGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-group-name))
      (common-lisp:list
       (common-lisp:cons "SkillGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input skill-group-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype skill-group-data-list ()
   '(trivial-types:proper-list skill-group-data))
 (common-lisp:defun make-skill-group-data-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list skill-group-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype skill-group-description () 'common-lisp:string)
(common-lisp:deftype skill-group-name () 'common-lisp:string)
(common-lisp:deftype skill-id () 'common-lisp:string)
(common-lisp:deftype skill-list-max-results () 'common-lisp:integer)
(common-lisp:deftype skill-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition skill-not-linked-exception
     (alexaforbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       skill-not-linked-exception-message)))
 (common-lisp:export
  (common-lisp:list 'skill-not-linked-exception
                    'skill-not-linked-exception-message)))
(common-lisp:deftype skill-store-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass skill-summary common-lisp:nil
                       ((skill-id :initarg :skill-id :initform common-lisp:nil
                         :type (common-lisp:or skill-id common-lisp:null)
                         :accessor struct-shape-skill-summary-skill-id :shape
                         "SkillId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (skill-name :initarg :skill-name :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-name common-lisp:null) :accessor
                         struct-shape-skill-summary-skill-name :shape
                         "SkillName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (supports-linking :initarg :supports-linking :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor struct-shape-skill-summary-supports-linking
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enablement-type :initarg :enablement-type :initform
                         common-lisp:nil :type
                         (common-lisp:or enablement-type common-lisp:null)
                         :accessor struct-shape-skill-summary-enablement-type
                         :shape "EnablementType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skill-type :initarg :skill-type :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-type common-lisp:null) :accessor
                         struct-shape-skill-summary-skill-type :shape
                         "SkillType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-skill-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'skill-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'skill-summary 'make-skill-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input skill-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input skill-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-id))
      (common-lisp:list
       (common-lisp:cons "SkillId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-name))
      (common-lisp:list
       (common-lisp:cons "SkillName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supports-linking))
      (common-lisp:list
       (common-lisp:cons "SupportsLinking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enablement-type))
      (common-lisp:list
       (common-lisp:cons "EnablementType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-type))
      (common-lisp:list
       (common-lisp:cons "SkillType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input skill-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype skill-summary-list ()
   '(trivial-types:proper-list skill-summary))
 (common-lisp:defun make-skill-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list skill-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype skill-type () 'common-lisp:string)
(common-lisp:deftype skill-type-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype skill-types ()
   '(trivial-types:proper-list skill-store-type))
 (common-lisp:defun make-skill-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list skill-store-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass skills-store-skill common-lisp:nil
                       ((skill-id :initarg :skill-id :initform common-lisp:nil
                         :type (common-lisp:or skill-id common-lisp:null)
                         :accessor struct-shape-skills-store-skill-skill-id
                         :shape "SkillId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skill-name :initarg :skill-name :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-name common-lisp:null) :accessor
                         struct-shape-skills-store-skill-skill-name :shape
                         "SkillName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (short-description :initarg :short-description
                         :initform common-lisp:nil :type
                         (common-lisp:or short-description common-lisp:null)
                         :accessor
                         struct-shape-skills-store-skill-short-description
                         :shape "ShortDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (icon-url :initarg :icon-url :initform common-lisp:nil
                         :type (common-lisp:or icon-url common-lisp:null)
                         :accessor struct-shape-skills-store-skill-icon-url
                         :shape "IconUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sample-utterances :initarg :sample-utterances
                         :initform common-lisp:nil :type
                         (common-lisp:or sample-utterances common-lisp:null)
                         :accessor
                         struct-shape-skills-store-skill-sample-utterances
                         :shape "SampleUtterances" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skill-details :initarg :skill-details :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-details common-lisp:null)
                         :accessor
                         struct-shape-skills-store-skill-skill-details :shape
                         "SkillDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-linking :initarg :supports-linking :initform
                         common-lisp:nil :type
                         (common-lisp:or common-lisp:boolean common-lisp:null)
                         :accessor
                         struct-shape-skills-store-skill-supports-linking
                         :shape "boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-skills-store-skill
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'skills-store-skill
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'skills-store-skill 'make-skills-store-skill))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input skills-store-skill))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input skills-store-skill))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-id))
      (common-lisp:list
       (common-lisp:cons "SkillId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-name))
      (common-lisp:list
       (common-lisp:cons "SkillName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "ShortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-url))
      (common-lisp:list
       (common-lisp:cons "IconUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "SampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-details))
      (common-lisp:list
       (common-lisp:cons "SkillDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supports-linking))
      (common-lisp:list
       (common-lisp:cons "SupportsLinking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input skills-store-skill))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype skills-store-skill-list ()
   '(trivial-types:proper-list skills-store-skill))
 (common-lisp:defun make-skills-store-skill-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list skills-store-skill))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass smart-home-appliance common-lisp:nil
                       ((friendly-name :initarg :friendly-name :initform
                         common-lisp:nil :type
                         (common-lisp:or appliance-friendly-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-smart-home-appliance-friendly-name :shape
                         "ApplianceFriendlyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or appliance-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-smart-home-appliance-description :shape
                         "ApplianceDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manufacturer-name :initarg :manufacturer-name
                         :initform common-lisp:nil :type
                         (common-lisp:or appliance-manufacturer-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-smart-home-appliance-manufacturer-name
                         :shape "ApplianceManufacturerName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-smart-home-appliance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'smart-home-appliance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'smart-home-appliance 'make-smart-home-appliance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input smart-home-appliance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input smart-home-appliance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'friendly-name))
      (common-lisp:list
       (common-lisp:cons "FriendlyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manufacturer-name))
      (common-lisp:list
       (common-lisp:cons "ManufacturerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input smart-home-appliance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype smart-home-appliance-list ()
   '(trivial-types:proper-list smart-home-appliance))
 (common-lisp:defun make-smart-home-appliance-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list smart-home-appliance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype software-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sort common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or sort-key common-lisp:null) :accessor
                         struct-shape-sort-key :shape "SortKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or sort-value common-lisp:null) :accessor
                         struct-shape-sort-value :shape "SortValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sort (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sort
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sort 'make-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort))
   common-lisp:nil))
(common-lisp:deftype sort-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sort-list () '(trivial-types:proper-list sort))
 (common-lisp:defun make-sort-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sort))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sort-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ssml common-lisp:nil
                       ((locale :initarg :locale :initform
                         (common-lisp:error ":locale is required") :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         struct-shape-ssml-locale :shape "Locale" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or ssml-value common-lisp:null) :accessor
                         struct-shape-ssml-value :shape "SsmlValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ssml (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ssml
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ssml 'make-ssml))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssml))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssml))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssml))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ssml-list () '(trivial-types:proper-list ssml))
 (common-lisp:defun make-ssml-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ssml))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ssml-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-device-sync-request common-lisp:nil
                       ((room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-start-device-sync-request-room-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-arn :initarg :device-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-start-device-sync-request-device-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (features :initarg :features :initform
                         (common-lisp:error ":features is required") :type
                         (common-lisp:or features common-lisp:null) :accessor
                         struct-shape-start-device-sync-request-features :shape
                         "Features" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-device-sync-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-device-sync-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-device-sync-request
                    'make-start-device-sync-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-device-sync-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-device-sync-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features))
      (common-lisp:list
       (common-lisp:cons "Features"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-device-sync-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-device-sync-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-device-sync-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-device-sync-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-device-sync-response
                    'make-start-device-sync-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-device-sync-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-device-sync-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-device-sync-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-smart-home-appliance-discovery-request
                       common-lisp:nil
                       ((room-arn :initarg :room-arn :initform
                         (common-lisp:error ":room-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-start-smart-home-appliance-discovery-request-room-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-smart-home-appliance-discovery-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-smart-home-appliance-discovery-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-smart-home-appliance-discovery-request
                    'make-start-smart-home-appliance-discovery-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-smart-home-appliance-discovery-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-smart-home-appliance-discovery-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-smart-home-appliance-discovery-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-smart-home-appliance-discovery-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-smart-home-appliance-discovery-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-smart-home-appliance-discovery-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-smart-home-appliance-discovery-response
                    'make-start-smart-home-appliance-discovery-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-smart-home-appliance-discovery-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-smart-home-appliance-discovery-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-smart-home-appliance-discovery-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype temperature-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass text common-lisp:nil
                       ((locale :initarg :locale :initform
                         (common-lisp:error ":locale is required") :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         struct-shape-text-locale :shape "Locale" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or text-value common-lisp:null) :accessor
                         struct-shape-text-value :shape "TextValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-text (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'text
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'text 'make-text))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input text))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input text))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input text))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype text-list () '(trivial-types:proper-list text))
 (common-lisp:defun make-text-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list text))
   aws-sdk/generator/shape::members))
(common-lisp:deftype text-value () 'common-lisp:string)
(common-lisp:deftype time-to-live-in-seconds () 'common-lisp:integer)
(common-lisp:deftype timezone () 'common-lisp:string)
(common-lisp:deftype total-count () 'common-lisp:integer)
(common-lisp:deftype trust-anchor () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trust-anchor-list ()
   '(trivial-types:proper-list trust-anchor))
 (common-lisp:defun make-trust-anchor-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trust-anchor))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (alexaforbusiness-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'unauthorized-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-address-book-request common-lisp:nil
                       ((address-book-arn :initarg :address-book-arn :initform
                         (common-lisp:error ":address-book-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-address-book-request-address-book-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or address-book-name common-lisp:null)
                         :accessor
                         struct-shape-update-address-book-request-name :shape
                         "AddressBookName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or address-book-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-address-book-request-description
                         :shape "AddressBookDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-address-book-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-address-book-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-address-book-request
                    'make-update-address-book-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-address-book-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-address-book-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-book-arn))
      (common-lisp:list
       (common-lisp:cons "AddressBookArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-address-book-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-address-book-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-address-book-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-address-book-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-address-book-response
                    'make-update-address-book-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-address-book-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-address-book-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-address-book-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-business-report-schedule-request common-lisp:nil
                       ((schedule-arn :initarg :schedule-arn :initform
                         (common-lisp:error ":schedule-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-business-report-schedule-request-schedule-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-s3bucket-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-business-report-schedule-request-s3bucket-name
                         :shape "CustomerS3BucketName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3key-prefix :initarg :s3key-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor
                         struct-shape-update-business-report-schedule-request-s3key-prefix
                         :shape "S3KeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform common-lisp:nil
                         :type
                         (common-lisp:or business-report-format
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-business-report-schedule-request-format
                         :shape "BusinessReportFormat" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schedule-name :initarg :schedule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or business-report-schedule-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-business-report-schedule-request-schedule-name
                         :shape "BusinessReportScheduleName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recurrence :initarg :recurrence :initform
                         common-lisp:nil :type
                         (common-lisp:or business-report-recurrence
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-business-report-schedule-request-recurrence
                         :shape "BusinessReportRecurrence" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-business-report-schedule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-business-report-schedule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-business-report-schedule-request
                    'make-update-business-report-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-business-report-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-business-report-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-arn))
      (common-lisp:list
       (common-lisp:cons "ScheduleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-name))
      (common-lisp:list
       (common-lisp:cons "ScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurrence))
      (common-lisp:list
       (common-lisp:cons "Recurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-business-report-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-business-report-schedule-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-business-report-schedule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-business-report-schedule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-business-report-schedule-response
                    'make-update-business-report-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-business-report-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-business-report-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-business-report-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-conference-provider-request common-lisp:nil
                       ((conference-provider-arn :initarg
                         :conference-provider-arn :initform
                         (common-lisp:error
                          ":conference-provider-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-conference-provider-request-conference-provider-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (conference-provider-type :initarg
                         :conference-provider-type :initform
                         (common-lisp:error
                          ":conference-provider-type is required")
                         :type
                         (common-lisp:or conference-provider-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-conference-provider-request-conference-provider-type
                         :shape "ConferenceProviderType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ipdial-in :initarg :ipdial-in :initform
                         common-lisp:nil :type
                         (common-lisp:or ipdial-in common-lisp:null) :accessor
                         struct-shape-update-conference-provider-request-ipdial-in
                         :shape "IPDialIn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pstndial-in :initarg :pstndial-in :initform
                         common-lisp:nil :type
                         (common-lisp:or pstndial-in common-lisp:null)
                         :accessor
                         struct-shape-update-conference-provider-request-pstndial-in
                         :shape "PSTNDialIn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (meeting-setting :initarg :meeting-setting :initform
                         (common-lisp:error ":meeting-setting is required")
                         :type
                         (common-lisp:or meeting-setting common-lisp:null)
                         :accessor
                         struct-shape-update-conference-provider-request-meeting-setting
                         :shape "MeetingSetting" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-conference-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-conference-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-conference-provider-request
                    'make-update-conference-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-conference-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-conference-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conference-provider-arn))
      (common-lisp:list
       (common-lisp:cons "ConferenceProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conference-provider-type))
      (common-lisp:list
       (common-lisp:cons "ConferenceProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipdial-in))
      (common-lisp:list
       (common-lisp:cons "IPDialIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pstndial-in))
      (common-lisp:list
       (common-lisp:cons "PSTNDialIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meeting-setting))
      (common-lisp:list
       (common-lisp:cons "MeetingSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-conference-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-conference-provider-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-conference-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-conference-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-conference-provider-response
                    'make-update-conference-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-conference-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-conference-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-conference-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-contact-request common-lisp:nil
                       ((contact-arn :initarg :contact-arn :initform
                         (common-lisp:error ":contact-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-contact-request-contact-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor
                         struct-shape-update-contact-request-display-name
                         :shape "ContactName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor
                         struct-shape-update-contact-request-first-name :shape
                         "ContactName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor
                         struct-shape-update-contact-request-last-name :shape
                         "ContactName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or raw-phone-number common-lisp:null)
                         :accessor
                         struct-shape-update-contact-request-phone-number
                         :shape "RawPhoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (phone-numbers :initarg :phone-numbers :initform
                         common-lisp:nil :type
                         (common-lisp:or phone-number-list common-lisp:null)
                         :accessor
                         struct-shape-update-contact-request-phone-numbers
                         :shape "PhoneNumberList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sip-addresses :initarg :sip-addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or sip-address-list common-lisp:null)
                         :accessor
                         struct-shape-update-contact-request-sip-addresses
                         :shape "SipAddressList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-contact-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-contact-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-contact-request 'make-update-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-arn))
      (common-lisp:list
       (common-lisp:cons "ContactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-numbers))
      (common-lisp:list
       (common-lisp:cons "PhoneNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sip-addresses))
      (common-lisp:list
       (common-lisp:cons "SipAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-contact-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-contact-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-contact-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-contact-response 'make-update-contact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-contact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-device-request common-lisp:nil
                       ((device-arn :initarg :device-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-device-request-device-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-name :initarg :device-name :initform
                         common-lisp:nil :type
                         (common-lisp:or device-name common-lisp:null)
                         :accessor
                         struct-shape-update-device-request-device-name :shape
                         "DeviceName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-device-request 'make-update-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-device-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-device-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-device-response 'make-update-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-end-of-meeting-reminder common-lisp:nil
                       ((reminder-at-minutes :initarg :reminder-at-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or end-of-meeting-reminder-minutes-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-end-of-meeting-reminder-reminder-at-minutes
                         :shape "EndOfMeetingReminderMinutesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (reminder-type :initarg :reminder-type :initform
                         common-lisp:nil :type
                         (common-lisp:or end-of-meeting-reminder-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-end-of-meeting-reminder-reminder-type
                         :shape "EndOfMeetingReminderType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-end-of-meeting-reminder-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-end-of-meeting-reminder
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-end-of-meeting-reminder
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-end-of-meeting-reminder
                    'make-update-end-of-meeting-reminder))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-end-of-meeting-reminder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-end-of-meeting-reminder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reminder-at-minutes))
      (common-lisp:list
       (common-lisp:cons "ReminderAtMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reminder-type))
      (common-lisp:list
       (common-lisp:cons "ReminderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-end-of-meeting-reminder))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-gateway-group-request common-lisp:nil
                       ((gateway-group-arn :initarg :gateway-group-arn
                         :initform
                         (common-lisp:error ":gateway-group-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-gateway-group-request-gateway-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or gateway-group-name common-lisp:null)
                         :accessor
                         struct-shape-update-gateway-group-request-name :shape
                         "GatewayGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-group-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-gateway-group-request-description
                         :shape "GatewayGroupDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-gateway-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-gateway-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-gateway-group-request
                    'make-update-gateway-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-group-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-gateway-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-gateway-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-gateway-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-gateway-group-response
                    'make-update-gateway-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-gateway-request common-lisp:nil
                       ((gateway-arn :initarg :gateway-arn :initform
                         (common-lisp:error ":gateway-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-gateway-request-gateway-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or gateway-name common-lisp:null)
                         :accessor struct-shape-update-gateway-request-name
                         :shape "GatewayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-description common-lisp:null)
                         :accessor
                         struct-shape-update-gateway-request-description :shape
                         "GatewayDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (software-version :initarg :software-version :initform
                         common-lisp:nil :type
                         (common-lisp:or gateway-version common-lisp:null)
                         :accessor
                         struct-shape-update-gateway-request-software-version
                         :shape "GatewayVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-gateway-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-gateway-request 'make-update-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'software-version))
      (common-lisp:list
       (common-lisp:cons "SoftwareVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-gateway-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-gateway-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-gateway-response 'make-update-gateway-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-instant-booking common-lisp:nil
                       ((duration-in-minutes :initarg :duration-in-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or minutes common-lisp:null) :accessor
                         struct-shape-update-instant-booking-duration-in-minutes
                         :shape "Minutes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-update-instant-booking-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-instant-booking
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-instant-booking
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-instant-booking 'make-update-instant-booking))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-instant-booking))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-instant-booking))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "DurationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-instant-booking))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-meeting-room-configuration common-lisp:nil
                       ((room-utilization-metrics-enabled :initarg
                         :room-utilization-metrics-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-meeting-room-configuration-room-utilization-metrics-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-of-meeting-reminder :initarg
                         :end-of-meeting-reminder :initform common-lisp:nil
                         :type
                         (common-lisp:or update-end-of-meeting-reminder
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-meeting-room-configuration-end-of-meeting-reminder
                         :shape "UpdateEndOfMeetingReminder" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (instant-booking :initarg :instant-booking :initform
                         common-lisp:nil :type
                         (common-lisp:or update-instant-booking
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-meeting-room-configuration-instant-booking
                         :shape "UpdateInstantBooking" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (require-check-in :initarg :require-check-in :initform
                         common-lisp:nil :type
                         (common-lisp:or update-require-check-in
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-meeting-room-configuration-require-check-in
                         :shape "UpdateRequireCheckIn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (proactive-join :initarg :proactive-join :initform
                         common-lisp:nil :type
                         (common-lisp:or update-proactive-join
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-meeting-room-configuration-proactive-join
                         :shape "UpdateProactiveJoin" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-meeting-room-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-meeting-room-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-meeting-room-configuration
                    'make-update-meeting-room-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-meeting-room-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-meeting-room-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'room-utilization-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "RoomUtilizationMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'end-of-meeting-reminder))
      (common-lisp:list
       (common-lisp:cons "EndOfMeetingReminder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instant-booking))
      (common-lisp:list
       (common-lisp:cons "InstantBooking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-check-in))
      (common-lisp:list
       (common-lisp:cons "RequireCheckIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proactive-join))
      (common-lisp:list
       (common-lisp:cons "ProactiveJoin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-meeting-room-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-network-profile-request common-lisp:nil
                       ((network-profile-arn :initarg :network-profile-arn
                         :initform
                         (common-lisp:error ":network-profile-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-network-profile-request-network-profile-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (network-profile-name :initarg :network-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or network-profile-name common-lisp:null)
                         :accessor
                         struct-shape-update-network-profile-request-network-profile-name
                         :shape "NetworkProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or network-profile-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-network-profile-request-description
                         :shape "NetworkProfileDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (current-password :initarg :current-password :initform
                         common-lisp:nil :type
                         (common-lisp:or current-wi-fi-password
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-network-profile-request-current-password
                         :shape "CurrentWiFiPassword" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-password :initarg :next-password :initform
                         common-lisp:nil :type
                         (common-lisp:or next-wi-fi-password common-lisp:null)
                         :accessor
                         struct-shape-update-network-profile-request-next-password
                         :shape "NextWiFiPassword" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-authority-arn :initarg
                         :certificate-authority-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-network-profile-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (trust-anchors :initarg :trust-anchors :initform
                         common-lisp:nil :type
                         (common-lisp:or trust-anchor-list common-lisp:null)
                         :accessor
                         struct-shape-update-network-profile-request-trust-anchors
                         :shape "TrustAnchorList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-network-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-network-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-network-profile-request
                    'make-update-network-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-network-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-network-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-profile-arn))
      (common-lisp:list
       (common-lisp:cons "NetworkProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-profile-name))
      (common-lisp:list
       (common-lisp:cons "NetworkProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-password))
      (common-lisp:list
       (common-lisp:cons "CurrentPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-password))
      (common-lisp:list
       (common-lisp:cons "NextPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-anchors))
      (common-lisp:list
       (common-lisp:cons "TrustAnchors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-network-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-network-profile-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-network-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-network-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-network-profile-response
                    'make-update-network-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-network-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-network-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-network-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-proactive-join common-lisp:nil
                       ((enabled-by-motion :initarg :enabled-by-motion
                         :initform
                         (common-lisp:error ":enabled-by-motion is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-proactive-join-enabled-by-motion
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-proactive-join
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-proactive-join
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-proactive-join 'make-update-proactive-join))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-proactive-join))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-proactive-join))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-by-motion))
      (common-lisp:list
       (common-lisp:cons "EnabledByMotion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-proactive-join))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-profile-request common-lisp:nil
                       ((profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-profile-request-profile-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (profile-name :initarg :profile-name :initform
                         common-lisp:nil :type
                         (common-lisp:or profile-name common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-profile-name
                         :shape "ProfileName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-default :initarg :is-default :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-profile-request-is-default :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timezone :initarg :timezone :initform common-lisp:nil
                         :type (common-lisp:or timezone common-lisp:null)
                         :accessor struct-shape-update-profile-request-timezone
                         :shape "Timezone" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address :initarg :address :initform common-lisp:nil
                         :type (common-lisp:or address common-lisp:null)
                         :accessor struct-shape-update-profile-request-address
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (distance-unit :initarg :distance-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or distance-unit common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-distance-unit
                         :shape "DistanceUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (temperature-unit :initarg :temperature-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or temperature-unit common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-temperature-unit
                         :shape "TemperatureUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (wake-word :initarg :wake-word :initform
                         common-lisp:nil :type
                         (common-lisp:or wake-word common-lisp:null) :accessor
                         struct-shape-update-profile-request-wake-word :shape
                         "WakeWord" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (locale :initarg :locale :initform common-lisp:nil
                         :type (common-lisp:or device-locale common-lisp:null)
                         :accessor struct-shape-update-profile-request-locale
                         :shape "DeviceLocale" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (setup-mode-disabled :initarg :setup-mode-disabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-profile-request-setup-mode-disabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-volume-limit :initarg :max-volume-limit :initform
                         common-lisp:nil :type
                         (common-lisp:or max-volume-limit common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-max-volume-limit
                         :shape "MaxVolumeLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pstnenabled :initarg :pstnenabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-profile-request-pstnenabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-retention-opt-in :initarg :data-retention-opt-in
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-profile-request-data-retention-opt-in
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (meeting-room-configuration :initarg
                         :meeting-room-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or update-meeting-room-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profile-request-meeting-room-configuration
                         :shape "UpdateMeetingRoomConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-profile-request 'make-update-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-name))
      (common-lisp:list
       (common-lisp:cons "ProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distance-unit))
      (common-lisp:list
       (common-lisp:cons "DistanceUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'temperature-unit))
      (common-lisp:list
       (common-lisp:cons "TemperatureUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wake-word))
      (common-lisp:list
       (common-lisp:cons "WakeWord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setup-mode-disabled))
      (common-lisp:list
       (common-lisp:cons "SetupModeDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-volume-limit))
      (common-lisp:list
       (common-lisp:cons "MaxVolumeLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pstnenabled))
      (common-lisp:list
       (common-lisp:cons "PSTNEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-retention-opt-in))
      (common-lisp:list
       (common-lisp:cons "DataRetentionOptIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'meeting-room-configuration))
      (common-lisp:list
       (common-lisp:cons "MeetingRoomConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-profile-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-profile-response 'make-update-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-require-check-in common-lisp:nil
                       ((release-after-minutes :initarg :release-after-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or minutes common-lisp:null) :accessor
                         struct-shape-update-require-check-in-release-after-minutes
                         :shape "Minutes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-update-require-check-in-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-require-check-in
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-require-check-in
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-require-check-in 'make-update-require-check-in))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-require-check-in))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-require-check-in))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'release-after-minutes))
      (common-lisp:list
       (common-lisp:cons "ReleaseAfterMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-require-check-in))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-room-request common-lisp:nil
                       ((room-arn :initarg :room-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-room-request-room-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (room-name :initarg :room-name :initform
                         common-lisp:nil :type
                         (common-lisp:or room-name common-lisp:null) :accessor
                         struct-shape-update-room-request-room-name :shape
                         "RoomName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or room-description common-lisp:null)
                         :accessor struct-shape-update-room-request-description
                         :shape "RoomDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider-calendar-id :initarg :provider-calendar-id
                         :initform common-lisp:nil :type
                         (common-lisp:or provider-calendar-id common-lisp:null)
                         :accessor
                         struct-shape-update-room-request-provider-calendar-id
                         :shape "ProviderCalendarId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-arn :initarg :profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-room-request-profile-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-room-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-room-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-room-request 'make-update-room-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-room-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-room-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-arn))
      (common-lisp:list
       (common-lisp:cons "RoomArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'room-name))
      (common-lisp:list
       (common-lisp:cons "RoomName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provider-calendar-id))
      (common-lisp:list
       (common-lisp:cons "ProviderCalendarId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-arn))
      (common-lisp:list
       (common-lisp:cons "ProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-room-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-room-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-room-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-room-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-room-response 'make-update-room-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-room-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-room-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-room-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-skill-group-request common-lisp:nil
                       ((skill-group-arn :initarg :skill-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-skill-group-request-skill-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (skill-group-name :initarg :skill-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-group-name common-lisp:null)
                         :accessor
                         struct-shape-update-skill-group-request-skill-group-name
                         :shape "SkillGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or skill-group-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-skill-group-request-description
                         :shape "SkillGroupDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-skill-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-skill-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-skill-group-request
                    'make-update-skill-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-skill-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-skill-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-group-arn))
      (common-lisp:list
       (common-lisp:cons "SkillGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skill-group-name))
      (common-lisp:list
       (common-lisp:cons "SkillGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-skill-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-skill-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-skill-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-skill-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-skill-group-response
                    'make-update-skill-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-skill-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-skill-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-skill-group-response))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:deftype user-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user-data common-lisp:nil
                       ((user-arn :initarg :user-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-user-data-user-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |user_FirstName| common-lisp:null)
                         :accessor struct-shape-user-data-first-name :shape
                         "user_FirstName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |user_LastName| common-lisp:null)
                         :accessor struct-shape-user-data-last-name :shape
                         "user_LastName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email :initarg :email :initform common-lisp:nil :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-user-data-email :shape "Email" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enrollment-status :initarg :enrollment-status
                         :initform common-lisp:nil :type
                         (common-lisp:or enrollment-status common-lisp:null)
                         :accessor struct-shape-user-data-enrollment-status
                         :shape "EnrollmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enrollment-id :initarg :enrollment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or enrollment-id common-lisp:null)
                         :accessor struct-shape-user-data-enrollment-id :shape
                         "EnrollmentId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user-data 'make-user-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "UserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enrollment-status))
      (common-lisp:list
       (common-lisp:cons "EnrollmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enrollment-id))
      (common-lisp:list
       (common-lisp:cons "EnrollmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-data-list () '(trivial-types:proper-list user-data))
 (common-lisp:defun make-user-data-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-id () 'common-lisp:string)
(common-lisp:deftype utterance () 'common-lisp:string)
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:deftype wake-word () 'common-lisp:string)
common-lisp:nil
(common-lisp:deftype |user_FirstName| () 'common-lisp:string)
(common-lisp:deftype |user_LastName| () 'common-lisp:string)
(common-lisp:deftype |user_UserId| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun approve-skill
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key skill-id)
   (common-lisp:declare (common-lisp:ignorable skill-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-approve-skill-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "ApproveSkill"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'approve-skill))
(common-lisp:progn
 (common-lisp:defun associate-contact-with-address-book
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-arn address-book-arn)
   (common-lisp:declare (common-lisp:ignorable contact-arn address-book-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-contact-with-address-book-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "AssociateContactWithAddressBook"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-contact-with-address-book))
(common-lisp:progn
 (common-lisp:defun associate-device-with-network-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-arn network-profile-arn)
   (common-lisp:declare (common-lisp:ignorable device-arn network-profile-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-device-with-network-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "AssociateDeviceWithNetworkProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-device-with-network-profile))
(common-lisp:progn
 (common-lisp:defun associate-device-with-room
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-arn room-arn)
   (common-lisp:declare (common-lisp:ignorable device-arn room-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-device-with-room-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "AssociateDeviceWithRoom"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-device-with-room))
(common-lisp:progn
 (common-lisp:defun associate-skill-group-with-room
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key skill-group-arn room-arn)
   (common-lisp:declare (common-lisp:ignorable skill-group-arn room-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-skill-group-with-room-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "AssociateSkillGroupWithRoom"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-skill-group-with-room))
(common-lisp:progn
 (common-lisp:defun associate-skill-with-skill-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key skill-group-arn skill-id)
   (common-lisp:declare (common-lisp:ignorable skill-group-arn skill-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-skill-with-skill-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "AssociateSkillWithSkillGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-skill-with-skill-group))
(common-lisp:progn
 (common-lisp:defun associate-skill-with-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key skill-id)
   (common-lisp:declare (common-lisp:ignorable skill-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-skill-with-users-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "AssociateSkillWithUsers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-skill-with-users))
(common-lisp:progn
 (common-lisp:defun create-address-book
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description client-request-token
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable name description client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-address-book-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "CreateAddressBook"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-address-book))
(common-lisp:progn
 (common-lisp:defun create-business-report-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schedule-name s3bucket-name s3key-prefix
                     format content-range recurrence client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable schedule-name s3bucket-name s3key-prefix format
     content-range recurrence client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-business-report-schedule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "CreateBusinessReportSchedule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-business-report-schedule))
(common-lisp:progn
 (common-lisp:defun create-conference-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key conference-provider-name
                     conference-provider-type ipdial-in pstndial-in
                     meeting-setting client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable conference-provider-name conference-provider-type
     ipdial-in pstndial-in meeting-setting client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-conference-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "CreateConferenceProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-conference-provider))
(common-lisp:progn
 (common-lisp:defun create-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key display-name first-name last-name
                     phone-number phone-numbers sip-addresses
                     client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable display-name first-name last-name phone-number
     phone-numbers sip-addresses client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "CreateContact"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-contact))
(common-lisp:progn
 (common-lisp:defun create-gateway-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description client-request-token
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable name description client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-gateway-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "CreateGatewayGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-gateway-group))
(common-lisp:progn
 (common-lisp:defun create-network-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-profile-name description ssid
                     security-type eap-method current-password next-password
                     certificate-authority-arn trust-anchors
                     client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable network-profile-name description ssid security-type
     eap-method current-password next-password certificate-authority-arn
     trust-anchors client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-network-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "CreateNetworkProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-network-profile))
(common-lisp:progn
 (common-lisp:defun create-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-name timezone address
                     distance-unit temperature-unit wake-word locale
                     client-request-token setup-mode-disabled max-volume-limit
                     pstnenabled data-retention-opt-in
                     meeting-room-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable profile-name timezone address distance-unit
     temperature-unit wake-word locale client-request-token setup-mode-disabled
     max-volume-limit pstnenabled data-retention-opt-in
     meeting-room-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "CreateProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-profile))
(common-lisp:progn
 (common-lisp:defun create-room
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key room-name description profile-arn
                     provider-calendar-id client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable room-name description profile-arn
     provider-calendar-id client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-room-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "CreateRoom"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-room))
(common-lisp:progn
 (common-lisp:defun create-skill-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key skill-group-name description
                     client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable skill-group-name description client-request-token
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-skill-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "CreateSkillGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-skill-group))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id first-name last-name email
                     client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable user-id first-name last-name email
     client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "CreateUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun delete-address-book
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key address-book-arn)
   (common-lisp:declare (common-lisp:ignorable address-book-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-address-book-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteAddressBook"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-address-book))
(common-lisp:progn
 (common-lisp:defun delete-business-report-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schedule-arn)
   (common-lisp:declare (common-lisp:ignorable schedule-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-business-report-schedule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteBusinessReportSchedule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-business-report-schedule))
(common-lisp:progn
 (common-lisp:defun delete-conference-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key conference-provider-arn)
   (common-lisp:declare (common-lisp:ignorable conference-provider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-conference-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteConferenceProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-conference-provider))
(common-lisp:progn
 (common-lisp:defun delete-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-arn)
   (common-lisp:declare (common-lisp:ignorable contact-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteContact"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-contact))
(common-lisp:progn
 (common-lisp:defun delete-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-arn)
   (common-lisp:declare (common-lisp:ignorable device-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-device))
(common-lisp:progn
 (common-lisp:defun delete-device-usage-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-arn device-usage-type)
   (common-lisp:declare (common-lisp:ignorable device-arn device-usage-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-device-usage-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteDeviceUsageData"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-device-usage-data))
(common-lisp:progn
 (common-lisp:defun delete-gateway-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-group-arn)
   (common-lisp:declare (common-lisp:ignorable gateway-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-gateway-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteGatewayGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-gateway-group))
(common-lisp:progn
 (common-lisp:defun delete-network-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-profile-arn)
   (common-lisp:declare (common-lisp:ignorable network-profile-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-network-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteNetworkProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-network-profile))
(common-lisp:progn
 (common-lisp:defun delete-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-arn)
   (common-lisp:declare (common-lisp:ignorable profile-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-profile))
(common-lisp:progn
 (common-lisp:defun delete-room
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key room-arn)
   (common-lisp:declare (common-lisp:ignorable room-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-room-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteRoom"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-room))
(common-lisp:progn
 (common-lisp:defun delete-room-skill-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key room-arn skill-id parameter-key)
   (common-lisp:declare
    (common-lisp:ignorable room-arn skill-id parameter-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-room-skill-parameter-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteRoomSkillParameter"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-room-skill-parameter))
(common-lisp:progn
 (common-lisp:defun delete-skill-authorization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key skill-id room-arn)
   (common-lisp:declare (common-lisp:ignorable skill-id room-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-skill-authorization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteSkillAuthorization"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-skill-authorization))
(common-lisp:progn
 (common-lisp:defun delete-skill-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key skill-group-arn)
   (common-lisp:declare (common-lisp:ignorable skill-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-skill-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteSkillGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-skill-group))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-arn enrollment-id)
   (common-lisp:declare (common-lisp:ignorable user-arn enrollment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun disassociate-contact-from-address-book
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-arn address-book-arn)
   (common-lisp:declare (common-lisp:ignorable contact-arn address-book-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-contact-from-address-book-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DisassociateContactFromAddressBook"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-contact-from-address-book))
(common-lisp:progn
 (common-lisp:defun disassociate-device-from-room
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-arn)
   (common-lisp:declare (common-lisp:ignorable device-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-device-from-room-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DisassociateDeviceFromRoom"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-device-from-room))
(common-lisp:progn
 (common-lisp:defun disassociate-skill-from-skill-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key skill-group-arn skill-id)
   (common-lisp:declare (common-lisp:ignorable skill-group-arn skill-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-skill-from-skill-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DisassociateSkillFromSkillGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-skill-from-skill-group))
(common-lisp:progn
 (common-lisp:defun disassociate-skill-from-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key skill-id)
   (common-lisp:declare (common-lisp:ignorable skill-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-skill-from-users-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DisassociateSkillFromUsers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-skill-from-users))
(common-lisp:progn
 (common-lisp:defun disassociate-skill-group-from-room
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key skill-group-arn room-arn)
   (common-lisp:declare (common-lisp:ignorable skill-group-arn room-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-skill-group-from-room-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "DisassociateSkillGroupFromRoom"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-skill-group-from-room))
(common-lisp:progn
 (common-lisp:defun forget-smart-home-appliances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key room-arn)
   (common-lisp:declare (common-lisp:ignorable room-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-forget-smart-home-appliances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "ForgetSmartHomeAppliances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'forget-smart-home-appliances))
(common-lisp:progn
 (common-lisp:defun get-address-book
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key address-book-arn)
   (common-lisp:declare (common-lisp:ignorable address-book-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-address-book-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "GetAddressBook"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-address-book))
(common-lisp:progn
 (common-lisp:defun get-conference-preference ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'alexaforbusiness-request :method "POST" :path
                                "/" :operation "GetConferencePreference"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-conference-preference))
(common-lisp:progn
 (common-lisp:defun get-conference-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key conference-provider-arn)
   (common-lisp:declare (common-lisp:ignorable conference-provider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-conference-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "GetConferenceProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-conference-provider))
(common-lisp:progn
 (common-lisp:defun get-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-arn)
   (common-lisp:declare (common-lisp:ignorable contact-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "GetContact"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-contact))
(common-lisp:progn
 (common-lisp:defun get-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-arn)
   (common-lisp:declare (common-lisp:ignorable device-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "GetDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-device))
(common-lisp:progn
 (common-lisp:defun get-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-arn)
   (common-lisp:declare (common-lisp:ignorable gateway-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "GetGateway"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-gateway))
(common-lisp:progn
 (common-lisp:defun get-gateway-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-group-arn)
   (common-lisp:declare (common-lisp:ignorable gateway-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-gateway-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "GetGatewayGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-gateway-group))
(common-lisp:progn
 (common-lisp:defun get-invitation-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'alexaforbusiness-request :method "POST" :path
                                "/" :operation "GetInvitationConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-invitation-configuration))
(common-lisp:progn
 (common-lisp:defun get-network-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-profile-arn)
   (common-lisp:declare (common-lisp:ignorable network-profile-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-network-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "GetNetworkProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-network-profile))
(common-lisp:progn
 (common-lisp:defun get-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-arn)
   (common-lisp:declare (common-lisp:ignorable profile-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "GetProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-profile))
(common-lisp:progn
 (common-lisp:defun get-room
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key room-arn)
   (common-lisp:declare (common-lisp:ignorable room-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-room-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "GetRoom"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-room))
(common-lisp:progn
 (common-lisp:defun get-room-skill-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key room-arn skill-id parameter-key)
   (common-lisp:declare
    (common-lisp:ignorable room-arn skill-id parameter-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-room-skill-parameter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "GetRoomSkillParameter"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-room-skill-parameter))
(common-lisp:progn
 (common-lisp:defun get-skill-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key skill-group-arn)
   (common-lisp:declare (common-lisp:ignorable skill-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-skill-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "GetSkillGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-skill-group))
(common-lisp:progn
 (common-lisp:defun list-business-report-schedules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-business-report-schedules-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "ListBusinessReportSchedules"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-business-report-schedules))
(common-lisp:progn
 (common-lisp:defun list-conference-providers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-conference-providers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "ListConferenceProviders"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-conference-providers))
(common-lisp:progn
 (common-lisp:defun list-device-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-arn event-type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable device-arn event-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-device-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "ListDeviceEvents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-device-events))
(common-lisp:progn
 (common-lisp:defun list-gateway-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-gateway-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "ListGatewayGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-gateway-groups))
(common-lisp:progn
 (common-lisp:defun list-gateways
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-group-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable gateway-group-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-gateways-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "ListGateways"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-gateways))
(common-lisp:progn
 (common-lisp:defun list-skills
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key skill-group-arn enablement-type
                     skill-type next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable skill-group-arn enablement-type skill-type
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-skills-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "ListSkills"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-skills))
(common-lisp:progn
 (common-lisp:defun list-skills-store-categories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-skills-store-categories-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "ListSkillsStoreCategories"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-skills-store-categories))
(common-lisp:progn
 (common-lisp:defun list-skills-store-skills-by-category
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable category-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-skills-store-skills-by-category-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "ListSkillsStoreSkillsByCategory"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-skills-store-skills-by-category))
(common-lisp:progn
 (common-lisp:defun list-smart-home-appliances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key room-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable room-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-smart-home-appliances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "ListSmartHomeAppliances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-smart-home-appliances))
(common-lisp:progn
 (common-lisp:defun list-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn next-token max-results)
   (common-lisp:declare (common-lisp:ignorable arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "ListTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags))
(common-lisp:progn
 (common-lisp:defun put-conference-preference
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key conference-preference)
   (common-lisp:declare (common-lisp:ignorable conference-preference))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-conference-preference-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "PutConferencePreference"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-conference-preference))
(common-lisp:progn
 (common-lisp:defun put-invitation-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-name contact-email
                     private-skill-ids)
   (common-lisp:declare
    (common-lisp:ignorable organization-name contact-email private-skill-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-invitation-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "PutInvitationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-invitation-configuration))
(common-lisp:progn
 (common-lisp:defun put-room-skill-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key room-arn skill-id room-skill-parameter)
   (common-lisp:declare
    (common-lisp:ignorable room-arn skill-id room-skill-parameter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-room-skill-parameter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "PutRoomSkillParameter"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-room-skill-parameter))
(common-lisp:progn
 (common-lisp:defun put-skill-authorization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authorization-result skill-id room-arn)
   (common-lisp:declare
    (common-lisp:ignorable authorization-result skill-id room-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-skill-authorization-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "PutSkillAuthorization"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-skill-authorization))
(common-lisp:progn
 (common-lisp:defun register-avsdevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-id user-code product-id
                     device-serial-number amazon-id room-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable client-id user-code product-id device-serial-number
     amazon-id room-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-avsdevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "RegisterAVSDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-avsdevice))
(common-lisp:progn
 (common-lisp:defun reject-skill
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key skill-id)
   (common-lisp:declare (common-lisp:ignorable skill-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reject-skill-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "RejectSkill"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reject-skill))
(common-lisp:progn
 (common-lisp:defun resolve-room
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id skill-id)
   (common-lisp:declare (common-lisp:ignorable user-id skill-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resolve-room-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "ResolveRoom"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'resolve-room))
(common-lisp:progn
 (common-lisp:defun revoke-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-arn enrollment-id)
   (common-lisp:declare (common-lisp:ignorable user-arn enrollment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-revoke-invitation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "RevokeInvitation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'revoke-invitation))
(common-lisp:progn
 (common-lisp:defun search-address-books
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters sort-criteria next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable filters sort-criteria next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-address-books-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "SearchAddressBooks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-address-books))
(common-lisp:progn
 (common-lisp:defun search-contacts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters sort-criteria next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable filters sort-criteria next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-contacts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "SearchContacts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-contacts))
(common-lisp:progn
 (common-lisp:defun search-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters
                     sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results filters sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "SearchDevices"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-devices))
(common-lisp:progn
 (common-lisp:defun search-network-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters
                     sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results filters sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-network-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "SearchNetworkProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-network-profiles))
(common-lisp:progn
 (common-lisp:defun search-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters
                     sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results filters sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "SearchProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-profiles))
(common-lisp:progn
 (common-lisp:defun search-rooms
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters
                     sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results filters sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-rooms-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "SearchRooms"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-rooms))
(common-lisp:progn
 (common-lisp:defun search-skill-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters
                     sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results filters sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-skill-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "SearchSkillGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-skill-groups))
(common-lisp:progn
 (common-lisp:defun search-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters
                     sort-criteria)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results filters sort-criteria))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "SearchUsers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-users))
(common-lisp:progn
 (common-lisp:defun send-announcement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key room-filters content
                     time-to-live-in-seconds client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable room-filters content time-to-live-in-seconds
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-announcement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "SendAnnouncement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'send-announcement))
(common-lisp:progn
 (common-lisp:defun send-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-arn)
   (common-lisp:declare (common-lisp:ignorable user-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-invitation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "SendInvitation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'send-invitation))
(common-lisp:progn
 (common-lisp:defun start-device-sync
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key room-arn device-arn features)
   (common-lisp:declare (common-lisp:ignorable room-arn device-arn features))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-device-sync-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "StartDeviceSync"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-device-sync))
(common-lisp:progn
 (common-lisp:defun start-smart-home-appliance-discovery
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key room-arn)
   (common-lisp:declare (common-lisp:ignorable room-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-smart-home-appliance-discovery-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "StartSmartHomeApplianceDiscovery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-smart-home-appliance-discovery))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tags)
   (common-lisp:declare (common-lisp:ignorable arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-address-book
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key address-book-arn name description)
   (common-lisp:declare
    (common-lisp:ignorable address-book-arn name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-address-book-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateAddressBook"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-address-book))
(common-lisp:progn
 (common-lisp:defun update-business-report-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schedule-arn s3bucket-name s3key-prefix
                     format schedule-name recurrence)
   (common-lisp:declare
    (common-lisp:ignorable schedule-arn s3bucket-name s3key-prefix format
     schedule-name recurrence))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-business-report-schedule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateBusinessReportSchedule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-business-report-schedule))
(common-lisp:progn
 (common-lisp:defun update-conference-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key conference-provider-arn
                     conference-provider-type ipdial-in pstndial-in
                     meeting-setting)
   (common-lisp:declare
    (common-lisp:ignorable conference-provider-arn conference-provider-type
     ipdial-in pstndial-in meeting-setting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-conference-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateConferenceProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-conference-provider))
(common-lisp:progn
 (common-lisp:defun update-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-arn display-name first-name
                     last-name phone-number phone-numbers sip-addresses)
   (common-lisp:declare
    (common-lisp:ignorable contact-arn display-name first-name last-name
     phone-number phone-numbers sip-addresses))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateContact"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-contact))
(common-lisp:progn
 (common-lisp:defun update-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-arn device-name)
   (common-lisp:declare (common-lisp:ignorable device-arn device-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-device))
(common-lisp:progn
 (common-lisp:defun update-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-arn name description
                     software-version)
   (common-lisp:declare
    (common-lisp:ignorable gateway-arn name description software-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateGateway"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-gateway))
(common-lisp:progn
 (common-lisp:defun update-gateway-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-group-arn name description)
   (common-lisp:declare
    (common-lisp:ignorable gateway-group-arn name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-gateway-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateGatewayGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-gateway-group))
(common-lisp:progn
 (common-lisp:defun update-network-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key network-profile-arn network-profile-name
                     description current-password next-password
                     certificate-authority-arn trust-anchors)
   (common-lisp:declare
    (common-lisp:ignorable network-profile-arn network-profile-name description
     current-password next-password certificate-authority-arn trust-anchors))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-network-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateNetworkProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-network-profile))
(common-lisp:progn
 (common-lisp:defun update-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-arn profile-name is-default
                     timezone address distance-unit temperature-unit wake-word
                     locale setup-mode-disabled max-volume-limit pstnenabled
                     data-retention-opt-in meeting-room-configuration)
   (common-lisp:declare
    (common-lisp:ignorable profile-arn profile-name is-default timezone address
     distance-unit temperature-unit wake-word locale setup-mode-disabled
     max-volume-limit pstnenabled data-retention-opt-in
     meeting-room-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-profile))
(common-lisp:progn
 (common-lisp:defun update-room
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key room-arn room-name description
                     provider-calendar-id profile-arn)
   (common-lisp:declare
    (common-lisp:ignorable room-arn room-name description provider-calendar-id
     profile-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-room-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateRoom"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-room))
(common-lisp:progn
 (common-lisp:defun update-skill-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key skill-group-arn skill-group-name
                     description)
   (common-lisp:declare
    (common-lisp:ignorable skill-group-arn skill-group-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-skill-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'alexaforbusiness-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateSkillGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-skill-group))
