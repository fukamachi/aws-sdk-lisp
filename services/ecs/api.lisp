;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/ecs/api
  (:use)
  (:nicknames #:aws/ecs)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/ecs/api)
(common-lisp:progn
 (common-lisp:define-condition ecs-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'ecs-error))
(common-lisp:progn
 (common-lisp:defclass ecs-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "ecs" :api-version
                        "2014-11-13" :host-prefix "ecs" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "AmazonEC2ContainerServiceV20141113"
                        :json-version "1.1"))
 (common-lisp:export 'ecs-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("AttributeLimitExceededException" . attribute-limit-exceeded-exception)
    ("BlockedException" . blocked-exception)
    ("ClientException" . client-exception)
    ("ClusterContainsContainerInstancesException"
     . cluster-contains-container-instances-exception)
    ("ClusterContainsServicesException" . cluster-contains-services-exception)
    ("ClusterContainsTasksException" . cluster-contains-tasks-exception)
    ("ClusterNotFoundException" . cluster-not-found-exception)
    ("ConflictException" . conflict-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("MissingVersionException" . missing-version-exception)
    ("NamespaceNotFoundException" . namespace-not-found-exception)
    ("NoUpdateAvailableException" . no-update-available-exception)
    ("PlatformTaskDefinitionIncompatibilityException"
     . platform-task-definition-incompatibility-exception)
    ("PlatformUnknownException" . platform-unknown-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServerException" . server-exception)
    ("ServiceNotActiveException" . service-not-active-exception)
    ("ServiceNotFoundException" . service-not-found-exception)
    ("TargetNotConnectedException" . target-not-connected-exception)
    ("TargetNotFoundException" . target-not-found-exception)
    ("TaskSetNotFoundException" . task-set-not-found-exception)
    ("UnsupportedFeatureException" . unsupported-feature-exception)
    ("UpdateInProgressException" . update-in-progress-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'access-denied-exception)))
(common-lisp:deftype agent-update-status () 'common-lisp:string)
(common-lisp:deftype application-protocol () 'common-lisp:string)
(common-lisp:deftype assign-public-ip () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attachment common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-attachment-id :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-attachment-type :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-attachment-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (details :initarg :details :initform common-lisp:nil
                         :type
                         (common-lisp:or attachment-details common-lisp:null)
                         :accessor struct-shape-attachment-details :shape
                         "AttachmentDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attachment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attachment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'attachment 'make-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attachment-details ()
   '(trivial-types:proper-list key-value-pair))
 (common-lisp:defun make-attachment-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass attachment-state-change common-lisp:nil
                       ((attachment-arn :initarg :attachment-arn :initform
                         (common-lisp:error ":attachmentarn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-attachment-state-change-attachment-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-attachment-state-change-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attachment-state-change
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attachment-state-change
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attachment-state-change 'make-attachment-state-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attachment-state-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attachment-state-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-arn))
      (common-lisp:list
       (common-lisp:cons "attachmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attachment-state-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attachment-state-changes ()
   '(trivial-types:proper-list attachment-state-change))
 (common-lisp:defun make-attachment-state-changes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attachment-state-change))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype attachments () '(trivial-types:proper-list attachment))
 (common-lisp:defun make-attachments
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attachment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass attribute common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-attribute-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-attribute-value :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-type :initarg :target-type :initform
                         common-lisp:nil :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor struct-shape-attribute-target-type :shape
                         "TargetType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-id :initarg :target-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-attribute-target-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'attribute 'make-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "targetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "targetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition attribute-limit-exceeded-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'attribute-limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:deftype attributes () '(trivial-types:proper-list attribute))
 (common-lisp:defun make-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass auto-scaling-group-provider common-lisp:nil
                       ((auto-scaling-group-arn :initarg
                         :auto-scaling-group-arn :initform
                         (common-lisp:error ":autoscalinggrouparn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-group-provider-auto-scaling-group-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (managed-scaling :initarg :managed-scaling :initform
                         common-lisp:nil :type
                         (common-lisp:or managed-scaling common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-group-provider-managed-scaling
                         :shape "ManagedScaling" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (managed-termination-protection :initarg
                         :managed-termination-protection :initform
                         common-lisp:nil :type
                         (common-lisp:or managed-termination-protection
                                         common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-group-provider-managed-termination-protection
                         :shape "ManagedTerminationProtection" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (managed-draining :initarg :managed-draining :initform
                         common-lisp:nil :type
                         (common-lisp:or managed-draining common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-group-provider-managed-draining
                         :shape "ManagedDraining" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-scaling-group-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-scaling-group-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-group-provider
                    'make-auto-scaling-group-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-arn))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-scaling))
      (common-lisp:list
       (common-lisp:cons "managedScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-termination-protection))
      (common-lisp:list
       (common-lisp:cons "managedTerminationProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-draining))
      (common-lisp:list
       (common-lisp:cons "managedDraining"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-scaling-group-provider-update common-lisp:nil
                       ((managed-scaling :initarg :managed-scaling :initform
                         common-lisp:nil :type
                         (common-lisp:or managed-scaling common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-group-provider-update-managed-scaling
                         :shape "ManagedScaling" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (managed-termination-protection :initarg
                         :managed-termination-protection :initform
                         common-lisp:nil :type
                         (common-lisp:or managed-termination-protection
                                         common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-group-provider-update-managed-termination-protection
                         :shape "ManagedTerminationProtection" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (managed-draining :initarg :managed-draining :initform
                         common-lisp:nil :type
                         (common-lisp:or managed-draining common-lisp:null)
                         :accessor
                         struct-shape-auto-scaling-group-provider-update-managed-draining
                         :shape "ManagedDraining" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-scaling-group-provider-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'auto-scaling-group-provider-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-group-provider-update
                    'make-auto-scaling-group-provider-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-provider-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-provider-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-scaling))
      (common-lisp:list
       (common-lisp:cons "managedScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-termination-protection))
      (common-lisp:list
       (common-lisp:cons "managedTerminationProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-draining))
      (common-lisp:list
       (common-lisp:cons "managedDraining"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-provider-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-vpc-configuration common-lisp:nil
                       ((subnets :initarg :subnets :initform
                         (common-lisp:error ":subnets is required") :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-aws-vpc-configuration-subnets
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-groups :initarg :security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-aws-vpc-configuration-security-groups
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assign-public-ip :initarg :assign-public-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or assign-public-ip common-lisp:null)
                         :accessor
                         struct-shape-aws-vpc-configuration-assign-public-ip
                         :shape "AssignPublicIp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-vpc-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aws-vpc-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aws-vpc-configuration 'make-aws-vpc-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "securityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assign-public-ip))
      (common-lisp:list
       (common-lisp:cons "assignPublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpc-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition blocked-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'blocked-exception)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-integer () 'common-lisp:integer)
(common-lisp:deftype cpuarchitecture () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass capacity-provider common-lisp:nil
                       ((capacity-provider-arn :initarg :capacity-provider-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-capacity-provider-capacity-provider-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-capacity-provider-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-provider-status
                                         common-lisp:null)
                         :accessor struct-shape-capacity-provider-status :shape
                         "CapacityProviderStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-scaling-group-provider :initarg
                         :auto-scaling-group-provider :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-scaling-group-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-capacity-provider-auto-scaling-group-provider
                         :shape "AutoScalingGroupProvider" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (update-status :initarg :update-status :initform
                         common-lisp:nil :type
                         (common-lisp:or capacity-provider-update-status
                                         common-lisp:null)
                         :accessor struct-shape-capacity-provider-update-status
                         :shape "CapacityProviderUpdateStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (update-status-reason :initarg :update-status-reason
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-capacity-provider-update-status-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-capacity-provider-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-capacity-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'capacity-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'capacity-provider 'make-capacity-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input capacity-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input capacity-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-arn))
      (common-lisp:list
       (common-lisp:cons "capacityProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-provider))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroupProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "updateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-status-reason))
      (common-lisp:list
       (common-lisp:cons "updateStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input capacity-provider))
   common-lisp:nil))
(common-lisp:deftype capacity-provider-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype capacity-provider-field-list ()
   '(trivial-types:proper-list capacity-provider-field))
 (common-lisp:defun make-capacity-provider-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list capacity-provider-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype capacity-provider-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype capacity-provider-strategy ()
   '(trivial-types:proper-list capacity-provider-strategy-item))
 (common-lisp:defun make-capacity-provider-strategy
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            capacity-provider-strategy-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass capacity-provider-strategy-item common-lisp:nil
                       ((capacity-provider :initarg :capacity-provider
                         :initform
                         (common-lisp:error ":capacityprovider is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-capacity-provider-strategy-item-capacity-provider
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (weight :initarg :weight :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-provider-strategy-item-weight
                                         common-lisp:null)
                         :accessor
                         struct-shape-capacity-provider-strategy-item-weight
                         :shape "CapacityProviderStrategyItemWeight" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (base :initarg :base :initform common-lisp:nil :type
                         (common-lisp:or capacity-provider-strategy-item-base
                                         common-lisp:null)
                         :accessor
                         struct-shape-capacity-provider-strategy-item-base
                         :shape "CapacityProviderStrategyItemBase" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-capacity-provider-strategy-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'capacity-provider-strategy-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'capacity-provider-strategy-item
                    'make-capacity-provider-strategy-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          capacity-provider-strategy-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          capacity-provider-strategy-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-provider))
      (common-lisp:list
       (common-lisp:cons "capacityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base))
      (common-lisp:list
       (common-lisp:cons "base"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          capacity-provider-strategy-item))
   common-lisp:nil))
(common-lisp:deftype capacity-provider-strategy-item-base ()
  'common-lisp:integer)
(common-lisp:deftype capacity-provider-strategy-item-weight ()
  'common-lisp:integer)
(common-lisp:deftype capacity-provider-update-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype capacity-providers ()
   '(trivial-types:proper-list capacity-provider))
 (common-lisp:defun make-capacity-providers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list capacity-provider))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition client-exception
     (ecs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       client-exception-message)))
 (common-lisp:export
  (common-lisp:list 'client-exception 'client-exception-message)))
(common-lisp:progn
 (common-lisp:defclass cluster common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-cluster-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-cluster-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-configuration
                                         common-lisp:null)
                         :accessor struct-shape-cluster-configuration :shape
                         "ClusterConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-cluster-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registered-container-instances-count :initarg
                         :registered-container-instances-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-cluster-registered-container-instances-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (running-tasks-count :initarg :running-tasks-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-cluster-running-tasks-count :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pending-tasks-count :initarg :pending-tasks-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-cluster-pending-tasks-count :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (active-services-count :initarg :active-services-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-cluster-active-services-count :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or statistics common-lisp:null) :accessor
                         struct-shape-cluster-statistics :shape "Statistics"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-cluster-tags :shape "Tags" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-settings common-lisp:null)
                         :accessor struct-shape-cluster-settings :shape
                         "ClusterSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capacity-providers :initarg :capacity-providers
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-cluster-capacity-providers
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-capacity-provider-strategy :initarg
                         :default-capacity-provider-strategy :initform
                         common-lisp:nil :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-default-capacity-provider-strategy
                         :shape "CapacityProviderStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attachments :initarg :attachments :initform
                         common-lisp:nil :type
                         (common-lisp:or attachments common-lisp:null)
                         :accessor struct-shape-cluster-attachments :shape
                         "Attachments" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attachments-status :initarg :attachments-status
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-attachments-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-connect-defaults :initarg
                         :service-connect-defaults :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-service-connect-defaults
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-service-connect-defaults :shape
                         "ClusterServiceConnectDefaults" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cluster 'make-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "clusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registered-container-instances-count))
      (common-lisp:list
       (common-lisp:cons "registeredContainerInstancesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-tasks-count))
      (common-lisp:list
       (common-lisp:cons "runningTasksCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-tasks-count))
      (common-lisp:list
       (common-lisp:cons "pendingTasksCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-services-count))
      (common-lisp:list
       (common-lisp:cons "activeServicesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-providers))
      (common-lisp:list
       (common-lisp:cons "capacityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "defaultCapacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments-status))
      (common-lisp:list
       (common-lisp:cons "attachmentsStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-connect-defaults))
      (common-lisp:list
       (common-lisp:cons "serviceConnectDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-configuration common-lisp:nil
                       ((execute-command-configuration :initarg
                         :execute-command-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or execute-command-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-cluster-configuration-execute-command-configuration
                         :shape "ExecuteCommandConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-configuration 'make-cluster-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execute-command-configuration))
      (common-lisp:list
       (common-lisp:cons "executeCommandConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-contains-container-instances-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-contains-container-instances-exception)))
(common-lisp:progn
 (common-lisp:define-condition cluster-contains-services-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-contains-services-exception)))
(common-lisp:progn
 (common-lisp:define-condition cluster-contains-tasks-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-contains-tasks-exception)))
(common-lisp:deftype cluster-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cluster-field-list ()
   '(trivial-types:proper-list cluster-field))
 (common-lisp:defun make-cluster-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cluster-not-found-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass cluster-service-connect-defaults common-lisp:nil
                       ((namespace :initarg :namespace :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-service-connect-defaults-namespace
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-service-connect-defaults
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cluster-service-connect-defaults
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-service-connect-defaults
                    'make-cluster-service-connect-defaults))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-service-connect-defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-service-connect-defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-service-connect-defaults))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-service-connect-defaults-request common-lisp:nil
                       ((namespace :initarg :namespace :initform
                         (common-lisp:error ":namespace is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-service-connect-defaults-request-namespace
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-service-connect-defaults-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cluster-service-connect-defaults-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cluster-service-connect-defaults-request
                    'make-cluster-service-connect-defaults-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-service-connect-defaults-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-service-connect-defaults-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-service-connect-defaults-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-setting common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or cluster-setting-name common-lisp:null)
                         :accessor struct-shape-cluster-setting-name :shape
                         "ClusterSettingName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cluster-setting-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cluster-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cluster-setting 'make-cluster-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-setting))
   common-lisp:nil))
(common-lisp:deftype cluster-setting-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cluster-settings ()
   '(trivial-types:proper-list cluster-setting))
 (common-lisp:defun make-cluster-settings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype clusters () '(trivial-types:proper-list cluster))
 (common-lisp:defun make-clusters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster))
   aws-sdk/generator/shape::members))
(common-lisp:deftype compatibility () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compatibility-list ()
   '(trivial-types:proper-list compatibility))
 (common-lisp:defun make-compatibility-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compatibility))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (ecs-error)
     ((resource-ids :initarg :resource-ids :initform common-lisp:nil :reader
       conflict-exception-resource-ids)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-resource-ids)))
(common-lisp:deftype connectivity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass container common-lisp:nil
                       ((container-arn :initarg :container-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-container-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-arn :initarg :task-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-container-task-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (image :initarg :image :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-image :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (image-digest :initarg :image-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-image-digest :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (runtime-id :initarg :runtime-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-runtime-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-status :initarg :last-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-last-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (exit-code :initarg :exit-code :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-container-exit-code :shape
                         "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-container-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (network-bindings :initarg :network-bindings :initform
                         common-lisp:nil :type
                         (common-lisp:or network-bindings common-lisp:null)
                         :accessor struct-shape-container-network-bindings
                         :shape "NetworkBindings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-interfaces :initarg :network-interfaces
                         :initform common-lisp:nil :type
                         (common-lisp:or network-interfaces common-lisp:null)
                         :accessor struct-shape-container-network-interfaces
                         :shape "NetworkInterfaces" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-status :initarg :health-status :initform
                         common-lisp:nil :type
                         (common-lisp:or health-status common-lisp:null)
                         :accessor struct-shape-container-health-status :shape
                         "HealthStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (managed-agents :initarg :managed-agents :initform
                         common-lisp:nil :type
                         (common-lisp:or managed-agents common-lisp:null)
                         :accessor struct-shape-container-managed-agents :shape
                         "ManagedAgents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cpu :initarg :cpu :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-cpu :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (memory :initarg :memory :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-container-memory :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (memory-reservation :initarg :memory-reservation
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-memory-reservation :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (gpu-ids :initarg :gpu-ids :initform common-lisp:nil
                         :type (common-lisp:or gpu-ids common-lisp:null)
                         :accessor struct-shape-container-gpu-ids :shape
                         "GpuIds" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'container 'make-container))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-arn))
      (common-lisp:list
       (common-lisp:cons "containerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "taskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "imageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-id))
      (common-lisp:list
       (common-lisp:cons "runtimeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status))
      (common-lisp:list
       (common-lisp:cons "lastStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exit-code))
      (common-lisp:list
       (common-lisp:cons "exitCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-bindings))
      (common-lisp:list
       (common-lisp:cons "networkBindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "networkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "healthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-agents))
      (common-lisp:list
       (common-lisp:cons "managedAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-reservation))
      (common-lisp:list
       (common-lisp:cons "memoryReservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gpu-ids))
      (common-lisp:list
       (common-lisp:cons "gpuIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container))
   common-lisp:nil))
(common-lisp:deftype container-condition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass container-definition common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-definition-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (image :initarg :image :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-definition-image :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (repository-credentials :initarg
                         :repository-credentials :initform common-lisp:nil
                         :type
                         (common-lisp:or repository-credentials
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-definition-repository-credentials
                         :shape "RepositoryCredentials" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cpu :initarg :cpu :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-container-definition-cpu :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (memory :initarg :memory :initform common-lisp:nil
                         :type (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-container-definition-memory
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (memory-reservation :initarg :memory-reservation
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-container-definition-memory-reservation
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (links :initarg :links :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-container-definition-links
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port-mappings :initarg :port-mappings :initform
                         common-lisp:nil :type
                         (common-lisp:or port-mapping-list common-lisp:null)
                         :accessor
                         struct-shape-container-definition-port-mappings :shape
                         "PortMappingList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (essential :initarg :essential :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-container-definition-essential
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entry-point :initarg :entry-point :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-container-definition-entry-point :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (command :initarg :command :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-container-definition-command
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment :initarg :environment :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-variables
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-definition-environment :shape
                         "EnvironmentVariables" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-files :initarg :environment-files
                         :initform common-lisp:nil :type
                         (common-lisp:or environment-files common-lisp:null)
                         :accessor
                         struct-shape-container-definition-environment-files
                         :shape "EnvironmentFiles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mount-points :initarg :mount-points :initform
                         common-lisp:nil :type
                         (common-lisp:or mount-point-list common-lisp:null)
                         :accessor
                         struct-shape-container-definition-mount-points :shape
                         "MountPointList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volumes-from :initarg :volumes-from :initform
                         common-lisp:nil :type
                         (common-lisp:or volume-from-list common-lisp:null)
                         :accessor
                         struct-shape-container-definition-volumes-from :shape
                         "VolumeFromList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (linux-parameters :initarg :linux-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or linux-parameters common-lisp:null)
                         :accessor
                         struct-shape-container-definition-linux-parameters
                         :shape "LinuxParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets :initarg :secrets :initform common-lisp:nil
                         :type (common-lisp:or secret-list common-lisp:null)
                         :accessor struct-shape-container-definition-secrets
                         :shape "SecretList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (depends-on :initarg :depends-on :initform
                         common-lisp:nil :type
                         (common-lisp:or container-dependencies
                                         common-lisp:null)
                         :accessor struct-shape-container-definition-depends-on
                         :shape "ContainerDependencies" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-timeout :initarg :start-timeout :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-container-definition-start-timeout :shape
                         "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stop-timeout :initarg :stop-timeout :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-container-definition-stop-timeout :shape
                         "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hostname :initarg :hostname :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-container-definition-hostname
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user :initarg :user :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-definition-user :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (working-directory :initarg :working-directory
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-definition-working-directory
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disable-networking :initarg :disable-networking
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-container-definition-disable-networking
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (privileged :initarg :privileged :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-container-definition-privileged
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (readonly-root-filesystem :initarg
                         :readonly-root-filesystem :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-container-definition-readonly-root-filesystem
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dns-servers :initarg :dns-servers :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-container-definition-dns-servers :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dns-search-domains :initarg :dns-search-domains
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-container-definition-dns-search-domains
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extra-hosts :initarg :extra-hosts :initform
                         common-lisp:nil :type
                         (common-lisp:or host-entry-list common-lisp:null)
                         :accessor
                         struct-shape-container-definition-extra-hosts :shape
                         "HostEntryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (docker-security-options :initarg
                         :docker-security-options :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-container-definition-docker-security-options
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interactive :initarg :interactive :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-container-definition-interactive :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pseudo-terminal :initarg :pseudo-terminal :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-container-definition-pseudo-terminal
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (docker-labels :initarg :docker-labels :initform
                         common-lisp:nil :type
                         (common-lisp:or docker-labels-map common-lisp:null)
                         :accessor
                         struct-shape-container-definition-docker-labels :shape
                         "DockerLabelsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ulimits :initarg :ulimits :initform common-lisp:nil
                         :type (common-lisp:or ulimit-list common-lisp:null)
                         :accessor struct-shape-container-definition-ulimits
                         :shape "UlimitList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-configuration :initarg :log-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or log-configuration common-lisp:null)
                         :accessor
                         struct-shape-container-definition-log-configuration
                         :shape "LogConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check :initarg :health-check :initform
                         common-lisp:nil :type
                         (common-lisp:or health-check common-lisp:null)
                         :accessor
                         struct-shape-container-definition-health-check :shape
                         "HealthCheck" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (system-controls :initarg :system-controls :initform
                         common-lisp:nil :type
                         (common-lisp:or system-controls common-lisp:null)
                         :accessor
                         struct-shape-container-definition-system-controls
                         :shape "SystemControls" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-requirements :initarg :resource-requirements
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-requirements
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-definition-resource-requirements
                         :shape "ResourceRequirements" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (firelens-configuration :initarg
                         :firelens-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or firelens-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-definition-firelens-configuration
                         :shape "FirelensConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (credential-specs :initarg :credential-specs :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-container-definition-credential-specs
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-definition 'make-container-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-credentials))
      (common-lisp:list
       (common-lisp:cons "repositoryCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-reservation))
      (common-lisp:list
       (common-lisp:cons "memoryReservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'links))
      (common-lisp:list
       (common-lisp:cons "links"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-mappings))
      (common-lisp:list
       (common-lisp:cons "portMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'essential))
      (common-lisp:list
       (common-lisp:cons "essential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-point))
      (common-lisp:list
       (common-lisp:cons "entryPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-files))
      (common-lisp:list
       (common-lisp:cons "environmentFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-points))
      (common-lisp:list
       (common-lisp:cons "mountPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes-from))
      (common-lisp:list
       (common-lisp:cons "volumesFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linux-parameters))
      (common-lisp:list
       (common-lisp:cons "linuxParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secrets))
      (common-lisp:list
       (common-lisp:cons "secrets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'depends-on))
      (common-lisp:list
       (common-lisp:cons "dependsOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timeout))
      (common-lisp:list
       (common-lisp:cons "startTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-timeout))
      (common-lisp:list
       (common-lisp:cons "stopTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "user"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "workingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-networking))
      (common-lisp:list
       (common-lisp:cons "disableNetworking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privileged))
      (common-lisp:list
       (common-lisp:cons "privileged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'readonly-root-filesystem))
      (common-lisp:list
       (common-lisp:cons "readonlyRootFilesystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-servers))
      (common-lisp:list
       (common-lisp:cons "dnsServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-search-domains))
      (common-lisp:list
       (common-lisp:cons "dnsSearchDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extra-hosts))
      (common-lisp:list
       (common-lisp:cons "extraHosts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'docker-security-options))
      (common-lisp:list
       (common-lisp:cons "dockerSecurityOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interactive))
      (common-lisp:list
       (common-lisp:cons "interactive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pseudo-terminal))
      (common-lisp:list
       (common-lisp:cons "pseudoTerminal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'docker-labels))
      (common-lisp:list
       (common-lisp:cons "dockerLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ulimits))
      (common-lisp:list
       (common-lisp:cons "ulimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "logConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "healthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system-controls))
      (common-lisp:list
       (common-lisp:cons "systemControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-requirements))
      (common-lisp:list
       (common-lisp:cons "resourceRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firelens-configuration))
      (common-lisp:list
       (common-lisp:cons "firelensConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credential-specs))
      (common-lisp:list
       (common-lisp:cons "credentialSpecs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-definitions ()
   '(trivial-types:proper-list container-definition))
 (common-lisp:defun make-container-definitions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype container-dependencies ()
   '(trivial-types:proper-list container-dependency))
 (common-lisp:defun make-container-dependencies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-dependency))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass container-dependency common-lisp:nil
                       ((container-name :initarg :container-name :initform
                         (common-lisp:error ":containername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-dependency-container-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (condition :initarg :condition :initform
                         (common-lisp:error ":condition is required") :type
                         (common-lisp:or container-condition common-lisp:null)
                         :accessor struct-shape-container-dependency-condition
                         :shape "ContainerCondition" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-dependency
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container-dependency
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-dependency 'make-container-dependency))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-dependency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-dependency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-dependency))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass container-instance common-lisp:nil
                       ((container-instance-arn :initarg
                         :container-instance-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-container-instance-container-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2instance-id :initarg :ec2instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-instance-ec2instance-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (capacity-provider-name :initarg
                         :capacity-provider-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-container-instance-capacity-provider-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-container-instance-version :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version-info :initarg :version-info :initform
                         common-lisp:nil :type
                         (common-lisp:or version-info common-lisp:null)
                         :accessor struct-shape-container-instance-version-info
                         :shape "VersionInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remaining-resources :initarg :remaining-resources
                         :initform common-lisp:nil :type
                         (common-lisp:or resources common-lisp:null) :accessor
                         struct-shape-container-instance-remaining-resources
                         :shape "Resources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (registered-resources :initarg :registered-resources
                         :initform common-lisp:nil :type
                         (common-lisp:or resources common-lisp:null) :accessor
                         struct-shape-container-instance-registered-resources
                         :shape "Resources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-container-instance-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-instance-status-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (agent-connected :initarg :agent-connected :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-container-instance-agent-connected :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (running-tasks-count :initarg :running-tasks-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-container-instance-running-tasks-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-tasks-count :initarg :pending-tasks-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-container-instance-pending-tasks-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (agent-update-status :initarg :agent-update-status
                         :initform common-lisp:nil :type
                         (common-lisp:or agent-update-status common-lisp:null)
                         :accessor
                         struct-shape-container-instance-agent-update-status
                         :shape "AgentUpdateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-container-instance-attributes :shape
                         "Attributes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registered-at :initarg :registered-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-container-instance-registered-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attachments :initarg :attachments :initform
                         common-lisp:nil :type
                         (common-lisp:or attachments common-lisp:null)
                         :accessor struct-shape-container-instance-attachments
                         :shape "Attachments" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-container-instance-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (health-status :initarg :health-status :initform
                         common-lisp:nil :type
                         (common-lisp:or container-instance-health-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-instance-health-status :shape
                         "ContainerInstanceHealthStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-instance 'make-container-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-instance-arn))
      (common-lisp:list
       (common-lisp:cons "containerInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-id))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-name))
      (common-lisp:list
       (common-lisp:cons "capacityProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-info))
      (common-lisp:list
       (common-lisp:cons "versionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remaining-resources))
      (common-lisp:list
       (common-lisp:cons "remainingResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registered-resources))
      (common-lisp:list
       (common-lisp:cons "registeredResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-connected))
      (common-lisp:list
       (common-lisp:cons "agentConnected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-tasks-count))
      (common-lisp:list
       (common-lisp:cons "runningTasksCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-tasks-count))
      (common-lisp:list
       (common-lisp:cons "pendingTasksCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-update-status))
      (common-lisp:list
       (common-lisp:cons "agentUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-at))
      (common-lisp:list
       (common-lisp:cons "registeredAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "healthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-instance))
   common-lisp:nil))
(common-lisp:deftype container-instance-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype container-instance-field-list ()
   '(trivial-types:proper-list container-instance-field))
 (common-lisp:defun make-container-instance-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            container-instance-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass container-instance-health-status common-lisp:nil
                       ((overall-status :initarg :overall-status :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-health-check-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-instance-health-status-overall-status
                         :shape "InstanceHealthCheckState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (details :initarg :details :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-health-check-result-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-instance-health-status-details
                         :shape "InstanceHealthCheckResultList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-instance-health-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'container-instance-health-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-instance-health-status
                    'make-container-instance-health-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-instance-health-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-instance-health-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overall-status))
      (common-lisp:list
       (common-lisp:cons "overallStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-instance-health-status))
   common-lisp:nil))
(common-lisp:deftype container-instance-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype container-instances ()
   '(trivial-types:proper-list container-instance))
 (common-lisp:defun make-container-instances
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass container-override common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-override-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (command :initarg :command :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-container-override-command
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment :initarg :environment :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-variables
                                         common-lisp:null)
                         :accessor struct-shape-container-override-environment
                         :shape "EnvironmentVariables" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (environment-files :initarg :environment-files
                         :initform common-lisp:nil :type
                         (common-lisp:or environment-files common-lisp:null)
                         :accessor
                         struct-shape-container-override-environment-files
                         :shape "EnvironmentFiles" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cpu :initarg :cpu :initform common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-container-override-cpu :shape
                         "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (memory :initarg :memory :initform common-lisp:nil
                         :type (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-container-override-memory
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (memory-reservation :initarg :memory-reservation
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-container-override-memory-reservation
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-requirements :initarg :resource-requirements
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-requirements
                                         common-lisp:null)
                         :accessor
                         struct-shape-container-override-resource-requirements
                         :shape "ResourceRequirements" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-override
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container-override
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-override 'make-container-override))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-files))
      (common-lisp:list
       (common-lisp:cons "environmentFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-reservation))
      (common-lisp:list
       (common-lisp:cons "memoryReservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-requirements))
      (common-lisp:list
       (common-lisp:cons "resourceRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-overrides ()
   '(trivial-types:proper-list container-override))
 (common-lisp:defun make-container-overrides
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-override))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass container-state-change common-lisp:nil
                       ((container-name :initarg :container-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-state-change-container-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-digest :initarg :image-digest :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-state-change-image-digest
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime-id :initarg :runtime-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-container-state-change-runtime-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (exit-code :initarg :exit-code :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-container-state-change-exit-code :shape
                         "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-bindings :initarg :network-bindings :initform
                         common-lisp:nil :type
                         (common-lisp:or network-bindings common-lisp:null)
                         :accessor
                         struct-shape-container-state-change-network-bindings
                         :shape "NetworkBindings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-container-state-change-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-container-state-change-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-container-state-change
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'container-state-change
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'container-state-change 'make-container-state-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-state-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-state-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "imageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-id))
      (common-lisp:list
       (common-lisp:cons "runtimeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exit-code))
      (common-lisp:list
       (common-lisp:cons "exitCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-bindings))
      (common-lisp:list
       (common-lisp:cons "networkBindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-state-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-state-changes ()
   '(trivial-types:proper-list container-state-change))
 (common-lisp:defun make-container-state-changes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-state-change))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype containers () '(trivial-types:proper-list container))
 (common-lisp:defun make-containers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-capacity-provider-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-capacity-provider-request-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-scaling-group-provider :initarg
                         :auto-scaling-group-provider :initform
                         (common-lisp:error
                          ":autoscalinggroupprovider is required")
                         :type
                         (common-lisp:or auto-scaling-group-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-capacity-provider-request-auto-scaling-group-provider
                         :shape "AutoScalingGroupProvider" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-capacity-provider-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-capacity-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-capacity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-capacity-provider-request
                    'make-create-capacity-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-provider))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroupProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-capacity-provider-response common-lisp:nil
                       ((capacity-provider :initarg :capacity-provider
                         :initform common-lisp:nil :type
                         (common-lisp:or capacity-provider common-lisp:null)
                         :accessor
                         struct-shape-create-capacity-provider-response-capacity-provider
                         :shape "CapacityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-capacity-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-capacity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-capacity-provider-response
                    'make-create-capacity-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-provider))
      (common-lisp:list
       (common-lisp:cons "capacityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-request common-lisp:nil
                       ((cluster-name :initarg :cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-cluster-request-cluster-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-cluster-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-settings common-lisp:null)
                         :accessor struct-shape-create-cluster-request-settings
                         :shape "ClusterSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-configuration
                         :shape "ClusterConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (capacity-providers :initarg :capacity-providers
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-capacity-providers
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-capacity-provider-strategy :initarg
                         :default-capacity-provider-strategy :initform
                         common-lisp:nil :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-default-capacity-provider-strategy
                         :shape "CapacityProviderStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-connect-defaults :initarg
                         :service-connect-defaults :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          cluster-service-connect-defaults-request
                          common-lisp:null)
                         :accessor
                         struct-shape-create-cluster-request-service-connect-defaults
                         :shape "ClusterServiceConnectDefaultsRequest"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-request 'make-create-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-providers))
      (common-lisp:list
       (common-lisp:cons "capacityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "defaultCapacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-connect-defaults))
      (common-lisp:list
       (common-lisp:cons "serviceConnectDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-response common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor struct-shape-create-cluster-response-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cluster-response 'make-create-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-create-service-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-service-request-service-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-definition :initarg :task-definition :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-service-request-task-definition
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (load-balancers :initarg :load-balancers :initform
                         common-lisp:nil :type
                         (common-lisp:or load-balancers common-lisp:null)
                         :accessor
                         struct-shape-create-service-request-load-balancers
                         :shape "LoadBalancers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-registries :initarg :service-registries
                         :initform common-lisp:nil :type
                         (common-lisp:or service-registries common-lisp:null)
                         :accessor
                         struct-shape-create-service-request-service-registries
                         :shape "ServiceRegistries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (desired-count :initarg :desired-count :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-create-service-request-desired-count
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-service-request-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-type :initarg :launch-type :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor
                         struct-shape-create-service-request-launch-type :shape
                         "LaunchType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (capacity-provider-strategy :initarg
                         :capacity-provider-strategy :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-service-request-capacity-provider-strategy
                         :shape "CapacityProviderStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (platform-version :initarg :platform-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-service-request-platform-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-service-request-role :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployment-configuration :initarg
                         :deployment-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or deployment-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-service-request-deployment-configuration
                         :shape "DeploymentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (placement-constraints :initarg :placement-constraints
                         :initform common-lisp:nil :type
                         (common-lisp:or placement-constraints
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-service-request-placement-constraints
                         :shape "PlacementConstraints" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (placement-strategy :initarg :placement-strategy
                         :initform common-lisp:nil :type
                         (common-lisp:or placement-strategies common-lisp:null)
                         :accessor
                         struct-shape-create-service-request-placement-strategy
                         :shape "PlacementStrategies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-configuration :initarg :network-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-service-request-network-configuration
                         :shape "NetworkConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (health-check-grace-period-seconds :initarg
                         :health-check-grace-period-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-create-service-request-health-check-grace-period-seconds
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scheduling-strategy :initarg :scheduling-strategy
                         :initform common-lisp:nil :type
                         (common-lisp:or scheduling-strategy common-lisp:null)
                         :accessor
                         struct-shape-create-service-request-scheduling-strategy
                         :shape "SchedulingStrategy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-controller :initarg :deployment-controller
                         :initform common-lisp:nil :type
                         (common-lisp:or deployment-controller
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-service-request-deployment-controller
                         :shape "DeploymentController" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-service-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enable-ecsmanaged-tags :initarg
                         :enable-ecsmanaged-tags :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-service-request-enable-ecsmanaged-tags
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (propagate-tags :initarg :propagate-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or propagate-tags common-lisp:null)
                         :accessor
                         struct-shape-create-service-request-propagate-tags
                         :shape "PropagateTags" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-execute-command :initarg
                         :enable-execute-command :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-service-request-enable-execute-command
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-connect-configuration :initarg
                         :service-connect-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or service-connect-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-service-request-service-connect-configuration
                         :shape "ServiceConnectConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (volume-configurations :initarg :volume-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or service-volume-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-service-request-volume-configurations
                         :shape "ServiceVolumeConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-service-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-service-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-service-request 'make-create-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "loadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-registries))
      (common-lisp:list
       (common-lisp:cons "serviceRegistries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-count))
      (common-lisp:list
       (common-lisp:cons "desiredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "capacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "deploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "placementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-strategy))
      (common-lisp:list
       (common-lisp:cons "placementStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-grace-period-seconds))
      (common-lisp:list
       (common-lisp:cons "healthCheckGracePeriodSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduling-strategy))
      (common-lisp:list
       (common-lisp:cons "schedulingStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-controller))
      (common-lisp:list
       (common-lisp:cons "deploymentController"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-ecsmanaged-tags))
      (common-lisp:list
       (common-lisp:cons "enableECSManagedTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-tags))
      (common-lisp:list
       (common-lisp:cons "propagateTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-execute-command))
      (common-lisp:list
       (common-lisp:cons "enableExecuteCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-connect-configuration))
      (common-lisp:list
       (common-lisp:cons "serviceConnectConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-configurations))
      (common-lisp:list
       (common-lisp:cons "volumeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-response common-lisp:nil
                       ((service :initarg :service :initform common-lisp:nil
                         :type (common-lisp:or service common-lisp:null)
                         :accessor struct-shape-create-service-response-service
                         :shape "Service" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-service-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-service-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-service-response 'make-create-service-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-task-set-request common-lisp:nil
                       ((service :initarg :service :initform
                         (common-lisp:error ":service is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-task-set-request-service :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster :initarg :cluster :initform
                         (common-lisp:error ":cluster is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-task-set-request-cluster :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-task-set-request-external-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-definition :initarg :task-definition :initform
                         (common-lisp:error ":taskdefinition is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-task-set-request-task-definition
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-configuration :initarg :network-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-task-set-request-network-configuration
                         :shape "NetworkConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (load-balancers :initarg :load-balancers :initform
                         common-lisp:nil :type
                         (common-lisp:or load-balancers common-lisp:null)
                         :accessor
                         struct-shape-create-task-set-request-load-balancers
                         :shape "LoadBalancers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-registries :initarg :service-registries
                         :initform common-lisp:nil :type
                         (common-lisp:or service-registries common-lisp:null)
                         :accessor
                         struct-shape-create-task-set-request-service-registries
                         :shape "ServiceRegistries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-type :initarg :launch-type :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor
                         struct-shape-create-task-set-request-launch-type
                         :shape "LaunchType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capacity-provider-strategy :initarg
                         :capacity-provider-strategy :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-task-set-request-capacity-provider-strategy
                         :shape "CapacityProviderStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (platform-version :initarg :platform-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-task-set-request-platform-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scale :initarg :scale :initform common-lisp:nil :type
                         (common-lisp:or scale common-lisp:null) :accessor
                         struct-shape-create-task-set-request-scale :shape
                         "Scale" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-task-set-request-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-task-set-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-task-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-task-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-task-set-request 'make-create-task-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-task-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-task-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "loadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-registries))
      (common-lisp:list
       (common-lisp:cons "serviceRegistries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "capacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-task-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-task-set-response common-lisp:nil
                       ((task-set :initarg :task-set :initform common-lisp:nil
                         :type (common-lisp:or task-set common-lisp:null)
                         :accessor
                         struct-shape-create-task-set-response-task-set :shape
                         "TaskSet" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-task-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-task-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-task-set-response 'make-create-task-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-task-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-task-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-set))
      (common-lisp:list
       (common-lisp:cons "taskSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-task-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-account-setting-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or setting-name common-lisp:null)
                         :accessor
                         struct-shape-delete-account-setting-request-name
                         :shape "SettingName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal-arn :initarg :principal-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-account-setting-request-principal-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-account-setting-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-account-setting-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-account-setting-request
                    'make-delete-account-setting-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-setting-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-setting-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-setting-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-account-setting-response common-lisp:nil
                       ((setting :initarg :setting :initform common-lisp:nil
                         :type (common-lisp:or setting common-lisp:null)
                         :accessor
                         struct-shape-delete-account-setting-response-setting
                         :shape "Setting" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-account-setting-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-account-setting-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-account-setting-response
                    'make-delete-account-setting-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-setting-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-setting-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setting))
      (common-lisp:list
       (common-lisp:cons "setting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-setting-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-attributes-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-attributes-request-cluster :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         (common-lisp:error ":attributes is required") :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-delete-attributes-request-attributes
                         :shape "Attributes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-attributes-request
                    'make-delete-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-attributes-response common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-delete-attributes-response-attributes
                         :shape "Attributes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-attributes-response
                    'make-delete-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-capacity-provider-request common-lisp:nil
                       ((capacity-provider :initarg :capacity-provider
                         :initform
                         (common-lisp:error ":capacityprovider is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-capacity-provider-request-capacity-provider
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-capacity-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-capacity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-capacity-provider-request
                    'make-delete-capacity-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-provider))
      (common-lisp:list
       (common-lisp:cons "capacityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-capacity-provider-response common-lisp:nil
                       ((capacity-provider :initarg :capacity-provider
                         :initform common-lisp:nil :type
                         (common-lisp:or capacity-provider common-lisp:null)
                         :accessor
                         struct-shape-delete-capacity-provider-response-capacity-provider
                         :shape "CapacityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-capacity-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-capacity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-capacity-provider-response
                    'make-delete-capacity-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-provider))
      (common-lisp:list
       (common-lisp:cons "capacityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-request common-lisp:nil
                       ((cluster :initarg :cluster :initform
                         (common-lisp:error ":cluster is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-cluster-request-cluster :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-request 'make-delete-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-response common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor struct-shape-delete-cluster-response-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-response 'make-delete-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-delete-service-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service :initarg :service :initform
                         (common-lisp:error ":service is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-service-request-service :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-delete-service-request-force
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-service-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-service-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-service-request 'make-delete-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-response common-lisp:nil
                       ((service :initarg :service :initform common-lisp:nil
                         :type (common-lisp:or service common-lisp:null)
                         :accessor struct-shape-delete-service-response-service
                         :shape "Service" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-service-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-service-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-service-response 'make-delete-service-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-task-definitions-request common-lisp:nil
                       ((task-definitions :initarg :task-definitions :initform
                         (common-lisp:error ":taskdefinitions is required")
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-delete-task-definitions-request-task-definitions
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-task-definitions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-task-definitions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-task-definitions-request
                    'make-delete-task-definitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-definitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definitions))
      (common-lisp:list
       (common-lisp:cons "taskDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-task-definitions-response common-lisp:nil
                       ((task-definitions :initarg :task-definitions :initform
                         common-lisp:nil :type
                         (common-lisp:or task-definition-list common-lisp:null)
                         :accessor
                         struct-shape-delete-task-definitions-response-task-definitions
                         :shape "TaskDefinitionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type (common-lisp:or failures common-lisp:null)
                         :accessor
                         struct-shape-delete-task-definitions-response-failures
                         :shape "Failures" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-task-definitions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-task-definitions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-task-definitions-response
                    'make-delete-task-definitions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definitions))
      (common-lisp:list
       (common-lisp:cons "taskDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-task-set-request common-lisp:nil
                       ((cluster :initarg :cluster :initform
                         (common-lisp:error ":cluster is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-task-set-request-cluster :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service :initarg :service :initform
                         (common-lisp:error ":service is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-task-set-request-service :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-set :initarg :task-set :initform
                         (common-lisp:error ":taskset is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-task-set-request-task-set :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-delete-task-set-request-force
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-task-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-task-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-task-set-request 'make-delete-task-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-set))
      (common-lisp:list
       (common-lisp:cons "taskSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-task-set-response common-lisp:nil
                       ((task-set :initarg :task-set :initform common-lisp:nil
                         :type (common-lisp:or task-set common-lisp:null)
                         :accessor
                         struct-shape-delete-task-set-response-task-set :shape
                         "TaskSet" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-task-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-task-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-task-set-response 'make-delete-task-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-set))
      (common-lisp:list
       (common-lisp:cons "taskSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deployment-id :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-deployment-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-definition :initarg :task-definition :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deployment-task-definition :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (desired-count :initarg :desired-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-deployment-desired-count :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pending-count :initarg :pending-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-deployment-pending-count :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (running-count :initarg :running-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-deployment-running-count :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failed-tasks :initarg :failed-tasks :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-deployment-failed-tasks :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-deployment-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-deployment-updated-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (capacity-provider-strategy :initarg
                         :capacity-provider-strategy :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-deployment-capacity-provider-strategy
                         :shape "CapacityProviderStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (launch-type :initarg :launch-type :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor struct-shape-deployment-launch-type :shape
                         "LaunchType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (platform-version :initarg :platform-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deployment-platform-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (platform-family :initarg :platform-family :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deployment-platform-family :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (network-configuration :initarg :network-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-deployment-network-configuration :shape
                         "NetworkConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rollout-state :initarg :rollout-state :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-rollout-state
                                         common-lisp:null)
                         :accessor struct-shape-deployment-rollout-state :shape
                         "DeploymentRolloutState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rollout-state-reason :initarg :rollout-state-reason
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deployment-rollout-state-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-connect-configuration :initarg
                         :service-connect-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or service-connect-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-deployment-service-connect-configuration
                         :shape "ServiceConnectConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-connect-resources :initarg
                         :service-connect-resources :initform common-lisp:nil
                         :type
                         (common-lisp:or service-connect-service-resource-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-deployment-service-connect-resources
                         :shape "ServiceConnectServiceResourceList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (volume-configurations :initarg :volume-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or service-volume-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-deployment-volume-configurations :shape
                         "ServiceVolumeConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'deployment 'make-deployment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-count))
      (common-lisp:list
       (common-lisp:cons "desiredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-count))
      (common-lisp:list
       (common-lisp:cons "pendingCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-count))
      (common-lisp:list
       (common-lisp:cons "runningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-tasks))
      (common-lisp:list
       (common-lisp:cons "failedTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "capacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-family))
      (common-lisp:list
       (common-lisp:cons "platformFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollout-state))
      (common-lisp:list
       (common-lisp:cons "rolloutState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rollout-state-reason))
      (common-lisp:list
       (common-lisp:cons "rolloutStateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-connect-configuration))
      (common-lisp:list
       (common-lisp:cons "serviceConnectConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-connect-resources))
      (common-lisp:list
       (common-lisp:cons "serviceConnectResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-configurations))
      (common-lisp:list
       (common-lisp:cons "volumeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment-alarms common-lisp:nil
                       ((alarm-names :initarg :alarm-names :initform
                         (common-lisp:error ":alarmnames is required") :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-deployment-alarms-alarm-names
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable :initarg :enable :initform
                         (common-lisp:error ":enable is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-deployment-alarms-enable :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rollback :initarg :rollback :initform
                         (common-lisp:error ":rollback is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-deployment-alarms-rollback :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment-alarms
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-alarms
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deployment-alarms 'make-deployment-alarms))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-alarms))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-alarms))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-names))
      (common-lisp:list
       (common-lisp:cons "alarmNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable))
      (common-lisp:list
       (common-lisp:cons "enable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback))
      (common-lisp:list
       (common-lisp:cons "rollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-alarms))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment-circuit-breaker common-lisp:nil
                       ((enable :initarg :enable :initform
                         (common-lisp:error ":enable is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-deployment-circuit-breaker-enable :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rollback :initarg :rollback :initform
                         (common-lisp:error ":rollback is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-deployment-circuit-breaker-rollback
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment-circuit-breaker
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-circuit-breaker
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deployment-circuit-breaker
                    'make-deployment-circuit-breaker))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-circuit-breaker))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-circuit-breaker))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable))
      (common-lisp:list
       (common-lisp:cons "enable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback))
      (common-lisp:list
       (common-lisp:cons "rollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-circuit-breaker))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment-configuration common-lisp:nil
                       ((deployment-circuit-breaker :initarg
                         :deployment-circuit-breaker :initform common-lisp:nil
                         :type
                         (common-lisp:or deployment-circuit-breaker
                                         common-lisp:null)
                         :accessor
                         struct-shape-deployment-configuration-deployment-circuit-breaker
                         :shape "DeploymentCircuitBreaker" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-percent :initarg :maximum-percent :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-deployment-configuration-maximum-percent
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minimum-healthy-percent :initarg
                         :minimum-healthy-percent :initform common-lisp:nil
                         :type (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-deployment-configuration-minimum-healthy-percent
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alarms :initarg :alarms :initform common-lisp:nil
                         :type
                         (common-lisp:or deployment-alarms common-lisp:null)
                         :accessor struct-shape-deployment-configuration-alarms
                         :shape "DeploymentAlarms" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deployment-configuration 'make-deployment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-circuit-breaker))
      (common-lisp:list
       (common-lisp:cons "deploymentCircuitBreaker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-percent))
      (common-lisp:list
       (common-lisp:cons "maximumPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-healthy-percent))
      (common-lisp:list
       (common-lisp:cons "minimumHealthyPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment-controller common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or deployment-controller-type
                                         common-lisp:null)
                         :accessor struct-shape-deployment-controller-type
                         :shape "DeploymentControllerType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment-controller
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-controller
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deployment-controller 'make-deployment-controller))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-controller))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-controller))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-controller))
   common-lisp:nil))
(common-lisp:deftype deployment-controller-type () 'common-lisp:string)
(common-lisp:deftype deployment-rollout-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype deployments () '(trivial-types:proper-list deployment))
 (common-lisp:defun make-deployments
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass deregister-container-instance-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-deregister-container-instance-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-instance :initarg :container-instance
                         :initform
                         (common-lisp:error ":containerinstance is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-deregister-container-instance-request-container-instance
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-deregister-container-instance-request-force
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-container-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-container-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-container-instance-request
                    'make-deregister-container-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-container-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-container-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instance))
      (common-lisp:list
       (common-lisp:cons "containerInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-container-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-container-instance-response common-lisp:nil
                       ((container-instance :initarg :container-instance
                         :initform common-lisp:nil :type
                         (common-lisp:or container-instance common-lisp:null)
                         :accessor
                         struct-shape-deregister-container-instance-response-container-instance
                         :shape "ContainerInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-container-instance-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-container-instance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-container-instance-response
                    'make-deregister-container-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-container-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-container-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instance))
      (common-lisp:list
       (common-lisp:cons "containerInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-container-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-task-definition-request common-lisp:nil
                       ((task-definition :initarg :task-definition :initform
                         (common-lisp:error ":taskdefinition is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-deregister-task-definition-request-task-definition
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-task-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-task-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-task-definition-request
                    'make-deregister-task-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-task-definition-response common-lisp:nil
                       ((task-definition :initarg :task-definition :initform
                         common-lisp:nil :type
                         (common-lisp:or task-definition common-lisp:null)
                         :accessor
                         struct-shape-deregister-task-definition-response-task-definition
                         :shape "TaskDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-task-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-task-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-task-definition-response
                    'make-deregister-task-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-capacity-providers-request common-lisp:nil
                       ((capacity-providers :initarg :capacity-providers
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-describe-capacity-providers-request-capacity-providers
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include :initarg :include :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-provider-field-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-capacity-providers-request-include
                         :shape "CapacityProviderFieldList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-describe-capacity-providers-request-max-results
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-capacity-providers-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-capacity-providers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-capacity-providers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-capacity-providers-request
                    'make-describe-capacity-providers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-capacity-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-capacity-providers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-providers))
      (common-lisp:list
       (common-lisp:cons "capacityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-capacity-providers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-capacity-providers-response common-lisp:nil
                       ((capacity-providers :initarg :capacity-providers
                         :initform common-lisp:nil :type
                         (common-lisp:or capacity-providers common-lisp:null)
                         :accessor
                         struct-shape-describe-capacity-providers-response-capacity-providers
                         :shape "CapacityProviders" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type (common-lisp:or failures common-lisp:null)
                         :accessor
                         struct-shape-describe-capacity-providers-response-failures
                         :shape "Failures" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-capacity-providers-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-capacity-providers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-capacity-providers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-capacity-providers-response
                    'make-describe-capacity-providers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-capacity-providers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-capacity-providers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-providers))
      (common-lisp:list
       (common-lisp:cons "capacityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-capacity-providers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-clusters-request common-lisp:nil
                       ((clusters :initarg :clusters :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-describe-clusters-request-clusters :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (include :initarg :include :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-field-list common-lisp:null)
                         :accessor
                         struct-shape-describe-clusters-request-include :shape
                         "ClusterFieldList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-clusters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-clusters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-clusters-request
                    'make-describe-clusters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-clusters-response common-lisp:nil
                       ((clusters :initarg :clusters :initform common-lisp:nil
                         :type (common-lisp:or clusters common-lisp:null)
                         :accessor
                         struct-shape-describe-clusters-response-clusters
                         :shape "Clusters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type (common-lisp:or failures common-lisp:null)
                         :accessor
                         struct-shape-describe-clusters-response-failures
                         :shape "Failures" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-clusters-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-clusters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-clusters-response
                    'make-describe-clusters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-container-instances-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-container-instances-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-instances :initarg :container-instances
                         :initform
                         (common-lisp:error ":containerinstances is required")
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-describe-container-instances-request-container-instances
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include :initarg :include :initform common-lisp:nil
                         :type
                         (common-lisp:or container-instance-field-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-container-instances-request-include
                         :shape "ContainerInstanceFieldList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-container-instances-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-container-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-container-instances-request
                    'make-describe-container-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-container-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-container-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instances))
      (common-lisp:list
       (common-lisp:cons "containerInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-container-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-container-instances-response common-lisp:nil
                       ((container-instances :initarg :container-instances
                         :initform common-lisp:nil :type
                         (common-lisp:or container-instances common-lisp:null)
                         :accessor
                         struct-shape-describe-container-instances-response-container-instances
                         :shape "ContainerInstances" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type (common-lisp:or failures common-lisp:null)
                         :accessor
                         struct-shape-describe-container-instances-response-failures
                         :shape "Failures" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-container-instances-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-container-instances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-container-instances-response
                    'make-describe-container-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-container-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-container-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instances))
      (common-lisp:list
       (common-lisp:cons "containerInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-container-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-services-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-services-request-cluster :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (services :initarg :services :initform
                         (common-lisp:error ":services is required") :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-describe-services-request-services :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (include :initarg :include :initform common-lisp:nil
                         :type
                         (common-lisp:or service-field-list common-lisp:null)
                         :accessor
                         struct-shape-describe-services-request-include :shape
                         "ServiceFieldList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-services-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-services-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-services-request
                    'make-describe-services-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-services-response common-lisp:nil
                       ((services :initarg :services :initform common-lisp:nil
                         :type (common-lisp:or services common-lisp:null)
                         :accessor
                         struct-shape-describe-services-response-services
                         :shape "Services" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type (common-lisp:or failures common-lisp:null)
                         :accessor
                         struct-shape-describe-services-response-failures
                         :shape "Failures" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-services-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-services-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-services-response
                    'make-describe-services-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-task-definition-request common-lisp:nil
                       ((task-definition :initarg :task-definition :initform
                         (common-lisp:error ":taskdefinition is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-task-definition-request-task-definition
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include :initarg :include :initform common-lisp:nil
                         :type
                         (common-lisp:or task-definition-field-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-task-definition-request-include
                         :shape "TaskDefinitionFieldList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-task-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-task-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-task-definition-request
                    'make-describe-task-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-task-definition-response common-lisp:nil
                       ((task-definition :initarg :task-definition :initform
                         common-lisp:nil :type
                         (common-lisp:or task-definition common-lisp:null)
                         :accessor
                         struct-shape-describe-task-definition-response-task-definition
                         :shape "TaskDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-describe-task-definition-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-task-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-task-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-task-definition-response
                    'make-describe-task-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-task-sets-request common-lisp:nil
                       ((cluster :initarg :cluster :initform
                         (common-lisp:error ":cluster is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-task-sets-request-cluster :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service :initarg :service :initform
                         (common-lisp:error ":service is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-task-sets-request-service :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-sets :initarg :task-sets :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-describe-task-sets-request-task-sets
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include :initarg :include :initform common-lisp:nil
                         :type
                         (common-lisp:or task-set-field-list common-lisp:null)
                         :accessor
                         struct-shape-describe-task-sets-request-include :shape
                         "TaskSetFieldList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-task-sets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-task-sets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-task-sets-request
                    'make-describe-task-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-sets))
      (common-lisp:list
       (common-lisp:cons "taskSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-task-sets-response common-lisp:nil
                       ((task-sets :initarg :task-sets :initform
                         common-lisp:nil :type
                         (common-lisp:or task-sets common-lisp:null) :accessor
                         struct-shape-describe-task-sets-response-task-sets
                         :shape "TaskSets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type (common-lisp:or failures common-lisp:null)
                         :accessor
                         struct-shape-describe-task-sets-response-failures
                         :shape "Failures" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-task-sets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-task-sets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-task-sets-response
                    'make-describe-task-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-sets))
      (common-lisp:list
       (common-lisp:cons "taskSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tasks-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-describe-tasks-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tasks :initarg :tasks :initform
                         (common-lisp:error ":tasks is required") :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-describe-tasks-request-tasks
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include :initarg :include :initform common-lisp:nil
                         :type
                         (common-lisp:or task-field-list common-lisp:null)
                         :accessor struct-shape-describe-tasks-request-include
                         :shape "TaskFieldList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-tasks-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-tasks-request 'make-describe-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tasks-response common-lisp:nil
                       ((tasks :initarg :tasks :initform common-lisp:nil :type
                         (common-lisp:or tasks common-lisp:null) :accessor
                         struct-shape-describe-tasks-response-tasks :shape
                         "Tasks" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type (common-lisp:or failures common-lisp:null)
                         :accessor
                         struct-shape-describe-tasks-response-failures :shape
                         "Failures" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-tasks-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-tasks-response 'make-describe-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tasks-response))
   common-lisp:nil))
(common-lisp:deftype desired-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass device common-lisp:nil
                       ((host-path :initarg :host-path :initform
                         (common-lisp:error ":hostpath is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-device-host-path :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (container-path :initarg :container-path :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-device-container-path :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (permissions :initarg :permissions :initform
                         common-lisp:nil :type
                         (common-lisp:or device-cgroup-permissions
                                         common-lisp:null)
                         :accessor struct-shape-device-permissions :shape
                         "DeviceCgroupPermissions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'device 'make-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-path))
      (common-lisp:list
       (common-lisp:cons "hostPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-path))
      (common-lisp:list
       (common-lisp:cons "containerPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device))
   common-lisp:nil))
(common-lisp:deftype device-cgroup-permission () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-cgroup-permissions ()
   '(trivial-types:proper-list device-cgroup-permission))
 (common-lisp:defun make-device-cgroup-permissions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            device-cgroup-permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype devices-list () '(trivial-types:proper-list device))
 (common-lisp:defun make-devices-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass discover-poll-endpoint-request common-lisp:nil
                       ((container-instance :initarg :container-instance
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-discover-poll-endpoint-request-container-instance
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-discover-poll-endpoint-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-discover-poll-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'discover-poll-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'discover-poll-endpoint-request
                    'make-discover-poll-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          discover-poll-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          discover-poll-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instance))
      (common-lisp:list
       (common-lisp:cons "containerInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          discover-poll-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass discover-poll-endpoint-response common-lisp:nil
                       ((endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-discover-poll-endpoint-response-endpoint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (telemetry-endpoint :initarg :telemetry-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-discover-poll-endpoint-response-telemetry-endpoint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-connect-endpoint :initarg
                         :service-connect-endpoint :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-discover-poll-endpoint-response-service-connect-endpoint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-discover-poll-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'discover-poll-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'discover-poll-endpoint-response
                    'make-discover-poll-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          discover-poll-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          discover-poll-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telemetry-endpoint))
      (common-lisp:list
       (common-lisp:cons "telemetryEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-connect-endpoint))
      (common-lisp:list
       (common-lisp:cons "serviceConnectEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          discover-poll-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype docker-labels-map () 'common-lisp:hash-table)
 (common-lisp:defun make-docker-labels-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass docker-volume-configuration common-lisp:nil
                       ((scope :initarg :scope :initform common-lisp:nil :type
                         (common-lisp:or scope common-lisp:null) :accessor
                         struct-shape-docker-volume-configuration-scope :shape
                         "Scope" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (autoprovision :initarg :autoprovision :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-docker-volume-configuration-autoprovision
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (driver :initarg :driver :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-docker-volume-configuration-driver :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (driver-opts :initarg :driver-opts :initform
                         common-lisp:nil :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         struct-shape-docker-volume-configuration-driver-opts
                         :shape "StringMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (labels :initarg :labels :initform common-lisp:nil
                         :type (common-lisp:or string-map common-lisp:null)
                         :accessor
                         struct-shape-docker-volume-configuration-labels :shape
                         "StringMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-docker-volume-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'docker-volume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'docker-volume-configuration
                    'make-docker-volume-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          docker-volume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          docker-volume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'autoprovision))
      (common-lisp:list
       (common-lisp:cons "autoprovision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'driver))
      (common-lisp:list
       (common-lisp:cons "driver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'driver-opts))
      (common-lisp:list
       (common-lisp:cons "driverOpts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          docker-volume-configuration))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype duration () 'common-lisp:integer)
(common-lisp:deftype ebskmskey-id () 'common-lisp:string)
(common-lisp:deftype ebsresource-type () 'common-lisp:string)
(common-lisp:deftype ebssnapshot-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ebstag-specification common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or ebsresource-type common-lisp:null)
                         :accessor
                         struct-shape-ebstag-specification-resource-type :shape
                         "EBSResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-ebstag-specification-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (propagate-tags :initarg :propagate-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or propagate-tags common-lisp:null)
                         :accessor
                         struct-shape-ebstag-specification-propagate-tags
                         :shape "PropagateTags" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ebstag-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ebstag-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ebstag-specification 'make-ebstag-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebstag-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebstag-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-tags))
      (common-lisp:list
       (common-lisp:cons "propagateTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebstag-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ebstag-specifications ()
   '(trivial-types:proper-list ebstag-specification))
 (common-lisp:defun make-ebstag-specifications
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ebstag-specification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ebsvolume-type () 'common-lisp:string)
(common-lisp:deftype ecsvolume-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass efsauthorization-config common-lisp:nil
                       ((access-point-id :initarg :access-point-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-efsauthorization-config-access-point-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam :initarg :iam :initform common-lisp:nil :type
                         (common-lisp:or efsauthorization-config-iam
                                         common-lisp:null)
                         :accessor struct-shape-efsauthorization-config-iam
                         :shape "EFSAuthorizationConfigIAM" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-efsauthorization-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'efsauthorization-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'efsauthorization-config 'make-efsauthorization-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          efsauthorization-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          efsauthorization-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-id))
      (common-lisp:list
       (common-lisp:cons "accessPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam))
      (common-lisp:list
       (common-lisp:cons "iam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          efsauthorization-config))
   common-lisp:nil))
(common-lisp:deftype efsauthorization-config-iam () 'common-lisp:string)
(common-lisp:deftype efstransit-encryption () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass efsvolume-configuration common-lisp:nil
                       ((file-system-id :initarg :file-system-id :initform
                         (common-lisp:error ":filesystemid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-efsvolume-configuration-file-system-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (root-directory :initarg :root-directory :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-efsvolume-configuration-root-directory
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-encryption :initarg :transit-encryption
                         :initform common-lisp:nil :type
                         (common-lisp:or efstransit-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-efsvolume-configuration-transit-encryption
                         :shape "EFSTransitEncryption" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (transit-encryption-port :initarg
                         :transit-encryption-port :initform common-lisp:nil
                         :type (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-efsvolume-configuration-transit-encryption-port
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorization-config :initarg :authorization-config
                         :initform common-lisp:nil :type
                         (common-lisp:or efsauthorization-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-efsvolume-configuration-authorization-config
                         :shape "EFSAuthorizationConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-efsvolume-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'efsvolume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'efsvolume-configuration 'make-efsvolume-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          efsvolume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          efsvolume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "fileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-directory))
      (common-lisp:list
       (common-lisp:cons "rootDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transit-encryption))
      (common-lisp:list
       (common-lisp:cons "transitEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-port))
      (common-lisp:list
       (common-lisp:cons "transitEncryptionPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-config))
      (common-lisp:list
       (common-lisp:cons "authorizationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          efsvolume-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass environment-file common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-environment-file-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or environment-file-type
                                         common-lisp:null)
                         :accessor struct-shape-environment-file-type :shape
                         "EnvironmentFileType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-file
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment-file
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-file 'make-environment-file))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-file))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-file))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-file))
   common-lisp:nil))
(common-lisp:deftype environment-file-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-files ()
   '(trivial-types:proper-list environment-file))
 (common-lisp:defun make-environment-files
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-file))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype environment-variables ()
   '(trivial-types:proper-list key-value-pair))
 (common-lisp:defun make-environment-variables
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ephemeral-storage common-lisp:nil
                       ((size-in-gi-b :initarg :size-in-gi-b :initform
                         (common-lisp:error ":sizeingib is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-ephemeral-storage-size-in-gi-b :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ephemeral-storage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ephemeral-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ephemeral-storage 'make-ephemeral-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ephemeral-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ephemeral-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gi-b))
      (common-lisp:list
       (common-lisp:cons "sizeInGiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ephemeral-storage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-command-configuration common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-command-configuration-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (logging :initarg :logging :initform common-lisp:nil
                         :type
                         (common-lisp:or execute-command-logging
                                         common-lisp:null)
                         :accessor
                         struct-shape-execute-command-configuration-logging
                         :shape "ExecuteCommandLogging" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (log-configuration :initarg :log-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or execute-command-log-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-execute-command-configuration-log-configuration
                         :shape "ExecuteCommandLogConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-command-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-command-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-command-configuration
                    'make-execute-command-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "logConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-command-log-configuration common-lisp:nil
                       ((cloud-watch-log-group-name :initarg
                         :cloud-watch-log-group-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-execute-command-log-configuration-cloud-watch-log-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cloud-watch-encryption-enabled :initarg
                         :cloud-watch-encryption-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-execute-command-log-configuration-cloud-watch-encryption-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-command-log-configuration-s3bucket-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3encryption-enabled :initarg :s3encryption-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-execute-command-log-configuration-s3encryption-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3key-prefix :initarg :s3key-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-command-log-configuration-s3key-prefix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-command-log-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-command-log-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-command-log-configuration
                    'make-execute-command-log-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-log-group-name))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "cloudWatchEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "s3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "s3EncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "s3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-log-configuration))
   common-lisp:nil))
(common-lisp:deftype execute-command-logging () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execute-command-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-execute-command-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container :initarg :container :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-command-request-container :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (command :initarg :command :initform
                         (common-lisp:error ":command is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-command-request-command :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (interactive :initarg :interactive :initform
                         (common-lisp:error ":interactive is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-execute-command-request-interactive
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task :initarg :task :initform
                         (common-lisp:error ":task is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-command-request-task :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-command-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-command-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-command-request 'make-execute-command-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container))
      (common-lisp:list
       (common-lisp:cons "container"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interactive))
      (common-lisp:list
       (common-lisp:cons "interactive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-command-response common-lisp:nil
                       ((cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-command-response-cluster-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-arn :initarg :container-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-command-response-container-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-name :initarg :container-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-execute-command-response-container-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interactive :initarg :interactive :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-execute-command-response-interactive
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session :initarg :session :initform common-lisp:nil
                         :type (common-lisp:or session common-lisp:null)
                         :accessor
                         struct-shape-execute-command-response-session :shape
                         "Session" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-arn :initarg :task-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-execute-command-response-task-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-command-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-command-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-command-response 'make-execute-command-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "clusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-arn))
      (common-lisp:list
       (common-lisp:cons "containerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interactive))
      (common-lisp:list
       (common-lisp:cons "interactive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "taskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fsx-windows-file-server-authorization-config
                       common-lisp:nil
                       ((credentials-parameter :initarg :credentials-parameter
                         :initform
                         (common-lisp:error
                          ":credentialsparameter is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-fsx-windows-file-server-authorization-config-credentials-parameter
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain :initarg :domain :initform
                         (common-lisp:error ":domain is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-fsx-windows-file-server-authorization-config-domain
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fsx-windows-file-server-authorization-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'fsx-windows-file-server-authorization-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fsx-windows-file-server-authorization-config
                    'make-fsx-windows-file-server-authorization-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fsx-windows-file-server-authorization-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fsx-windows-file-server-authorization-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credentials-parameter))
      (common-lisp:list
       (common-lisp:cons "credentialsParameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fsx-windows-file-server-authorization-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fsx-windows-file-server-volume-configuration
                       common-lisp:nil
                       ((file-system-id :initarg :file-system-id :initform
                         (common-lisp:error ":filesystemid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-fsx-windows-file-server-volume-configuration-file-system-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (root-directory :initarg :root-directory :initform
                         (common-lisp:error ":rootdirectory is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-fsx-windows-file-server-volume-configuration-root-directory
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorization-config :initarg :authorization-config
                         :initform
                         (common-lisp:error ":authorizationconfig is required")
                         :type
                         (common-lisp:or
                          fsx-windows-file-server-authorization-config
                          common-lisp:null)
                         :accessor
                         struct-shape-fsx-windows-file-server-volume-configuration-authorization-config
                         :shape "FSxWindowsFileServerAuthorizationConfig"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fsx-windows-file-server-volume-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'fsx-windows-file-server-volume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fsx-windows-file-server-volume-configuration
                    'make-fsx-windows-file-server-volume-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fsx-windows-file-server-volume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fsx-windows-file-server-volume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "fileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-directory))
      (common-lisp:list
       (common-lisp:cons "rootDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-config))
      (common-lisp:list
       (common-lisp:cons "authorizationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fsx-windows-file-server-volume-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failure common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-failure-arn :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-failure-reason :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (detail :initarg :detail :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-failure-detail :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failure
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'failure
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'failure 'make-failure))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail))
      (common-lisp:list
       (common-lisp:cons "detail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failure))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failures () '(trivial-types:proper-list failure))
 (common-lisp:defun make-failures
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failure))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass firelens-configuration common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or firelens-configuration-type
                                         common-lisp:null)
                         :accessor struct-shape-firelens-configuration-type
                         :shape "FirelensConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (options :initarg :options :initform common-lisp:nil
                         :type
                         (common-lisp:or firelens-configuration-options-map
                                         common-lisp:null)
                         :accessor struct-shape-firelens-configuration-options
                         :shape "FirelensConfigurationOptionsMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-firelens-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'firelens-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'firelens-configuration 'make-firelens-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firelens-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firelens-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firelens-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype firelens-configuration-options-map ()
   'common-lisp:hash-table)
 (common-lisp:defun make-firelens-configuration-options-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype firelens-configuration-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-task-protection-request common-lisp:nil
                       ((cluster :initarg :cluster :initform
                         (common-lisp:error ":cluster is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-task-protection-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tasks :initarg :tasks :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-get-task-protection-request-tasks :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-task-protection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-task-protection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-task-protection-request
                    'make-get-task-protection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-task-protection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-task-protection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-task-protection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-task-protection-response common-lisp:nil
                       ((protected-tasks :initarg :protected-tasks :initform
                         common-lisp:nil :type
                         (common-lisp:or protected-tasks common-lisp:null)
                         :accessor
                         struct-shape-get-task-protection-response-protected-tasks
                         :shape "ProtectedTasks" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type (common-lisp:or failures common-lisp:null)
                         :accessor
                         struct-shape-get-task-protection-response-failures
                         :shape "Failures" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-task-protection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-task-protection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-task-protection-response
                    'make-get-task-protection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-task-protection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-task-protection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protected-tasks))
      (common-lisp:list
       (common-lisp:cons "protectedTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-task-protection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype gpu-ids () '(trivial-types:proper-list string))
 (common-lisp:defun make-gpu-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass health-check common-lisp:nil
                       ((command :initarg :command :initform
                         (common-lisp:error ":command is required") :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-health-check-command :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (interval :initarg :interval :initform common-lisp:nil
                         :type (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-health-check-interval :shape
                         "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-health-check-timeout :shape
                         "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retries :initarg :retries :initform common-lisp:nil
                         :type (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-health-check-retries :shape
                         "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-period :initarg :start-period :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-health-check-start-period
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-health-check
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'health-check
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'health-check 'make-health-check))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input health-check))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input health-check))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retries))
      (common-lisp:list
       (common-lisp:cons "retries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-period))
      (common-lisp:list
       (common-lisp:cons "startPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input health-check))
   common-lisp:nil))
(common-lisp:deftype health-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass host-entry common-lisp:nil
                       ((hostname :initarg :hostname :initform
                         (common-lisp:error ":hostname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-host-entry-hostname :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ip-address :initarg :ip-address :initform
                         (common-lisp:error ":ipaddress is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-host-entry-ip-address :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-host-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'host-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'host-entry 'make-host-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input host-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input host-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "ipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input host-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype host-entry-list ()
   '(trivial-types:proper-list host-entry))
 (common-lisp:defun make-host-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list host-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass host-volume-properties common-lisp:nil
                       ((source-path :initarg :source-path :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-host-volume-properties-source-path :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-host-volume-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'host-volume-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'host-volume-properties 'make-host-volume-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          host-volume-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          host-volume-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-path))
      (common-lisp:list
       (common-lisp:cons "sourcePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          host-volume-properties))
   common-lisp:nil))
(common-lisp:deftype iamrole-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass inference-accelerator common-lisp:nil
                       ((device-name :initarg :device-name :initform
                         (common-lisp:error ":devicename is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-inference-accelerator-device-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-type :initarg :device-type :initform
                         (common-lisp:error ":devicetype is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-inference-accelerator-device-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inference-accelerator
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'inference-accelerator
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'inference-accelerator 'make-inference-accelerator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-accelerator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-accelerator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "deviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-accelerator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass inference-accelerator-override common-lisp:nil
                       ((device-name :initarg :device-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-inference-accelerator-override-device-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-type :initarg :device-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-inference-accelerator-override-device-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inference-accelerator-override
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'inference-accelerator-override
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'inference-accelerator-override
                    'make-inference-accelerator-override))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-accelerator-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-accelerator-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "deviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-accelerator-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inference-accelerator-overrides ()
   '(trivial-types:proper-list inference-accelerator-override))
 (common-lisp:defun make-inference-accelerator-overrides
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inference-accelerator-override))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype inference-accelerators ()
   '(trivial-types:proper-list inference-accelerator))
 (common-lisp:defun make-inference-accelerators
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inference-accelerator))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-health-check-result common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or instance-health-check-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-health-check-result-type :shape
                         "InstanceHealthCheckType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-health-check-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-health-check-result-status
                         :shape "InstanceHealthCheckState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-instance-health-check-result-last-updated
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-status-change :initarg :last-status-change
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-instance-health-check-result-last-status-change
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-health-check-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-health-check-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-health-check-result
                    'make-instance-health-check-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-check-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-check-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status-change))
      (common-lisp:list
       (common-lisp:cons "lastStatusChange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-check-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-health-check-result-list ()
   '(trivial-types:proper-list instance-health-check-result))
 (common-lisp:defun make-instance-health-check-result-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-health-check-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-health-check-state () 'common-lisp:string)
(common-lisp:deftype instance-health-check-type () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-parameter-exception)))
(common-lisp:deftype ipc-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kernel-capabilities common-lisp:nil
                       ((add :initarg :add :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-kernel-capabilities-add :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (drop :initarg :drop :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-kernel-capabilities-drop :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kernel-capabilities
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kernel-capabilities
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kernel-capabilities 'make-kernel-capabilities))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kernel-capabilities))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kernel-capabilities))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add))
      (common-lisp:list
       (common-lisp:cons "add"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drop))
      (common-lisp:list
       (common-lisp:cons "drop"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kernel-capabilities))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass key-value-pair common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-key-value-pair-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-key-value-pair-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-key-value-pair
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'key-value-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'key-value-pair 'make-key-value-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-value-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-value-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-value-pair))
   common-lisp:nil))
(common-lisp:deftype launch-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass linux-parameters common-lisp:nil
                       ((capabilities :initarg :capabilities :initform
                         common-lisp:nil :type
                         (common-lisp:or kernel-capabilities common-lisp:null)
                         :accessor struct-shape-linux-parameters-capabilities
                         :shape "KernelCapabilities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (devices :initarg :devices :initform common-lisp:nil
                         :type (common-lisp:or devices-list common-lisp:null)
                         :accessor struct-shape-linux-parameters-devices :shape
                         "DevicesList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (init-process-enabled :initarg :init-process-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-linux-parameters-init-process-enabled
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shared-memory-size :initarg :shared-memory-size
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-linux-parameters-shared-memory-size
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tmpfs :initarg :tmpfs :initform common-lisp:nil :type
                         (common-lisp:or tmpfs-list common-lisp:null) :accessor
                         struct-shape-linux-parameters-tmpfs :shape "TmpfsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-swap :initarg :max-swap :initform common-lisp:nil
                         :type (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-linux-parameters-max-swap
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (swappiness :initarg :swappiness :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-linux-parameters-swappiness
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-linux-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'linux-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'linux-parameters 'make-linux-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input linux-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input linux-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'devices))
      (common-lisp:list
       (common-lisp:cons "devices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'init-process-enabled))
      (common-lisp:list
       (common-lisp:cons "initProcessEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-memory-size))
      (common-lisp:list
       (common-lisp:cons "sharedMemorySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tmpfs))
      (common-lisp:list
       (common-lisp:cons "tmpfs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-swap))
      (common-lisp:list
       (common-lisp:cons "maxSwap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'swappiness))
      (common-lisp:list
       (common-lisp:cons "swappiness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input linux-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-account-settings-request common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or setting-name common-lisp:null)
                         :accessor
                         struct-shape-list-account-settings-request-name :shape
                         "SettingName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-account-settings-request-value
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal-arn :initarg :principal-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-account-settings-request-principal-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (effective-settings :initarg :effective-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-list-account-settings-request-effective-settings
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-account-settings-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-account-settings-request-max-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-account-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-account-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-account-settings-request
                    'make-list-account-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-account-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-account-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-settings))
      (common-lisp:list
       (common-lisp:cons "effectiveSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-account-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-account-settings-response common-lisp:nil
                       ((settings :initarg :settings :initform common-lisp:nil
                         :type (common-lisp:or settings common-lisp:null)
                         :accessor
                         struct-shape-list-account-settings-response-settings
                         :shape "Settings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-account-settings-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-account-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-account-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-account-settings-response
                    'make-list-account-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-account-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-account-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-account-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-attributes-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-list-attributes-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-type :initarg :target-type :initform
                         (common-lisp:error ":targettype is required") :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor
                         struct-shape-list-attributes-request-target-type
                         :shape "TargetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-name :initarg :attribute-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-attributes-request-attribute-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attribute-value :initarg :attribute-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-attributes-request-attribute-value
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-attributes-request-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-list-attributes-request-max-results
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-attributes-request 'make-list-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "targetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-value))
      (common-lisp:list
       (common-lisp:cons "attributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-attributes-response common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-list-attributes-response-attributes
                         :shape "Attributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-attributes-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-attributes-response 'make-list-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-clusters-request-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-list-clusters-request-max-results :shape
                         "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-clusters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-clusters-request 'make-list-clusters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-response common-lisp:nil
                       ((cluster-arns :initarg :cluster-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-list-clusters-response-cluster-arns
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-clusters-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-clusters-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-clusters-response 'make-list-clusters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arns))
      (common-lisp:list
       (common-lisp:cons "clusterArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-container-instances-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-container-instances-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-container-instances-request-filter
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-container-instances-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-list-container-instances-request-max-results
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or container-instance-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-container-instances-request-status
                         :shape "ContainerInstanceStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-container-instances-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-container-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-container-instances-request
                    'make-list-container-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-container-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-container-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-container-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-container-instances-response common-lisp:nil
                       ((container-instance-arns :initarg
                         :container-instance-arns :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-list-container-instances-response-container-instance-arns
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-container-instances-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-container-instances-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-container-instances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-container-instances-response
                    'make-list-container-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-container-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-container-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-instance-arns))
      (common-lisp:list
       (common-lisp:cons "containerInstanceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-container-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-services-by-namespace-request common-lisp:nil
                       ((namespace :initarg :namespace :initform
                         (common-lisp:error ":namespace is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-services-by-namespace-request-namespace
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-services-by-namespace-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-list-services-by-namespace-request-max-results
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-services-by-namespace-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-services-by-namespace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-services-by-namespace-request
                    'make-list-services-by-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-services-by-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-services-by-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-services-by-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-services-by-namespace-response common-lisp:nil
                       ((service-arns :initarg :service-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-list-services-by-namespace-response-service-arns
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-services-by-namespace-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-services-by-namespace-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-services-by-namespace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-services-by-namespace-response
                    'make-list-services-by-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-services-by-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-services-by-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arns))
      (common-lisp:list
       (common-lisp:cons "serviceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-services-by-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-services-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-list-services-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-services-request-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-list-services-request-max-results :shape
                         "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-type :initarg :launch-type :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor
                         struct-shape-list-services-request-launch-type :shape
                         "LaunchType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scheduling-strategy :initarg :scheduling-strategy
                         :initform common-lisp:nil :type
                         (common-lisp:or scheduling-strategy common-lisp:null)
                         :accessor
                         struct-shape-list-services-request-scheduling-strategy
                         :shape "SchedulingStrategy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-services-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-services-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-services-request 'make-list-services-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-services-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-services-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduling-strategy))
      (common-lisp:list
       (common-lisp:cons "schedulingStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-services-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-services-response common-lisp:nil
                       ((service-arns :initarg :service-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-list-services-response-service-arns
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-services-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-services-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-services-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-services-response 'make-list-services-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-services-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-services-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arns))
      (common-lisp:list
       (common-lisp:cons "serviceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-services-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-task-definition-families-request common-lisp:nil
                       ((family-prefix :initarg :family-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-task-definition-families-request-family-prefix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or task-definition-family-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-task-definition-families-request-status
                         :shape "TaskDefinitionFamilyStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-task-definition-families-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-list-task-definition-families-request-max-results
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-task-definition-families-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-task-definition-families-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-task-definition-families-request
                    'make-list-task-definition-families-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definition-families-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definition-families-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family-prefix))
      (common-lisp:list
       (common-lisp:cons "familyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definition-families-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-task-definition-families-response common-lisp:nil
                       ((families :initarg :families :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-list-task-definition-families-response-families
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-task-definition-families-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-task-definition-families-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-task-definition-families-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-task-definition-families-response
                    'make-list-task-definition-families-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definition-families-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definition-families-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'families))
      (common-lisp:list
       (common-lisp:cons "families"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definition-families-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-task-definitions-request common-lisp:nil
                       ((family-prefix :initarg :family-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-task-definitions-request-family-prefix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or task-definition-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-task-definitions-request-status
                         :shape "TaskDefinitionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sort :initarg :sort :initform common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-list-task-definitions-request-sort :shape
                         "SortOrder" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-task-definitions-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-list-task-definitions-request-max-results
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-task-definitions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-task-definitions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-task-definitions-request
                    'make-list-task-definitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family-prefix))
      (common-lisp:list
       (common-lisp:cons "familyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-task-definitions-response common-lisp:nil
                       ((task-definition-arns :initarg :task-definition-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-list-task-definitions-response-task-definition-arns
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-task-definitions-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-task-definitions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-task-definitions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-task-definitions-response
                    'make-list-task-definitions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-definition-arns))
      (common-lisp:list
       (common-lisp:cons "taskDefinitionArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tasks-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-list-tasks-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-instance :initarg :container-instance
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tasks-request-container-instance
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (family :initarg :family :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-list-tasks-request-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tasks-request-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-list-tasks-request-max-results
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-by :initarg :started-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tasks-request-started-by :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tasks-request-service-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (desired-status :initarg :desired-status :initform
                         common-lisp:nil :type
                         (common-lisp:or desired-status common-lisp:null)
                         :accessor
                         struct-shape-list-tasks-request-desired-status :shape
                         "DesiredStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-type :initarg :launch-type :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor struct-shape-list-tasks-request-launch-type
                         :shape "LaunchType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tasks-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tasks-request 'make-list-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instance))
      (common-lisp:list
       (common-lisp:cons "containerInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-by))
      (common-lisp:list
       (common-lisp:cons "startedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-status))
      (common-lisp:list
       (common-lisp:cons "desiredStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tasks-response common-lisp:nil
                       ((task-arns :initarg :task-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-list-tasks-response-task-arns
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tasks-response-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tasks-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tasks-response 'make-list-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arns))
      (common-lisp:list
       (common-lisp:cons "taskArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass load-balancer common-lisp:nil
                       ((target-group-arn :initarg :target-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-load-balancer-target-group-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (load-balancer-name :initarg :load-balancer-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-load-balancer-load-balancer-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (container-name :initarg :container-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-load-balancer-container-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (container-port :initarg :container-port :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-load-balancer-container-port
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-load-balancer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'load-balancer 'make-load-balancer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-balancer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-balancer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "targetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "containerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-balancer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancers ()
   '(trivial-types:proper-list load-balancer))
 (common-lisp:defun make-load-balancers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass log-configuration common-lisp:nil
                       ((log-driver :initarg :log-driver :initform
                         (common-lisp:error ":logdriver is required") :type
                         (common-lisp:or log-driver common-lisp:null) :accessor
                         struct-shape-log-configuration-log-driver :shape
                         "LogDriver" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (options :initarg :options :initform common-lisp:nil
                         :type
                         (common-lisp:or log-configuration-options-map
                                         common-lisp:null)
                         :accessor struct-shape-log-configuration-options
                         :shape "LogConfigurationOptionsMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (secret-options :initarg :secret-options :initform
                         common-lisp:nil :type
                         (common-lisp:or secret-list common-lisp:null)
                         :accessor
                         struct-shape-log-configuration-secret-options :shape
                         "SecretList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'log-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'log-configuration 'make-log-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-driver))
      (common-lisp:list
       (common-lisp:cons "logDriver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-options))
      (common-lisp:list
       (common-lisp:cons "secretOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-configuration-options-map () 'common-lisp:hash-table)
 (common-lisp:defun make-log-configuration-options-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype log-driver () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass managed-agent common-lisp:nil
                       ((last-started-at :initarg :last-started-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-managed-agent-last-started-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or managed-agent-name common-lisp:null)
                         :accessor struct-shape-managed-agent-name :shape
                         "ManagedAgentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-managed-agent-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-status :initarg :last-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-managed-agent-last-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-managed-agent
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'managed-agent
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'managed-agent 'make-managed-agent))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input managed-agent))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input managed-agent))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-started-at))
      (common-lisp:list
       (common-lisp:cons "lastStartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status))
      (common-lisp:list
       (common-lisp:cons "lastStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input managed-agent))
   common-lisp:nil))
(common-lisp:deftype managed-agent-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass managed-agent-state-change common-lisp:nil
                       ((container-name :initarg :container-name :initform
                         (common-lisp:error ":containername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-managed-agent-state-change-container-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (managed-agent-name :initarg :managed-agent-name
                         :initform
                         (common-lisp:error ":managedagentname is required")
                         :type
                         (common-lisp:or managed-agent-name common-lisp:null)
                         :accessor
                         struct-shape-managed-agent-state-change-managed-agent-name
                         :shape "ManagedAgentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-managed-agent-state-change-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-managed-agent-state-change-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-managed-agent-state-change
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'managed-agent-state-change
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'managed-agent-state-change
                    'make-managed-agent-state-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-agent-state-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-agent-state-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-agent-name))
      (common-lisp:list
       (common-lisp:cons "managedAgentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-agent-state-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype managed-agent-state-changes ()
   '(trivial-types:proper-list managed-agent-state-change))
 (common-lisp:defun make-managed-agent-state-changes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            managed-agent-state-change))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype managed-agents ()
   '(trivial-types:proper-list managed-agent))
 (common-lisp:defun make-managed-agents
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list managed-agent))
   aws-sdk/generator/shape::members))
(common-lisp:deftype managed-draining () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass managed-scaling common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or managed-scaling-status
                                         common-lisp:null)
                         :accessor struct-shape-managed-scaling-status :shape
                         "ManagedScalingStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-capacity :initarg :target-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or managed-scaling-target-capacity
                                         common-lisp:null)
                         :accessor struct-shape-managed-scaling-target-capacity
                         :shape "ManagedScalingTargetCapacity" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (minimum-scaling-step-size :initarg
                         :minimum-scaling-step-size :initform common-lisp:nil
                         :type
                         (common-lisp:or managed-scaling-step-size
                                         common-lisp:null)
                         :accessor
                         struct-shape-managed-scaling-minimum-scaling-step-size
                         :shape "ManagedScalingStepSize" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-scaling-step-size :initarg
                         :maximum-scaling-step-size :initform common-lisp:nil
                         :type
                         (common-lisp:or managed-scaling-step-size
                                         common-lisp:null)
                         :accessor
                         struct-shape-managed-scaling-maximum-scaling-step-size
                         :shape "ManagedScalingStepSize" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (instance-warmup-period :initarg
                         :instance-warmup-period :initform common-lisp:nil
                         :type
                         (common-lisp:or managed-scaling-instance-warmup-period
                                         common-lisp:null)
                         :accessor
                         struct-shape-managed-scaling-instance-warmup-period
                         :shape "ManagedScalingInstanceWarmupPeriod" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-managed-scaling
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'managed-scaling
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'managed-scaling 'make-managed-scaling))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input managed-scaling))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input managed-scaling))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-capacity))
      (common-lisp:list
       (common-lisp:cons "targetCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-scaling-step-size))
      (common-lisp:list
       (common-lisp:cons "minimumScalingStepSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-scaling-step-size))
      (common-lisp:list
       (common-lisp:cons "maximumScalingStepSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-warmup-period))
      (common-lisp:list
       (common-lisp:cons "instanceWarmupPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input managed-scaling))
   common-lisp:nil))
(common-lisp:deftype managed-scaling-instance-warmup-period ()
  'common-lisp:integer)
(common-lisp:deftype managed-scaling-status () 'common-lisp:string)
(common-lisp:deftype managed-scaling-step-size () 'common-lisp:integer)
(common-lisp:deftype managed-scaling-target-capacity () 'common-lisp:integer)
(common-lisp:deftype managed-termination-protection () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition missing-version-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'missing-version-exception)))
(common-lisp:progn
 (common-lisp:defclass mount-point common-lisp:nil
                       ((source-volume :initarg :source-volume :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-mount-point-source-volume :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (container-path :initarg :container-path :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-mount-point-container-path :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (read-only :initarg :read-only :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-mount-point-read-only :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mount-point
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mount-point
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mount-point 'make-mount-point))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mount-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mount-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-volume))
      (common-lisp:list
       (common-lisp:cons "sourceVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-path))
      (common-lisp:list
       (common-lisp:cons "containerPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-only))
      (common-lisp:list
       (common-lisp:cons "readOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mount-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mount-point-list ()
   '(trivial-types:proper-list mount-point))
 (common-lisp:defun make-mount-point-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mount-point))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition namespace-not-found-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'namespace-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass network-binding common-lisp:nil
                       ((bind-ip :initarg :bind-ip :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-network-binding-bind-ip :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (container-port :initarg :container-port :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-network-binding-container-port
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (host-port :initarg :host-port :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-network-binding-host-port
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type
                         (common-lisp:or transport-protocol common-lisp:null)
                         :accessor struct-shape-network-binding-protocol :shape
                         "TransportProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-port-range :initarg :container-port-range
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-network-binding-container-port-range
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (host-port-range :initarg :host-port-range :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-network-binding-host-port-range :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-binding
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-binding
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'network-binding 'make-network-binding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-binding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-binding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bind-ip))
      (common-lisp:list
       (common-lisp:cons "bindIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "containerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-port))
      (common-lisp:list
       (common-lisp:cons "hostPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-port-range))
      (common-lisp:list
       (common-lisp:cons "containerPortRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-port-range))
      (common-lisp:list
       (common-lisp:cons "hostPortRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-binding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-bindings ()
   '(trivial-types:proper-list network-binding))
 (common-lisp:defun make-network-bindings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-binding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass network-configuration common-lisp:nil
                       ((awsvpc-configuration :initarg :awsvpc-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-vpc-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-network-configuration-awsvpc-configuration
                         :shape "AwsVpcConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-configuration 'make-network-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'awsvpc-configuration))
      (common-lisp:list
       (common-lisp:cons "awsvpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-interface common-lisp:nil
                       ((attachment-id :initarg :attachment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-network-interface-attachment-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (private-ipv4address :initarg :private-ipv4address
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-network-interface-private-ipv4address
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ipv6address :initarg :ipv6address :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-network-interface-ipv6address :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-interface
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-interface 'make-network-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "attachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ipv4address))
      (common-lisp:list
       (common-lisp:cons "privateIpv4Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address))
      (common-lisp:list
       (common-lisp:cons "ipv6Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-interfaces ()
   '(trivial-types:proper-list network-interface))
 (common-lisp:defun make-network-interfaces
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-interface))
   aws-sdk/generator/shape::members))
(common-lisp:deftype network-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition no-update-available-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-update-available-exception)))
(common-lisp:deftype osfamily () 'common-lisp:string)
(common-lisp:deftype pid-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass placement-constraint common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or placement-constraint-type
                                         common-lisp:null)
                         :accessor struct-shape-placement-constraint-type
                         :shape "PlacementConstraintType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (expression :initarg :expression :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-placement-constraint-expression :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-placement-constraint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'placement-constraint
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'placement-constraint 'make-placement-constraint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input placement-constraint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input placement-constraint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input placement-constraint))
   common-lisp:nil))
(common-lisp:deftype placement-constraint-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype placement-constraints ()
   '(trivial-types:proper-list placement-constraint))
 (common-lisp:defun make-placement-constraints
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list placement-constraint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype placement-strategies ()
   '(trivial-types:proper-list placement-strategy))
 (common-lisp:defun make-placement-strategies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list placement-strategy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass placement-strategy common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or placement-strategy-type
                                         common-lisp:null)
                         :accessor struct-shape-placement-strategy-type :shape
                         "PlacementStrategyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (field :initarg :field :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-placement-strategy-field :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-placement-strategy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'placement-strategy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'placement-strategy 'make-placement-strategy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input placement-strategy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input placement-strategy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input placement-strategy))
   common-lisp:nil))
(common-lisp:deftype placement-strategy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass platform-device common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-platform-device-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or platform-device-type common-lisp:null)
                         :accessor struct-shape-platform-device-type :shape
                         "PlatformDeviceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-platform-device
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'platform-device
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'platform-device 'make-platform-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input platform-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input platform-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input platform-device))
   common-lisp:nil))
(common-lisp:deftype platform-device-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype platform-devices ()
   '(trivial-types:proper-list platform-device))
 (common-lisp:defun make-platform-devices
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list platform-device))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition platform-task-definition-incompatibility-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'platform-task-definition-incompatibility-exception)))
(common-lisp:progn
 (common-lisp:define-condition platform-unknown-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'platform-unknown-exception)))
(common-lisp:progn
 (common-lisp:defclass port-mapping common-lisp:nil
                       ((container-port :initarg :container-port :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-port-mapping-container-port
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (host-port :initarg :host-port :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-port-mapping-host-port :shape
                         "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type
                         (common-lisp:or transport-protocol common-lisp:null)
                         :accessor struct-shape-port-mapping-protocol :shape
                         "TransportProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-port-mapping-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (app-protocol :initarg :app-protocol :initform
                         common-lisp:nil :type
                         (common-lisp:or application-protocol common-lisp:null)
                         :accessor struct-shape-port-mapping-app-protocol
                         :shape "ApplicationProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-port-range :initarg :container-port-range
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-port-mapping-container-port-range :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-port-mapping
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'port-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'port-mapping 'make-port-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "containerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-port))
      (common-lisp:list
       (common-lisp:cons "hostPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-protocol))
      (common-lisp:list
       (common-lisp:cons "appProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-port-range))
      (common-lisp:list
       (common-lisp:cons "containerPortRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-mapping-list ()
   '(trivial-types:proper-list port-mapping))
 (common-lisp:defun make-port-mapping-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype port-number () 'common-lisp:integer)
(common-lisp:deftype propagate-tags () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass protected-task common-lisp:nil
                       ((task-arn :initarg :task-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-protected-task-task-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (protection-enabled :initarg :protection-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-protected-task-protection-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expiration-date :initarg :expiration-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-protected-task-expiration-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-protected-task
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'protected-task
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'protected-task 'make-protected-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input protected-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input protected-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "taskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protection-enabled))
      (common-lisp:list
       (common-lisp:cons "protectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "expirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input protected-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype protected-tasks ()
   '(trivial-types:proper-list protected-task))
 (common-lisp:defun make-protected-tasks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list protected-task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass proxy-configuration common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or proxy-configuration-type
                                         common-lisp:null)
                         :accessor struct-shape-proxy-configuration-type :shape
                         "ProxyConfigurationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-name :initarg :container-name :initform
                         (common-lisp:error ":containername is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-proxy-configuration-container-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (properties :initarg :properties :initform
                         common-lisp:nil :type
                         (common-lisp:or proxy-configuration-properties
                                         common-lisp:null)
                         :accessor struct-shape-proxy-configuration-properties
                         :shape "ProxyConfigurationProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-proxy-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'proxy-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'proxy-configuration 'make-proxy-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input proxy-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input proxy-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input proxy-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype proxy-configuration-properties ()
   '(trivial-types:proper-list key-value-pair))
 (common-lisp:defun make-proxy-configuration-properties
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:deftype proxy-configuration-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-account-setting-default-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or setting-name common-lisp:null)
                         :accessor
                         struct-shape-put-account-setting-default-request-name
                         :shape "SettingName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-put-account-setting-default-request-value
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-account-setting-default-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-account-setting-default-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-account-setting-default-request
                    'make-put-account-setting-default-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-default-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-default-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-default-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-account-setting-default-response common-lisp:nil
                       ((setting :initarg :setting :initform common-lisp:nil
                         :type (common-lisp:or setting common-lisp:null)
                         :accessor
                         struct-shape-put-account-setting-default-response-setting
                         :shape "Setting" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-account-setting-default-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-account-setting-default-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-account-setting-default-response
                    'make-put-account-setting-default-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-default-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-default-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setting))
      (common-lisp:list
       (common-lisp:cons "setting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-default-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-account-setting-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or setting-name common-lisp:null)
                         :accessor
                         struct-shape-put-account-setting-request-name :shape
                         "SettingName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-put-account-setting-request-value :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (principal-arn :initarg :principal-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-put-account-setting-request-principal-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-account-setting-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-account-setting-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-account-setting-request
                    'make-put-account-setting-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-account-setting-response common-lisp:nil
                       ((setting :initarg :setting :initform common-lisp:nil
                         :type (common-lisp:or setting common-lisp:null)
                         :accessor
                         struct-shape-put-account-setting-response-setting
                         :shape "Setting" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-account-setting-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-account-setting-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-account-setting-response
                    'make-put-account-setting-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setting))
      (common-lisp:list
       (common-lisp:cons "setting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-attributes-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-put-attributes-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         (common-lisp:error ":attributes is required") :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-put-attributes-request-attributes :shape
                         "Attributes" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-attributes-request 'make-put-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-attributes-response common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-put-attributes-response-attributes :shape
                         "Attributes" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-attributes-response 'make-put-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-cluster-capacity-providers-request common-lisp:nil
                       ((cluster :initarg :cluster :initform
                         (common-lisp:error ":cluster is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-put-cluster-capacity-providers-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capacity-providers :initarg :capacity-providers
                         :initform
                         (common-lisp:error ":capacityproviders is required")
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-put-cluster-capacity-providers-request-capacity-providers
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-capacity-provider-strategy :initarg
                         :default-capacity-provider-strategy :initform
                         (common-lisp:error
                          ":defaultcapacityproviderstrategy is required")
                         :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-cluster-capacity-providers-request-default-capacity-provider-strategy
                         :shape "CapacityProviderStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-cluster-capacity-providers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-cluster-capacity-providers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-cluster-capacity-providers-request
                    'make-put-cluster-capacity-providers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-capacity-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-capacity-providers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-providers))
      (common-lisp:list
       (common-lisp:cons "capacityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "defaultCapacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-capacity-providers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-cluster-capacity-providers-response common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor
                         struct-shape-put-cluster-capacity-providers-response-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-cluster-capacity-providers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-cluster-capacity-providers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-cluster-capacity-providers-response
                    'make-put-cluster-capacity-providers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-capacity-providers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-capacity-providers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-capacity-providers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-container-instance-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-register-container-instance-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-identity-document :initarg
                         :instance-identity-document :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-register-container-instance-request-instance-identity-document
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-identity-document-signature :initarg
                         :instance-identity-document-signature :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-container-instance-request-instance-identity-document-signature
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-resources :initarg :total-resources :initform
                         common-lisp:nil :type
                         (common-lisp:or resources common-lisp:null) :accessor
                         struct-shape-register-container-instance-request-total-resources
                         :shape "Resources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-info :initarg :version-info :initform
                         common-lisp:nil :type
                         (common-lisp:or version-info common-lisp:null)
                         :accessor
                         struct-shape-register-container-instance-request-version-info
                         :shape "VersionInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-instance-arn :initarg
                         :container-instance-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-register-container-instance-request-container-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-register-container-instance-request-attributes
                         :shape "Attributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform-devices :initarg :platform-devices :initform
                         common-lisp:nil :type
                         (common-lisp:or platform-devices common-lisp:null)
                         :accessor
                         struct-shape-register-container-instance-request-platform-devices
                         :shape "PlatformDevices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-register-container-instance-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-container-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-container-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-container-instance-request
                    'make-register-container-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-container-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-container-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-identity-document))
      (common-lisp:list
       (common-lisp:cons "instanceIdentityDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-identity-document-signature))
      (common-lisp:list
       (common-lisp:cons "instanceIdentityDocumentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-resources))
      (common-lisp:list
       (common-lisp:cons "totalResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-info))
      (common-lisp:list
       (common-lisp:cons "versionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-instance-arn))
      (common-lisp:list
       (common-lisp:cons "containerInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-devices))
      (common-lisp:list
       (common-lisp:cons "platformDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-container-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-container-instance-response common-lisp:nil
                       ((container-instance :initarg :container-instance
                         :initform common-lisp:nil :type
                         (common-lisp:or container-instance common-lisp:null)
                         :accessor
                         struct-shape-register-container-instance-response-container-instance
                         :shape "ContainerInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-container-instance-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-container-instance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-container-instance-response
                    'make-register-container-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-container-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-container-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instance))
      (common-lisp:list
       (common-lisp:cons "containerInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-container-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-task-definition-request common-lisp:nil
                       ((family :initarg :family :initform
                         (common-lisp:error ":family is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-task-definition-request-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-role-arn :initarg :task-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-task-definition-request-task-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-task-definition-request-execution-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-mode :initarg :network-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or network-mode common-lisp:null)
                         :accessor
                         struct-shape-register-task-definition-request-network-mode
                         :shape "NetworkMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-definitions :initarg :container-definitions
                         :initform
                         (common-lisp:error
                          ":containerdefinitions is required")
                         :type
                         (common-lisp:or container-definitions
                                         common-lisp:null)
                         :accessor
                         struct-shape-register-task-definition-request-container-definitions
                         :shape "ContainerDefinitions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (volumes :initarg :volumes :initform common-lisp:nil
                         :type (common-lisp:or volume-list common-lisp:null)
                         :accessor
                         struct-shape-register-task-definition-request-volumes
                         :shape "VolumeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (placement-constraints :initarg :placement-constraints
                         :initform common-lisp:nil :type
                         (common-lisp:or task-definition-placement-constraints
                                         common-lisp:null)
                         :accessor
                         struct-shape-register-task-definition-request-placement-constraints
                         :shape "TaskDefinitionPlacementConstraints" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (requires-compatibilities :initarg
                         :requires-compatibilities :initform common-lisp:nil
                         :type
                         (common-lisp:or compatibility-list common-lisp:null)
                         :accessor
                         struct-shape-register-task-definition-request-requires-compatibilities
                         :shape "CompatibilityList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cpu :initarg :cpu :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-task-definition-request-cpu
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (memory :initarg :memory :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-register-task-definition-request-memory
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-register-task-definition-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pid-mode :initarg :pid-mode :initform common-lisp:nil
                         :type (common-lisp:or pid-mode common-lisp:null)
                         :accessor
                         struct-shape-register-task-definition-request-pid-mode
                         :shape "PidMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ipc-mode :initarg :ipc-mode :initform common-lisp:nil
                         :type (common-lisp:or ipc-mode common-lisp:null)
                         :accessor
                         struct-shape-register-task-definition-request-ipc-mode
                         :shape "IpcMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (proxy-configuration :initarg :proxy-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or proxy-configuration common-lisp:null)
                         :accessor
                         struct-shape-register-task-definition-request-proxy-configuration
                         :shape "ProxyConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inference-accelerators :initarg
                         :inference-accelerators :initform common-lisp:nil
                         :type
                         (common-lisp:or inference-accelerators
                                         common-lisp:null)
                         :accessor
                         struct-shape-register-task-definition-request-inference-accelerators
                         :shape "InferenceAccelerators" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ephemeral-storage :initarg :ephemeral-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or ephemeral-storage common-lisp:null)
                         :accessor
                         struct-shape-register-task-definition-request-ephemeral-storage
                         :shape "EphemeralStorage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime-platform :initarg :runtime-platform :initform
                         common-lisp:nil :type
                         (common-lisp:or runtime-platform common-lisp:null)
                         :accessor
                         struct-shape-register-task-definition-request-runtime-platform
                         :shape "RuntimePlatform" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-task-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-task-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-task-definition-request
                    'make-register-task-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-task-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-task-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-role-arn))
      (common-lisp:list
       (common-lisp:cons "taskRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "executionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-mode))
      (common-lisp:list
       (common-lisp:cons "networkMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-definitions))
      (common-lisp:list
       (common-lisp:cons "containerDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "placementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requires-compatibilities))
      (common-lisp:list
       (common-lisp:cons "requiresCompatibilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid-mode))
      (common-lisp:list
       (common-lisp:cons "pidMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipc-mode))
      (common-lisp:list
       (common-lisp:cons "ipcMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proxy-configuration))
      (common-lisp:list
       (common-lisp:cons "proxyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-accelerators))
      (common-lisp:list
       (common-lisp:cons "inferenceAccelerators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeral-storage))
      (common-lisp:list
       (common-lisp:cons "ephemeralStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-platform))
      (common-lisp:list
       (common-lisp:cons "runtimePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-task-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-task-definition-response common-lisp:nil
                       ((task-definition :initarg :task-definition :initform
                         common-lisp:nil :type
                         (common-lisp:or task-definition common-lisp:null)
                         :accessor
                         struct-shape-register-task-definition-response-task-definition
                         :shape "TaskDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-register-task-definition-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-task-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-task-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-task-definition-response
                    'make-register-task-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-task-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-task-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-task-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass repository-credentials common-lisp:nil
                       ((credentials-parameter :initarg :credentials-parameter
                         :initform
                         (common-lisp:error
                          ":credentialsparameter is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-repository-credentials-credentials-parameter
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository-credentials
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'repository-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'repository-credentials 'make-repository-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credentials-parameter))
      (common-lisp:list
       (common-lisp:cons "credentialsParameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype requires-attributes ()
   '(trivial-types:proper-list attribute))
 (common-lisp:defun make-requires-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resource common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-type :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (double-value :initarg :double-value :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-resource-double-value :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (long-value :initarg :long-value :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-resource-long-value :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (integer-value :initarg :integer-value :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-resource-integer-value :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (string-set-value :initarg :string-set-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-resource-string-set-value
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "doubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-value))
      (common-lisp:list
       (common-lisp:cons "longValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-value))
      (common-lisp:list
       (common-lisp:cons "integerValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-set-value))
      (common-lisp:list
       (common-lisp:cons "stringSetValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-ids () '(trivial-types:proper-list string))
 (common-lisp:defun make-resource-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-in-use-exception)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass resource-requirement common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-requirement-value :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-resource-requirement-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-requirement
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-requirement
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-requirement 'make-resource-requirement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-requirement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-requirement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-requirement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-requirements ()
   '(trivial-types:proper-list resource-requirement))
 (common-lisp:defun make-resource-requirements
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-requirement))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resources () '(trivial-types:proper-list resource))
 (common-lisp:defun make-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass run-task-request common-lisp:nil
                       ((capacity-provider-strategy :initarg
                         :capacity-provider-strategy :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-run-task-request-capacity-provider-strategy
                         :shape "CapacityProviderStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-run-task-request-cluster :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-run-task-request-count :shape
                         "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-ecsmanaged-tags :initarg
                         :enable-ecsmanaged-tags :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-run-task-request-enable-ecsmanaged-tags
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-execute-command :initarg
                         :enable-execute-command :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-run-task-request-enable-execute-command
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group :initarg :group :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-run-task-request-group :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (launch-type :initarg :launch-type :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor struct-shape-run-task-request-launch-type
                         :shape "LaunchType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-configuration :initarg :network-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-run-task-request-network-configuration
                         :shape "NetworkConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (overrides :initarg :overrides :initform
                         common-lisp:nil :type
                         (common-lisp:or task-override common-lisp:null)
                         :accessor struct-shape-run-task-request-overrides
                         :shape "TaskOverride" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (placement-constraints :initarg :placement-constraints
                         :initform common-lisp:nil :type
                         (common-lisp:or placement-constraints
                                         common-lisp:null)
                         :accessor
                         struct-shape-run-task-request-placement-constraints
                         :shape "PlacementConstraints" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (placement-strategy :initarg :placement-strategy
                         :initform common-lisp:nil :type
                         (common-lisp:or placement-strategies common-lisp:null)
                         :accessor
                         struct-shape-run-task-request-placement-strategy
                         :shape "PlacementStrategies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform-version :initarg :platform-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-run-task-request-platform-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (propagate-tags :initarg :propagate-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or propagate-tags common-lisp:null)
                         :accessor struct-shape-run-task-request-propagate-tags
                         :shape "PropagateTags" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reference-id :initarg :reference-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-run-task-request-reference-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (started-by :initarg :started-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-run-task-request-started-by :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-run-task-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-definition :initarg :task-definition :initform
                         (common-lisp:error ":taskdefinition is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-run-task-request-task-definition :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-run-task-request-client-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (volume-configurations :initarg :volume-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or task-volume-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-run-task-request-volume-configurations
                         :shape "TaskVolumeConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-run-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'run-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'run-task-request 'make-run-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input run-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input run-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "capacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-ecsmanaged-tags))
      (common-lisp:list
       (common-lisp:cons "enableECSManagedTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-execute-command))
      (common-lisp:list
       (common-lisp:cons "enableExecuteCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "placementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-strategy))
      (common-lisp:list
       (common-lisp:cons "placementStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-tags))
      (common-lisp:list
       (common-lisp:cons "propagateTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "referenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-by))
      (common-lisp:list
       (common-lisp:cons "startedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-configurations))
      (common-lisp:list
       (common-lisp:cons "volumeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input run-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass run-task-response common-lisp:nil
                       ((tasks :initarg :tasks :initform common-lisp:nil :type
                         (common-lisp:or tasks common-lisp:null) :accessor
                         struct-shape-run-task-response-tasks :shape "Tasks"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type (common-lisp:or failures common-lisp:null)
                         :accessor struct-shape-run-task-response-failures
                         :shape "Failures" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-run-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'run-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'run-task-response 'make-run-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input run-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input run-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input run-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass runtime-platform common-lisp:nil
                       ((cpu-architecture :initarg :cpu-architecture :initform
                         common-lisp:nil :type
                         (common-lisp:or cpuarchitecture common-lisp:null)
                         :accessor
                         struct-shape-runtime-platform-cpu-architecture :shape
                         "CPUArchitecture" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operating-system-family :initarg
                         :operating-system-family :initform common-lisp:nil
                         :type (common-lisp:or osfamily common-lisp:null)
                         :accessor
                         struct-shape-runtime-platform-operating-system-family
                         :shape "OSFamily" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-runtime-platform
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'runtime-platform
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'runtime-platform 'make-runtime-platform))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input runtime-platform))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input runtime-platform))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-architecture))
      (common-lisp:list
       (common-lisp:cons "cpuArchitecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operating-system-family))
      (common-lisp:list
       (common-lisp:cons "operatingSystemFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input runtime-platform))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scale common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-scale-value :shape "Double" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or scale-unit common-lisp:null) :accessor
                         struct-shape-scale-unit :shape "ScaleUnit" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scale
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scale
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scale 'make-scale))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scale))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scale))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scale))
   common-lisp:nil))
(common-lisp:deftype scale-unit () 'common-lisp:string)
(common-lisp:deftype scheduling-strategy () 'common-lisp:string)
(common-lisp:deftype scope () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass secret common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-secret-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value-from :initarg :value-from :initform
                         (common-lisp:error ":valuefrom is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-secret-value-from :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-secret
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'secret
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'secret 'make-secret))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input secret))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input secret))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-from))
      (common-lisp:list
       (common-lisp:cons "valueFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input secret))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype secret-list () '(trivial-types:proper-list secret))
 (common-lisp:defun make-secret-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list secret))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition server-exception
     (ecs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'server-exception 'server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass service common-lisp:nil
                       ((service-arn :initarg :service-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-service-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-service-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-cluster-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (load-balancers :initarg :load-balancers :initform
                         common-lisp:nil :type
                         (common-lisp:or load-balancers common-lisp:null)
                         :accessor struct-shape-service-load-balancers :shape
                         "LoadBalancers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-registries :initarg :service-registries
                         :initform common-lisp:nil :type
                         (common-lisp:or service-registries common-lisp:null)
                         :accessor struct-shape-service-service-registries
                         :shape "ServiceRegistries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-service-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (desired-count :initarg :desired-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-service-desired-count :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (running-count :initarg :running-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-service-running-count :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pending-count :initarg :pending-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-service-pending-count :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (launch-type :initarg :launch-type :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor struct-shape-service-launch-type :shape
                         "LaunchType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (capacity-provider-strategy :initarg
                         :capacity-provider-strategy :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-capacity-provider-strategy :shape
                         "CapacityProviderStrategy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform-version :initarg :platform-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-platform-version :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (platform-family :initarg :platform-family :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-platform-family :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-definition :initarg :task-definition :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-task-definition :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployment-configuration :initarg
                         :deployment-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or deployment-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-deployment-configuration :shape
                         "DeploymentConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-sets :initarg :task-sets :initform
                         common-lisp:nil :type
                         (common-lisp:or task-sets common-lisp:null) :accessor
                         struct-shape-service-task-sets :shape "TaskSets"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployments :initarg :deployments :initform
                         common-lisp:nil :type
                         (common-lisp:or deployments common-lisp:null)
                         :accessor struct-shape-service-deployments :shape
                         "Deployments" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-service-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (events :initarg :events :initform common-lisp:nil
                         :type (common-lisp:or service-events common-lisp:null)
                         :accessor struct-shape-service-events :shape
                         "ServiceEvents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-service-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (placement-constraints :initarg :placement-constraints
                         :initform common-lisp:nil :type
                         (common-lisp:or placement-constraints
                                         common-lisp:null)
                         :accessor struct-shape-service-placement-constraints
                         :shape "PlacementConstraints" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (placement-strategy :initarg :placement-strategy
                         :initform common-lisp:nil :type
                         (common-lisp:or placement-strategies common-lisp:null)
                         :accessor struct-shape-service-placement-strategy
                         :shape "PlacementStrategies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-configuration :initarg :network-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor struct-shape-service-network-configuration
                         :shape "NetworkConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (health-check-grace-period-seconds :initarg
                         :health-check-grace-period-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-service-health-check-grace-period-seconds
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scheduling-strategy :initarg :scheduling-strategy
                         :initform common-lisp:nil :type
                         (common-lisp:or scheduling-strategy common-lisp:null)
                         :accessor struct-shape-service-scheduling-strategy
                         :shape "SchedulingStrategy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-controller :initarg :deployment-controller
                         :initform common-lisp:nil :type
                         (common-lisp:or deployment-controller
                                         common-lisp:null)
                         :accessor struct-shape-service-deployment-controller
                         :shape "DeploymentController" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-service-tags :shape "Tags" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-created-by :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enable-ecsmanaged-tags :initarg
                         :enable-ecsmanaged-tags :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-service-enable-ecsmanaged-tags
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (propagate-tags :initarg :propagate-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or propagate-tags common-lisp:null)
                         :accessor struct-shape-service-propagate-tags :shape
                         "PropagateTags" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-execute-command :initarg
                         :enable-execute-command :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-service-enable-execute-command
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'service 'make-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "serviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "clusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "loadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-registries))
      (common-lisp:list
       (common-lisp:cons "serviceRegistries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-count))
      (common-lisp:list
       (common-lisp:cons "desiredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-count))
      (common-lisp:list
       (common-lisp:cons "runningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-count))
      (common-lisp:list
       (common-lisp:cons "pendingCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "capacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-family))
      (common-lisp:list
       (common-lisp:cons "platformFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "deploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-sets))
      (common-lisp:list
       (common-lisp:cons "taskSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployments))
      (common-lisp:list
       (common-lisp:cons "deployments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "placementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-strategy))
      (common-lisp:list
       (common-lisp:cons "placementStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-grace-period-seconds))
      (common-lisp:list
       (common-lisp:cons "healthCheckGracePeriodSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduling-strategy))
      (common-lisp:list
       (common-lisp:cons "schedulingStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-controller))
      (common-lisp:list
       (common-lisp:cons "deploymentController"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-ecsmanaged-tags))
      (common-lisp:list
       (common-lisp:cons "enableECSManagedTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-tags))
      (common-lisp:list
       (common-lisp:cons "propagateTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-execute-command))
      (common-lisp:list
       (common-lisp:cons "enableExecuteCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-connect-client-alias common-lisp:nil
                       ((port :initarg :port :initform
                         (common-lisp:error ":port is required") :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor
                         struct-shape-service-connect-client-alias-port :shape
                         "PortNumber" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dns-name :initarg :dns-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-service-connect-client-alias-dns-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-connect-client-alias
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-connect-client-alias
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-connect-client-alias
                    'make-service-connect-client-alias))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-client-alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-client-alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "dnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-client-alias))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-connect-client-alias-list ()
   '(trivial-types:proper-list service-connect-client-alias))
 (common-lisp:defun make-service-connect-client-alias-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-connect-client-alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service-connect-configuration common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-service-connect-configuration-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (namespace :initarg :namespace :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-connect-configuration-namespace
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (services :initarg :services :initform common-lisp:nil
                         :type
                         (common-lisp:or service-connect-service-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-connect-configuration-services
                         :shape "ServiceConnectServiceList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (log-configuration :initarg :log-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or log-configuration common-lisp:null)
                         :accessor
                         struct-shape-service-connect-configuration-log-configuration
                         :shape "LogConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-connect-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'service-connect-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-connect-configuration
                    'make-service-connect-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "logConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-connect-service common-lisp:nil
                       ((port-name :initarg :port-name :initform
                         (common-lisp:error ":portname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-connect-service-port-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (discovery-name :initarg :discovery-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-connect-service-discovery-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-aliases :initarg :client-aliases :initform
                         common-lisp:nil :type
                         (common-lisp:or service-connect-client-alias-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-connect-service-client-aliases
                         :shape "ServiceConnectClientAliasList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ingress-port-override :initarg :ingress-port-override
                         :initform common-lisp:nil :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor
                         struct-shape-service-connect-service-ingress-port-override
                         :shape "PortNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type
                         (common-lisp:or timeout-configuration
                                         common-lisp:null)
                         :accessor struct-shape-service-connect-service-timeout
                         :shape "TimeoutConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tls :initarg :tls :initform common-lisp:nil :type
                         (common-lisp:or service-connect-tls-configuration
                                         common-lisp:null)
                         :accessor struct-shape-service-connect-service-tls
                         :shape "ServiceConnectTlsConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-connect-service
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-connect-service
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-connect-service 'make-service-connect-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-name))
      (common-lisp:list
       (common-lisp:cons "portName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-name))
      (common-lisp:list
       (common-lisp:cons "discoveryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-aliases))
      (common-lisp:list
       (common-lisp:cons "clientAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingress-port-override))
      (common-lisp:list
       (common-lisp:cons "ingressPortOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls))
      (common-lisp:list
       (common-lisp:cons "tls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-connect-service-list ()
   '(trivial-types:proper-list service-connect-service))
 (common-lisp:defun make-service-connect-service-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-connect-service))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service-connect-service-resource common-lisp:nil
                       ((discovery-name :initarg :discovery-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-connect-service-resource-discovery-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (discovery-arn :initarg :discovery-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-connect-service-resource-discovery-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-connect-service-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'service-connect-service-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-connect-service-resource
                    'make-service-connect-service-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-service-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-service-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-name))
      (common-lisp:list
       (common-lisp:cons "discoveryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-arn))
      (common-lisp:list
       (common-lisp:cons "discoveryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-service-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-connect-service-resource-list ()
   '(trivial-types:proper-list service-connect-service-resource))
 (common-lisp:defun make-service-connect-service-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-connect-service-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service-connect-tls-certificate-authority
                       common-lisp:nil
                       ((aws-pca-authority-arn :initarg :aws-pca-authority-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-connect-tls-certificate-authority-aws-pca-authority-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-connect-tls-certificate-authority
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'service-connect-tls-certificate-authority
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-connect-tls-certificate-authority
                    'make-service-connect-tls-certificate-authority))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-tls-certificate-authority))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-tls-certificate-authority))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-pca-authority-arn))
      (common-lisp:list
       (common-lisp:cons "awsPcaAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-tls-certificate-authority))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-connect-tls-configuration common-lisp:nil
                       ((issuer-certificate-authority :initarg
                         :issuer-certificate-authority :initform
                         (common-lisp:error
                          ":issuercertificateauthority is required")
                         :type
                         (common-lisp:or
                          service-connect-tls-certificate-authority
                          common-lisp:null)
                         :accessor
                         struct-shape-service-connect-tls-configuration-issuer-certificate-authority
                         :shape "ServiceConnectTlsCertificateAuthority"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key :initarg :kms-key :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-service-connect-tls-configuration-kms-key
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-service-connect-tls-configuration-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-connect-tls-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'service-connect-tls-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-connect-tls-configuration
                    'make-service-connect-tls-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-tls-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-tls-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'issuer-certificate-authority))
      (common-lisp:list
       (common-lisp:cons "issuerCertificateAuthority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "kmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-tls-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-event common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-event-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-service-event-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-service-event-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'service-event 'make-service-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-events ()
   '(trivial-types:proper-list service-event))
 (common-lisp:defun make-service-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype service-field-list ()
   '(trivial-types:proper-list service-field))
 (common-lisp:defun make-service-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service-managed-ebsvolume-configuration common-lisp:nil
                       ((encrypted :initarg :encrypted :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-service-managed-ebsvolume-configuration-encrypted
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ebskmskey-id common-lisp:null)
                         :accessor
                         struct-shape-service-managed-ebsvolume-configuration-kms-key-id
                         :shape "EBSKMSKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-type :initarg :volume-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ebsvolume-type common-lisp:null)
                         :accessor
                         struct-shape-service-managed-ebsvolume-configuration-volume-type
                         :shape "EBSVolumeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-in-gi-b :initarg :size-in-gi-b :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-service-managed-ebsvolume-configuration-size-in-gi-b
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-id :initarg :snapshot-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ebssnapshot-id common-lisp:null)
                         :accessor
                         struct-shape-service-managed-ebsvolume-configuration-snapshot-id
                         :shape "EBSSnapshotId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-service-managed-ebsvolume-configuration-iops
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (throughput :initarg :throughput :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-service-managed-ebsvolume-configuration-throughput
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-specifications :initarg :tag-specifications
                         :initform common-lisp:nil :type
                         (common-lisp:or ebstag-specifications
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-managed-ebsvolume-configuration-tag-specifications
                         :shape "EBSTagSpecifications" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor
                         struct-shape-service-managed-ebsvolume-configuration-role-arn
                         :shape "IAMRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filesystem-type :initarg :filesystem-type :initform
                         common-lisp:nil :type
                         (common-lisp:or task-filesystem-type common-lisp:null)
                         :accessor
                         struct-shape-service-managed-ebsvolume-configuration-filesystem-type
                         :shape "TaskFilesystemType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-managed-ebsvolume-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'service-managed-ebsvolume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-managed-ebsvolume-configuration
                    'make-service-managed-ebsvolume-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-managed-ebsvolume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-managed-ebsvolume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "volumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gi-b))
      (common-lisp:list
       (common-lisp:cons "sizeInGiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "snapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-specifications))
      (common-lisp:list
       (common-lisp:cons "tagSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filesystem-type))
      (common-lisp:list
       (common-lisp:cons "filesystemType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-managed-ebsvolume-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-not-active-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-not-active-exception)))
(common-lisp:progn
 (common-lisp:define-condition service-not-found-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype service-registries ()
   '(trivial-types:proper-list service-registry))
 (common-lisp:defun make-service-registries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-registry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service-registry common-lisp:nil
                       ((registry-arn :initarg :registry-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-registry-registry-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-service-registry-port :shape
                         "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-name :initarg :container-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-registry-container-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (container-port :initarg :container-port :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-service-registry-container-port
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-registry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-registry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-registry 'make-service-registry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-registry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-registry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "registryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "containerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-registry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-volume-configuration common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or ecsvolume-name common-lisp:null)
                         :accessor
                         struct-shape-service-volume-configuration-name :shape
                         "ECSVolumeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (managed-ebsvolume :initarg :managed-ebsvolume
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          service-managed-ebsvolume-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-service-volume-configuration-managed-ebsvolume
                         :shape "ServiceManagedEBSVolumeConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-volume-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-volume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-volume-configuration
                    'make-service-volume-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-volume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-volume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-ebsvolume))
      (common-lisp:list
       (common-lisp:cons "managedEBSVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-volume-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-volume-configurations ()
   '(trivial-types:proper-list service-volume-configuration))
 (common-lisp:defun make-service-volume-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-volume-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype services () '(trivial-types:proper-list service))
 (common-lisp:defun make-services
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass session common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-session-session-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stream-url :initarg :stream-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-session-stream-url :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (token-value :initarg :token-value :initform
                         common-lisp:nil :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor struct-shape-session-token-value :shape
                         "SensitiveString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-session
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'session
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'session 'make-session))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-url))
      (common-lisp:list
       (common-lisp:cons "streamUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-value))
      (common-lisp:list
       (common-lisp:cons "tokenValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass setting common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or setting-name common-lisp:null)
                         :accessor struct-shape-setting-name :shape
                         "SettingName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-setting-value :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (principal-arn :initarg :principal-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-setting-principal-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or setting-type common-lisp:null)
                         :accessor struct-shape-setting-type :shape
                         "SettingType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'setting 'make-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input setting))
   common-lisp:nil))
(common-lisp:deftype setting-name () 'common-lisp:string)
(common-lisp:deftype setting-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype settings () '(trivial-types:proper-list setting))
 (common-lisp:defun make-settings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list setting))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:deftype stability-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-task-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-start-task-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-instances :initarg :container-instances
                         :initform
                         (common-lisp:error ":containerinstances is required")
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-start-task-request-container-instances
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-ecsmanaged-tags :initarg
                         :enable-ecsmanaged-tags :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-start-task-request-enable-ecsmanaged-tags
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-execute-command :initarg
                         :enable-execute-command :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-start-task-request-enable-execute-command
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group :initarg :group :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-task-request-group :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (network-configuration :initarg :network-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-task-request-network-configuration
                         :shape "NetworkConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (overrides :initarg :overrides :initform
                         common-lisp:nil :type
                         (common-lisp:or task-override common-lisp:null)
                         :accessor struct-shape-start-task-request-overrides
                         :shape "TaskOverride" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (propagate-tags :initarg :propagate-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or propagate-tags common-lisp:null)
                         :accessor
                         struct-shape-start-task-request-propagate-tags :shape
                         "PropagateTags" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reference-id :initarg :reference-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-task-request-reference-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (started-by :initarg :started-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-task-request-started-by :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-start-task-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-definition :initarg :task-definition :initform
                         (common-lisp:error ":taskdefinition is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-task-request-task-definition :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (volume-configurations :initarg :volume-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or task-volume-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-task-request-volume-configurations
                         :shape "TaskVolumeConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-task-request 'make-start-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instances))
      (common-lisp:list
       (common-lisp:cons "containerInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-ecsmanaged-tags))
      (common-lisp:list
       (common-lisp:cons "enableECSManagedTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-execute-command))
      (common-lisp:list
       (common-lisp:cons "enableExecuteCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-tags))
      (common-lisp:list
       (common-lisp:cons "propagateTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "referenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-by))
      (common-lisp:list
       (common-lisp:cons "startedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-configurations))
      (common-lisp:list
       (common-lisp:cons "volumeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-task-response common-lisp:nil
                       ((tasks :initarg :tasks :initform common-lisp:nil :type
                         (common-lisp:or tasks common-lisp:null) :accessor
                         struct-shape-start-task-response-tasks :shape "Tasks"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type (common-lisp:or failures common-lisp:null)
                         :accessor struct-shape-start-task-response-failures
                         :shape "Failures" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-task-response 'make-start-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype statistics ()
   '(trivial-types:proper-list key-value-pair))
 (common-lisp:defun make-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stop-task-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-stop-task-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task :initarg :task :initform
                         (common-lisp:error ":task is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stop-task-request-task :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-stop-task-request-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-task-request 'make-stop-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-task-response common-lisp:nil
                       ((task :initarg :task :initform common-lisp:nil :type
                         (common-lisp:or task common-lisp:null) :accessor
                         struct-shape-stop-task-response-task :shape "Task"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-task-response 'make-stop-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-task-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype string-map () 'common-lisp:hash-table)
 (common-lisp:defun make-string-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass submit-attachment-state-changes-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-submit-attachment-state-changes-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attachments :initarg :attachments :initform
                         (common-lisp:error ":attachments is required") :type
                         (common-lisp:or attachment-state-changes
                                         common-lisp:null)
                         :accessor
                         struct-shape-submit-attachment-state-changes-request-attachments
                         :shape "AttachmentStateChanges" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-submit-attachment-state-changes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'submit-attachment-state-changes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'submit-attachment-state-changes-request
                    'make-submit-attachment-state-changes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-attachment-state-changes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-attachment-state-changes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-attachment-state-changes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass submit-attachment-state-changes-response common-lisp:nil
                       ((acknowledgment :initarg :acknowledgment :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-submit-attachment-state-changes-response-acknowledgment
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-submit-attachment-state-changes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'submit-attachment-state-changes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'submit-attachment-state-changes-response
                    'make-submit-attachment-state-changes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-attachment-state-changes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-attachment-state-changes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acknowledgment))
      (common-lisp:list
       (common-lisp:cons "acknowledgment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-attachment-state-changes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass submit-container-state-change-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-submit-container-state-change-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task :initarg :task :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-submit-container-state-change-request-task
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-name :initarg :container-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-submit-container-state-change-request-container-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime-id :initarg :runtime-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-submit-container-state-change-request-runtime-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-submit-container-state-change-request-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exit-code :initarg :exit-code :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-submit-container-state-change-request-exit-code
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-submit-container-state-change-request-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-bindings :initarg :network-bindings :initform
                         common-lisp:nil :type
                         (common-lisp:or network-bindings common-lisp:null)
                         :accessor
                         struct-shape-submit-container-state-change-request-network-bindings
                         :shape "NetworkBindings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-submit-container-state-change-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'submit-container-state-change-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'submit-container-state-change-request
                    'make-submit-container-state-change-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-container-state-change-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-container-state-change-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-id))
      (common-lisp:list
       (common-lisp:cons "runtimeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exit-code))
      (common-lisp:list
       (common-lisp:cons "exitCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-bindings))
      (common-lisp:list
       (common-lisp:cons "networkBindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-container-state-change-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass submit-container-state-change-response common-lisp:nil
                       ((acknowledgment :initarg :acknowledgment :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-submit-container-state-change-response-acknowledgment
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-submit-container-state-change-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'submit-container-state-change-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'submit-container-state-change-response
                    'make-submit-container-state-change-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-container-state-change-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-container-state-change-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acknowledgment))
      (common-lisp:list
       (common-lisp:cons "acknowledgment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-container-state-change-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass submit-task-state-change-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-submit-task-state-change-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task :initarg :task :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-submit-task-state-change-request-task
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-submit-task-state-change-request-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-submit-task-state-change-request-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (containers :initarg :containers :initform
                         common-lisp:nil :type
                         (common-lisp:or container-state-changes
                                         common-lisp:null)
                         :accessor
                         struct-shape-submit-task-state-change-request-containers
                         :shape "ContainerStateChanges" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attachments :initarg :attachments :initform
                         common-lisp:nil :type
                         (common-lisp:or attachment-state-changes
                                         common-lisp:null)
                         :accessor
                         struct-shape-submit-task-state-change-request-attachments
                         :shape "AttachmentStateChanges" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (managed-agents :initarg :managed-agents :initform
                         common-lisp:nil :type
                         (common-lisp:or managed-agent-state-changes
                                         common-lisp:null)
                         :accessor
                         struct-shape-submit-task-state-change-request-managed-agents
                         :shape "ManagedAgentStateChanges" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (pull-started-at :initarg :pull-started-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-submit-task-state-change-request-pull-started-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pull-stopped-at :initarg :pull-stopped-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-submit-task-state-change-request-pull-stopped-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-stopped-at :initarg :execution-stopped-at
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-submit-task-state-change-request-execution-stopped-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-submit-task-state-change-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'submit-task-state-change-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'submit-task-state-change-request
                    'make-submit-task-state-change-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-task-state-change-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-task-state-change-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-agents))
      (common-lisp:list
       (common-lisp:cons "managedAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pull-started-at))
      (common-lisp:list
       (common-lisp:cons "pullStartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pull-stopped-at))
      (common-lisp:list
       (common-lisp:cons "pullStoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-stopped-at))
      (common-lisp:list
       (common-lisp:cons "executionStoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-task-state-change-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass submit-task-state-change-response common-lisp:nil
                       ((acknowledgment :initarg :acknowledgment :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-submit-task-state-change-response-acknowledgment
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-submit-task-state-change-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'submit-task-state-change-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'submit-task-state-change-response
                    'make-submit-task-state-change-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-task-state-change-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-task-state-change-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acknowledgment))
      (common-lisp:list
       (common-lisp:cons "acknowledgment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-task-state-change-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass system-control common-lisp:nil
                       ((namespace :initarg :namespace :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-system-control-namespace :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-system-control-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-system-control
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'system-control
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'system-control 'make-system-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input system-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input system-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input system-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype system-controls ()
   '(trivial-types:proper-list system-control))
 (common-lisp:defun make-system-controls
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list system-control))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tags
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition target-not-connected-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'target-not-connected-exception)))
(common-lisp:progn
 (common-lisp:define-condition target-not-found-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'target-not-found-exception)))
(common-lisp:deftype target-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass task common-lisp:nil
                       ((attachments :initarg :attachments :initform
                         common-lisp:nil :type
                         (common-lisp:or attachments common-lisp:null)
                         :accessor struct-shape-task-attachments :shape
                         "Attachments" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-task-attributes :shape "Attributes"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-availability-zone :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (capacity-provider-name :initarg
                         :capacity-provider-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-task-capacity-provider-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-cluster-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connectivity :initarg :connectivity :initform
                         common-lisp:nil :type
                         (common-lisp:or connectivity common-lisp:null)
                         :accessor struct-shape-task-connectivity :shape
                         "Connectivity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connectivity-at :initarg :connectivity-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-connectivity-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (container-instance-arn :initarg
                         :container-instance-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-task-container-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (containers :initarg :containers :initform
                         common-lisp:nil :type
                         (common-lisp:or containers common-lisp:null) :accessor
                         struct-shape-task-containers :shape "Containers"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cpu :initarg :cpu :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-cpu :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (desired-status :initarg :desired-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-desired-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enable-execute-command :initarg
                         :enable-execute-command :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-task-enable-execute-command
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-stopped-at :initarg :execution-stopped-at
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-execution-stopped-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group :initarg :group :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-group :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (health-status :initarg :health-status :initform
                         common-lisp:nil :type
                         (common-lisp:or health-status common-lisp:null)
                         :accessor struct-shape-task-health-status :shape
                         "HealthStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inference-accelerators :initarg
                         :inference-accelerators :initform common-lisp:nil
                         :type
                         (common-lisp:or inference-accelerators
                                         common-lisp:null)
                         :accessor struct-shape-task-inference-accelerators
                         :shape "InferenceAccelerators" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-status :initarg :last-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-last-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (launch-type :initarg :launch-type :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor struct-shape-task-launch-type :shape
                         "LaunchType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (memory :initarg :memory :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-task-memory :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (overrides :initarg :overrides :initform
                         common-lisp:nil :type
                         (common-lisp:or task-override common-lisp:null)
                         :accessor struct-shape-task-overrides :shape
                         "TaskOverride" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform-version :initarg :platform-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-platform-version :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (platform-family :initarg :platform-family :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-platform-family :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pull-started-at :initarg :pull-started-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-pull-started-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pull-stopped-at :initarg :pull-stopped-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-pull-stopped-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (started-at :initarg :started-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-started-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (started-by :initarg :started-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-started-by :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stop-code :initarg :stop-code :initform
                         common-lisp:nil :type
                         (common-lisp:or task-stop-code common-lisp:null)
                         :accessor struct-shape-task-stop-code :shape
                         "TaskStopCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stopped-at :initarg :stopped-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-stopped-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stopped-reason :initarg :stopped-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-stopped-reason :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stopping-at :initarg :stopping-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-stopping-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-task-tags :shape "Tags" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-arn :initarg :task-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-task-task-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-definition-arn :initarg :task-definition-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-task-definition-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-task-version :shape "Long" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ephemeral-storage :initarg :ephemeral-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or ephemeral-storage common-lisp:null)
                         :accessor struct-shape-task-ephemeral-storage :shape
                         "EphemeralStorage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'task 'make-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-name))
      (common-lisp:list
       (common-lisp:cons "capacityProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "clusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectivity))
      (common-lisp:list
       (common-lisp:cons "connectivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectivity-at))
      (common-lisp:list
       (common-lisp:cons "connectivityAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-instance-arn))
      (common-lisp:list
       (common-lisp:cons "containerInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-status))
      (common-lisp:list
       (common-lisp:cons "desiredStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-execute-command))
      (common-lisp:list
       (common-lisp:cons "enableExecuteCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-stopped-at))
      (common-lisp:list
       (common-lisp:cons "executionStoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "healthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-accelerators))
      (common-lisp:list
       (common-lisp:cons "inferenceAccelerators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status))
      (common-lisp:list
       (common-lisp:cons "lastStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-family))
      (common-lisp:list
       (common-lisp:cons "platformFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pull-started-at))
      (common-lisp:list
       (common-lisp:cons "pullStartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pull-stopped-at))
      (common-lisp:list
       (common-lisp:cons "pullStoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-by))
      (common-lisp:list
       (common-lisp:cons "startedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-code))
      (common-lisp:list
       (common-lisp:cons "stopCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-at))
      (common-lisp:list
       (common-lisp:cons "stoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-reason))
      (common-lisp:list
       (common-lisp:cons "stoppedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-at))
      (common-lisp:list
       (common-lisp:cons "stoppingAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "taskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition-arn))
      (common-lisp:list
       (common-lisp:cons "taskDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeral-storage))
      (common-lisp:list
       (common-lisp:cons "ephemeralStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass task-definition common-lisp:nil
                       ((task-definition-arn :initarg :task-definition-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-definition-task-definition-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-definitions :initarg :container-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or container-definitions
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-definition-container-definitions
                         :shape "ContainerDefinitions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (family :initarg :family :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-task-definition-family :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-role-arn :initarg :task-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-definition-task-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-definition-execution-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (network-mode :initarg :network-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or network-mode common-lisp:null)
                         :accessor struct-shape-task-definition-network-mode
                         :shape "NetworkMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision :initarg :revision :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-task-definition-revision :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (volumes :initarg :volumes :initform common-lisp:nil
                         :type (common-lisp:or volume-list common-lisp:null)
                         :accessor struct-shape-task-definition-volumes :shape
                         "VolumeList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or task-definition-status
                                         common-lisp:null)
                         :accessor struct-shape-task-definition-status :shape
                         "TaskDefinitionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requires-attributes :initarg :requires-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or requires-attributes common-lisp:null)
                         :accessor
                         struct-shape-task-definition-requires-attributes
                         :shape "RequiresAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (placement-constraints :initarg :placement-constraints
                         :initform common-lisp:nil :type
                         (common-lisp:or task-definition-placement-constraints
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-definition-placement-constraints
                         :shape "TaskDefinitionPlacementConstraints" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compatibilities :initarg :compatibilities :initform
                         common-lisp:nil :type
                         (common-lisp:or compatibility-list common-lisp:null)
                         :accessor struct-shape-task-definition-compatibilities
                         :shape "CompatibilityList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime-platform :initarg :runtime-platform :initform
                         common-lisp:nil :type
                         (common-lisp:or runtime-platform common-lisp:null)
                         :accessor
                         struct-shape-task-definition-runtime-platform :shape
                         "RuntimePlatform" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requires-compatibilities :initarg
                         :requires-compatibilities :initform common-lisp:nil
                         :type
                         (common-lisp:or compatibility-list common-lisp:null)
                         :accessor
                         struct-shape-task-definition-requires-compatibilities
                         :shape "CompatibilityList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cpu :initarg :cpu :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-definition-cpu :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (memory :initarg :memory :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-task-definition-memory :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inference-accelerators :initarg
                         :inference-accelerators :initform common-lisp:nil
                         :type
                         (common-lisp:or inference-accelerators
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-definition-inference-accelerators
                         :shape "InferenceAccelerators" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (pid-mode :initarg :pid-mode :initform common-lisp:nil
                         :type (common-lisp:or pid-mode common-lisp:null)
                         :accessor struct-shape-task-definition-pid-mode :shape
                         "PidMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ipc-mode :initarg :ipc-mode :initform common-lisp:nil
                         :type (common-lisp:or ipc-mode common-lisp:null)
                         :accessor struct-shape-task-definition-ipc-mode :shape
                         "IpcMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (proxy-configuration :initarg :proxy-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or proxy-configuration common-lisp:null)
                         :accessor
                         struct-shape-task-definition-proxy-configuration
                         :shape "ProxyConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (registered-at :initarg :registered-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-definition-registered-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deregistered-at :initarg :deregistered-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-definition-deregistered-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registered-by :initarg :registered-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-definition-registered-by :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ephemeral-storage :initarg :ephemeral-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or ephemeral-storage common-lisp:null)
                         :accessor
                         struct-shape-task-definition-ephemeral-storage :shape
                         "EphemeralStorage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'task-definition 'make-task-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition-arn))
      (common-lisp:list
       (common-lisp:cons "taskDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-definitions))
      (common-lisp:list
       (common-lisp:cons "containerDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-role-arn))
      (common-lisp:list
       (common-lisp:cons "taskRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "executionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-mode))
      (common-lisp:list
       (common-lisp:cons "networkMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requires-attributes))
      (common-lisp:list
       (common-lisp:cons "requiresAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "placementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatibilities))
      (common-lisp:list
       (common-lisp:cons "compatibilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-platform))
      (common-lisp:list
       (common-lisp:cons "runtimePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requires-compatibilities))
      (common-lisp:list
       (common-lisp:cons "requiresCompatibilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-accelerators))
      (common-lisp:list
       (common-lisp:cons "inferenceAccelerators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid-mode))
      (common-lisp:list
       (common-lisp:cons "pidMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipc-mode))
      (common-lisp:list
       (common-lisp:cons "ipcMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proxy-configuration))
      (common-lisp:list
       (common-lisp:cons "proxyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-at))
      (common-lisp:list
       (common-lisp:cons "registeredAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deregistered-at))
      (common-lisp:list
       (common-lisp:cons "deregisteredAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-by))
      (common-lisp:list
       (common-lisp:cons "registeredBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeral-storage))
      (common-lisp:list
       (common-lisp:cons "ephemeralStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-definition))
   common-lisp:nil))
(common-lisp:deftype task-definition-family-status () 'common-lisp:string)
(common-lisp:deftype task-definition-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype task-definition-field-list ()
   '(trivial-types:proper-list task-definition-field))
 (common-lisp:defun make-task-definition-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-definition-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype task-definition-list ()
   '(trivial-types:proper-list task-definition))
 (common-lisp:defun make-task-definition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass task-definition-placement-constraint common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or
                          task-definition-placement-constraint-type
                          common-lisp:null)
                         :accessor
                         struct-shape-task-definition-placement-constraint-type
                         :shape "TaskDefinitionPlacementConstraintType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expression :initarg :expression :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-definition-placement-constraint-expression
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-definition-placement-constraint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'task-definition-placement-constraint
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'task-definition-placement-constraint
                    'make-task-definition-placement-constraint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-definition-placement-constraint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-definition-placement-constraint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-definition-placement-constraint))
   common-lisp:nil))
(common-lisp:deftype task-definition-placement-constraint-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype task-definition-placement-constraints ()
   '(trivial-types:proper-list task-definition-placement-constraint))
 (common-lisp:defun make-task-definition-placement-constraints
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            task-definition-placement-constraint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype task-definition-status () 'common-lisp:string)
(common-lisp:deftype task-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype task-field-list ()
   '(trivial-types:proper-list task-field))
 (common-lisp:defun make-task-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype task-filesystem-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass task-managed-ebsvolume-configuration common-lisp:nil
                       ((encrypted :initarg :encrypted :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-task-managed-ebsvolume-configuration-encrypted
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ebskmskey-id common-lisp:null)
                         :accessor
                         struct-shape-task-managed-ebsvolume-configuration-kms-key-id
                         :shape "EBSKMSKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-type :initarg :volume-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ebsvolume-type common-lisp:null)
                         :accessor
                         struct-shape-task-managed-ebsvolume-configuration-volume-type
                         :shape "EBSVolumeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-in-gi-b :initarg :size-in-gi-b :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-task-managed-ebsvolume-configuration-size-in-gi-b
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-id :initarg :snapshot-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ebssnapshot-id common-lisp:null)
                         :accessor
                         struct-shape-task-managed-ebsvolume-configuration-snapshot-id
                         :shape "EBSSnapshotId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-task-managed-ebsvolume-configuration-iops
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (throughput :initarg :throughput :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-task-managed-ebsvolume-configuration-throughput
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-specifications :initarg :tag-specifications
                         :initform common-lisp:nil :type
                         (common-lisp:or ebstag-specifications
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-managed-ebsvolume-configuration-tag-specifications
                         :shape "EBSTagSpecifications" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor
                         struct-shape-task-managed-ebsvolume-configuration-role-arn
                         :shape "IAMRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (termination-policy :initarg :termination-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          task-managed-ebsvolume-termination-policy
                          common-lisp:null)
                         :accessor
                         struct-shape-task-managed-ebsvolume-configuration-termination-policy
                         :shape "TaskManagedEBSVolumeTerminationPolicy"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filesystem-type :initarg :filesystem-type :initform
                         common-lisp:nil :type
                         (common-lisp:or task-filesystem-type common-lisp:null)
                         :accessor
                         struct-shape-task-managed-ebsvolume-configuration-filesystem-type
                         :shape "TaskFilesystemType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-managed-ebsvolume-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'task-managed-ebsvolume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'task-managed-ebsvolume-configuration
                    'make-task-managed-ebsvolume-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-managed-ebsvolume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-managed-ebsvolume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "volumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gi-b))
      (common-lisp:list
       (common-lisp:cons "sizeInGiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "snapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-specifications))
      (common-lisp:list
       (common-lisp:cons "tagSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'termination-policy))
      (common-lisp:list
       (common-lisp:cons "terminationPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filesystem-type))
      (common-lisp:list
       (common-lisp:cons "filesystemType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-managed-ebsvolume-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass task-managed-ebsvolume-termination-policy
                       common-lisp:nil
                       ((delete-on-termination :initarg :delete-on-termination
                         :initform
                         (common-lisp:error ":deleteontermination is required")
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-task-managed-ebsvolume-termination-policy-delete-on-termination
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-managed-ebsvolume-termination-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'task-managed-ebsvolume-termination-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'task-managed-ebsvolume-termination-policy
                    'make-task-managed-ebsvolume-termination-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-managed-ebsvolume-termination-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-managed-ebsvolume-termination-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "deleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-managed-ebsvolume-termination-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass task-override common-lisp:nil
                       ((container-overrides :initarg :container-overrides
                         :initform common-lisp:nil :type
                         (common-lisp:or container-overrides common-lisp:null)
                         :accessor
                         struct-shape-task-override-container-overrides :shape
                         "ContainerOverrides" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cpu :initarg :cpu :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-override-cpu :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inference-accelerator-overrides :initarg
                         :inference-accelerator-overrides :initform
                         common-lisp:nil :type
                         (common-lisp:or inference-accelerator-overrides
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-override-inference-accelerator-overrides
                         :shape "InferenceAcceleratorOverrides" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-override-execution-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (memory :initarg :memory :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-task-override-memory :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-role-arn :initarg :task-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-override-task-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ephemeral-storage :initarg :ephemeral-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or ephemeral-storage common-lisp:null)
                         :accessor struct-shape-task-override-ephemeral-storage
                         :shape "EphemeralStorage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-override
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task-override
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'task-override 'make-task-override))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-overrides))
      (common-lisp:list
       (common-lisp:cons "containerOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-accelerator-overrides))
      (common-lisp:list
       (common-lisp:cons "inferenceAcceleratorOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "executionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-role-arn))
      (common-lisp:list
       (common-lisp:cons "taskRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeral-storage))
      (common-lisp:list
       (common-lisp:cons "ephemeralStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass task-set common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-set-id :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-set-arn :initarg :task-set-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-set-task-set-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-arn :initarg :service-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-set-service-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-set-cluster-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (started-by :initarg :started-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-set-started-by :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-set-external-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-task-set-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-definition :initarg :task-definition :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-set-task-definition :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (computed-desired-count :initarg
                         :computed-desired-count :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-task-set-computed-desired-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-count :initarg :pending-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-task-set-pending-count :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (running-count :initarg :running-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-task-set-running-count :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-set-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-set-updated-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (launch-type :initarg :launch-type :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor struct-shape-task-set-launch-type :shape
                         "LaunchType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (capacity-provider-strategy :initarg
                         :capacity-provider-strategy :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-set-capacity-provider-strategy
                         :shape "CapacityProviderStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (platform-version :initarg :platform-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-set-platform-version :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (platform-family :initarg :platform-family :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-task-set-platform-family :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (network-configuration :initarg :network-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor struct-shape-task-set-network-configuration
                         :shape "NetworkConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (load-balancers :initarg :load-balancers :initform
                         common-lisp:nil :type
                         (common-lisp:or load-balancers common-lisp:null)
                         :accessor struct-shape-task-set-load-balancers :shape
                         "LoadBalancers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-registries :initarg :service-registries
                         :initform common-lisp:nil :type
                         (common-lisp:or service-registries common-lisp:null)
                         :accessor struct-shape-task-set-service-registries
                         :shape "ServiceRegistries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scale :initarg :scale :initform common-lisp:nil :type
                         (common-lisp:or scale common-lisp:null) :accessor
                         struct-shape-task-set-scale :shape "Scale" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stability-status :initarg :stability-status :initform
                         common-lisp:nil :type
                         (common-lisp:or stability-status common-lisp:null)
                         :accessor struct-shape-task-set-stability-status
                         :shape "StabilityStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stability-status-at :initarg :stability-status-at
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-set-stability-status-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-task-set-tags :shape "Tags" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-set
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task-set
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'task-set 'make-task-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-set-arn))
      (common-lisp:list
       (common-lisp:cons "taskSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "serviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "clusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-by))
      (common-lisp:list
       (common-lisp:cons "startedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'computed-desired-count))
      (common-lisp:list
       (common-lisp:cons "computedDesiredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-count))
      (common-lisp:list
       (common-lisp:cons "pendingCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-count))
      (common-lisp:list
       (common-lisp:cons "runningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "capacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-family))
      (common-lisp:list
       (common-lisp:cons "platformFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "loadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-registries))
      (common-lisp:list
       (common-lisp:cons "serviceRegistries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stability-status))
      (common-lisp:list
       (common-lisp:cons "stabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stability-status-at))
      (common-lisp:list
       (common-lisp:cons "stabilityStatusAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-set))
   common-lisp:nil))
(common-lisp:deftype task-set-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype task-set-field-list ()
   '(trivial-types:proper-list task-set-field))
 (common-lisp:defun make-task-set-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-set-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition task-set-not-found-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'task-set-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype task-sets () '(trivial-types:proper-list task-set))
 (common-lisp:defun make-task-sets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-set))
   aws-sdk/generator/shape::members))
(common-lisp:deftype task-stop-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass task-volume-configuration common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or ecsvolume-name common-lisp:null)
                         :accessor struct-shape-task-volume-configuration-name
                         :shape "ECSVolumeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (managed-ebsvolume :initarg :managed-ebsvolume
                         :initform common-lisp:nil :type
                         (common-lisp:or task-managed-ebsvolume-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-volume-configuration-managed-ebsvolume
                         :shape "TaskManagedEBSVolumeConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-volume-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task-volume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'task-volume-configuration
                    'make-task-volume-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-volume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-volume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-ebsvolume))
      (common-lisp:list
       (common-lisp:cons "managedEBSVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-volume-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype task-volume-configurations ()
   '(trivial-types:proper-list task-volume-configuration))
 (common-lisp:defun make-task-volume-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            task-volume-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tasks () '(trivial-types:proper-list task))
 (common-lisp:defun make-tasks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass timeout-configuration common-lisp:nil
                       ((idle-timeout-seconds :initarg :idle-timeout-seconds
                         :initform common-lisp:nil :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         struct-shape-timeout-configuration-idle-timeout-seconds
                         :shape "Duration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (per-request-timeout-seconds :initarg
                         :per-request-timeout-seconds :initform common-lisp:nil
                         :type (common-lisp:or duration common-lisp:null)
                         :accessor
                         struct-shape-timeout-configuration-per-request-timeout-seconds
                         :shape "Duration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timeout-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'timeout-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'timeout-configuration 'make-timeout-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          timeout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          timeout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "idleTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'per-request-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "perRequestTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          timeout-configuration))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tmpfs common-lisp:nil
                       ((container-path :initarg :container-path :initform
                         (common-lisp:error ":containerpath is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tmpfs-container-path :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (size :initarg :size :initform
                         (common-lisp:error ":size is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-tmpfs-size :shape "Integer" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (mount-options :initarg :mount-options :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-tmpfs-mount-options :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tmpfs
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tmpfs
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tmpfs 'make-tmpfs))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tmpfs))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tmpfs))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-path))
      (common-lisp:list
       (common-lisp:cons "containerPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-options))
      (common-lisp:list
       (common-lisp:cons "mountOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tmpfs))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tmpfs-list () '(trivial-types:proper-list tmpfs))
 (common-lisp:defun make-tmpfs-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tmpfs))
   aws-sdk/generator/shape::members))
(common-lisp:deftype transport-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ulimit common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or ulimit-name common-lisp:null)
                         :accessor struct-shape-ulimit-name :shape "UlimitName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (soft-limit :initarg :soft-limit :initform
                         (common-lisp:error ":softlimit is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-ulimit-soft-limit :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hard-limit :initarg :hard-limit :initform
                         (common-lisp:error ":hardlimit is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-ulimit-hard-limit :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ulimit
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ulimit
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ulimit 'make-ulimit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ulimit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ulimit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'soft-limit))
      (common-lisp:list
       (common-lisp:cons "softLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hard-limit))
      (common-lisp:list
       (common-lisp:cons "hardLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ulimit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ulimit-list () '(trivial-types:proper-list ulimit))
 (common-lisp:defun make-ulimit-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ulimit))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ulimit-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-feature-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unsupported-feature-exception)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         struct-shape-untag-resource-request-tag-keys :shape
                         "TagKeys" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-capacity-provider-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-capacity-provider-request-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-scaling-group-provider :initarg
                         :auto-scaling-group-provider :initform
                         (common-lisp:error
                          ":autoscalinggroupprovider is required")
                         :type
                         (common-lisp:or auto-scaling-group-provider-update
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-capacity-provider-request-auto-scaling-group-provider
                         :shape "AutoScalingGroupProviderUpdate" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-capacity-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-capacity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-capacity-provider-request
                    'make-update-capacity-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-provider))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroupProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-capacity-provider-response common-lisp:nil
                       ((capacity-provider :initarg :capacity-provider
                         :initform common-lisp:nil :type
                         (common-lisp:or capacity-provider common-lisp:null)
                         :accessor
                         struct-shape-update-capacity-provider-response-capacity-provider
                         :shape "CapacityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-capacity-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-capacity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-capacity-provider-response
                    'make-update-capacity-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-provider))
      (common-lisp:list
       (common-lisp:cons "capacityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-request common-lisp:nil
                       ((cluster :initarg :cluster :initform
                         (common-lisp:error ":cluster is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-cluster-request-cluster :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or cluster-settings common-lisp:null)
                         :accessor struct-shape-update-cluster-request-settings
                         :shape "ClusterSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or cluster-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-request-configuration
                         :shape "ClusterConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-connect-defaults :initarg
                         :service-connect-defaults :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          cluster-service-connect-defaults-request
                          common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-request-service-connect-defaults
                         :shape "ClusterServiceConnectDefaultsRequest"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cluster-request 'make-update-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-connect-defaults))
      (common-lisp:list
       (common-lisp:cons "serviceConnectDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-response common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor struct-shape-update-cluster-response-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cluster-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cluster-response 'make-update-cluster-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-settings-request common-lisp:nil
                       ((cluster :initarg :cluster :initform
                         (common-lisp:error ":cluster is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-cluster-settings-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform
                         (common-lisp:error ":settings is required") :type
                         (common-lisp:or cluster-settings common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-settings-request-settings
                         :shape "ClusterSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cluster-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cluster-settings-request
                    'make-update-cluster-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-settings-response common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or cluster common-lisp:null)
                         :accessor
                         struct-shape-update-cluster-settings-response-cluster
                         :shape "Cluster" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cluster-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cluster-settings-response
                    'make-update-cluster-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-container-agent-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-container-agent-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-instance :initarg :container-instance
                         :initform
                         (common-lisp:error ":containerinstance is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-container-agent-request-container-instance
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-container-agent-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-container-agent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-container-agent-request
                    'make-update-container-agent-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-container-agent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-container-agent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instance))
      (common-lisp:list
       (common-lisp:cons "containerInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-container-agent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-container-agent-response common-lisp:nil
                       ((container-instance :initarg :container-instance
                         :initform common-lisp:nil :type
                         (common-lisp:or container-instance common-lisp:null)
                         :accessor
                         struct-shape-update-container-agent-response-container-instance
                         :shape "ContainerInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-container-agent-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-container-agent-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-container-agent-response
                    'make-update-container-agent-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-container-agent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-container-agent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instance))
      (common-lisp:list
       (common-lisp:cons "containerInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-container-agent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-container-instances-state-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-container-instances-state-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (container-instances :initarg :container-instances
                         :initform
                         (common-lisp:error ":containerinstances is required")
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-update-container-instances-state-request-container-instances
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or container-instance-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-container-instances-state-request-status
                         :shape "ContainerInstanceStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-container-instances-state-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-container-instances-state-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-container-instances-state-request
                    'make-update-container-instances-state-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-container-instances-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-container-instances-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instances))
      (common-lisp:list
       (common-lisp:cons "containerInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-container-instances-state-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-container-instances-state-response
                       common-lisp:nil
                       ((container-instances :initarg :container-instances
                         :initform common-lisp:nil :type
                         (common-lisp:or container-instances common-lisp:null)
                         :accessor
                         struct-shape-update-container-instances-state-response-container-instances
                         :shape "ContainerInstances" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type (common-lisp:or failures common-lisp:null)
                         :accessor
                         struct-shape-update-container-instances-state-response-failures
                         :shape "Failures" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-container-instances-state-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-container-instances-state-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-container-instances-state-response
                    'make-update-container-instances-state-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-container-instances-state-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-container-instances-state-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instances))
      (common-lisp:list
       (common-lisp:cons "containerInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-container-instances-state-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition update-in-progress-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'update-in-progress-exception)))
(common-lisp:progn
 (common-lisp:defclass update-service-primary-task-set-request common-lisp:nil
                       ((cluster :initarg :cluster :initform
                         (common-lisp:error ":cluster is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-service-primary-task-set-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service :initarg :service :initform
                         (common-lisp:error ":service is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-service-primary-task-set-request-service
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (primary-task-set :initarg :primary-task-set :initform
                         (common-lisp:error ":primarytaskset is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-service-primary-task-set-request-primary-task-set
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-primary-task-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-primary-task-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-primary-task-set-request
                    'make-update-service-primary-task-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-primary-task-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-primary-task-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-task-set))
      (common-lisp:list
       (common-lisp:cons "primaryTaskSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-primary-task-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-primary-task-set-response common-lisp:nil
                       ((task-set :initarg :task-set :initform common-lisp:nil
                         :type (common-lisp:or task-set common-lisp:null)
                         :accessor
                         struct-shape-update-service-primary-task-set-response-task-set
                         :shape "TaskSet" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-primary-task-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-primary-task-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-primary-task-set-response
                    'make-update-service-primary-task-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-primary-task-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-primary-task-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-set))
      (common-lisp:list
       (common-lisp:cons "taskSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-primary-task-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-request common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-update-service-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service :initarg :service :initform
                         (common-lisp:error ":service is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-service-request-service :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (desired-count :initarg :desired-count :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-update-service-request-desired-count
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-definition :initarg :task-definition :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-service-request-task-definition
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capacity-provider-strategy :initarg
                         :capacity-provider-strategy :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-request-capacity-provider-strategy
                         :shape "CapacityProviderStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (deployment-configuration :initarg
                         :deployment-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or deployment-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-request-deployment-configuration
                         :shape "DeploymentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (network-configuration :initarg :network-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-request-network-configuration
                         :shape "NetworkConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (placement-constraints :initarg :placement-constraints
                         :initform common-lisp:nil :type
                         (common-lisp:or placement-constraints
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-request-placement-constraints
                         :shape "PlacementConstraints" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (placement-strategy :initarg :placement-strategy
                         :initform common-lisp:nil :type
                         (common-lisp:or placement-strategies common-lisp:null)
                         :accessor
                         struct-shape-update-service-request-placement-strategy
                         :shape "PlacementStrategies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform-version :initarg :platform-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-service-request-platform-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force-new-deployment :initarg :force-new-deployment
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-service-request-force-new-deployment
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-grace-period-seconds :initarg
                         :health-check-grace-period-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-update-service-request-health-check-grace-period-seconds
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-execute-command :initarg
                         :enable-execute-command :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-update-service-request-enable-execute-command
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-ecsmanaged-tags :initarg
                         :enable-ecsmanaged-tags :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-update-service-request-enable-ecsmanaged-tags
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (load-balancers :initarg :load-balancers :initform
                         common-lisp:nil :type
                         (common-lisp:or load-balancers common-lisp:null)
                         :accessor
                         struct-shape-update-service-request-load-balancers
                         :shape "LoadBalancers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (propagate-tags :initarg :propagate-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or propagate-tags common-lisp:null)
                         :accessor
                         struct-shape-update-service-request-propagate-tags
                         :shape "PropagateTags" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-registries :initarg :service-registries
                         :initform common-lisp:nil :type
                         (common-lisp:or service-registries common-lisp:null)
                         :accessor
                         struct-shape-update-service-request-service-registries
                         :shape "ServiceRegistries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-connect-configuration :initarg
                         :service-connect-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or service-connect-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-request-service-connect-configuration
                         :shape "ServiceConnectConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (volume-configurations :initarg :volume-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or service-volume-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-request-volume-configurations
                         :shape "ServiceVolumeConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-service-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-request 'make-update-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-count))
      (common-lisp:list
       (common-lisp:cons "desiredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "capacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "deploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "placementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-strategy))
      (common-lisp:list
       (common-lisp:cons "placementStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-new-deployment))
      (common-lisp:list
       (common-lisp:cons "forceNewDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-grace-period-seconds))
      (common-lisp:list
       (common-lisp:cons "healthCheckGracePeriodSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-execute-command))
      (common-lisp:list
       (common-lisp:cons "enableExecuteCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-ecsmanaged-tags))
      (common-lisp:list
       (common-lisp:cons "enableECSManagedTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "loadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-tags))
      (common-lisp:list
       (common-lisp:cons "propagateTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-registries))
      (common-lisp:list
       (common-lisp:cons "serviceRegistries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-connect-configuration))
      (common-lisp:list
       (common-lisp:cons "serviceConnectConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-configurations))
      (common-lisp:list
       (common-lisp:cons "volumeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-response common-lisp:nil
                       ((service :initarg :service :initform common-lisp:nil
                         :type (common-lisp:or service common-lisp:null)
                         :accessor struct-shape-update-service-response-service
                         :shape "Service" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-service-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-response 'make-update-service-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-task-protection-request common-lisp:nil
                       ((cluster :initarg :cluster :initform
                         (common-lisp:error ":cluster is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-task-protection-request-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tasks :initarg :tasks :initform
                         (common-lisp:error ":tasks is required") :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-update-task-protection-request-tasks
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protection-enabled :initarg :protection-enabled
                         :initform
                         (common-lisp:error ":protectionenabled is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-task-protection-request-protection-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expires-in-minutes :initarg :expires-in-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-update-task-protection-request-expires-in-minutes
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-task-protection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-task-protection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-task-protection-request
                    'make-update-task-protection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-task-protection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-task-protection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protection-enabled))
      (common-lisp:list
       (common-lisp:cons "protectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in-minutes))
      (common-lisp:list
       (common-lisp:cons "expiresInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-task-protection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-task-protection-response common-lisp:nil
                       ((protected-tasks :initarg :protected-tasks :initform
                         common-lisp:nil :type
                         (common-lisp:or protected-tasks common-lisp:null)
                         :accessor
                         struct-shape-update-task-protection-response-protected-tasks
                         :shape "ProtectedTasks" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type (common-lisp:or failures common-lisp:null)
                         :accessor
                         struct-shape-update-task-protection-response-failures
                         :shape "Failures" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-task-protection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-task-protection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-task-protection-response
                    'make-update-task-protection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-task-protection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-task-protection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protected-tasks))
      (common-lisp:list
       (common-lisp:cons "protectedTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-task-protection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-task-set-request common-lisp:nil
                       ((cluster :initarg :cluster :initform
                         (common-lisp:error ":cluster is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-task-set-request-cluster :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service :initarg :service :initform
                         (common-lisp:error ":service is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-task-set-request-service :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-set :initarg :task-set :initform
                         (common-lisp:error ":taskset is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-task-set-request-task-set :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scale :initarg :scale :initform
                         (common-lisp:error ":scale is required") :type
                         (common-lisp:or scale common-lisp:null) :accessor
                         struct-shape-update-task-set-request-scale :shape
                         "Scale" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-task-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-task-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-task-set-request 'make-update-task-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-task-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-task-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-set))
      (common-lisp:list
       (common-lisp:cons "taskSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-task-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-task-set-response common-lisp:nil
                       ((task-set :initarg :task-set :initform common-lisp:nil
                         :type (common-lisp:or task-set common-lisp:null)
                         :accessor
                         struct-shape-update-task-set-response-task-set :shape
                         "TaskSet" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-task-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-task-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-task-set-response 'make-update-task-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-task-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-task-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-set))
      (common-lisp:list
       (common-lisp:cons "taskSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-task-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass version-info common-lisp:nil
                       ((agent-version :initarg :agent-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-version-info-agent-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (agent-hash :initarg :agent-hash :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-version-info-agent-hash :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (docker-version :initarg :docker-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-version-info-docker-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-version-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'version-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'version-info 'make-version-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input version-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input version-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "agentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-hash))
      (common-lisp:list
       (common-lisp:cons "agentHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'docker-version))
      (common-lisp:list
       (common-lisp:cons "dockerVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input version-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass volume common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (host :initarg :host :initform common-lisp:nil :type
                         (common-lisp:or host-volume-properties
                                         common-lisp:null)
                         :accessor struct-shape-volume-host :shape
                         "HostVolumeProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (docker-volume-configuration :initarg
                         :docker-volume-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or docker-volume-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-volume-docker-volume-configuration :shape
                         "DockerVolumeConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (efs-volume-configuration :initarg
                         :efs-volume-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or efsvolume-configuration
                                         common-lisp:null)
                         :accessor struct-shape-volume-efs-volume-configuration
                         :shape "EFSVolumeConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (fsx-windows-file-server-volume-configuration :initarg
                         :fsx-windows-file-server-volume-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          fsx-windows-file-server-volume-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-volume-fsx-windows-file-server-volume-configuration
                         :shape "FSxWindowsFileServerVolumeConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configured-at-launch :initarg :configured-at-launch
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-volume-configured-at-launch
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-volume
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'volume
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'volume 'make-volume))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'docker-volume-configuration))
      (common-lisp:list
       (common-lisp:cons "dockerVolumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'efs-volume-configuration))
      (common-lisp:list
       (common-lisp:cons "efsVolumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fsx-windows-file-server-volume-configuration))
      (common-lisp:list
       (common-lisp:cons "fsxWindowsFileServerVolumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-at-launch))
      (common-lisp:list
       (common-lisp:cons "configuredAtLaunch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass volume-from common-lisp:nil
                       ((source-container :initarg :source-container :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-from-source-container :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (read-only :initarg :read-only :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-volume-from-read-only :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-volume-from
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'volume-from
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'volume-from 'make-volume-from))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-from))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-from))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-container))
      (common-lisp:list
       (common-lisp:cons "sourceContainer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-only))
      (common-lisp:list
       (common-lisp:cons "readOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-from))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype volume-from-list ()
   '(trivial-types:proper-list volume-from))
 (common-lisp:defun make-volume-from-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-from))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype volume-list () '(trivial-types:proper-list volume))
 (common-lisp:defun make-volume-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun create-capacity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name auto-scaling-group-provider tags)
   (common-lisp:declare
    (common-lisp:ignorable name auto-scaling-group-provider tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-capacity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCapacityProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-capacity-provider))
(common-lisp:progn
 (common-lisp:defun create-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name tags settings configuration
                     capacity-providers default-capacity-provider-strategy
                     service-connect-defaults)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name tags settings configuration
     capacity-providers default-capacity-provider-strategy
     service-connect-defaults))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-cluster))
(common-lisp:progn
 (common-lisp:defun create-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster service-name task-definition
                     load-balancers service-registries desired-count
                     client-token launch-type capacity-provider-strategy
                     platform-version role deployment-configuration
                     placement-constraints placement-strategy
                     network-configuration health-check-grace-period-seconds
                     scheduling-strategy deployment-controller tags
                     enable-ecsmanaged-tags propagate-tags
                     enable-execute-command service-connect-configuration
                     volume-configurations)
   (common-lisp:declare
    (common-lisp:ignorable cluster service-name task-definition load-balancers
     service-registries desired-count client-token launch-type
     capacity-provider-strategy platform-version role deployment-configuration
     placement-constraints placement-strategy network-configuration
     health-check-grace-period-seconds scheduling-strategy
     deployment-controller tags enable-ecsmanaged-tags propagate-tags
     enable-execute-command service-connect-configuration
     volume-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateService"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-service))
(common-lisp:progn
 (common-lisp:defun create-task-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service cluster external-id
                     task-definition network-configuration load-balancers
                     service-registries launch-type capacity-provider-strategy
                     platform-version scale client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable service cluster external-id task-definition
     network-configuration load-balancers service-registries launch-type
     capacity-provider-strategy platform-version scale client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-task-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTaskSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-task-set))
(common-lisp:progn
 (common-lisp:defun delete-account-setting
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name principal-arn)
   (common-lisp:declare (common-lisp:ignorable name principal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-account-setting-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAccountSetting"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-account-setting))
(common-lisp:progn
 (common-lisp:defun delete-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster attributes)
   (common-lisp:declare (common-lisp:ignorable cluster attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAttributes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-attributes))
(common-lisp:progn
 (common-lisp:defun delete-capacity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key capacity-provider)
   (common-lisp:declare (common-lisp:ignorable capacity-provider))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-capacity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCapacityProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-capacity-provider))
(common-lisp:progn
 (common-lisp:defun delete-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster)
   (common-lisp:declare (common-lisp:ignorable cluster))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-cluster))
(common-lisp:progn
 (common-lisp:defun delete-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster service force)
   (common-lisp:declare (common-lisp:ignorable cluster service force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteService"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-service))
(common-lisp:progn
 (common-lisp:defun delete-task-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-definitions)
   (common-lisp:declare (common-lisp:ignorable task-definitions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-task-definitions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTaskDefinitions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-task-definitions))
(common-lisp:progn
 (common-lisp:defun delete-task-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster service task-set force)
   (common-lisp:declare (common-lisp:ignorable cluster service task-set force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-task-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTaskSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-task-set))
(common-lisp:progn
 (common-lisp:defun deregister-container-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster container-instance force)
   (common-lisp:declare
    (common-lisp:ignorable cluster container-instance force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-container-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterContainerInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deregister-container-instance))
(common-lisp:progn
 (common-lisp:defun deregister-task-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-definition)
   (common-lisp:declare (common-lisp:ignorable task-definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-task-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterTaskDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deregister-task-definition))
(common-lisp:progn
 (common-lisp:defun describe-capacity-providers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key capacity-providers include max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable capacity-providers include max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-capacity-providers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCapacityProviders"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-capacity-providers))
(common-lisp:progn
 (common-lisp:defun describe-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key clusters include)
   (common-lisp:declare (common-lisp:ignorable clusters include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeClusters"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-clusters))
(common-lisp:progn
 (common-lisp:defun describe-container-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster container-instances include)
   (common-lisp:declare
    (common-lisp:ignorable cluster container-instances include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-container-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeContainerInstances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-container-instances))
(common-lisp:progn
 (common-lisp:defun describe-services
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster services include)
   (common-lisp:declare (common-lisp:ignorable cluster services include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-services-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeServices"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-services))
(common-lisp:progn
 (common-lisp:defun describe-task-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-definition include)
   (common-lisp:declare (common-lisp:ignorable task-definition include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-task-definition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTaskDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-task-definition))
(common-lisp:progn
 (common-lisp:defun describe-task-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster service task-sets include)
   (common-lisp:declare
    (common-lisp:ignorable cluster service task-sets include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-task-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTaskSets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-task-sets))
(common-lisp:progn
 (common-lisp:defun describe-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster tasks include)
   (common-lisp:declare (common-lisp:ignorable cluster tasks include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTasks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-tasks))
(common-lisp:progn
 (common-lisp:defun discover-poll-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key container-instance cluster)
   (common-lisp:declare (common-lisp:ignorable container-instance cluster))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-discover-poll-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DiscoverPollEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'discover-poll-endpoint))
(common-lisp:progn
 (common-lisp:defun execute-command
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster container command interactive
                     task)
   (common-lisp:declare
    (common-lisp:ignorable cluster container command interactive task))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-command-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ExecuteCommand"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'execute-command))
(common-lisp:progn
 (common-lisp:defun get-task-protection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster tasks)
   (common-lisp:declare (common-lisp:ignorable cluster tasks))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-task-protection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTaskProtection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-task-protection))
(common-lisp:progn
 (common-lisp:defun list-account-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name value principal-arn
                     effective-settings next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable name value principal-arn effective-settings
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-account-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAccountSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-account-settings))
(common-lisp:progn
 (common-lisp:defun list-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster target-type attribute-name
                     attribute-value next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable cluster target-type attribute-name attribute-value
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAttributes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-attributes))
(common-lisp:progn
 (common-lisp:defun list-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListClusters"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-clusters))
(common-lisp:progn
 (common-lisp:defun list-container-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster filter next-token max-results
                     status)
   (common-lisp:declare
    (common-lisp:ignorable cluster filter next-token max-results status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-container-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListContainerInstances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-container-instances))
(common-lisp:progn
 (common-lisp:defun list-services
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster next-token max-results
                     launch-type scheduling-strategy)
   (common-lisp:declare
    (common-lisp:ignorable cluster next-token max-results launch-type
     scheduling-strategy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-services-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServices"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-services))
(common-lisp:progn
 (common-lisp:defun list-services-by-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key namespace next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable namespace next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-services-by-namespace-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServicesByNamespace"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-services-by-namespace))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-task-definition-families
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key family-prefix status next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable family-prefix status next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-task-definition-families-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTaskDefinitionFamilies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-task-definition-families))
(common-lisp:progn
 (common-lisp:defun list-task-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key family-prefix status sort next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable family-prefix status sort next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-task-definitions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTaskDefinitions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-task-definitions))
(common-lisp:progn
 (common-lisp:defun list-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster container-instance family
                     next-token max-results started-by service-name
                     desired-status launch-type)
   (common-lisp:declare
    (common-lisp:ignorable cluster container-instance family next-token
     max-results started-by service-name desired-status launch-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTasks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tasks))
(common-lisp:progn
 (common-lisp:defun put-account-setting
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name value principal-arn)
   (common-lisp:declare (common-lisp:ignorable name value principal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-account-setting-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutAccountSetting"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-account-setting))
(common-lisp:progn
 (common-lisp:defun put-account-setting-default
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name value)
   (common-lisp:declare (common-lisp:ignorable name value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-account-setting-default-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutAccountSettingDefault"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-account-setting-default))
(common-lisp:progn
 (common-lisp:defun put-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster attributes)
   (common-lisp:declare (common-lisp:ignorable cluster attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutAttributes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-attributes))
(common-lisp:progn
 (common-lisp:defun put-cluster-capacity-providers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster capacity-providers
                     default-capacity-provider-strategy)
   (common-lisp:declare
    (common-lisp:ignorable cluster capacity-providers
     default-capacity-provider-strategy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-cluster-capacity-providers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutClusterCapacityProviders"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-cluster-capacity-providers))
(common-lisp:progn
 (common-lisp:defun register-container-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster instance-identity-document
                     instance-identity-document-signature total-resources
                     version-info container-instance-arn attributes
                     platform-devices tags)
   (common-lisp:declare
    (common-lisp:ignorable cluster instance-identity-document
     instance-identity-document-signature total-resources version-info
     container-instance-arn attributes platform-devices tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-container-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterContainerInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-container-instance))
(common-lisp:progn
 (common-lisp:defun register-task-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key family task-role-arn execution-role-arn
                     network-mode container-definitions volumes
                     placement-constraints requires-compatibilities cpu memory
                     tags pid-mode ipc-mode proxy-configuration
                     inference-accelerators ephemeral-storage runtime-platform)
   (common-lisp:declare
    (common-lisp:ignorable family task-role-arn execution-role-arn network-mode
     container-definitions volumes placement-constraints
     requires-compatibilities cpu memory tags pid-mode ipc-mode
     proxy-configuration inference-accelerators ephemeral-storage
     runtime-platform))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-task-definition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterTaskDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-task-definition))
(common-lisp:progn
 (common-lisp:defun run-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key capacity-provider-strategy cluster count
                     enable-ecsmanaged-tags enable-execute-command group
                     launch-type network-configuration overrides
                     placement-constraints placement-strategy platform-version
                     propagate-tags reference-id started-by tags
                     task-definition client-token volume-configurations)
   (common-lisp:declare
    (common-lisp:ignorable capacity-provider-strategy cluster count
     enable-ecsmanaged-tags enable-execute-command group launch-type
     network-configuration overrides placement-constraints placement-strategy
     platform-version propagate-tags reference-id started-by tags
     task-definition client-token volume-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-run-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "RunTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'run-task))
(common-lisp:progn
 (common-lisp:defun start-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster container-instances
                     enable-ecsmanaged-tags enable-execute-command group
                     network-configuration overrides propagate-tags
                     reference-id started-by tags task-definition
                     volume-configurations)
   (common-lisp:declare
    (common-lisp:ignorable cluster container-instances enable-ecsmanaged-tags
     enable-execute-command group network-configuration overrides
     propagate-tags reference-id started-by tags task-definition
     volume-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-task))
(common-lisp:progn
 (common-lisp:defun stop-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster task reason)
   (common-lisp:declare (common-lisp:ignorable cluster task reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "StopTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-task))
(common-lisp:progn
 (common-lisp:defun submit-attachment-state-changes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster attachments)
   (common-lisp:declare (common-lisp:ignorable cluster attachments))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-submit-attachment-state-changes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SubmitAttachmentStateChanges"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'submit-attachment-state-changes))
(common-lisp:progn
 (common-lisp:defun submit-container-state-change
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster task container-name runtime-id
                     status exit-code reason network-bindings)
   (common-lisp:declare
    (common-lisp:ignorable cluster task container-name runtime-id status
     exit-code reason network-bindings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-submit-container-state-change-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SubmitContainerStateChange"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'submit-container-state-change))
(common-lisp:progn
 (common-lisp:defun submit-task-state-change
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster task status reason containers
                     attachments managed-agents pull-started-at pull-stopped-at
                     execution-stopped-at)
   (common-lisp:declare
    (common-lisp:ignorable cluster task status reason containers attachments
     managed-agents pull-started-at pull-stopped-at execution-stopped-at))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-submit-task-state-change-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SubmitTaskStateChange"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'submit-task-state-change))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-capacity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name auto-scaling-group-provider)
   (common-lisp:declare
    (common-lisp:ignorable name auto-scaling-group-provider))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-capacity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCapacityProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-capacity-provider))
(common-lisp:progn
 (common-lisp:defun update-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster settings configuration
                     service-connect-defaults)
   (common-lisp:declare
    (common-lisp:ignorable cluster settings configuration
     service-connect-defaults))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-cluster))
(common-lisp:progn
 (common-lisp:defun update-cluster-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster settings)
   (common-lisp:declare (common-lisp:ignorable cluster settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cluster-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateClusterSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-cluster-settings))
(common-lisp:progn
 (common-lisp:defun update-container-agent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster container-instance)
   (common-lisp:declare (common-lisp:ignorable cluster container-instance))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-container-agent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateContainerAgent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-container-agent))
(common-lisp:progn
 (common-lisp:defun update-container-instances-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster container-instances status)
   (common-lisp:declare
    (common-lisp:ignorable cluster container-instances status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-container-instances-state-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateContainerInstancesState"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-container-instances-state))
(common-lisp:progn
 (common-lisp:defun update-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster service desired-count
                     task-definition capacity-provider-strategy
                     deployment-configuration network-configuration
                     placement-constraints placement-strategy platform-version
                     force-new-deployment health-check-grace-period-seconds
                     enable-execute-command enable-ecsmanaged-tags
                     load-balancers propagate-tags service-registries
                     service-connect-configuration volume-configurations)
   (common-lisp:declare
    (common-lisp:ignorable cluster service desired-count task-definition
     capacity-provider-strategy deployment-configuration network-configuration
     placement-constraints placement-strategy platform-version
     force-new-deployment health-check-grace-period-seconds
     enable-execute-command enable-ecsmanaged-tags load-balancers
     propagate-tags service-registries service-connect-configuration
     volume-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateService"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-service))
(common-lisp:progn
 (common-lisp:defun update-service-primary-task-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster service primary-task-set)
   (common-lisp:declare
    (common-lisp:ignorable cluster service primary-task-set))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-service-primary-task-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServicePrimaryTaskSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-service-primary-task-set))
(common-lisp:progn
 (common-lisp:defun update-task-protection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster tasks protection-enabled
                     expires-in-minutes)
   (common-lisp:declare
    (common-lisp:ignorable cluster tasks protection-enabled
     expires-in-minutes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-task-protection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTaskProtection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-task-protection))
(common-lisp:progn
 (common-lisp:defun update-task-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster service task-set scale)
   (common-lisp:declare (common-lisp:ignorable cluster service task-set scale))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-task-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTaskSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-task-set))
