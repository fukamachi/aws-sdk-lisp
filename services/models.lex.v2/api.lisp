;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/models.lex.v2/api
  (:use)
  (:nicknames #:aws/models.lex.v2)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/models.lex.v2/api)
(common-lisp:progn
 (common-lisp:define-condition models.lex.v2-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'models.lex.v2-error))
(common-lisp:progn
 (common-lisp:defclass models.lex.v2-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "models.lex.v2" :api-version
                        "2020-08-07" :host-prefix "models-v2-lex" :signing-name
                        "lex" :global-host common-lisp:nil))
 (common-lisp:export 'models.lex.v2-request))
(common-lisp:defvar *error-map*
  '(("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("PreconditionFailedException" . precondition-failed-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass active-context common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or active-context-name common-lisp:null)
                         :accessor struct-shape-active-context-name :shape
                         "ActiveContextName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-active-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'active-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'active-context 'make-active-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input active-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input active-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input active-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype active-context-list ()
   '(trivial-types:proper-list active-context))
 (common-lisp:defun make-active-context-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list active-context))
   aws-sdk/generator/shape::members))
(common-lisp:deftype active-context-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass advanced-recognition-setting common-lisp:nil
                       ((audio-recognition-strategy :initarg
                         :audio-recognition-strategy :initform common-lisp:nil
                         :type
                         (common-lisp:or audio-recognition-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-advanced-recognition-setting-audio-recognition-strategy
                         :shape "AudioRecognitionStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-advanced-recognition-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'advanced-recognition-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'advanced-recognition-setting
                    'make-advanced-recognition-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-recognition-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-recognition-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-recognition-strategy))
      (common-lisp:list
       (common-lisp:cons "audioRecognitionStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-recognition-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass agent-turn-result common-lisp:nil
                       ((expected-agent-prompt :initarg :expected-agent-prompt
                         :initform
                         (common-lisp:error ":expectedagentprompt is required")
                         :type
                         (common-lisp:or test-set-agent-prompt
                                         common-lisp:null)
                         :accessor
                         struct-shape-agent-turn-result-expected-agent-prompt
                         :shape "TestSetAgentPrompt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actual-agent-prompt :initarg :actual-agent-prompt
                         :initform common-lisp:nil :type
                         (common-lisp:or test-set-agent-prompt
                                         common-lisp:null)
                         :accessor
                         struct-shape-agent-turn-result-actual-agent-prompt
                         :shape "TestSetAgentPrompt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-details :initarg :error-details :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-error-details
                                         common-lisp:null)
                         :accessor struct-shape-agent-turn-result-error-details
                         :shape "ExecutionErrorDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (actual-elicited-slot :initarg :actual-elicited-slot
                         :initform common-lisp:nil :type
                         (common-lisp:or test-result-slot-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-agent-turn-result-actual-elicited-slot
                         :shape "TestResultSlotName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actual-intent :initarg :actual-intent :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-agent-turn-result-actual-intent :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-agent-turn-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'agent-turn-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'agent-turn-result 'make-agent-turn-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-turn-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-turn-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-agent-prompt))
      (common-lisp:list
       (common-lisp:cons "expectedAgentPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual-agent-prompt))
      (common-lisp:list
       (common-lisp:cons "actualAgentPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "errorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'actual-elicited-slot))
      (common-lisp:list
       (common-lisp:cons "actualElicitedSlot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual-intent))
      (common-lisp:list
       (common-lisp:cons "actualIntent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-turn-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass agent-turn-specification common-lisp:nil
                       ((agent-prompt :initarg :agent-prompt :initform
                         (common-lisp:error ":agentprompt is required") :type
                         (common-lisp:or test-set-agent-prompt
                                         common-lisp:null)
                         :accessor
                         struct-shape-agent-turn-specification-agent-prompt
                         :shape "TestSetAgentPrompt" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-agent-turn-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'agent-turn-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'agent-turn-specification 'make-agent-turn-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          agent-turn-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          agent-turn-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-prompt))
      (common-lisp:list
       (common-lisp:cons "agentPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          agent-turn-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aggregated-utterances-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or aggregated-utterances-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-aggregated-utterances-filter-name :shape
                         "AggregatedUtterancesFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor
                         struct-shape-aggregated-utterances-filter-values
                         :shape "FilterValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or aggregated-utterances-filter-operator
                                         common-lisp:null)
                         :accessor
                         struct-shape-aggregated-utterances-filter-operator
                         :shape "AggregatedUtterancesFilterOperator" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregated-utterances-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aggregated-utterances-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregated-utterances-filter
                    'make-aggregated-utterances-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-filter))
   common-lisp:nil))
(common-lisp:deftype aggregated-utterances-filter-name () 'common-lisp:string)
(common-lisp:deftype aggregated-utterances-filter-operator ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aggregated-utterances-filters ()
   '(trivial-types:proper-list aggregated-utterances-filter))
 (common-lisp:defun make-aggregated-utterances-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregated-utterances-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aggregated-utterances-sort-attribute ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aggregated-utterances-sort-by common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or aggregated-utterances-sort-attribute
                                         common-lisp:null)
                         :accessor
                         struct-shape-aggregated-utterances-sort-by-attribute
                         :shape "AggregatedUtterancesSortAttribute" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-aggregated-utterances-sort-by-order
                         :shape "SortOrder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregated-utterances-sort-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'aggregated-utterances-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregated-utterances-sort-by
                    'make-aggregated-utterances-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-sort-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aggregated-utterances-summary common-lisp:nil
                       ((utterance :initarg :utterance :initform
                         common-lisp:nil :type
                         (common-lisp:or utterance common-lisp:null) :accessor
                         struct-shape-aggregated-utterances-summary-utterance
                         :shape "Utterance" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hit-count :initarg :hit-count :initform
                         common-lisp:nil :type
                         (common-lisp:or hit-count common-lisp:null) :accessor
                         struct-shape-aggregated-utterances-summary-hit-count
                         :shape "HitCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (missed-count :initarg :missed-count :initform
                         common-lisp:nil :type
                         (common-lisp:or missed-count common-lisp:null)
                         :accessor
                         struct-shape-aggregated-utterances-summary-missed-count
                         :shape "MissedCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (utterance-first-recorded-in-aggregation-duration
                         :initarg
                         :utterance-first-recorded-in-aggregation-duration
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-aggregated-utterances-summary-utterance-first-recorded-in-aggregation-duration
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (utterance-last-recorded-in-aggregation-duration
                         :initarg
                         :utterance-last-recorded-in-aggregation-duration
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-aggregated-utterances-summary-utterance-last-recorded-in-aggregation-duration
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contains-data-from-deleted-resources :initarg
                         :contains-data-from-deleted-resources :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-aggregated-utterances-summary-contains-data-from-deleted-resources
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregated-utterances-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'aggregated-utterances-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregated-utterances-summary
                    'make-aggregated-utterances-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utterance))
      (common-lisp:list
       (common-lisp:cons "utterance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hit-count))
      (common-lisp:list
       (common-lisp:cons "hitCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missed-count))
      (common-lisp:list
       (common-lisp:cons "missedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'utterance-first-recorded-in-aggregation-duration))
      (common-lisp:list
       (common-lisp:cons "utteranceFirstRecordedInAggregationDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'utterance-last-recorded-in-aggregation-duration))
      (common-lisp:list
       (common-lisp:cons "utteranceLastRecordedInAggregationDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contains-data-from-deleted-resources))
      (common-lisp:list
       (common-lisp:cons "containsDataFromDeletedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-utterances-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregated-utterances-summary-list ()
   '(trivial-types:proper-list aggregated-utterances-summary))
 (common-lisp:defun make-aggregated-utterances-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregated-utterances-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass allowed-input-types common-lisp:nil
                       ((allow-audio-input :initarg :allow-audio-input
                         :initform
                         (common-lisp:error ":allowaudioinput is required")
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-allowed-input-types-allow-audio-input
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-dtmfinput :initarg :allow-dtmfinput :initform
                         (common-lisp:error ":allowdtmfinput is required")
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-allowed-input-types-allow-dtmfinput
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-allowed-input-types
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'allowed-input-types
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'allowed-input-types 'make-allowed-input-types))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input allowed-input-types))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input allowed-input-types))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-audio-input))
      (common-lisp:list
       (common-lisp:cons "allowAudioInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-dtmfinput))
      (common-lisp:list
       (common-lisp:cons "allowDTMFInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input allowed-input-types))
   common-lisp:nil))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype analytics-bin-by-list ()
   '(trivial-types:proper-list analytics-bin-by-specification))
 (common-lisp:defun make-analytics-bin-by-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-bin-by-specification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analytics-bin-by-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analytics-bin-by-specification common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or analytics-bin-by-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-bin-by-specification-name
                         :shape "AnalyticsBinByName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interval :initarg :interval :initform
                         (common-lisp:error ":interval is required") :type
                         (common-lisp:or analytics-interval common-lisp:null)
                         :accessor
                         struct-shape-analytics-bin-by-specification-interval
                         :shape "AnalyticsInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order :initarg :order :initform common-lisp:nil :type
                         (common-lisp:or analytics-sort-order common-lisp:null)
                         :accessor
                         struct-shape-analytics-bin-by-specification-order
                         :shape "AnalyticsSortOrder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-bin-by-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-bin-by-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-bin-by-specification
                    'make-analytics-bin-by-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-bin-by-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-bin-by-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-bin-by-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analytics-bin-key common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or analytics-bin-by-name
                                         common-lisp:null)
                         :accessor struct-shape-analytics-bin-key-name :shape
                         "AnalyticsBinByName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or analytics-bin-value common-lisp:null)
                         :accessor struct-shape-analytics-bin-key-value :shape
                         "AnalyticsBinValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-bin-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-bin-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-bin-key 'make-analytics-bin-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analytics-bin-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analytics-bin-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analytics-bin-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-bin-keys ()
   '(trivial-types:proper-list analytics-bin-key))
 (common-lisp:defun make-analytics-bin-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analytics-bin-key))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analytics-bin-value () 'common-lisp:integer)
(common-lisp:deftype analytics-channel () 'common-lisp:string)
(common-lisp:deftype analytics-common-filter-name () 'common-lisp:string)
(common-lisp:deftype analytics-filter-operator () 'common-lisp:string)
(common-lisp:deftype analytics-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype analytics-filter-values ()
   '(trivial-types:proper-list analytics-filter-value))
 (common-lisp:defun make-analytics-filter-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analytics-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analytics-group-by-value () 'common-lisp:string)
(common-lisp:deftype analytics-intent-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analytics-intent-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or analytics-intent-filter-name
                                         common-lisp:null)
                         :accessor struct-shape-analytics-intent-filter-name
                         :shape "AnalyticsIntentFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or analytics-filter-operator
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-filter-operator :shape
                         "AnalyticsFilterOperator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or analytics-filter-values
                                         common-lisp:null)
                         :accessor struct-shape-analytics-intent-filter-values
                         :shape "AnalyticsFilterValues" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-intent-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-intent-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-intent-filter 'make-analytics-intent-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-filter))
   common-lisp:nil))
(common-lisp:deftype analytics-intent-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype analytics-intent-filters ()
   '(trivial-types:proper-list analytics-intent-filter))
 (common-lisp:defun make-analytics-intent-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analytics-intent-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analytics-intent-group-by-key common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or analytics-intent-field
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-group-by-key-name :shape
                         "AnalyticsIntentField" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or analytics-group-by-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-group-by-key-value
                         :shape "AnalyticsGroupByValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-intent-group-by-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-intent-group-by-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-intent-group-by-key
                    'make-analytics-intent-group-by-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-group-by-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-group-by-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-group-by-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-intent-group-by-keys ()
   '(trivial-types:proper-list analytics-intent-group-by-key))
 (common-lisp:defun make-analytics-intent-group-by-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-intent-group-by-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype analytics-intent-group-by-list ()
   '(trivial-types:proper-list analytics-intent-group-by-specification))
 (common-lisp:defun make-analytics-intent-group-by-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-intent-group-by-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analytics-intent-group-by-specification common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or analytics-intent-field
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-group-by-specification-name
                         :shape "AnalyticsIntentField" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-intent-group-by-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-intent-group-by-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-intent-group-by-specification
                    'make-analytics-intent-group-by-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-group-by-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-group-by-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-group-by-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analytics-intent-metric common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or analytics-intent-metric-name
                                         common-lisp:null)
                         :accessor struct-shape-analytics-intent-metric-name
                         :shape "AnalyticsIntentMetricName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (statistic :initarg :statistic :initform
                         (common-lisp:error ":statistic is required") :type
                         (common-lisp:or analytics-metric-statistic
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-metric-statistic :shape
                         "AnalyticsMetricStatistic" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order :initarg :order :initform common-lisp:nil :type
                         (common-lisp:or analytics-sort-order common-lisp:null)
                         :accessor struct-shape-analytics-intent-metric-order
                         :shape "AnalyticsSortOrder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-intent-metric
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-intent-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-intent-metric 'make-analytics-intent-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-metric))
   common-lisp:nil))
(common-lisp:deftype analytics-intent-metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analytics-intent-metric-result common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or analytics-intent-metric-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-metric-result-name
                         :shape "AnalyticsIntentMetricName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (statistic :initarg :statistic :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-metric-statistic
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-metric-result-statistic
                         :shape "AnalyticsMetricStatistic" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or analytics-metric-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-metric-result-value
                         :shape "AnalyticsMetricValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-intent-metric-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-intent-metric-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-intent-metric-result
                    'make-analytics-intent-metric-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-metric-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-metric-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-metric-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-intent-metric-results ()
   '(trivial-types:proper-list analytics-intent-metric-result))
 (common-lisp:defun make-analytics-intent-metric-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-intent-metric-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype analytics-intent-metrics ()
   '(trivial-types:proper-list analytics-intent-metric))
 (common-lisp:defun make-analytics-intent-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analytics-intent-metric))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype analytics-intent-node-summaries ()
   '(trivial-types:proper-list analytics-intent-node-summary))
 (common-lisp:defun make-analytics-intent-node-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-intent-node-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analytics-intent-node-summary common-lisp:nil
                       ((intent-name :initarg :intent-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-analytics-intent-node-summary-intent-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (intent-path :initarg :intent-path :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-path common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-node-summary-intent-path
                         :shape "AnalyticsPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (intent-count :initarg :intent-count :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-node-count common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-node-summary-intent-count
                         :shape "AnalyticsNodeCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (intent-level :initarg :intent-level :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-node-level common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-node-summary-intent-level
                         :shape "AnalyticsNodeLevel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-type :initarg :node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-node-type common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-node-summary-node-type
                         :shape "AnalyticsNodeType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-intent-node-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-intent-node-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-intent-node-summary
                    'make-analytics-intent-node-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-node-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-node-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-path))
      (common-lisp:list
       (common-lisp:cons "intentPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-count))
      (common-lisp:list
       (common-lisp:cons "intentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-level))
      (common-lisp:list
       (common-lisp:cons "intentLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "nodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-node-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analytics-intent-result common-lisp:nil
                       ((bin-keys :initarg :bin-keys :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-bin-keys common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-result-bin-keys :shape
                         "AnalyticsBinKeys" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-by-keys :initarg :group-by-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-intent-group-by-keys
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-result-group-by-keys
                         :shape "AnalyticsIntentGroupByKeys" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metrics-results :initarg :metrics-results :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-intent-metric-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-result-metrics-results
                         :shape "AnalyticsIntentMetricResults" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-intent-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-intent-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-intent-result 'make-analytics-intent-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bin-keys))
      (common-lisp:list
       (common-lisp:cons "binKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-keys))
      (common-lisp:list
       (common-lisp:cons "groupByKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-results))
      (common-lisp:list
       (common-lisp:cons "metricsResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-intent-results ()
   '(trivial-types:proper-list analytics-intent-result))
 (common-lisp:defun make-analytics-intent-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analytics-intent-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analytics-intent-stage-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analytics-intent-stage-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or analytics-intent-stage-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-stage-filter-name :shape
                         "AnalyticsIntentStageFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or analytics-filter-operator
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-stage-filter-operator
                         :shape "AnalyticsFilterOperator" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or analytics-filter-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-stage-filter-values
                         :shape "AnalyticsFilterValues" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-intent-stage-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-intent-stage-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-intent-stage-filter
                    'make-analytics-intent-stage-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-filter))
   common-lisp:nil))
(common-lisp:deftype analytics-intent-stage-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype analytics-intent-stage-filters ()
   '(trivial-types:proper-list analytics-intent-stage-filter))
 (common-lisp:defun make-analytics-intent-stage-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-intent-stage-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analytics-intent-stage-group-by-key common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or analytics-intent-stage-field
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-stage-group-by-key-name
                         :shape "AnalyticsIntentStageField" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or analytics-group-by-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-stage-group-by-key-value
                         :shape "AnalyticsGroupByValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-intent-stage-group-by-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-intent-stage-group-by-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-intent-stage-group-by-key
                    'make-analytics-intent-stage-group-by-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-group-by-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-group-by-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-group-by-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-intent-stage-group-by-keys ()
   '(trivial-types:proper-list analytics-intent-stage-group-by-key))
 (common-lisp:defun make-analytics-intent-stage-group-by-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-intent-stage-group-by-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype analytics-intent-stage-group-by-list ()
   '(trivial-types:proper-list analytics-intent-stage-group-by-specification))
 (common-lisp:defun make-analytics-intent-stage-group-by-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-intent-stage-group-by-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analytics-intent-stage-group-by-specification
                       common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or analytics-intent-stage-field
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-stage-group-by-specification-name
                         :shape "AnalyticsIntentStageField" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-intent-stage-group-by-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-intent-stage-group-by-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-intent-stage-group-by-specification
                    'make-analytics-intent-stage-group-by-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-group-by-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-group-by-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-group-by-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analytics-intent-stage-metric common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or analytics-intent-stage-metric-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-stage-metric-name :shape
                         "AnalyticsIntentStageMetricName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (statistic :initarg :statistic :initform
                         (common-lisp:error ":statistic is required") :type
                         (common-lisp:or analytics-metric-statistic
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-stage-metric-statistic
                         :shape "AnalyticsMetricStatistic" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (order :initarg :order :initform common-lisp:nil :type
                         (common-lisp:or analytics-sort-order common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-stage-metric-order
                         :shape "AnalyticsSortOrder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-intent-stage-metric
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-intent-stage-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-intent-stage-metric
                    'make-analytics-intent-stage-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-metric))
   common-lisp:nil))
(common-lisp:deftype analytics-intent-stage-metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analytics-intent-stage-metric-result common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or analytics-intent-stage-metric-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-stage-metric-result-name
                         :shape "AnalyticsIntentStageMetricName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (statistic :initarg :statistic :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-metric-statistic
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-stage-metric-result-statistic
                         :shape "AnalyticsMetricStatistic" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or analytics-metric-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-stage-metric-result-value
                         :shape "AnalyticsMetricValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-intent-stage-metric-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-intent-stage-metric-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-intent-stage-metric-result
                    'make-analytics-intent-stage-metric-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-metric-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-metric-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-metric-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-intent-stage-metric-results ()
   '(trivial-types:proper-list analytics-intent-stage-metric-result))
 (common-lisp:defun make-analytics-intent-stage-metric-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-intent-stage-metric-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype analytics-intent-stage-metrics ()
   '(trivial-types:proper-list analytics-intent-stage-metric))
 (common-lisp:defun make-analytics-intent-stage-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-intent-stage-metric))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analytics-intent-stage-result common-lisp:nil
                       ((bin-keys :initarg :bin-keys :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-bin-keys common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-stage-result-bin-keys
                         :shape "AnalyticsBinKeys" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-by-keys :initarg :group-by-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-intent-stage-group-by-keys
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-stage-result-group-by-keys
                         :shape "AnalyticsIntentStageGroupByKeys" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metrics-results :initarg :metrics-results :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-intent-stage-metric-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-intent-stage-result-metrics-results
                         :shape "AnalyticsIntentStageMetricResults" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-intent-stage-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-intent-stage-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-intent-stage-result
                    'make-analytics-intent-stage-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bin-keys))
      (common-lisp:list
       (common-lisp:cons "binKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-keys))
      (common-lisp:list
       (common-lisp:cons "groupByKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-results))
      (common-lisp:list
       (common-lisp:cons "metricsResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-intent-stage-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-intent-stage-results ()
   '(trivial-types:proper-list analytics-intent-stage-result))
 (common-lisp:defun make-analytics-intent-stage-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-intent-stage-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analytics-interval () 'common-lisp:string)
(common-lisp:deftype analytics-long-value () 'common-lisp:integer)
(common-lisp:deftype analytics-metric-statistic () 'common-lisp:string)
(common-lisp:deftype analytics-metric-value () 'common-lisp:double-float)
(common-lisp:deftype analytics-modality () 'common-lisp:string)
(common-lisp:deftype analytics-node-count () 'common-lisp:integer)
(common-lisp:deftype analytics-node-level () 'common-lisp:integer)
(common-lisp:deftype analytics-node-type () 'common-lisp:string)
(common-lisp:deftype analytics-originating-request-id () 'common-lisp:string)
(common-lisp:deftype analytics-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analytics-path-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or analytics-common-filter-name
                                         common-lisp:null)
                         :accessor struct-shape-analytics-path-filter-name
                         :shape "AnalyticsCommonFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or analytics-filter-operator
                                         common-lisp:null)
                         :accessor struct-shape-analytics-path-filter-operator
                         :shape "AnalyticsFilterOperator" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or analytics-filter-values
                                         common-lisp:null)
                         :accessor struct-shape-analytics-path-filter-values
                         :shape "AnalyticsFilterValues" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-path-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-path-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-path-filter 'make-analytics-path-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-path-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-path-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-path-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-path-filters ()
   '(trivial-types:proper-list analytics-path-filter))
 (common-lisp:defun make-analytics-path-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analytics-path-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analytics-session-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analytics-session-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or analytics-session-filter-name
                                         common-lisp:null)
                         :accessor struct-shape-analytics-session-filter-name
                         :shape "AnalyticsSessionFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or analytics-filter-operator
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-session-filter-operator :shape
                         "AnalyticsFilterOperator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or analytics-filter-values
                                         common-lisp:null)
                         :accessor struct-shape-analytics-session-filter-values
                         :shape "AnalyticsFilterValues" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-session-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-session-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-session-filter 'make-analytics-session-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-filter))
   common-lisp:nil))
(common-lisp:deftype analytics-session-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype analytics-session-filters ()
   '(trivial-types:proper-list analytics-session-filter))
 (common-lisp:defun make-analytics-session-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-session-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analytics-session-group-by-key common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or analytics-session-field
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-session-group-by-key-name
                         :shape "AnalyticsSessionField" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or analytics-group-by-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-session-group-by-key-value
                         :shape "AnalyticsGroupByValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-session-group-by-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-session-group-by-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-session-group-by-key
                    'make-analytics-session-group-by-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-group-by-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-group-by-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-group-by-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-session-group-by-keys ()
   '(trivial-types:proper-list analytics-session-group-by-key))
 (common-lisp:defun make-analytics-session-group-by-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-session-group-by-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype analytics-session-group-by-list ()
   '(trivial-types:proper-list analytics-session-group-by-specification))
 (common-lisp:defun make-analytics-session-group-by-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-session-group-by-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analytics-session-group-by-specification common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or analytics-session-field
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-session-group-by-specification-name
                         :shape "AnalyticsSessionField" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-session-group-by-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-session-group-by-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-session-group-by-specification
                    'make-analytics-session-group-by-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-group-by-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-group-by-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-group-by-specification))
   common-lisp:nil))
(common-lisp:deftype analytics-session-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analytics-session-metric common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or analytics-session-metric-name
                                         common-lisp:null)
                         :accessor struct-shape-analytics-session-metric-name
                         :shape "AnalyticsSessionMetricName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (statistic :initarg :statistic :initform
                         (common-lisp:error ":statistic is required") :type
                         (common-lisp:or analytics-metric-statistic
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-session-metric-statistic :shape
                         "AnalyticsMetricStatistic" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order :initarg :order :initform common-lisp:nil :type
                         (common-lisp:or analytics-sort-order common-lisp:null)
                         :accessor struct-shape-analytics-session-metric-order
                         :shape "AnalyticsSortOrder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-session-metric
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-session-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-session-metric 'make-analytics-session-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-metric))
   common-lisp:nil))
(common-lisp:deftype analytics-session-metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analytics-session-metric-result common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or analytics-session-metric-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-session-metric-result-name
                         :shape "AnalyticsSessionMetricName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (statistic :initarg :statistic :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-metric-statistic
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-session-metric-result-statistic
                         :shape "AnalyticsMetricStatistic" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or analytics-metric-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-session-metric-result-value
                         :shape "AnalyticsMetricValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-session-metric-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-session-metric-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-session-metric-result
                    'make-analytics-session-metric-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-metric-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-metric-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-metric-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-session-metric-results ()
   '(trivial-types:proper-list analytics-session-metric-result))
 (common-lisp:defun make-analytics-session-metric-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-session-metric-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype analytics-session-metrics ()
   '(trivial-types:proper-list analytics-session-metric))
 (common-lisp:defun make-analytics-session-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-session-metric))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analytics-session-result common-lisp:nil
                       ((bin-keys :initarg :bin-keys :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-bin-keys common-lisp:null)
                         :accessor
                         struct-shape-analytics-session-result-bin-keys :shape
                         "AnalyticsBinKeys" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-by-keys :initarg :group-by-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-session-group-by-keys
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-session-result-group-by-keys
                         :shape "AnalyticsSessionGroupByKeys" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metrics-results :initarg :metrics-results :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-session-metric-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-session-result-metrics-results
                         :shape "AnalyticsSessionMetricResults" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-session-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-session-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-session-result 'make-analytics-session-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bin-keys))
      (common-lisp:list
       (common-lisp:cons "binKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-keys))
      (common-lisp:list
       (common-lisp:cons "groupByKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-results))
      (common-lisp:list
       (common-lisp:cons "metricsResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-session-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-session-results ()
   '(trivial-types:proper-list analytics-session-result))
 (common-lisp:defun make-analytics-session-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-session-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analytics-session-sort-by-name () 'common-lisp:string)
(common-lisp:deftype analytics-sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analytics-utterance-attribute common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or analytics-utterance-attribute-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-utterance-attribute-name :shape
                         "AnalyticsUtteranceAttributeName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-utterance-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-utterance-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-utterance-attribute
                    'make-analytics-utterance-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-attribute))
   common-lisp:nil))
(common-lisp:deftype analytics-utterance-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analytics-utterance-attribute-result common-lisp:nil
                       ((last-used-intent :initarg :last-used-intent :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-analytics-utterance-attribute-result-last-used-intent
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-utterance-attribute-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-utterance-attribute-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-utterance-attribute-result
                    'make-analytics-utterance-attribute-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-attribute-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-attribute-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-used-intent))
      (common-lisp:list
       (common-lisp:cons "lastUsedIntent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-attribute-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-utterance-attribute-results ()
   '(trivial-types:proper-list analytics-utterance-attribute-result))
 (common-lisp:defun make-analytics-utterance-attribute-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-utterance-attribute-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype analytics-utterance-attributes ()
   '(trivial-types:proper-list analytics-utterance-attribute))
 (common-lisp:defun make-analytics-utterance-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-utterance-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analytics-utterance-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analytics-utterance-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or analytics-utterance-filter-name
                                         common-lisp:null)
                         :accessor struct-shape-analytics-utterance-filter-name
                         :shape "AnalyticsUtteranceFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or analytics-filter-operator
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-utterance-filter-operator
                         :shape "AnalyticsFilterOperator" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or analytics-filter-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-utterance-filter-values :shape
                         "AnalyticsFilterValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-utterance-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-utterance-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-utterance-filter
                    'make-analytics-utterance-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-filter))
   common-lisp:nil))
(common-lisp:deftype analytics-utterance-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype analytics-utterance-filters ()
   '(trivial-types:proper-list analytics-utterance-filter))
 (common-lisp:defun make-analytics-utterance-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-utterance-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analytics-utterance-group-by-key common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or analytics-utterance-field
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-utterance-group-by-key-name
                         :shape "AnalyticsUtteranceField" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or analytics-group-by-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-utterance-group-by-key-value
                         :shape "AnalyticsGroupByValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-utterance-group-by-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-utterance-group-by-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-utterance-group-by-key
                    'make-analytics-utterance-group-by-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-group-by-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-group-by-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-group-by-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-utterance-group-by-keys ()
   '(trivial-types:proper-list analytics-utterance-group-by-key))
 (common-lisp:defun make-analytics-utterance-group-by-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-utterance-group-by-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype analytics-utterance-group-by-list ()
   '(trivial-types:proper-list analytics-utterance-group-by-specification))
 (common-lisp:defun make-analytics-utterance-group-by-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-utterance-group-by-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analytics-utterance-group-by-specification
                       common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or analytics-utterance-field
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-utterance-group-by-specification-name
                         :shape "AnalyticsUtteranceField" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-utterance-group-by-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-utterance-group-by-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-utterance-group-by-specification
                    'make-analytics-utterance-group-by-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-group-by-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-group-by-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-group-by-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analytics-utterance-metric common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or analytics-utterance-metric-name
                                         common-lisp:null)
                         :accessor struct-shape-analytics-utterance-metric-name
                         :shape "AnalyticsUtteranceMetricName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (statistic :initarg :statistic :initform
                         (common-lisp:error ":statistic is required") :type
                         (common-lisp:or analytics-metric-statistic
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-utterance-metric-statistic
                         :shape "AnalyticsMetricStatistic" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (order :initarg :order :initform common-lisp:nil :type
                         (common-lisp:or analytics-sort-order common-lisp:null)
                         :accessor
                         struct-shape-analytics-utterance-metric-order :shape
                         "AnalyticsSortOrder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-utterance-metric
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-utterance-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-utterance-metric
                    'make-analytics-utterance-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-metric))
   common-lisp:nil))
(common-lisp:deftype analytics-utterance-metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analytics-utterance-metric-result common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or analytics-utterance-metric-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-utterance-metric-result-name
                         :shape "AnalyticsUtteranceMetricName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (statistic :initarg :statistic :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-metric-statistic
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-utterance-metric-result-statistic
                         :shape "AnalyticsMetricStatistic" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or analytics-metric-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-utterance-metric-result-value
                         :shape "AnalyticsMetricValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-utterance-metric-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-utterance-metric-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-utterance-metric-result
                    'make-analytics-utterance-metric-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-metric-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-metric-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-metric-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-utterance-metric-results ()
   '(trivial-types:proper-list analytics-utterance-metric-result))
 (common-lisp:defun make-analytics-utterance-metric-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-utterance-metric-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype analytics-utterance-metrics ()
   '(trivial-types:proper-list analytics-utterance-metric))
 (common-lisp:defun make-analytics-utterance-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-utterance-metric))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analytics-utterance-result common-lisp:nil
                       ((bin-keys :initarg :bin-keys :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-bin-keys common-lisp:null)
                         :accessor
                         struct-shape-analytics-utterance-result-bin-keys
                         :shape "AnalyticsBinKeys" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-by-keys :initarg :group-by-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-utterance-group-by-keys
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-utterance-result-group-by-keys
                         :shape "AnalyticsUtteranceGroupByKeys" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metrics-results :initarg :metrics-results :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-utterance-metric-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-utterance-result-metrics-results
                         :shape "AnalyticsUtteranceMetricResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attribute-results :initarg :attribute-results
                         :initform common-lisp:nil :type
                         (common-lisp:or analytics-utterance-attribute-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-utterance-result-attribute-results
                         :shape "AnalyticsUtteranceAttributeResults" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-utterance-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-utterance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-utterance-result
                    'make-analytics-utterance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bin-keys))
      (common-lisp:list
       (common-lisp:cons "binKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-keys))
      (common-lisp:list
       (common-lisp:cons "groupByKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-results))
      (common-lisp:list
       (common-lisp:cons "metricsResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-results))
      (common-lisp:list
       (common-lisp:cons "attributeResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-utterance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-utterance-results ()
   '(trivial-types:proper-list analytics-utterance-result))
 (common-lisp:defun make-analytics-utterance-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analytics-utterance-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analytics-utterance-sort-by-name () 'common-lisp:string)
(common-lisp:deftype answer-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associated-transcript common-lisp:nil
                       ((transcript :initarg :transcript :initform
                         common-lisp:nil :type
                         (common-lisp:or transcript common-lisp:null) :accessor
                         struct-shape-associated-transcript-transcript :shape
                         "Transcript" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associated-transcript
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associated-transcript
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associated-transcript 'make-associated-transcript))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associated-transcript))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associated-transcript))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associated-transcript))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associated-transcript-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or associated-transcript-filter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-associated-transcript-filter-name :shape
                         "AssociatedTranscriptFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor
                         struct-shape-associated-transcript-filter-values
                         :shape "FilterValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associated-transcript-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associated-transcript-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associated-transcript-filter
                    'make-associated-transcript-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associated-transcript-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associated-transcript-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associated-transcript-filter))
   common-lisp:nil))
(common-lisp:deftype associated-transcript-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype associated-transcript-filters ()
   '(trivial-types:proper-list associated-transcript-filter))
 (common-lisp:defun make-associated-transcript-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            associated-transcript-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype associated-transcript-list ()
   '(trivial-types:proper-list associated-transcript))
 (common-lisp:defun make-associated-transcript-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list associated-transcript))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attachment-title () 'common-lisp:string)
(common-lisp:deftype attachment-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-and-dtmfinput-specification common-lisp:nil
                       ((start-timeout-ms :initarg :start-timeout-ms :initform
                         (common-lisp:error ":starttimeoutms is required")
                         :type
                         (common-lisp:or time-in-milli-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-and-dtmfinput-specification-start-timeout-ms
                         :shape "TimeInMilliSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (audio-specification :initarg :audio-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or audio-specification common-lisp:null)
                         :accessor
                         struct-shape-audio-and-dtmfinput-specification-audio-specification
                         :shape "AudioSpecification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dtmf-specification :initarg :dtmf-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or dtmfspecification common-lisp:null)
                         :accessor
                         struct-shape-audio-and-dtmfinput-specification-dtmf-specification
                         :shape "DTMFSpecification" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-and-dtmfinput-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'audio-and-dtmfinput-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audio-and-dtmfinput-specification
                    'make-audio-and-dtmfinput-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-and-dtmfinput-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-and-dtmfinput-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timeout-ms))
      (common-lisp:list
       (common-lisp:cons "startTimeoutMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-specification))
      (common-lisp:list
       (common-lisp:cons "audioSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dtmf-specification))
      (common-lisp:list
       (common-lisp:cons "dtmfSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-and-dtmfinput-specification))
   common-lisp:nil))
(common-lisp:deftype audio-file-s3location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-log-destination common-lisp:nil
                       ((s3bucket :initarg :s3bucket :initform
                         (common-lisp:error ":s3bucket is required") :type
                         (common-lisp:or s3bucket-log-destination
                                         common-lisp:null)
                         :accessor struct-shape-audio-log-destination-s3bucket
                         :shape "S3BucketLogDestination" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-log-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-log-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audio-log-destination 'make-audio-log-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-log-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-log-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-log-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-log-setting common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-audio-log-setting-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or audio-log-destination
                                         common-lisp:null)
                         :accessor struct-shape-audio-log-setting-destination
                         :shape "AudioLogDestination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selective-logging-enabled :initarg
                         :selective-logging-enabled :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-audio-log-setting-selective-logging-enabled
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-log-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-log-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audio-log-setting 'make-audio-log-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-log-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-log-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selective-logging-enabled))
      (common-lisp:list
       (common-lisp:cons "selectiveLoggingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-log-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype audio-log-settings-list ()
   '(trivial-types:proper-list audio-log-setting))
 (common-lisp:defun make-audio-log-settings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audio-log-setting))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audio-recognition-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-specification common-lisp:nil
                       ((max-length-ms :initarg :max-length-ms :initform
                         (common-lisp:error ":maxlengthms is required") :type
                         (common-lisp:or time-in-milli-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-specification-max-length-ms :shape
                         "TimeInMilliSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-timeout-ms :initarg :end-timeout-ms :initform
                         (common-lisp:error ":endtimeoutms is required") :type
                         (common-lisp:or time-in-milli-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-audio-specification-end-timeout-ms :shape
                         "TimeInMilliSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audio-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audio-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'audio-specification 'make-audio-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-length-ms))
      (common-lisp:list
       (common-lisp:cons "maxLengthMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timeout-ms))
      (common-lisp:list
       (common-lisp:cons "endTimeoutMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-create-custom-vocabulary-item-request
                       common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-batch-create-custom-vocabulary-item-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-batch-create-custom-vocabulary-item-request-bot-version
                         :shape "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-batch-create-custom-vocabulary-item-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId")
                        (custom-vocabulary-item-list :initarg
                         :custom-vocabulary-item-list :initform
                         (common-lisp:error
                          ":customvocabularyitemlist is required")
                         :type
                         (common-lisp:or create-custom-vocabulary-items-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-create-custom-vocabulary-item-request-custom-vocabulary-item-list
                         :shape "CreateCustomVocabularyItemsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-create-custom-vocabulary-item-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-create-custom-vocabulary-item-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-create-custom-vocabulary-item-request
                    'make-batch-create-custom-vocabulary-item-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-custom-vocabulary-item-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-custom-vocabulary-item-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-vocabulary-item-list))
      (common-lisp:list
       (common-lisp:cons "customVocabularyItemList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-custom-vocabulary-item-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-create-custom-vocabulary-item-response
                       common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-batch-create-custom-vocabulary-item-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-batch-create-custom-vocabulary-item-response-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-batch-create-custom-vocabulary-item-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or failed-custom-vocabulary-items
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-create-custom-vocabulary-item-response-errors
                         :shape "FailedCustomVocabularyItems" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-vocabulary-items
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-create-custom-vocabulary-item-response-resources
                         :shape "CustomVocabularyItems" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-create-custom-vocabulary-item-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-create-custom-vocabulary-item-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-create-custom-vocabulary-item-response
                    'make-batch-create-custom-vocabulary-item-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-custom-vocabulary-item-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-custom-vocabulary-item-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-custom-vocabulary-item-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-custom-vocabulary-item-request
                       common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-batch-delete-custom-vocabulary-item-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-custom-vocabulary-item-request-bot-version
                         :shape "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-batch-delete-custom-vocabulary-item-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId")
                        (custom-vocabulary-item-list :initarg
                         :custom-vocabulary-item-list :initform
                         (common-lisp:error
                          ":customvocabularyitemlist is required")
                         :type
                         (common-lisp:or delete-custom-vocabulary-items-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-custom-vocabulary-item-request-custom-vocabulary-item-list
                         :shape "DeleteCustomVocabularyItemsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-custom-vocabulary-item-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-custom-vocabulary-item-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-custom-vocabulary-item-request
                    'make-batch-delete-custom-vocabulary-item-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-custom-vocabulary-item-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-custom-vocabulary-item-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-vocabulary-item-list))
      (common-lisp:list
       (common-lisp:cons "customVocabularyItemList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-custom-vocabulary-item-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-custom-vocabulary-item-response
                       common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-batch-delete-custom-vocabulary-item-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-custom-vocabulary-item-response-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-batch-delete-custom-vocabulary-item-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or failed-custom-vocabulary-items
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-custom-vocabulary-item-response-errors
                         :shape "FailedCustomVocabularyItems" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-vocabulary-items
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-custom-vocabulary-item-response-resources
                         :shape "CustomVocabularyItems" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-custom-vocabulary-item-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-custom-vocabulary-item-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-custom-vocabulary-item-response
                    'make-batch-delete-custom-vocabulary-item-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-custom-vocabulary-item-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-custom-vocabulary-item-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-custom-vocabulary-item-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-custom-vocabulary-item-request
                       common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-batch-update-custom-vocabulary-item-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-batch-update-custom-vocabulary-item-request-bot-version
                         :shape "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-batch-update-custom-vocabulary-item-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId")
                        (custom-vocabulary-item-list :initarg
                         :custom-vocabulary-item-list :initform
                         (common-lisp:error
                          ":customvocabularyitemlist is required")
                         :type
                         (common-lisp:or update-custom-vocabulary-items-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-update-custom-vocabulary-item-request-custom-vocabulary-item-list
                         :shape "UpdateCustomVocabularyItemsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-update-custom-vocabulary-item-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-custom-vocabulary-item-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-update-custom-vocabulary-item-request
                    'make-batch-update-custom-vocabulary-item-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-custom-vocabulary-item-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-custom-vocabulary-item-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-vocabulary-item-list))
      (common-lisp:list
       (common-lisp:cons "customVocabularyItemList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-custom-vocabulary-item-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-custom-vocabulary-item-response
                       common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-batch-update-custom-vocabulary-item-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-batch-update-custom-vocabulary-item-response-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-batch-update-custom-vocabulary-item-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or failed-custom-vocabulary-items
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-update-custom-vocabulary-item-response-errors
                         :shape "FailedCustomVocabularyItems" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-vocabulary-items
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-update-custom-vocabulary-item-response-resources
                         :shape "CustomVocabularyItems" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-update-custom-vocabulary-item-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-custom-vocabulary-item-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-update-custom-vocabulary-item-response
                    'make-batch-update-custom-vocabulary-item-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-custom-vocabulary-item-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-custom-vocabulary-item-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-custom-vocabulary-item-response))
   common-lisp:nil))
(common-lisp:deftype bedrock-knowledge-base-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bedrock-knowledge-store-configuration common-lisp:nil
                       ((bedrock-knowledge-base-arn :initarg
                         :bedrock-knowledge-base-arn :initform
                         (common-lisp:error
                          ":bedrockknowledgebasearn is required")
                         :type
                         (common-lisp:or bedrock-knowledge-base-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-bedrock-knowledge-store-configuration-bedrock-knowledge-base-arn
                         :shape "BedrockKnowledgeBaseArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bedrock-knowledge-store-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'bedrock-knowledge-store-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bedrock-knowledge-store-configuration
                    'make-bedrock-knowledge-store-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bedrock-knowledge-store-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bedrock-knowledge-store-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bedrock-knowledge-base-arn))
      (common-lisp:list
       (common-lisp:cons "bedrockKnowledgeBaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bedrock-knowledge-store-configuration))
   common-lisp:nil))
(common-lisp:deftype bedrock-model-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bedrock-model-specification common-lisp:nil
                       ((model-arn :initarg :model-arn :initform
                         (common-lisp:error ":modelarn is required") :type
                         (common-lisp:or bedrock-model-arn common-lisp:null)
                         :accessor
                         struct-shape-bedrock-model-specification-model-arn
                         :shape "BedrockModelArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bedrock-model-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bedrock-model-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bedrock-model-specification
                    'make-bedrock-model-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bedrock-model-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bedrock-model-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "modelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bedrock-model-specification))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass bot-alias-history-event common-lisp:nil
                       ((bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-bot-alias-history-event-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-date :initarg :start-date :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-bot-alias-history-event-start-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-date :initarg :end-date :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-bot-alias-history-event-end-date :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-alias-history-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-alias-history-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-alias-history-event 'make-bot-alias-history-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-history-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-history-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "startDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "endDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-history-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-alias-history-events-list ()
   '(trivial-types:proper-list bot-alias-history-event))
 (common-lisp:defun make-bot-alias-history-events-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-alias-history-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bot-alias-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-alias-locale-settings common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-bot-alias-locale-settings-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (code-hook-specification :initarg
                         :code-hook-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or code-hook-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-bot-alias-locale-settings-code-hook-specification
                         :shape "CodeHookSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-alias-locale-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-alias-locale-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-alias-locale-settings
                    'make-bot-alias-locale-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-locale-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-locale-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-hook-specification))
      (common-lisp:list
       (common-lisp:cons "codeHookSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-locale-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-alias-locale-settings-map () 'common-lisp:hash-table)
 (common-lisp:defun make-bot-alias-locale-settings-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype bot-alias-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-alias-replica-summary common-lisp:nil
                       ((bot-alias-id :initarg :bot-alias-id :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor
                         struct-shape-bot-alias-replica-summary-bot-alias-id
                         :shape "BotAliasId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-alias-replication-status :initarg
                         :bot-alias-replication-status :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-alias-replication-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-bot-alias-replica-summary-bot-alias-replication-status
                         :shape "BotAliasReplicationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-bot-alias-replica-summary-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-bot-alias-replica-summary-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-bot-alias-replica-summary-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-bot-alias-replica-summary-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-alias-replica-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-alias-replica-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-alias-replica-summary
                    'make-bot-alias-replica-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-replica-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-replica-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-alias-replication-status))
      (common-lisp:list
       (common-lisp:cons "botAliasReplicationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-replica-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-alias-replica-summary-list ()
   '(trivial-types:proper-list bot-alias-replica-summary))
 (common-lisp:defun make-bot-alias-replica-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            bot-alias-replica-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bot-alias-replication-status () 'common-lisp:string)
(common-lisp:deftype bot-alias-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-alias-summary common-lisp:nil
                       ((bot-alias-id :initarg :bot-alias-id :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor struct-shape-bot-alias-summary-bot-alias-id
                         :shape "BotAliasId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-alias-name :initarg :bot-alias-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-bot-alias-summary-bot-alias-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-bot-alias-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor struct-shape-bot-alias-summary-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-alias-status :initarg :bot-alias-status :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-alias-status common-lisp:null)
                         :accessor
                         struct-shape-bot-alias-summary-bot-alias-status :shape
                         "BotAliasStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-bot-alias-summary-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-bot-alias-summary-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-alias-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-alias-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-alias-summary 'make-bot-alias-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-alias-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-alias-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-name))
      (common-lisp:list
       (common-lisp:cons "botAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-status))
      (common-lisp:list
       (common-lisp:cons "botAliasStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-alias-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-alias-summary-list ()
   '(trivial-types:proper-list bot-alias-summary))
 (common-lisp:defun make-bot-alias-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-alias-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass bot-alias-test-execution-target common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-bot-alias-test-execution-target-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-alias-id :initarg :bot-alias-id :initform
                         (common-lisp:error ":botaliasid is required") :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor
                         struct-shape-bot-alias-test-execution-target-bot-alias-id
                         :shape "BotAliasId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-bot-alias-test-execution-target-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-alias-test-execution-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'bot-alias-test-execution-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-alias-test-execution-target
                    'make-bot-alias-test-execution-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-test-execution-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-test-execution-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-alias-test-execution-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bot-export-specification common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-bot-export-specification-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-bot-export-specification-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-export-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-export-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-export-specification 'make-bot-export-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-export-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-export-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-export-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bot-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or bot-filter-name common-lisp:null)
                         :accessor struct-shape-bot-filter-name :shape
                         "BotFilterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor struct-shape-bot-filter-values :shape
                         "FilterValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or bot-filter-operator common-lisp:null)
                         :accessor struct-shape-bot-filter-operator :shape
                         "BotFilterOperator" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bot-filter 'make-bot-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-filter))
   common-lisp:nil))
(common-lisp:deftype bot-filter-name () 'common-lisp:string)
(common-lisp:deftype bot-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype bot-filters () '(trivial-types:proper-list bot-filter))
 (common-lisp:defun make-bot-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass bot-import-specification common-lisp:nil
                       ((bot-name :initarg :bot-name :initform
                         (common-lisp:error ":botname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-bot-import-specification-bot-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-bot-import-specification-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-privacy :initarg :data-privacy :initform
                         (common-lisp:error ":dataprivacy is required") :type
                         (common-lisp:or data-privacy common-lisp:null)
                         :accessor
                         struct-shape-bot-import-specification-data-privacy
                         :shape "DataPrivacy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :idle-session-ttlin-seconds :initform common-lisp:nil
                         :type (common-lisp:or session-ttl common-lisp:null)
                         :accessor
                         struct-shape-bot-import-specification-idle-session-ttlin-seconds
                         :shape "SessionTTL" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-tags :initarg :bot-tags :initform common-lisp:nil
                         :type (common-lisp:or tag-map common-lisp:null)
                         :accessor
                         struct-shape-bot-import-specification-bot-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (test-bot-alias-tags :initarg :test-bot-alias-tags
                         :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-bot-import-specification-test-bot-alias-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-import-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-import-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-import-specification 'make-bot-import-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-import-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-import-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-privacy))
      (common-lisp:list
       (common-lisp:cons "dataPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-tags))
      (common-lisp:list
       (common-lisp:cons "botTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-bot-alias-tags))
      (common-lisp:list
       (common-lisp:cons "testBotAliasTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-import-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bot-locale-export-specification common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-bot-locale-export-specification-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-bot-locale-export-specification-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-bot-locale-export-specification-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-locale-export-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'bot-locale-export-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-locale-export-specification
                    'make-bot-locale-export-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-export-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-export-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-export-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bot-locale-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or bot-locale-filter-name
                                         common-lisp:null)
                         :accessor struct-shape-bot-locale-filter-name :shape
                         "BotLocaleFilterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor struct-shape-bot-locale-filter-values :shape
                         "FilterValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or bot-locale-filter-operator
                                         common-lisp:null)
                         :accessor struct-shape-bot-locale-filter-operator
                         :shape "BotLocaleFilterOperator" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-locale-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-locale-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-locale-filter 'make-bot-locale-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-locale-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-locale-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-locale-filter))
   common-lisp:nil))
(common-lisp:deftype bot-locale-filter-name () 'common-lisp:string)
(common-lisp:deftype bot-locale-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype bot-locale-filters ()
   '(trivial-types:proper-list bot-locale-filter))
 (common-lisp:defun make-bot-locale-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-locale-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass bot-locale-history-event common-lisp:nil
                       ((event :initarg :event :initform
                         (common-lisp:error ":event is required") :type
                         (common-lisp:or bot-locale-history-event-description
                                         common-lisp:null)
                         :accessor struct-shape-bot-locale-history-event-event
                         :shape "BotLocaleHistoryEventDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (event-date :initarg :event-date :initform
                         (common-lisp:error ":eventdate is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-bot-locale-history-event-event-date
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-locale-history-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-locale-history-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-locale-history-event 'make-bot-locale-history-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-history-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-history-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-date))
      (common-lisp:list
       (common-lisp:cons "eventDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-history-event))
   common-lisp:nil))
(common-lisp:deftype bot-locale-history-event-description ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype bot-locale-history-events-list ()
   '(trivial-types:proper-list bot-locale-history-event))
 (common-lisp:defun make-bot-locale-history-events-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            bot-locale-history-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass bot-locale-import-specification common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-bot-locale-import-specification-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-bot-locale-import-specification-bot-version
                         :shape "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-bot-locale-import-specification-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nlu-intent-confidence-threshold :initarg
                         :nlu-intent-confidence-threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or confidence-threshold common-lisp:null)
                         :accessor
                         struct-shape-bot-locale-import-specification-nlu-intent-confidence-threshold
                         :shape "ConfidenceThreshold" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (voice-settings :initarg :voice-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or voice-settings common-lisp:null)
                         :accessor
                         struct-shape-bot-locale-import-specification-voice-settings
                         :shape "VoiceSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-locale-import-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'bot-locale-import-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-locale-import-specification
                    'make-bot-locale-import-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-import-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-import-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence-threshold))
      (common-lisp:list
       (common-lisp:cons "nluIntentConfidenceThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-settings))
      (common-lisp:list
       (common-lisp:cons "voiceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-locale-import-specification))
   common-lisp:nil))
(common-lisp:deftype bot-locale-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-locale-sort-by common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or bot-locale-sort-attribute
                                         common-lisp:null)
                         :accessor struct-shape-bot-locale-sort-by-attribute
                         :shape "BotLocaleSortAttribute" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-bot-locale-sort-by-order :shape
                         "SortOrder" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-locale-sort-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-locale-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-locale-sort-by 'make-bot-locale-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-locale-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-locale-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-locale-sort-by))
   common-lisp:nil))
(common-lisp:deftype bot-locale-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-locale-summary common-lisp:nil
                       ((locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-bot-locale-summary-locale-id :shape
                         "LocaleId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (locale-name :initarg :locale-name :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-name common-lisp:null)
                         :accessor struct-shape-bot-locale-summary-locale-name
                         :shape "LocaleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-bot-locale-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-locale-status :initarg :bot-locale-status
                         :initform common-lisp:nil :type
                         (common-lisp:or bot-locale-status common-lisp:null)
                         :accessor
                         struct-shape-bot-locale-summary-bot-locale-status
                         :shape "BotLocaleStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-bot-locale-summary-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-build-submitted-date-time :initarg
                         :last-build-submitted-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-bot-locale-summary-last-build-submitted-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-locale-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-locale-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-locale-summary 'make-bot-locale-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-locale-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-locale-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-name))
      (common-lisp:list
       (common-lisp:cons "localeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-locale-status))
      (common-lisp:list
       (common-lisp:cons "botLocaleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-build-submitted-date-time))
      (common-lisp:list
       (common-lisp:cons "lastBuildSubmittedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-locale-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-locale-summary-list ()
   '(trivial-types:proper-list bot-locale-summary))
 (common-lisp:defun make-bot-locale-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-locale-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass bot-member common-lisp:nil
                       ((bot-member-id :initarg :bot-member-id :initform
                         (common-lisp:error ":botmemberid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-bot-member-bot-member-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-member-name :initarg :bot-member-name :initform
                         (common-lisp:error ":botmembername is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-bot-member-bot-member-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-member-alias-id :initarg :bot-member-alias-id
                         :initform
                         (common-lisp:error ":botmemberaliasid is required")
                         :type (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor struct-shape-bot-member-bot-member-alias-id
                         :shape "BotAliasId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-member-alias-name :initarg :bot-member-alias-name
                         :initform
                         (common-lisp:error ":botmemberaliasname is required")
                         :type (common-lisp:or bot-alias-name common-lisp:null)
                         :accessor
                         struct-shape-bot-member-bot-member-alias-name :shape
                         "BotAliasName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-member-version :initarg :bot-member-version
                         :initform
                         (common-lisp:error ":botmemberversion is required")
                         :type (common-lisp:or bot-version common-lisp:null)
                         :accessor struct-shape-bot-member-bot-member-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-member
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-member
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bot-member 'make-bot-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-member-id))
      (common-lisp:list
       (common-lisp:cons "botMemberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-member-name))
      (common-lisp:list
       (common-lisp:cons "botMemberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-member-alias-id))
      (common-lisp:list
       (common-lisp:cons "botMemberAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-member-alias-name))
      (common-lisp:list
       (common-lisp:cons "botMemberAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-member-version))
      (common-lisp:list
       (common-lisp:cons "botMemberVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-members () '(trivial-types:proper-list bot-member))
 (common-lisp:defun make-bot-members
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass bot-recommendation-result-statistics common-lisp:nil
                       ((intents :initarg :intents :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-statistics common-lisp:null)
                         :accessor
                         struct-shape-bot-recommendation-result-statistics-intents
                         :shape "IntentStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slot-types :initarg :slot-types :initform
                         common-lisp:nil :type
                         (common-lisp:or slot-type-statistics common-lisp:null)
                         :accessor
                         struct-shape-bot-recommendation-result-statistics-slot-types
                         :shape "SlotTypeStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-recommendation-result-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'bot-recommendation-result-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-recommendation-result-statistics
                    'make-bot-recommendation-result-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-result-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-result-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intents))
      (common-lisp:list
       (common-lisp:cons "intents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-types))
      (common-lisp:list
       (common-lisp:cons "slotTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-result-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bot-recommendation-results common-lisp:nil
                       ((bot-locale-export-url :initarg :bot-locale-export-url
                         :initform common-lisp:nil :type
                         (common-lisp:or presigned-s3url common-lisp:null)
                         :accessor
                         struct-shape-bot-recommendation-results-bot-locale-export-url
                         :shape "PresignedS3Url" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (associated-transcripts-url :initarg
                         :associated-transcripts-url :initform common-lisp:nil
                         :type
                         (common-lisp:or presigned-s3url common-lisp:null)
                         :accessor
                         struct-shape-bot-recommendation-results-associated-transcripts-url
                         :shape "PresignedS3Url" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-recommendation-result-statistics
                                         common-lisp:null)
                         :accessor
                         struct-shape-bot-recommendation-results-statistics
                         :shape "BotRecommendationResultStatistics" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-recommendation-results
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-recommendation-results
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-recommendation-results
                    'make-bot-recommendation-results))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-results))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-results))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-locale-export-url))
      (common-lisp:list
       (common-lisp:cons "botLocaleExportUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-transcripts-url))
      (common-lisp:list
       (common-lisp:cons "associatedTranscriptsUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-results))
   common-lisp:nil))
(common-lisp:deftype bot-recommendation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-recommendation-summary common-lisp:nil
                       ((bot-recommendation-status :initarg
                         :bot-recommendation-status :initform
                         (common-lisp:error
                          ":botrecommendationstatus is required")
                         :type
                         (common-lisp:or bot-recommendation-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-bot-recommendation-summary-bot-recommendation-status
                         :shape "BotRecommendationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bot-recommendation-id :initarg :bot-recommendation-id
                         :initform
                         (common-lisp:error ":botrecommendationid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-bot-recommendation-summary-bot-recommendation-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-bot-recommendation-summary-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-bot-recommendation-summary-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-recommendation-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-recommendation-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-recommendation-summary
                    'make-bot-recommendation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-status))
      (common-lisp:list
       (common-lisp:cons "botRecommendationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-id))
      (common-lisp:list
       (common-lisp:cons "botRecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-recommendation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-recommendation-summary-list ()
   '(trivial-types:proper-list bot-recommendation-summary))
 (common-lisp:defun make-bot-recommendation-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            bot-recommendation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bot-replica-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-replica-summary common-lisp:nil
                       ((replica-region :initarg :replica-region :initform
                         common-lisp:nil :type
                         (common-lisp:or replica-region common-lisp:null)
                         :accessor
                         struct-shape-bot-replica-summary-replica-region :shape
                         "ReplicaRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-bot-replica-summary-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-replica-status :initarg :bot-replica-status
                         :initform common-lisp:nil :type
                         (common-lisp:or bot-replica-status common-lisp:null)
                         :accessor
                         struct-shape-bot-replica-summary-bot-replica-status
                         :shape "BotReplicaStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-bot-replica-summary-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-replica-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-replica-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-replica-summary 'make-bot-replica-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-replica-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-replica-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-region))
      (common-lisp:list
       (common-lisp:cons "replicaRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-replica-status))
      (common-lisp:list
       (common-lisp:cons "botReplicaStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-replica-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-replica-summary-list ()
   '(trivial-types:proper-list bot-replica-summary))
 (common-lisp:defun make-bot-replica-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-replica-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bot-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-sort-by common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or bot-sort-attribute common-lisp:null)
                         :accessor struct-shape-bot-sort-by-attribute :shape
                         "BotSortAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-bot-sort-by-order :shape "SortOrder"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-sort-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bot-sort-by 'make-bot-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-sort-by))
   common-lisp:nil))
(common-lisp:deftype bot-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-summary common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-bot-summary-bot-id :shape "Id" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bot-name :initarg :bot-name :initform common-lisp:nil
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-bot-summary-bot-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-bot-summary-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-status :initarg :bot-status :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         struct-shape-bot-summary-bot-status :shape "BotStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (latest-bot-version :initarg :latest-bot-version
                         :initform common-lisp:nil :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor struct-shape-bot-summary-latest-bot-version
                         :shape "NumericalBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-bot-summary-last-updated-date-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-type :initarg :bot-type :initform common-lisp:nil
                         :type (common-lisp:or bot-type common-lisp:null)
                         :accessor struct-shape-bot-summary-bot-type :shape
                         "BotType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bot-summary 'make-bot-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-bot-version))
      (common-lisp:list
       (common-lisp:cons "latestBotVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-type))
      (common-lisp:list
       (common-lisp:cons "botType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-summary-list ()
   '(trivial-types:proper-list bot-summary))
 (common-lisp:defun make-bot-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bot-type () 'common-lisp:string)
(common-lisp:deftype bot-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-version-locale-details common-lisp:nil
                       ((source-bot-version :initarg :source-bot-version
                         :initform
                         (common-lisp:error ":sourcebotversion is required")
                         :type (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-bot-version-locale-details-source-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-version-locale-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-version-locale-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-version-locale-details
                    'make-bot-version-locale-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-version-locale-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-version-locale-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-bot-version))
      (common-lisp:list
       (common-lisp:cons "sourceBotVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-version-locale-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-version-locale-specification ()
   'common-lisp:hash-table)
 (common-lisp:defun make-bot-version-locale-specification
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype bot-version-replica-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-version-replica-sort-by common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or bot-version-replica-sort-attribute
                                         common-lisp:null)
                         :accessor
                         struct-shape-bot-version-replica-sort-by-attribute
                         :shape "BotVersionReplicaSortAttribute" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-bot-version-replica-sort-by-order :shape
                         "SortOrder" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-version-replica-sort-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-version-replica-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-version-replica-sort-by
                    'make-bot-version-replica-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-version-replica-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-version-replica-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-version-replica-sort-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bot-version-replica-summary common-lisp:nil
                       ((bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-bot-version-replica-summary-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-version-replication-status :initarg
                         :bot-version-replication-status :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version-replication-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-bot-version-replica-summary-bot-version-replication-status
                         :shape "BotVersionReplicationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-bot-version-replica-summary-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-bot-version-replica-summary-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-version-replica-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-version-replica-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-version-replica-summary
                    'make-bot-version-replica-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-version-replica-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-version-replica-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-version-replication-status))
      (common-lisp:list
       (common-lisp:cons "botVersionReplicationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-version-replica-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-version-replica-summary-list ()
   '(trivial-types:proper-list bot-version-replica-summary))
 (common-lisp:defun make-bot-version-replica-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            bot-version-replica-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bot-version-replication-status () 'common-lisp:string)
(common-lisp:deftype bot-version-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-version-sort-by common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or bot-version-sort-attribute
                                         common-lisp:null)
                         :accessor struct-shape-bot-version-sort-by-attribute
                         :shape "BotVersionSortAttribute" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-bot-version-sort-by-order :shape
                         "SortOrder" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-version-sort-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-version-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-version-sort-by 'make-bot-version-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-version-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-version-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-version-sort-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bot-version-summary common-lisp:nil
                       ((bot-name :initarg :bot-name :initform common-lisp:nil
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-bot-version-summary-bot-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor struct-shape-bot-version-summary-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-bot-version-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-status :initarg :bot-status :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         struct-shape-bot-version-summary-bot-status :shape
                         "BotStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-bot-version-summary-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bot-version-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bot-version-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bot-version-summary 'make-bot-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-version-summary-list ()
   '(trivial-types:proper-list bot-version-summary))
 (common-lisp:defun make-bot-version-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass build-bot-locale-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-build-bot-locale-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-build-bot-locale-request-bot-version
                         :shape "DraftBotVersion" :location "uri"
                         :location-name "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-build-bot-locale-request-locale-id :shape
                         "LocaleId" :location "uri" :location-name "localeId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-build-bot-locale-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'build-bot-locale-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'build-bot-locale-request 'make-build-bot-locale-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          build-bot-locale-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          build-bot-locale-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          build-bot-locale-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass build-bot-locale-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-build-bot-locale-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-build-bot-locale-response-bot-version
                         :shape "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-build-bot-locale-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-locale-status :initarg :bot-locale-status
                         :initform common-lisp:nil :type
                         (common-lisp:or bot-locale-status common-lisp:null)
                         :accessor
                         struct-shape-build-bot-locale-response-bot-locale-status
                         :shape "BotLocaleStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-build-submitted-date-time :initarg
                         :last-build-submitted-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-build-bot-locale-response-last-build-submitted-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-build-bot-locale-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'build-bot-locale-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'build-bot-locale-response
                    'make-build-bot-locale-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          build-bot-locale-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          build-bot-locale-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-locale-status))
      (common-lisp:list
       (common-lisp:cons "botLocaleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-build-submitted-date-time))
      (common-lisp:list
       (common-lisp:cons "lastBuildSubmittedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          build-bot-locale-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass buildtime-settings common-lisp:nil
                       ((descriptive-bot-builder :initarg
                         :descriptive-bot-builder :initform common-lisp:nil
                         :type
                         (common-lisp:or descriptive-bot-builder-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-buildtime-settings-descriptive-bot-builder
                         :shape "DescriptiveBotBuilderSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sample-utterance-generation :initarg
                         :sample-utterance-generation :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          sample-utterance-generation-specification
                          common-lisp:null)
                         :accessor
                         struct-shape-buildtime-settings-sample-utterance-generation
                         :shape "SampleUtteranceGenerationSpecification"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-buildtime-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'buildtime-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'buildtime-settings 'make-buildtime-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input buildtime-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input buildtime-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'descriptive-bot-builder))
      (common-lisp:list
       (common-lisp:cons "descriptiveBotBuilder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sample-utterance-generation))
      (common-lisp:list
       (common-lisp:cons "sampleUtteranceGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input buildtime-settings))
   common-lisp:nil))
(common-lisp:deftype built-in-intent-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass built-in-intent-sort-by common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or built-in-intent-sort-attribute
                                         common-lisp:null)
                         :accessor
                         struct-shape-built-in-intent-sort-by-attribute :shape
                         "BuiltInIntentSortAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-built-in-intent-sort-by-order :shape
                         "SortOrder" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-built-in-intent-sort-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'built-in-intent-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'built-in-intent-sort-by 'make-built-in-intent-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          built-in-intent-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          built-in-intent-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          built-in-intent-sort-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass built-in-intent-summary common-lisp:nil
                       ((intent-signature :initarg :intent-signature :initform
                         common-lisp:nil :type
                         (common-lisp:or intent-signature common-lisp:null)
                         :accessor
                         struct-shape-built-in-intent-summary-intent-signature
                         :shape "IntentSignature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-built-in-intent-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-built-in-intent-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'built-in-intent-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'built-in-intent-summary 'make-built-in-intent-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          built-in-intent-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          built-in-intent-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-signature))
      (common-lisp:list
       (common-lisp:cons "intentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          built-in-intent-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype built-in-intent-summary-list ()
   '(trivial-types:proper-list built-in-intent-summary))
 (common-lisp:defun make-built-in-intent-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list built-in-intent-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype built-in-or-custom-slot-type-id () 'common-lisp:string)
(common-lisp:deftype built-in-slot-type-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass built-in-slot-type-sort-by common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or built-in-slot-type-sort-attribute
                                         common-lisp:null)
                         :accessor
                         struct-shape-built-in-slot-type-sort-by-attribute
                         :shape "BuiltInSlotTypeSortAttribute" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-built-in-slot-type-sort-by-order :shape
                         "SortOrder" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-built-in-slot-type-sort-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'built-in-slot-type-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'built-in-slot-type-sort-by
                    'make-built-in-slot-type-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          built-in-slot-type-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          built-in-slot-type-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          built-in-slot-type-sort-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass built-in-slot-type-summary common-lisp:nil
                       ((slot-type-signature :initarg :slot-type-signature
                         :initform common-lisp:nil :type
                         (common-lisp:or slot-type-signature common-lisp:null)
                         :accessor
                         struct-shape-built-in-slot-type-summary-slot-type-signature
                         :shape "SlotTypeSignature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-built-in-slot-type-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-built-in-slot-type-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'built-in-slot-type-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'built-in-slot-type-summary
                    'make-built-in-slot-type-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          built-in-slot-type-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          built-in-slot-type-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "slotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          built-in-slot-type-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype built-in-slot-type-summary-list ()
   '(trivial-types:proper-list built-in-slot-type-summary))
 (common-lisp:defun make-built-in-slot-type-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            built-in-slot-type-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype built-ins-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass button common-lisp:nil
                       ((text :initarg :text :initform
                         (common-lisp:error ":text is required") :type
                         (common-lisp:or button-text common-lisp:null)
                         :accessor struct-shape-button-text :shape "ButtonText"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or button-value common-lisp:null)
                         :accessor struct-shape-button-value :shape
                         "ButtonValue" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-button
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'button
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'button 'make-button))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input button))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input button))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input button))
   common-lisp:nil))
(common-lisp:deftype button-text () 'common-lisp:string)
(common-lisp:deftype button-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype buttons-list () '(trivial-types:proper-list button))
 (common-lisp:defun make-buttons-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list button))
   aws-sdk/generator/shape::members))
(common-lisp:deftype child-directed () 'common-lisp:boolean)
(common-lisp:deftype cloud-watch-log-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-watch-log-group-log-destination common-lisp:nil
                       ((cloud-watch-log-group-arn :initarg
                         :cloud-watch-log-group-arn :initform
                         (common-lisp:error
                          ":cloudwatchloggrouparn is required")
                         :type
                         (common-lisp:or cloud-watch-log-group-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-log-group-log-destination-cloud-watch-log-group-arn
                         :shape "CloudWatchLogGroupArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (log-prefix :initarg :log-prefix :initform
                         (common-lisp:error ":logprefix is required") :type
                         (common-lisp:or log-prefix common-lisp:null) :accessor
                         struct-shape-cloud-watch-log-group-log-destination-log-prefix
                         :shape "LogPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-watch-log-group-log-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloud-watch-log-group-log-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-log-group-log-destination
                    'make-cloud-watch-log-group-log-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-log-group-log-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-log-group-log-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-log-group-arn))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-prefix))
      (common-lisp:list
       (common-lisp:cons "logPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-log-group-log-destination))
   common-lisp:nil))
(common-lisp:deftype code-hook-interface-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass code-hook-specification common-lisp:nil
                       ((lambda-code-hook :initarg :lambda-code-hook :initform
                         (common-lisp:error ":lambdacodehook is required")
                         :type
                         (common-lisp:or lambda-code-hook common-lisp:null)
                         :accessor
                         struct-shape-code-hook-specification-lambda-code-hook
                         :shape "LambdaCodeHook" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-hook-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code-hook-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'code-hook-specification 'make-code-hook-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-hook-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-hook-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-code-hook))
      (common-lisp:list
       (common-lisp:cons "lambdaCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-hook-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass composite-slot-type-setting common-lisp:nil
                       ((sub-slots :initarg :sub-slots :initform
                         common-lisp:nil :type
                         (common-lisp:or sub-slot-type-list common-lisp:null)
                         :accessor
                         struct-shape-composite-slot-type-setting-sub-slots
                         :shape "SubSlotTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-composite-slot-type-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'composite-slot-type-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'composite-slot-type-setting
                    'make-composite-slot-type-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          composite-slot-type-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          composite-slot-type-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slots))
      (common-lisp:list
       (common-lisp:cons "subSlots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          composite-slot-type-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass condition common-lisp:nil
                       ((expression-string :initarg :expression-string
                         :initform
                         (common-lisp:error ":expressionstring is required")
                         :type
                         (common-lisp:or condition-expression common-lisp:null)
                         :accessor struct-shape-condition-expression-string
                         :shape "ConditionExpression" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-condition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'condition
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'condition 'make-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression-string))
      (common-lisp:list
       (common-lisp:cons "expressionString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input condition))
   common-lisp:nil))
(common-lisp:deftype condition-expression () 'common-lisp:string)
(common-lisp:deftype condition-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype condition-key-value-map () 'common-lisp:hash-table)
 (common-lisp:defun make-condition-key-value-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype condition-map () 'common-lisp:hash-table)
 (common-lisp:defun make-condition-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype condition-operator () 'common-lisp:string)
(common-lisp:deftype condition-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass conditional-branch common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-conditional-branch-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (condition :initarg :condition :initform
                         (common-lisp:error ":condition is required") :type
                         (common-lisp:or condition common-lisp:null) :accessor
                         struct-shape-conditional-branch-condition :shape
                         "Condition" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-step :initarg :next-step :initform
                         (common-lisp:error ":nextstep is required") :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor struct-shape-conditional-branch-next-step
                         :shape "DialogState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response :initarg :response :initform common-lisp:nil
                         :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor struct-shape-conditional-branch-response
                         :shape "ResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conditional-branch
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'conditional-branch
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conditional-branch 'make-conditional-branch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input conditional-branch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input conditional-branch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-step))
      (common-lisp:list
       (common-lisp:cons "nextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response))
      (common-lisp:list
       (common-lisp:cons "response"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input conditional-branch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conditional-branches ()
   '(trivial-types:proper-list conditional-branch))
 (common-lisp:defun make-conditional-branches
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list conditional-branch))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass conditional-specification common-lisp:nil
                       ((active :initarg :active :initform
                         (common-lisp:error ":active is required") :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-conditional-specification-active :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conditional-branches :initarg :conditional-branches
                         :initform
                         (common-lisp:error ":conditionalbranches is required")
                         :type
                         (common-lisp:or conditional-branches common-lisp:null)
                         :accessor
                         struct-shape-conditional-specification-conditional-branches
                         :shape "ConditionalBranches" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-branch :initarg :default-branch :initform
                         (common-lisp:error ":defaultbranch is required") :type
                         (common-lisp:or default-conditional-branch
                                         common-lisp:null)
                         :accessor
                         struct-shape-conditional-specification-default-branch
                         :shape "DefaultConditionalBranch" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conditional-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'conditional-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conditional-specification
                    'make-conditional-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conditional-branches))
      (common-lisp:list
       (common-lisp:cons "conditionalBranches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-branch))
      (common-lisp:list
       (common-lisp:cons "defaultBranch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-specification))
   common-lisp:nil))
(common-lisp:deftype confidence-threshold () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (models.lex.v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype context-time-to-live-in-seconds () 'common-lisp:integer)
(common-lisp:deftype context-turns-to-live () 'common-lisp:integer)
(common-lisp:deftype conversation-end-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass conversation-level-intent-classification-result-item
                       common-lisp:nil
                       ((intent-name :initarg :intent-name :initform
                         (common-lisp:error ":intentname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-conversation-level-intent-classification-result-item-intent-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (match-result :initarg :match-result :initform
                         (common-lisp:error ":matchresult is required") :type
                         (common-lisp:or test-result-match-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-conversation-level-intent-classification-result-item-match-result
                         :shape "TestResultMatchStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conversation-level-intent-classification-result-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'conversation-level-intent-classification-result-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conversation-level-intent-classification-result-item
                    'make-conversation-level-intent-classification-result-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-intent-classification-result-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-intent-classification-result-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-result))
      (common-lisp:list
       (common-lisp:cons "matchResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-intent-classification-result-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conversation-level-intent-classification-results ()
   '(trivial-types:proper-list
     conversation-level-intent-classification-result-item))
 (common-lisp:defun make-conversation-level-intent-classification-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            conversation-level-intent-classification-result-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass conversation-level-result-detail common-lisp:nil
                       ((end-to-end-result :initarg :end-to-end-result
                         :initform
                         (common-lisp:error ":endtoendresult is required")
                         :type
                         (common-lisp:or test-result-match-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-conversation-level-result-detail-end-to-end-result
                         :shape "TestResultMatchStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (speech-transcription-result :initarg
                         :speech-transcription-result :initform common-lisp:nil
                         :type
                         (common-lisp:or test-result-match-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-conversation-level-result-detail-speech-transcription-result
                         :shape "TestResultMatchStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conversation-level-result-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'conversation-level-result-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conversation-level-result-detail
                    'make-conversation-level-result-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-result-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-result-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-to-end-result))
      (common-lisp:list
       (common-lisp:cons "endToEndResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'speech-transcription-result))
      (common-lisp:list
       (common-lisp:cons "speechTranscriptionResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-result-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass conversation-level-slot-resolution-result-item
                       common-lisp:nil
                       ((intent-name :initarg :intent-name :initform
                         (common-lisp:error ":intentname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-conversation-level-slot-resolution-result-item-intent-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-name :initarg :slot-name :initform
                         (common-lisp:error ":slotname is required") :type
                         (common-lisp:or test-result-slot-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-conversation-level-slot-resolution-result-item-slot-name
                         :shape "TestResultSlotName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (match-result :initarg :match-result :initform
                         (common-lisp:error ":matchresult is required") :type
                         (common-lisp:or test-result-match-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-conversation-level-slot-resolution-result-item-match-result
                         :shape "TestResultMatchStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conversation-level-slot-resolution-result-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'conversation-level-slot-resolution-result-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conversation-level-slot-resolution-result-item
                    'make-conversation-level-slot-resolution-result-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-slot-resolution-result-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-slot-resolution-result-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "slotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-result))
      (common-lisp:list
       (common-lisp:cons "matchResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-slot-resolution-result-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conversation-level-slot-resolution-results ()
   '(trivial-types:proper-list conversation-level-slot-resolution-result-item))
 (common-lisp:defun make-conversation-level-slot-resolution-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            conversation-level-slot-resolution-result-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass conversation-level-test-result-item common-lisp:nil
                       ((conversation-id :initarg :conversation-id :initform
                         (common-lisp:error ":conversationid is required")
                         :type
                         (common-lisp:or test-set-conversation-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-conversation-level-test-result-item-conversation-id
                         :shape "TestSetConversationId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (end-to-end-result :initarg :end-to-end-result
                         :initform
                         (common-lisp:error ":endtoendresult is required")
                         :type
                         (common-lisp:or test-result-match-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-conversation-level-test-result-item-end-to-end-result
                         :shape "TestResultMatchStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (speech-transcription-result :initarg
                         :speech-transcription-result :initform common-lisp:nil
                         :type
                         (common-lisp:or test-result-match-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-conversation-level-test-result-item-speech-transcription-result
                         :shape "TestResultMatchStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (intent-classification-results :initarg
                         :intent-classification-results :initform
                         (common-lisp:error
                          ":intentclassificationresults is required")
                         :type
                         (common-lisp:or
                          conversation-level-intent-classification-results
                          common-lisp:null)
                         :accessor
                         struct-shape-conversation-level-test-result-item-intent-classification-results
                         :shape "ConversationLevelIntentClassificationResults"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-resolution-results :initarg
                         :slot-resolution-results :initform
                         (common-lisp:error
                          ":slotresolutionresults is required")
                         :type
                         (common-lisp:or
                          conversation-level-slot-resolution-results
                          common-lisp:null)
                         :accessor
                         struct-shape-conversation-level-test-result-item-slot-resolution-results
                         :shape "ConversationLevelSlotResolutionResults"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conversation-level-test-result-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'conversation-level-test-result-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conversation-level-test-result-item
                    'make-conversation-level-test-result-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-test-result-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-test-result-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversation-id))
      (common-lisp:list
       (common-lisp:cons "conversationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-to-end-result))
      (common-lisp:list
       (common-lisp:cons "endToEndResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'speech-transcription-result))
      (common-lisp:list
       (common-lisp:cons "speechTranscriptionResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-classification-results))
      (common-lisp:list
       (common-lisp:cons "intentClassificationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slot-resolution-results))
      (common-lisp:list
       (common-lisp:cons "slotResolutionResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-test-result-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conversation-level-test-result-item-list ()
   '(trivial-types:proper-list conversation-level-test-result-item))
 (common-lisp:defun make-conversation-level-test-result-item-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            conversation-level-test-result-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass conversation-level-test-results common-lisp:nil
                       ((items :initarg :items :initform
                         (common-lisp:error ":items is required") :type
                         (common-lisp:or
                          conversation-level-test-result-item-list
                          common-lisp:null)
                         :accessor
                         struct-shape-conversation-level-test-results-items
                         :shape "ConversationLevelTestResultItemList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conversation-level-test-results
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'conversation-level-test-results
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conversation-level-test-results
                    'make-conversation-level-test-results))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-test-results))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-test-results))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-test-results))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass conversation-level-test-results-filter-by
                       common-lisp:nil
                       ((end-to-end-result :initarg :end-to-end-result
                         :initform common-lisp:nil :type
                         (common-lisp:or test-result-match-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-conversation-level-test-results-filter-by-end-to-end-result
                         :shape "TestResultMatchStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conversation-level-test-results-filter-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'conversation-level-test-results-filter-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conversation-level-test-results-filter-by
                    'make-conversation-level-test-results-filter-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-test-results-filter-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-test-results-filter-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-to-end-result))
      (common-lisp:list
       (common-lisp:cons "endToEndResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conversation-level-test-results-filter-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass conversation-log-settings common-lisp:nil
                       ((text-log-settings :initarg :text-log-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or text-log-settings-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-conversation-log-settings-text-log-settings
                         :shape "TextLogSettingsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (audio-log-settings :initarg :audio-log-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or audio-log-settings-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-conversation-log-settings-audio-log-settings
                         :shape "AudioLogSettingsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conversation-log-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'conversation-log-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conversation-log-settings
                    'make-conversation-log-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conversation-log-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conversation-log-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-log-settings))
      (common-lisp:list
       (common-lisp:cons "textLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-log-settings))
      (common-lisp:list
       (common-lisp:cons "audioLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conversation-log-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass conversation-logs-data-source common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-conversation-logs-data-source-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-alias-id :initarg :bot-alias-id :initform
                         (common-lisp:error ":botaliasid is required") :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor
                         struct-shape-conversation-logs-data-source-bot-alias-id
                         :shape "BotAliasId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-conversation-logs-data-source-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform
                         (common-lisp:error ":filter is required") :type
                         (common-lisp:or
                          conversation-logs-data-source-filter-by
                          common-lisp:null)
                         :accessor
                         struct-shape-conversation-logs-data-source-filter
                         :shape "ConversationLogsDataSourceFilterBy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conversation-logs-data-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'conversation-logs-data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conversation-logs-data-source
                    'make-conversation-logs-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conversation-logs-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conversation-logs-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conversation-logs-data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass conversation-logs-data-source-filter-by common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-conversation-logs-data-source-filter-by-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-conversation-logs-data-source-filter-by-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-mode :initarg :input-mode :initform
                         (common-lisp:error ":inputmode is required") :type
                         (common-lisp:or conversation-logs-input-mode-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-conversation-logs-data-source-filter-by-input-mode
                         :shape "ConversationLogsInputModeFilter" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conversation-logs-data-source-filter-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'conversation-logs-data-source-filter-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conversation-logs-data-source-filter-by
                    'make-conversation-logs-data-source-filter-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conversation-logs-data-source-filter-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conversation-logs-data-source-filter-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-mode))
      (common-lisp:list
       (common-lisp:cons "inputMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conversation-logs-data-source-filter-by))
   common-lisp:nil))
(common-lisp:deftype conversation-logs-input-mode-filter () 'common-lisp:string)
(common-lisp:deftype count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-bot-alias-request common-lisp:nil
                       ((bot-alias-name :initarg :bot-alias-name :initform
                         (common-lisp:error ":botaliasname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-bot-alias-request-bot-alias-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-bot-alias-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bot-alias-request-bot-version
                         :shape "NumericalBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-alias-locale-settings :initarg
                         :bot-alias-locale-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-alias-locale-settings-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bot-alias-request-bot-alias-locale-settings
                         :shape "BotAliasLocaleSettingsMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (conversation-log-settings :initarg
                         :conversation-log-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or conversation-log-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bot-alias-request-conversation-log-settings
                         :shape "ConversationLogSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sentiment-analysis-settings :initarg
                         :sentiment-analysis-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or sentiment-analysis-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bot-alias-request-sentiment-analysis-settings
                         :shape "SentimentAnalysisSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-bot-alias-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-bot-alias-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bot-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bot-alias-request 'make-create-bot-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-name))
      (common-lisp:list
       (common-lisp:cons "botAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-alias-locale-settings))
      (common-lisp:list
       (common-lisp:cons "botAliasLocaleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-log-settings))
      (common-lisp:list
       (common-lisp:cons "conversationLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sentiment-analysis-settings))
      (common-lisp:list
       (common-lisp:cons "sentimentAnalysisSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bot-alias-response common-lisp:nil
                       ((bot-alias-id :initarg :bot-alias-id :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor
                         struct-shape-create-bot-alias-response-bot-alias-id
                         :shape "BotAliasId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-alias-name :initarg :bot-alias-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-bot-alias-response-bot-alias-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-bot-alias-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bot-alias-response-bot-version
                         :shape "NumericalBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-alias-locale-settings :initarg
                         :bot-alias-locale-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-alias-locale-settings-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bot-alias-response-bot-alias-locale-settings
                         :shape "BotAliasLocaleSettingsMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (conversation-log-settings :initarg
                         :conversation-log-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or conversation-log-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bot-alias-response-conversation-log-settings
                         :shape "ConversationLogSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sentiment-analysis-settings :initarg
                         :sentiment-analysis-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or sentiment-analysis-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bot-alias-response-sentiment-analysis-settings
                         :shape "SentimentAnalysisSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bot-alias-status :initarg :bot-alias-status :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-alias-status common-lisp:null)
                         :accessor
                         struct-shape-create-bot-alias-response-bot-alias-status
                         :shape "BotAliasStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-bot-alias-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-bot-alias-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-bot-alias-response-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bot-alias-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bot-alias-response
                    'make-create-bot-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-name))
      (common-lisp:list
       (common-lisp:cons "botAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-alias-locale-settings))
      (common-lisp:list
       (common-lisp:cons "botAliasLocaleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-log-settings))
      (common-lisp:list
       (common-lisp:cons "conversationLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sentiment-analysis-settings))
      (common-lisp:list
       (common-lisp:cons "sentimentAnalysisSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-status))
      (common-lisp:list
       (common-lisp:cons "botAliasStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bot-locale-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-bot-locale-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-create-bot-locale-request-bot-version
                         :shape "DraftBotVersion" :location "uri"
                         :location-name "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-create-bot-locale-request-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-bot-locale-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nlu-intent-confidence-threshold :initarg
                         :nlu-intent-confidence-threshold :initform
                         (common-lisp:error
                          ":nluintentconfidencethreshold is required")
                         :type
                         (common-lisp:or confidence-threshold common-lisp:null)
                         :accessor
                         struct-shape-create-bot-locale-request-nlu-intent-confidence-threshold
                         :shape "ConfidenceThreshold" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (voice-settings :initarg :voice-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or voice-settings common-lisp:null)
                         :accessor
                         struct-shape-create-bot-locale-request-voice-settings
                         :shape "VoiceSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generative-aisettings :initarg :generative-aisettings
                         :initform common-lisp:nil :type
                         (common-lisp:or generative-aisettings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bot-locale-request-generative-aisettings
                         :shape "GenerativeAISettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bot-locale-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-locale-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bot-locale-request
                    'make-create-bot-locale-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-locale-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-locale-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence-threshold))
      (common-lisp:list
       (common-lisp:cons "nluIntentConfidenceThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-settings))
      (common-lisp:list
       (common-lisp:cons "voiceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generative-aisettings))
      (common-lisp:list
       (common-lisp:cons "generativeAISettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-locale-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bot-locale-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-bot-locale-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-create-bot-locale-response-bot-version
                         :shape "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-name :initarg :locale-name :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-name common-lisp:null)
                         :accessor
                         struct-shape-create-bot-locale-response-locale-name
                         :shape "LocaleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-create-bot-locale-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-bot-locale-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nlu-intent-confidence-threshold :initarg
                         :nlu-intent-confidence-threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or confidence-threshold common-lisp:null)
                         :accessor
                         struct-shape-create-bot-locale-response-nlu-intent-confidence-threshold
                         :shape "ConfidenceThreshold" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (voice-settings :initarg :voice-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or voice-settings common-lisp:null)
                         :accessor
                         struct-shape-create-bot-locale-response-voice-settings
                         :shape "VoiceSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-locale-status :initarg :bot-locale-status
                         :initform common-lisp:nil :type
                         (common-lisp:or bot-locale-status common-lisp:null)
                         :accessor
                         struct-shape-create-bot-locale-response-bot-locale-status
                         :shape "BotLocaleStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-bot-locale-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generative-aisettings :initarg :generative-aisettings
                         :initform common-lisp:nil :type
                         (common-lisp:or generative-aisettings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bot-locale-response-generative-aisettings
                         :shape "GenerativeAISettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bot-locale-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-locale-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bot-locale-response
                    'make-create-bot-locale-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-locale-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-locale-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-name))
      (common-lisp:list
       (common-lisp:cons "localeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence-threshold))
      (common-lisp:list
       (common-lisp:cons "nluIntentConfidenceThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-settings))
      (common-lisp:list
       (common-lisp:cons "voiceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-locale-status))
      (common-lisp:list
       (common-lisp:cons "botLocaleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generative-aisettings))
      (common-lisp:list
       (common-lisp:cons "generativeAISettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-locale-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bot-replica-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-bot-replica-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (replica-region :initarg :replica-region :initform
                         (common-lisp:error ":replicaregion is required") :type
                         (common-lisp:or replica-region common-lisp:null)
                         :accessor
                         struct-shape-create-bot-replica-request-replica-region
                         :shape "ReplicaRegion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bot-replica-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-replica-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bot-replica-request
                    'make-create-bot-replica-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-replica-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-replica-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-region))
      (common-lisp:list
       (common-lisp:cons "replicaRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-replica-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bot-replica-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-bot-replica-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replica-region :initarg :replica-region :initform
                         common-lisp:nil :type
                         (common-lisp:or replica-region common-lisp:null)
                         :accessor
                         struct-shape-create-bot-replica-response-replica-region
                         :shape "ReplicaRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-region :initarg :source-region :initform
                         common-lisp:nil :type
                         (common-lisp:or replica-region common-lisp:null)
                         :accessor
                         struct-shape-create-bot-replica-response-source-region
                         :shape "ReplicaRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-bot-replica-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-replica-status :initarg :bot-replica-status
                         :initform common-lisp:nil :type
                         (common-lisp:or bot-replica-status common-lisp:null)
                         :accessor
                         struct-shape-create-bot-replica-response-bot-replica-status
                         :shape "BotReplicaStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bot-replica-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-replica-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bot-replica-response
                    'make-create-bot-replica-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-replica-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-replica-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-region))
      (common-lisp:list
       (common-lisp:cons "replicaRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "sourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-replica-status))
      (common-lisp:list
       (common-lisp:cons "botReplicaStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-replica-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bot-request common-lisp:nil
                       ((bot-name :initarg :bot-name :initform
                         (common-lisp:error ":botname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-bot-request-bot-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-create-bot-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-bot-request-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-privacy :initarg :data-privacy :initform
                         (common-lisp:error ":dataprivacy is required") :type
                         (common-lisp:or data-privacy common-lisp:null)
                         :accessor struct-shape-create-bot-request-data-privacy
                         :shape "DataPrivacy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :idle-session-ttlin-seconds :initform
                         (common-lisp:error
                          ":idlesessionttlinseconds is required")
                         :type (common-lisp:or session-ttl common-lisp:null)
                         :accessor
                         struct-shape-create-bot-request-idle-session-ttlin-seconds
                         :shape "SessionTTL" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-tags :initarg :bot-tags :initform common-lisp:nil
                         :type (common-lisp:or tag-map common-lisp:null)
                         :accessor struct-shape-create-bot-request-bot-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-bot-alias-tags :initarg :test-bot-alias-tags
                         :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-bot-request-test-bot-alias-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-type :initarg :bot-type :initform common-lisp:nil
                         :type (common-lisp:or bot-type common-lisp:null)
                         :accessor struct-shape-create-bot-request-bot-type
                         :shape "BotType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-members :initarg :bot-members :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-members common-lisp:null)
                         :accessor struct-shape-create-bot-request-bot-members
                         :shape "BotMembers" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bot-request 'make-create-bot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-bot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-privacy))
      (common-lisp:list
       (common-lisp:cons "dataPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-tags))
      (common-lisp:list
       (common-lisp:cons "botTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-bot-alias-tags))
      (common-lisp:list
       (common-lisp:cons "testBotAliasTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-type))
      (common-lisp:list
       (common-lisp:cons "botType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-members))
      (common-lisp:list
       (common-lisp:cons "botMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-bot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bot-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-bot-response-bot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-name :initarg :bot-name :initform common-lisp:nil
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-bot-response-bot-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-create-bot-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-create-bot-response-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-privacy :initarg :data-privacy :initform
                         common-lisp:nil :type
                         (common-lisp:or data-privacy common-lisp:null)
                         :accessor
                         struct-shape-create-bot-response-data-privacy :shape
                         "DataPrivacy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :idle-session-ttlin-seconds :initform common-lisp:nil
                         :type (common-lisp:or session-ttl common-lisp:null)
                         :accessor
                         struct-shape-create-bot-response-idle-session-ttlin-seconds
                         :shape "SessionTTL" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-status :initarg :bot-status :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         struct-shape-create-bot-response-bot-status :shape
                         "BotStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-bot-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-tags :initarg :bot-tags :initform common-lisp:nil
                         :type (common-lisp:or tag-map common-lisp:null)
                         :accessor struct-shape-create-bot-response-bot-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-bot-alias-tags :initarg :test-bot-alias-tags
                         :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-bot-response-test-bot-alias-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-type :initarg :bot-type :initform common-lisp:nil
                         :type (common-lisp:or bot-type common-lisp:null)
                         :accessor struct-shape-create-bot-response-bot-type
                         :shape "BotType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-members :initarg :bot-members :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-members common-lisp:null)
                         :accessor struct-shape-create-bot-response-bot-members
                         :shape "BotMembers" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bot-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bot-response 'make-create-bot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-bot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-bot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-privacy))
      (common-lisp:list
       (common-lisp:cons "dataPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-tags))
      (common-lisp:list
       (common-lisp:cons "botTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-bot-alias-tags))
      (common-lisp:list
       (common-lisp:cons "testBotAliasTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-type))
      (common-lisp:list
       (common-lisp:cons "botType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-members))
      (common-lisp:list
       (common-lisp:cons "botMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-bot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bot-version-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-bot-version-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-bot-version-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-version-locale-specification :initarg
                         :bot-version-locale-specification :initform
                         (common-lisp:error
                          ":botversionlocalespecification is required")
                         :type
                         (common-lisp:or bot-version-locale-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bot-version-request-bot-version-locale-specification
                         :shape "BotVersionLocaleSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bot-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bot-version-request
                    'make-create-bot-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-version-locale-specification))
      (common-lisp:list
       (common-lisp:cons "botVersionLocaleSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bot-version-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-bot-version-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-bot-version-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bot-version-response-bot-version
                         :shape "NumericalBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-version-locale-specification :initarg
                         :bot-version-locale-specification :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version-locale-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bot-version-response-bot-version-locale-specification
                         :shape "BotVersionLocaleSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bot-status :initarg :bot-status :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         struct-shape-create-bot-version-response-bot-status
                         :shape "BotStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-bot-version-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bot-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bot-version-response
                    'make-create-bot-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-version-locale-specification))
      (common-lisp:list
       (common-lisp:cons "botVersionLocaleSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-custom-vocabulary-items-list ()
   '(trivial-types:proper-list new-custom-vocabulary-item))
 (common-lisp:defun make-create-custom-vocabulary-items-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            new-custom-vocabulary-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-export-request common-lisp:nil
                       ((resource-specification :initarg
                         :resource-specification :initform
                         (common-lisp:error
                          ":resourcespecification is required")
                         :type
                         (common-lisp:or export-resource-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-export-request-resource-specification
                         :shape "ExportResourceSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (file-format :initarg :file-format :initform
                         (common-lisp:error ":fileformat is required") :type
                         (common-lisp:or import-export-file-format
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-export-request-file-format :shape
                         "ImportExportFileFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (file-password :initarg :file-password :initform
                         common-lisp:nil :type
                         (common-lisp:or import-export-file-password
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-export-request-file-password
                         :shape "ImportExportFilePassword" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-export-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-export-request 'make-create-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-export-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "resourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-password))
      (common-lisp:list
       (common-lisp:cons "filePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-export-response common-lisp:nil
                       ((export-id :initarg :export-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-export-response-export-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-specification :initarg
                         :resource-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or export-resource-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-export-response-resource-specification
                         :shape "ExportResourceSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (file-format :initarg :file-format :initform
                         common-lisp:nil :type
                         (common-lisp:or import-export-file-format
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-export-response-file-format :shape
                         "ImportExportFileFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (export-status :initarg :export-status :initform
                         common-lisp:nil :type
                         (common-lisp:or export-status common-lisp:null)
                         :accessor
                         struct-shape-create-export-response-export-status
                         :shape "ExportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-export-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-export-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-export-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-export-response 'make-create-export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "resourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "exportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-intent-request common-lisp:nil
                       ((intent-name :initarg :intent-name :initform
                         (common-lisp:error ":intentname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-intent-request-intent-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-intent-request-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parent-intent-signature :initarg
                         :parent-intent-signature :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-signature common-lisp:null)
                         :accessor
                         struct-shape-create-intent-request-parent-intent-signature
                         :shape "IntentSignature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sample-utterances :initarg :sample-utterances
                         :initform common-lisp:nil :type
                         (common-lisp:or sample-utterances-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-intent-request-sample-utterances
                         :shape "SampleUtterancesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dialog-code-hook :initarg :dialog-code-hook :initform
                         common-lisp:nil :type
                         (common-lisp:or dialog-code-hook-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-intent-request-dialog-code-hook
                         :shape "DialogCodeHookSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (fulfillment-code-hook :initarg :fulfillment-code-hook
                         :initform common-lisp:nil :type
                         (common-lisp:or fulfillment-code-hook-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-intent-request-fulfillment-code-hook
                         :shape "FulfillmentCodeHookSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (intent-confirmation-setting :initarg
                         :intent-confirmation-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-confirmation-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-intent-request-intent-confirmation-setting
                         :shape "IntentConfirmationSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (intent-closing-setting :initarg
                         :intent-closing-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-closing-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-intent-request-intent-closing-setting
                         :shape "IntentClosingSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input-contexts :initarg :input-contexts :initform
                         common-lisp:nil :type
                         (common-lisp:or input-contexts-list common-lisp:null)
                         :accessor
                         struct-shape-create-intent-request-input-contexts
                         :shape "InputContextsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-contexts :initarg :output-contexts :initform
                         common-lisp:nil :type
                         (common-lisp:or output-contexts-list common-lisp:null)
                         :accessor
                         struct-shape-create-intent-request-output-contexts
                         :shape "OutputContextsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kendra-configuration :initarg :kendra-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or kendra-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-intent-request-kendra-configuration
                         :shape "KendraConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-intent-request-bot-id :shape "Id"
                         :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-create-intent-request-bot-version :shape
                         "DraftBotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-create-intent-request-locale-id :shape
                         "LocaleId" :location "uri" :location-name "localeId")
                        (initial-response-setting :initarg
                         :initial-response-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or initial-response-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-intent-request-initial-response-setting
                         :shape "InitialResponseSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (qn-aintent-configuration :initarg
                         :qn-aintent-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or qn-aintent-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-intent-request-qn-aintent-configuration
                         :shape "QnAIntentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-intent-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-intent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-intent-request 'make-create-intent-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-intent-signature))
      (common-lisp:list
       (common-lisp:cons "parentIntentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-code-hook))
      (common-lisp:list
       (common-lisp:cons "dialogCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fulfillment-code-hook))
      (common-lisp:list
       (common-lisp:cons "fulfillmentCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-confirmation-setting))
      (common-lisp:list
       (common-lisp:cons "intentConfirmationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-closing-setting))
      (common-lisp:list
       (common-lisp:cons "intentClosingSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-contexts))
      (common-lisp:list
       (common-lisp:cons "inputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-contexts))
      (common-lisp:list
       (common-lisp:cons "outputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kendra-configuration))
      (common-lisp:list
       (common-lisp:cons "kendraConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-response-setting))
      (common-lisp:list
       (common-lisp:cons "initialResponseSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qn-aintent-configuration))
      (common-lisp:list
       (common-lisp:cons "qnAIntentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-intent-response common-lisp:nil
                       ((intent-id :initarg :intent-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-intent-response-intent-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (intent-name :initarg :intent-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-intent-response-intent-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-intent-response-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parent-intent-signature :initarg
                         :parent-intent-signature :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-signature common-lisp:null)
                         :accessor
                         struct-shape-create-intent-response-parent-intent-signature
                         :shape "IntentSignature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sample-utterances :initarg :sample-utterances
                         :initform common-lisp:nil :type
                         (common-lisp:or sample-utterances-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-intent-response-sample-utterances
                         :shape "SampleUtterancesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dialog-code-hook :initarg :dialog-code-hook :initform
                         common-lisp:nil :type
                         (common-lisp:or dialog-code-hook-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-intent-response-dialog-code-hook
                         :shape "DialogCodeHookSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (fulfillment-code-hook :initarg :fulfillment-code-hook
                         :initform common-lisp:nil :type
                         (common-lisp:or fulfillment-code-hook-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-intent-response-fulfillment-code-hook
                         :shape "FulfillmentCodeHookSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (intent-confirmation-setting :initarg
                         :intent-confirmation-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-confirmation-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-intent-response-intent-confirmation-setting
                         :shape "IntentConfirmationSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (intent-closing-setting :initarg
                         :intent-closing-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-closing-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-intent-response-intent-closing-setting
                         :shape "IntentClosingSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input-contexts :initarg :input-contexts :initform
                         common-lisp:nil :type
                         (common-lisp:or input-contexts-list common-lisp:null)
                         :accessor
                         struct-shape-create-intent-response-input-contexts
                         :shape "InputContextsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-contexts :initarg :output-contexts :initform
                         common-lisp:nil :type
                         (common-lisp:or output-contexts-list common-lisp:null)
                         :accessor
                         struct-shape-create-intent-response-output-contexts
                         :shape "OutputContextsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kendra-configuration :initarg :kendra-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or kendra-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-intent-response-kendra-configuration
                         :shape "KendraConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-intent-response-bot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-create-intent-response-bot-version :shape
                         "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-create-intent-response-locale-id :shape
                         "LocaleId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-intent-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (initial-response-setting :initarg
                         :initial-response-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or initial-response-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-intent-response-initial-response-setting
                         :shape "InitialResponseSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (qn-aintent-configuration :initarg
                         :qn-aintent-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or qn-aintent-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-intent-response-qn-aintent-configuration
                         :shape "QnAIntentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-intent-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-intent-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-intent-response 'make-create-intent-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-intent-signature))
      (common-lisp:list
       (common-lisp:cons "parentIntentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-code-hook))
      (common-lisp:list
       (common-lisp:cons "dialogCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fulfillment-code-hook))
      (common-lisp:list
       (common-lisp:cons "fulfillmentCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-confirmation-setting))
      (common-lisp:list
       (common-lisp:cons "intentConfirmationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-closing-setting))
      (common-lisp:list
       (common-lisp:cons "intentClosingSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-contexts))
      (common-lisp:list
       (common-lisp:cons "inputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-contexts))
      (common-lisp:list
       (common-lisp:cons "outputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kendra-configuration))
      (common-lisp:list
       (common-lisp:cons "kendraConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-response-setting))
      (common-lisp:list
       (common-lisp:cons "initialResponseSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qn-aintent-configuration))
      (common-lisp:list
       (common-lisp:cons "qnAIntentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resource-policy-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-resource-policy-request-resource-arn
                         :shape "AmazonResourceName" :location "uri"
                         :location-name "resourceArn")
                        (policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         struct-shape-create-resource-policy-request-policy
                         :shape "Policy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-resource-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-resource-policy-request
                    'make-create-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resource-policy-response common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-resource-policy-response-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-create-resource-policy-response-revision-id
                         :shape "RevisionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-resource-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-resource-policy-response
                    'make-create-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resource-policy-statement-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-resource-policy-statement-request-resource-arn
                         :shape "AmazonResourceName" :location "uri"
                         :location-name "resourceArn")
                        (statement-id :initarg :statement-id :initform
                         (common-lisp:error ":statementid is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-resource-policy-statement-request-statement-id
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (effect :initarg :effect :initform
                         (common-lisp:error ":effect is required") :type
                         (common-lisp:or effect common-lisp:null) :accessor
                         struct-shape-create-resource-policy-statement-request-effect
                         :shape "Effect" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal :initarg :principal :initform
                         (common-lisp:error ":principal is required") :type
                         (common-lisp:or principal-list common-lisp:null)
                         :accessor
                         struct-shape-create-resource-policy-statement-request-principal
                         :shape "PrincipalList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or operation-list common-lisp:null)
                         :accessor
                         struct-shape-create-resource-policy-statement-request-action
                         :shape "OperationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (condition :initarg :condition :initform
                         common-lisp:nil :type
                         (common-lisp:or condition-map common-lisp:null)
                         :accessor
                         struct-shape-create-resource-policy-statement-request-condition
                         :shape "ConditionMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expected-revision-id :initarg :expected-revision-id
                         :initform common-lisp:nil :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-create-resource-policy-statement-request-expected-revision-id
                         :shape "RevisionId" :location "querystring"
                         :location-name "expectedRevisionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-resource-policy-statement-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resource-policy-statement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-resource-policy-statement-request
                    'make-create-resource-policy-statement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-statement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-id))
      (common-lisp:list
       (common-lisp:cons "statementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effect))
      (common-lisp:list
       (common-lisp:cons "effect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resource-policy-statement-response
                       common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-resource-policy-statement-response-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-create-resource-policy-statement-response-revision-id
                         :shape "RevisionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-resource-policy-statement-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resource-policy-statement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-resource-policy-statement-response
                    'make-create-resource-policy-statement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-statement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-policy-statement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-slot-request common-lisp:nil
                       ((slot-name :initarg :slot-name :initform
                         (common-lisp:error ":slotname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-slot-request-slot-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-create-slot-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slot-type-id :initarg :slot-type-id :initform
                         common-lisp:nil :type
                         (common-lisp:or built-in-or-custom-slot-type-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-slot-request-slot-type-id :shape
                         "BuiltInOrCustomSlotTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value-elicitation-setting :initarg
                         :value-elicitation-setting :initform
                         (common-lisp:error
                          ":valueelicitationsetting is required")
                         :type
                         (common-lisp:or slot-value-elicitation-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-slot-request-value-elicitation-setting
                         :shape "SlotValueElicitationSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (obfuscation-setting :initarg :obfuscation-setting
                         :initform common-lisp:nil :type
                         (common-lisp:or obfuscation-setting common-lisp:null)
                         :accessor
                         struct-shape-create-slot-request-obfuscation-setting
                         :shape "ObfuscationSetting" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-slot-request-bot-id :shape "Id"
                         :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor struct-shape-create-slot-request-bot-version
                         :shape "DraftBotVersion" :location "uri"
                         :location-name "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-create-slot-request-locale-id :shape
                         "LocaleId" :location "uri" :location-name "localeId")
                        (intent-id :initarg :intent-id :initform
                         (common-lisp:error ":intentid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-slot-request-intent-id :shape "Id"
                         :location "uri" :location-name "intentId")
                        (multiple-values-setting :initarg
                         :multiple-values-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or multiple-values-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-slot-request-multiple-values-setting
                         :shape "MultipleValuesSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sub-slot-setting :initarg :sub-slot-setting :initform
                         common-lisp:nil :type
                         (common-lisp:or sub-slot-setting common-lisp:null)
                         :accessor
                         struct-shape-create-slot-request-sub-slot-setting
                         :shape "SubSlotSetting" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-slot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-slot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-slot-request 'make-create-slot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-slot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-slot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "slotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-elicitation-setting))
      (common-lisp:list
       (common-lisp:cons "valueElicitationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obfuscation-setting))
      (common-lisp:list
       (common-lisp:cons "obfuscationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiple-values-setting))
      (common-lisp:list
       (common-lisp:cons "multipleValuesSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slot-setting))
      (common-lisp:list
       (common-lisp:cons "subSlotSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-slot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-slot-response common-lisp:nil
                       ((slot-id :initarg :slot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-slot-response-slot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-name :initarg :slot-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-slot-response-slot-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-slot-response-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-type-id :initarg :slot-type-id :initform
                         common-lisp:nil :type
                         (common-lisp:or built-in-or-custom-slot-type-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-slot-response-slot-type-id :shape
                         "BuiltInOrCustomSlotTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value-elicitation-setting :initarg
                         :value-elicitation-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-value-elicitation-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-slot-response-value-elicitation-setting
                         :shape "SlotValueElicitationSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (obfuscation-setting :initarg :obfuscation-setting
                         :initform common-lisp:nil :type
                         (common-lisp:or obfuscation-setting common-lisp:null)
                         :accessor
                         struct-shape-create-slot-response-obfuscation-setting
                         :shape "ObfuscationSetting" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-slot-response-bot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-create-slot-response-bot-version :shape
                         "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-create-slot-response-locale-id :shape
                         "LocaleId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (intent-id :initarg :intent-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-slot-response-intent-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-slot-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multiple-values-setting :initarg
                         :multiple-values-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or multiple-values-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-slot-response-multiple-values-setting
                         :shape "MultipleValuesSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sub-slot-setting :initarg :sub-slot-setting :initform
                         common-lisp:nil :type
                         (common-lisp:or sub-slot-setting common-lisp:null)
                         :accessor
                         struct-shape-create-slot-response-sub-slot-setting
                         :shape "SubSlotSetting" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-slot-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-slot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-slot-response 'make-create-slot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-slot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-slot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-id))
      (common-lisp:list
       (common-lisp:cons "slotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "slotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-elicitation-setting))
      (common-lisp:list
       (common-lisp:cons "valueElicitationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obfuscation-setting))
      (common-lisp:list
       (common-lisp:cons "obfuscationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiple-values-setting))
      (common-lisp:list
       (common-lisp:cons "multipleValuesSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slot-setting))
      (common-lisp:list
       (common-lisp:cons "subSlotSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-slot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-slot-type-request common-lisp:nil
                       ((slot-type-name :initarg :slot-type-name :initform
                         (common-lisp:error ":slottypename is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-slot-type-request-slot-type-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-slot-type-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slot-type-values :initarg :slot-type-values :initform
                         common-lisp:nil :type
                         (common-lisp:or slot-type-values common-lisp:null)
                         :accessor
                         struct-shape-create-slot-type-request-slot-type-values
                         :shape "SlotTypeValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value-selection-setting :initarg
                         :value-selection-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-value-selection-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-slot-type-request-value-selection-setting
                         :shape "SlotValueSelectionSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (parent-slot-type-signature :initarg
                         :parent-slot-type-signature :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-type-signature common-lisp:null)
                         :accessor
                         struct-shape-create-slot-type-request-parent-slot-type-signature
                         :shape "SlotTypeSignature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-slot-type-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-create-slot-type-request-bot-version
                         :shape "DraftBotVersion" :location "uri"
                         :location-name "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-create-slot-type-request-locale-id :shape
                         "LocaleId" :location "uri" :location-name "localeId")
                        (external-source-setting :initarg
                         :external-source-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or external-source-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-slot-type-request-external-source-setting
                         :shape "ExternalSourceSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (composite-slot-type-setting :initarg
                         :composite-slot-type-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or composite-slot-type-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-slot-type-request-composite-slot-type-setting
                         :shape "CompositeSlotTypeSetting" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-slot-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-slot-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-slot-type-request 'make-create-slot-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-name))
      (common-lisp:list
       (common-lisp:cons "slotTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-values))
      (common-lisp:list
       (common-lisp:cons "slotTypeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-selection-setting))
      (common-lisp:list
       (common-lisp:cons "valueSelectionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "parentSlotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-source-setting))
      (common-lisp:list
       (common-lisp:cons "externalSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-slot-type-setting))
      (common-lisp:list
       (common-lisp:cons "compositeSlotTypeSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-slot-type-response common-lisp:nil
                       ((slot-type-id :initarg :slot-type-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-slot-type-response-slot-type-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-type-name :initarg :slot-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-slot-type-response-slot-type-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-slot-type-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slot-type-values :initarg :slot-type-values :initform
                         common-lisp:nil :type
                         (common-lisp:or slot-type-values common-lisp:null)
                         :accessor
                         struct-shape-create-slot-type-response-slot-type-values
                         :shape "SlotTypeValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value-selection-setting :initarg
                         :value-selection-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-value-selection-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-slot-type-response-value-selection-setting
                         :shape "SlotValueSelectionSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (parent-slot-type-signature :initarg
                         :parent-slot-type-signature :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-type-signature common-lisp:null)
                         :accessor
                         struct-shape-create-slot-type-response-parent-slot-type-signature
                         :shape "SlotTypeSignature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-slot-type-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-create-slot-type-response-bot-version
                         :shape "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-create-slot-type-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-slot-type-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-source-setting :initarg
                         :external-source-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or external-source-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-slot-type-response-external-source-setting
                         :shape "ExternalSourceSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (composite-slot-type-setting :initarg
                         :composite-slot-type-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or composite-slot-type-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-slot-type-response-composite-slot-type-setting
                         :shape "CompositeSlotTypeSetting" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-slot-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-slot-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-slot-type-response
                    'make-create-slot-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-name))
      (common-lisp:list
       (common-lisp:cons "slotTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-values))
      (common-lisp:list
       (common-lisp:cons "slotTypeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-selection-setting))
      (common-lisp:list
       (common-lisp:cons "valueSelectionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "parentSlotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-source-setting))
      (common-lisp:list
       (common-lisp:cons "externalSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-slot-type-setting))
      (common-lisp:list
       (common-lisp:cons "compositeSlotTypeSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-test-set-discrepancy-report-request
                       common-lisp:nil
                       ((test-set-id :initarg :test-set-id :initform
                         (common-lisp:error ":testsetid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-test-set-discrepancy-report-request-test-set-id
                         :shape "Id" :location "uri" :location-name
                         "testSetId")
                        (target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or
                          test-set-discrepancy-report-resource-target
                          common-lisp:null)
                         :accessor
                         struct-shape-create-test-set-discrepancy-report-request-target
                         :shape "TestSetDiscrepancyReportResourceTarget"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-test-set-discrepancy-report-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-test-set-discrepancy-report-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-test-set-discrepancy-report-request
                    'make-create-test-set-discrepancy-report-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-test-set-discrepancy-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-test-set-discrepancy-report-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-test-set-discrepancy-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-test-set-discrepancy-report-response
                       common-lisp:nil
                       ((test-set-discrepancy-report-id :initarg
                         :test-set-discrepancy-report-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-test-set-discrepancy-report-response-test-set-discrepancy-report-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-test-set-discrepancy-report-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-set-id :initarg :test-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-test-set-discrepancy-report-response-test-set-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target :initarg :target :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          test-set-discrepancy-report-resource-target
                          common-lisp:null)
                         :accessor
                         struct-shape-create-test-set-discrepancy-report-response-target
                         :shape "TestSetDiscrepancyReportResourceTarget"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-test-set-discrepancy-report-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-test-set-discrepancy-report-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-test-set-discrepancy-report-response
                    'make-create-test-set-discrepancy-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-test-set-discrepancy-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-test-set-discrepancy-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-set-discrepancy-report-id))
      (common-lisp:list
       (common-lisp:cons "testSetDiscrepancyReportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-id))
      (common-lisp:list
       (common-lisp:cons "testSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-test-set-discrepancy-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-upload-url-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-upload-url-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-upload-url-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-upload-url-request
                    'make-create-upload-url-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-upload-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-upload-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-upload-url-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-upload-url-response common-lisp:nil
                       ((import-id :initarg :import-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-create-upload-url-response-import-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (upload-url :initarg :upload-url :initform
                         common-lisp:nil :type
                         (common-lisp:or presigned-s3url common-lisp:null)
                         :accessor
                         struct-shape-create-upload-url-response-upload-url
                         :shape "PresignedS3Url" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-upload-url-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-upload-url-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-upload-url-response
                    'make-create-upload-url-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-upload-url-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-upload-url-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "importId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-url))
      (common-lisp:list
       (common-lisp:cons "uploadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-upload-url-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-payload common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or custom-payload-value common-lisp:null)
                         :accessor struct-shape-custom-payload-value :shape
                         "CustomPayloadValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-payload
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-payload
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'custom-payload 'make-custom-payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-payload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-payload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-payload))
   common-lisp:nil))
(common-lisp:deftype custom-payload-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass custom-vocabulary-entry-id common-lisp:nil
                       ((item-id :initarg :item-id :initform
                         (common-lisp:error ":itemid is required") :type
                         (common-lisp:or item-id common-lisp:null) :accessor
                         struct-shape-custom-vocabulary-entry-id-item-id :shape
                         "ItemId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-vocabulary-entry-id
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-vocabulary-entry-id
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-vocabulary-entry-id
                    'make-custom-vocabulary-entry-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-entry-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-entry-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-id))
      (common-lisp:list
       (common-lisp:cons "itemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-entry-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-vocabulary-export-specification common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-custom-vocabulary-export-specification-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-custom-vocabulary-export-specification-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-custom-vocabulary-export-specification-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-vocabulary-export-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-vocabulary-export-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-vocabulary-export-specification
                    'make-custom-vocabulary-export-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-export-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-export-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-export-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-vocabulary-import-specification common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-custom-vocabulary-import-specification-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-custom-vocabulary-import-specification-bot-version
                         :shape "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-custom-vocabulary-import-specification-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-vocabulary-import-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-vocabulary-import-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-vocabulary-import-specification
                    'make-custom-vocabulary-import-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-import-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-import-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-import-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-vocabulary-item common-lisp:nil
                       ((item-id :initarg :item-id :initform
                         (common-lisp:error ":itemid is required") :type
                         (common-lisp:or item-id common-lisp:null) :accessor
                         struct-shape-custom-vocabulary-item-item-id :shape
                         "ItemId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (phrase :initarg :phrase :initform
                         (common-lisp:error ":phrase is required") :type
                         (common-lisp:or phrase common-lisp:null) :accessor
                         struct-shape-custom-vocabulary-item-phrase :shape
                         "Phrase" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (weight :initarg :weight :initform common-lisp:nil
                         :type (common-lisp:or weight common-lisp:null)
                         :accessor struct-shape-custom-vocabulary-item-weight
                         :shape "Weight" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-as :initarg :display-as :initform
                         common-lisp:nil :type
                         (common-lisp:or phrase common-lisp:null) :accessor
                         struct-shape-custom-vocabulary-item-display-as :shape
                         "Phrase" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-vocabulary-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-vocabulary-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-vocabulary-item 'make-custom-vocabulary-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-id))
      (common-lisp:list
       (common-lisp:cons "itemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phrase))
      (common-lisp:list
       (common-lisp:cons "phrase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-as))
      (common-lisp:list
       (common-lisp:cons "displayAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-vocabulary-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-vocabulary-items ()
   '(trivial-types:proper-list custom-vocabulary-item))
 (common-lisp:defun make-custom-vocabulary-items
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-vocabulary-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype custom-vocabulary-status () 'common-lisp:string)
(common-lisp:deftype dtmfcharacter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dtmfspecification common-lisp:nil
                       ((max-length :initarg :max-length :initform
                         (common-lisp:error ":maxlength is required") :type
                         (common-lisp:or max-utterance-digits common-lisp:null)
                         :accessor struct-shape-dtmfspecification-max-length
                         :shape "MaxUtteranceDigits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-timeout-ms :initarg :end-timeout-ms :initform
                         (common-lisp:error ":endtimeoutms is required") :type
                         (common-lisp:or time-in-milli-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-dtmfspecification-end-timeout-ms :shape
                         "TimeInMilliSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-character :initarg :deletion-character
                         :initform
                         (common-lisp:error ":deletioncharacter is required")
                         :type (common-lisp:or dtmfcharacter common-lisp:null)
                         :accessor
                         struct-shape-dtmfspecification-deletion-character
                         :shape "DTMFCharacter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-character :initarg :end-character :initform
                         (common-lisp:error ":endcharacter is required") :type
                         (common-lisp:or dtmfcharacter common-lisp:null)
                         :accessor struct-shape-dtmfspecification-end-character
                         :shape "DTMFCharacter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dtmfspecification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dtmfspecification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dtmfspecification 'make-dtmfspecification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dtmfspecification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dtmfspecification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-length))
      (common-lisp:list
       (common-lisp:cons "maxLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timeout-ms))
      (common-lisp:list
       (common-lisp:cons "endTimeoutMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-character))
      (common-lisp:list
       (common-lisp:cons "deletionCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-character))
      (common-lisp:list
       (common-lisp:cons "endCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dtmfspecification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-privacy common-lisp:nil
                       ((child-directed :initarg :child-directed :initform
                         (common-lisp:error ":childdirected is required") :type
                         (common-lisp:or child-directed common-lisp:null)
                         :accessor struct-shape-data-privacy-child-directed
                         :shape "ChildDirected" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-privacy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-privacy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'data-privacy 'make-data-privacy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-privacy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-privacy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-directed))
      (common-lisp:list
       (common-lisp:cons "childDirected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-privacy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source-configuration common-lisp:nil
                       ((opensearch-configuration :initarg
                         :opensearch-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or opensearch-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-configuration-opensearch-configuration
                         :shape "OpensearchConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kendra-configuration :initarg :kendra-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or qn-akendra-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-configuration-kendra-configuration
                         :shape "QnAKendraConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bedrock-knowledge-store-configuration :initarg
                         :bedrock-knowledge-store-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or bedrock-knowledge-store-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-source-configuration-bedrock-knowledge-store-configuration
                         :shape "BedrockKnowledgeStoreConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-source-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-source-configuration
                    'make-data-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'opensearch-configuration))
      (common-lisp:list
       (common-lisp:cons "opensearchConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kendra-configuration))
      (common-lisp:list
       (common-lisp:cons "kendraConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bedrock-knowledge-store-configuration))
      (common-lisp:list
       (common-lisp:cons "bedrockKnowledgeStoreConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass date-range-filter common-lisp:nil
                       ((start-date-time :initarg :start-date-time :initform
                         (common-lisp:error ":startdatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-date-range-filter-start-date-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         (common-lisp:error ":enddatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-date-range-filter-end-date-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-date-range-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'date-range-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'date-range-filter 'make-date-range-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-range-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-range-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "startDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "endDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-range-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass default-conditional-branch common-lisp:nil
                       ((next-step :initarg :next-step :initform
                         common-lisp:nil :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         struct-shape-default-conditional-branch-next-step
                         :shape "DialogState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response :initarg :response :initform common-lisp:nil
                         :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-default-conditional-branch-response
                         :shape "ResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-default-conditional-branch
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'default-conditional-branch
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'default-conditional-branch
                    'make-default-conditional-branch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-conditional-branch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-conditional-branch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-step))
      (common-lisp:list
       (common-lisp:cons "nextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response))
      (common-lisp:list
       (common-lisp:cons "response"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-conditional-branch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-alias-request common-lisp:nil
                       ((bot-alias-id :initarg :bot-alias-id :initform
                         (common-lisp:error ":botaliasid is required") :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor
                         struct-shape-delete-bot-alias-request-bot-alias-id
                         :shape "BotAliasId" :location "uri" :location-name
                         "botAliasId")
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-bot-alias-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (skip-resource-in-use-check :initarg
                         :skip-resource-in-use-check :initform common-lisp:nil
                         :type
                         (common-lisp:or skip-resource-in-use-check
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-bot-alias-request-skip-resource-in-use-check
                         :shape "SkipResourceInUseCheck" :location
                         "querystring" :location-name
                         "skipResourceInUseCheck"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bot-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bot-alias-request 'make-delete-bot-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-alias-response common-lisp:nil
                       ((bot-alias-id :initarg :bot-alias-id :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor
                         struct-shape-delete-bot-alias-response-bot-alias-id
                         :shape "BotAliasId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-bot-alias-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-alias-status :initarg :bot-alias-status :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-alias-status common-lisp:null)
                         :accessor
                         struct-shape-delete-bot-alias-response-bot-alias-status
                         :shape "BotAliasStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bot-alias-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bot-alias-response
                    'make-delete-bot-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-status))
      (common-lisp:list
       (common-lisp:cons "botAliasStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-locale-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-bot-locale-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-delete-bot-locale-request-bot-version
                         :shape "DraftBotVersion" :location "uri"
                         :location-name "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-delete-bot-locale-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bot-locale-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-locale-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bot-locale-request
                    'make-delete-bot-locale-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-locale-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-locale-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-locale-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-locale-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-bot-locale-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-delete-bot-locale-response-bot-version
                         :shape "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-delete-bot-locale-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-locale-status :initarg :bot-locale-status
                         :initform common-lisp:nil :type
                         (common-lisp:or bot-locale-status common-lisp:null)
                         :accessor
                         struct-shape-delete-bot-locale-response-bot-locale-status
                         :shape "BotLocaleStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bot-locale-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-locale-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bot-locale-response
                    'make-delete-bot-locale-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-locale-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-locale-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-locale-status))
      (common-lisp:list
       (common-lisp:cons "botLocaleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-locale-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-replica-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-bot-replica-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (replica-region :initarg :replica-region :initform
                         (common-lisp:error ":replicaregion is required") :type
                         (common-lisp:or replica-region common-lisp:null)
                         :accessor
                         struct-shape-delete-bot-replica-request-replica-region
                         :shape "ReplicaRegion" :location "uri" :location-name
                         "replicaRegion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bot-replica-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-replica-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bot-replica-request
                    'make-delete-bot-replica-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-replica-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-replica-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-replica-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-replica-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-bot-replica-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replica-region :initarg :replica-region :initform
                         common-lisp:nil :type
                         (common-lisp:or replica-region common-lisp:null)
                         :accessor
                         struct-shape-delete-bot-replica-response-replica-region
                         :shape "ReplicaRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-replica-status :initarg :bot-replica-status
                         :initform common-lisp:nil :type
                         (common-lisp:or bot-replica-status common-lisp:null)
                         :accessor
                         struct-shape-delete-bot-replica-response-bot-replica-status
                         :shape "BotReplicaStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bot-replica-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-replica-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bot-replica-response
                    'make-delete-bot-replica-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-replica-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-replica-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-region))
      (common-lisp:list
       (common-lisp:cons "replicaRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-replica-status))
      (common-lisp:list
       (common-lisp:cons "botReplicaStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-replica-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-bot-request-bot-id :shape "Id"
                         :location "uri" :location-name "botId")
                        (skip-resource-in-use-check :initarg
                         :skip-resource-in-use-check :initform common-lisp:nil
                         :type
                         (common-lisp:or skip-resource-in-use-check
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-bot-request-skip-resource-in-use-check
                         :shape "SkipResourceInUseCheck" :location
                         "querystring" :location-name
                         "skipResourceInUseCheck"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bot-request 'make-delete-bot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-bot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-bot-response-bot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-status :initarg :bot-status :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         struct-shape-delete-bot-response-bot-status :shape
                         "BotStatus" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bot-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bot-response 'make-delete-bot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-bot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-bot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-bot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-version-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-bot-version-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-bot-version-request-bot-version
                         :shape "NumericalBotVersion" :location "uri"
                         :location-name "botVersion")
                        (skip-resource-in-use-check :initarg
                         :skip-resource-in-use-check :initform common-lisp:nil
                         :type
                         (common-lisp:or skip-resource-in-use-check
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-bot-version-request-skip-resource-in-use-check
                         :shape "SkipResourceInUseCheck" :location
                         "querystring" :location-name
                         "skipResourceInUseCheck"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bot-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bot-version-request
                    'make-delete-bot-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-version-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-bot-version-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-bot-version-response-bot-version
                         :shape "NumericalBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-status :initarg :bot-status :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         struct-shape-delete-bot-version-response-bot-status
                         :shape "BotStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bot-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bot-version-response
                    'make-delete-bot-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype delete-custom-vocabulary-items-list ()
   '(trivial-types:proper-list custom-vocabulary-entry-id))
 (common-lisp:defun make-delete-custom-vocabulary-items-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-vocabulary-entry-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-custom-vocabulary-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-custom-vocabulary-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-vocabulary-request-bot-version
                         :shape "DraftBotVersion" :location "uri"
                         :location-name "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-delete-custom-vocabulary-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-custom-vocabulary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-vocabulary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-custom-vocabulary-request
                    'make-delete-custom-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-vocabulary-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-custom-vocabulary-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-vocabulary-response-bot-version
                         :shape "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-delete-custom-vocabulary-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-vocabulary-status :initarg
                         :custom-vocabulary-status :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-vocabulary-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-vocabulary-response-custom-vocabulary-status
                         :shape "CustomVocabularyStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-custom-vocabulary-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-vocabulary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-custom-vocabulary-response
                    'make-delete-custom-vocabulary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-vocabulary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-vocabulary-status))
      (common-lisp:list
       (common-lisp:cons "customVocabularyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-vocabulary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-export-request common-lisp:nil
                       ((export-id :initarg :export-id :initform
                         (common-lisp:error ":exportid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-export-request-export-id :shape
                         "Id" :location "uri" :location-name "exportId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-export-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-export-request 'make-delete-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-export-response common-lisp:nil
                       ((export-id :initarg :export-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-export-response-export-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (export-status :initarg :export-status :initform
                         common-lisp:nil :type
                         (common-lisp:or export-status common-lisp:null)
                         :accessor
                         struct-shape-delete-export-response-export-status
                         :shape "ExportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-export-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-export-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-export-response 'make-delete-export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "exportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-import-request common-lisp:nil
                       ((import-id :initarg :import-id :initform
                         (common-lisp:error ":importid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-import-request-import-id :shape
                         "Id" :location "uri" :location-name "importId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-import-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-import-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-import-request 'make-delete-import-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-import-response common-lisp:nil
                       ((import-id :initarg :import-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-import-response-import-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (import-status :initarg :import-status :initform
                         common-lisp:nil :type
                         (common-lisp:or import-status common-lisp:null)
                         :accessor
                         struct-shape-delete-import-response-import-status
                         :shape "ImportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-import-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-import-response 'make-delete-import-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "importId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-status))
      (common-lisp:list
       (common-lisp:cons "importStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-intent-request common-lisp:nil
                       ((intent-id :initarg :intent-id :initform
                         (common-lisp:error ":intentid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-intent-request-intent-id :shape
                         "Id" :location "uri" :location-name "intentId")
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-intent-request-bot-id :shape "Id"
                         :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-delete-intent-request-bot-version :shape
                         "DraftBotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-delete-intent-request-locale-id :shape
                         "LocaleId" :location "uri" :location-name "localeId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-intent-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-intent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-intent-request 'make-delete-intent-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-intent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-policy-request-resource-arn
                         :shape "AmazonResourceName" :location "uri"
                         :location-name "resourceArn")
                        (expected-revision-id :initarg :expected-revision-id
                         :initform common-lisp:nil :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-policy-request-expected-revision-id
                         :shape "RevisionId" :location "querystring"
                         :location-name "expectedRevisionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-request
                    'make-delete-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-response common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-policy-response-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-policy-response-revision-id
                         :shape "RevisionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-response
                    'make-delete-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-statement-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-policy-statement-request-resource-arn
                         :shape "AmazonResourceName" :location "uri"
                         :location-name "resourceArn")
                        (statement-id :initarg :statement-id :initform
                         (common-lisp:error ":statementid is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-delete-resource-policy-statement-request-statement-id
                         :shape "Name" :location "uri" :location-name
                         "statementId")
                        (expected-revision-id :initarg :expected-revision-id
                         :initform common-lisp:nil :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-policy-statement-request-expected-revision-id
                         :shape "RevisionId" :location "querystring"
                         :location-name "expectedRevisionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-policy-statement-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-statement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-statement-request
                    'make-delete-resource-policy-statement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-statement-response
                       common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-policy-statement-response-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-policy-statement-response-revision-id
                         :shape "RevisionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-policy-statement-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-statement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-statement-response
                    'make-delete-resource-policy-statement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-statement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-statement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-slot-request common-lisp:nil
                       ((slot-id :initarg :slot-id :initform
                         (common-lisp:error ":slotid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-slot-request-slot-id :shape "Id"
                         :location "uri" :location-name "slotId")
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-slot-request-bot-id :shape "Id"
                         :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor struct-shape-delete-slot-request-bot-version
                         :shape "DraftBotVersion" :location "uri"
                         :location-name "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-delete-slot-request-locale-id :shape
                         "LocaleId" :location "uri" :location-name "localeId")
                        (intent-id :initarg :intent-id :initform
                         (common-lisp:error ":intentid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-slot-request-intent-id :shape "Id"
                         :location "uri" :location-name "intentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-slot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-slot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-slot-request 'make-delete-slot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-slot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-slot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-slot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-slot-type-request common-lisp:nil
                       ((slot-type-id :initarg :slot-type-id :initform
                         (common-lisp:error ":slottypeid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-slot-type-request-slot-type-id
                         :shape "Id" :location "uri" :location-name
                         "slotTypeId")
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-slot-type-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-delete-slot-type-request-bot-version
                         :shape "DraftBotVersion" :location "uri"
                         :location-name "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-delete-slot-type-request-locale-id :shape
                         "LocaleId" :location "uri" :location-name "localeId")
                        (skip-resource-in-use-check :initarg
                         :skip-resource-in-use-check :initform common-lisp:nil
                         :type
                         (common-lisp:or skip-resource-in-use-check
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-slot-type-request-skip-resource-in-use-check
                         :shape "SkipResourceInUseCheck" :location
                         "querystring" :location-name
                         "skipResourceInUseCheck"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-slot-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-slot-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-slot-type-request 'make-delete-slot-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-slot-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-slot-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-slot-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-test-set-request common-lisp:nil
                       ((test-set-id :initarg :test-set-id :initform
                         (common-lisp:error ":testsetid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-test-set-request-test-set-id
                         :shape "Id" :location "uri" :location-name
                         "testSetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-test-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-test-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-test-set-request 'make-delete-test-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-test-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-test-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-test-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-utterances-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-delete-utterances-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-delete-utterances-request-locale-id
                         :shape "LocaleId" :location "querystring"
                         :location-name "localeId")
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         struct-shape-delete-utterances-request-session-id
                         :shape "SessionId" :location "querystring"
                         :location-name "sessionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-utterances-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-utterances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-utterances-request
                    'make-delete-utterances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-utterances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-utterances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-utterances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-utterances-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-utterances-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-utterances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-utterances-response
                    'make-delete-utterances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-utterances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-utterances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-utterances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-alias-request common-lisp:nil
                       ((bot-alias-id :initarg :bot-alias-id :initform
                         (common-lisp:error ":botaliasid is required") :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-alias-request-bot-alias-id
                         :shape "BotAliasId" :location "uri" :location-name
                         "botAliasId")
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-alias-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bot-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bot-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bot-alias-request
                    'make-describe-bot-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-alias-response common-lisp:nil
                       ((bot-alias-id :initarg :bot-alias-id :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-alias-response-bot-alias-id
                         :shape "BotAliasId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-alias-name :initarg :bot-alias-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-bot-alias-response-bot-alias-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-alias-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-alias-response-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-alias-locale-settings :initarg
                         :bot-alias-locale-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-alias-locale-settings-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-alias-response-bot-alias-locale-settings
                         :shape "BotAliasLocaleSettingsMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (conversation-log-settings :initarg
                         :conversation-log-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or conversation-log-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-alias-response-conversation-log-settings
                         :shape "ConversationLogSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sentiment-analysis-settings :initarg
                         :sentiment-analysis-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or sentiment-analysis-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-alias-response-sentiment-analysis-settings
                         :shape "SentimentAnalysisSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bot-alias-history-events :initarg
                         :bot-alias-history-events :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-alias-history-events-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-alias-response-bot-alias-history-events
                         :shape "BotAliasHistoryEventsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bot-alias-status :initarg :bot-alias-status :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-alias-status common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-alias-response-bot-alias-status
                         :shape "BotAliasStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-alias-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-bot-alias-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-alias-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parent-bot-networks :initarg :parent-bot-networks
                         :initform common-lisp:nil :type
                         (common-lisp:or parent-bot-networks common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-alias-response-parent-bot-networks
                         :shape "ParentBotNetworks" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bot-alias-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bot-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bot-alias-response
                    'make-describe-bot-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-name))
      (common-lisp:list
       (common-lisp:cons "botAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-alias-locale-settings))
      (common-lisp:list
       (common-lisp:cons "botAliasLocaleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-log-settings))
      (common-lisp:list
       (common-lisp:cons "conversationLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sentiment-analysis-settings))
      (common-lisp:list
       (common-lisp:cons "sentimentAnalysisSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-alias-history-events))
      (common-lisp:list
       (common-lisp:cons "botAliasHistoryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-status))
      (common-lisp:list
       (common-lisp:cons "botAliasStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-bot-networks))
      (common-lisp:list
       (common-lisp:cons "parentBotNetworks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-locale-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-locale-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-locale-request-bot-version
                         :shape "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-describe-bot-locale-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bot-locale-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bot-locale-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bot-locale-request
                    'make-describe-bot-locale-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-locale-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-locale-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-locale-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-locale-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-locale-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-locale-response-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-describe-bot-locale-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-name :initarg :locale-name :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-name common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-locale-response-locale-name
                         :shape "LocaleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-locale-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nlu-intent-confidence-threshold :initarg
                         :nlu-intent-confidence-threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or confidence-threshold common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-locale-response-nlu-intent-confidence-threshold
                         :shape "ConfidenceThreshold" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (voice-settings :initarg :voice-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or voice-settings common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-locale-response-voice-settings
                         :shape "VoiceSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (intents-count :initarg :intents-count :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-count common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-locale-response-intents-count
                         :shape "ResourceCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slot-types-count :initarg :slot-types-count :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-count common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-locale-response-slot-types-count
                         :shape "ResourceCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-locale-status :initarg :bot-locale-status
                         :initform common-lisp:nil :type
                         (common-lisp:or bot-locale-status common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-locale-response-bot-locale-status
                         :shape "BotLocaleStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-locale-response-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-bot-locale-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-locale-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-build-submitted-date-time :initarg
                         :last-build-submitted-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-bot-locale-response-last-build-submitted-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-locale-history-events :initarg
                         :bot-locale-history-events :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-locale-history-events-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-locale-response-bot-locale-history-events
                         :shape "BotLocaleHistoryEventsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recommended-actions :initarg :recommended-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or recommended-actions common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-locale-response-recommended-actions
                         :shape "RecommendedActions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generative-aisettings :initarg :generative-aisettings
                         :initform common-lisp:nil :type
                         (common-lisp:or generative-aisettings
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-locale-response-generative-aisettings
                         :shape "GenerativeAISettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bot-locale-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bot-locale-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bot-locale-response
                    'make-describe-bot-locale-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-locale-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-locale-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-name))
      (common-lisp:list
       (common-lisp:cons "localeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence-threshold))
      (common-lisp:list
       (common-lisp:cons "nluIntentConfidenceThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-settings))
      (common-lisp:list
       (common-lisp:cons "voiceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intents-count))
      (common-lisp:list
       (common-lisp:cons "intentsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-types-count))
      (common-lisp:list
       (common-lisp:cons "slotTypesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-locale-status))
      (common-lisp:list
       (common-lisp:cons "botLocaleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-build-submitted-date-time))
      (common-lisp:list
       (common-lisp:cons "lastBuildSubmittedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-locale-history-events))
      (common-lisp:list
       (common-lisp:cons "botLocaleHistoryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-actions))
      (common-lisp:list
       (common-lisp:cons "recommendedActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generative-aisettings))
      (common-lisp:list
       (common-lisp:cons "generativeAISettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-locale-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-recommendation-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-recommendation-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-recommendation-request-bot-version
                         :shape "DraftBotVersion" :location "uri"
                         :location-name "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-describe-bot-recommendation-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId")
                        (bot-recommendation-id :initarg :bot-recommendation-id
                         :initform
                         (common-lisp:error ":botrecommendationid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-recommendation-request-bot-recommendation-id
                         :shape "Id" :location "uri" :location-name
                         "botRecommendationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bot-recommendation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-bot-recommendation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bot-recommendation-request
                    'make-describe-bot-recommendation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-recommendation-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-recommendation-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-recommendation-response-bot-version
                         :shape "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-describe-bot-recommendation-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-recommendation-status :initarg
                         :bot-recommendation-status :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-recommendation-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-recommendation-response-bot-recommendation-status
                         :shape "BotRecommendationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bot-recommendation-id :initarg :bot-recommendation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-recommendation-response-bot-recommendation-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-recommendation-response-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-bot-recommendation-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-recommendation-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transcript-source-setting :initarg
                         :transcript-source-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or transcript-source-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-recommendation-response-transcript-source-setting
                         :shape "TranscriptSourceSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-setting :initarg :encryption-setting
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-setting common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-recommendation-response-encryption-setting
                         :shape "EncryptionSetting" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-recommendation-results :initarg
                         :bot-recommendation-results :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-recommendation-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-recommendation-response-bot-recommendation-results
                         :shape "BotRecommendationResults" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bot-recommendation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-bot-recommendation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bot-recommendation-response
                    'make-describe-bot-recommendation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-status))
      (common-lisp:list
       (common-lisp:cons "botRecommendationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-id))
      (common-lisp:list
       (common-lisp:cons "botRecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcript-source-setting))
      (common-lisp:list
       (common-lisp:cons "transcriptSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-setting))
      (common-lisp:list
       (common-lisp:cons "encryptionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-results))
      (common-lisp:list
       (common-lisp:cons "botRecommendationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-recommendation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-replica-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-replica-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (replica-region :initarg :replica-region :initform
                         (common-lisp:error ":replicaregion is required") :type
                         (common-lisp:or replica-region common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-replica-request-replica-region
                         :shape "ReplicaRegion" :location "uri" :location-name
                         "replicaRegion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bot-replica-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bot-replica-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bot-replica-request
                    'make-describe-bot-replica-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-replica-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-replica-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-replica-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-replica-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-replica-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replica-region :initarg :replica-region :initform
                         common-lisp:nil :type
                         (common-lisp:or replica-region common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-replica-response-replica-region
                         :shape "ReplicaRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-region :initarg :source-region :initform
                         common-lisp:nil :type
                         (common-lisp:or replica-region common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-replica-response-source-region
                         :shape "ReplicaRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-bot-replica-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-replica-status :initarg :bot-replica-status
                         :initform common-lisp:nil :type
                         (common-lisp:or bot-replica-status common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-replica-response-bot-replica-status
                         :shape "BotReplicaStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-replica-response-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bot-replica-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-bot-replica-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bot-replica-response
                    'make-describe-bot-replica-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-replica-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-replica-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-region))
      (common-lisp:list
       (common-lisp:cons "replicaRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "sourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-replica-status))
      (common-lisp:list
       (common-lisp:cons "botReplicaStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-replica-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-request-bot-id :shape "Id"
                         :location "uri" :location-name "botId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bot-request 'make-describe-bot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-bot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-resource-generation-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-resource-generation-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-resource-generation-request-bot-version
                         :shape "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-describe-bot-resource-generation-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId")
                        (generation-id :initarg :generation-id :initform
                         (common-lisp:error ":generationid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-resource-generation-request-generation-id
                         :shape "Id" :location "uri" :location-name
                         "generationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bot-resource-generation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-bot-resource-generation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bot-resource-generation-request
                    'make-describe-bot-resource-generation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-resource-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-resource-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-resource-generation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-resource-generation-response
                       common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-resource-generation-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-resource-generation-response-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-describe-bot-resource-generation-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generation-id :initarg :generation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-resource-generation-response-generation-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-resource-generation-response-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generation-status :initarg :generation-status
                         :initform common-lisp:nil :type
                         (common-lisp:or generation-status common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-resource-generation-response-generation-status
                         :shape "GenerationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generation-input-prompt :initarg
                         :generation-input-prompt :initform common-lisp:nil
                         :type
                         (common-lisp:or generation-input common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-resource-generation-response-generation-input-prompt
                         :shape "GenerationInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generated-bot-locale-url :initarg
                         :generated-bot-locale-url :initform common-lisp:nil
                         :type
                         (common-lisp:or presigned-s3url common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-resource-generation-response-generated-bot-locale-url
                         :shape "PresignedS3Url" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-bot-resource-generation-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-arn :initarg :model-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or bedrock-model-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-resource-generation-response-model-arn
                         :shape "BedrockModelArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-resource-generation-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bot-resource-generation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-bot-resource-generation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bot-resource-generation-response
                    'make-describe-bot-resource-generation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-resource-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-resource-generation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-id))
      (common-lisp:list
       (common-lisp:cons "generationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-status))
      (common-lisp:list
       (common-lisp:cons "generationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-input-prompt))
      (common-lisp:list
       (common-lisp:cons "generationInputPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-bot-locale-url))
      (common-lisp:list
       (common-lisp:cons "generatedBotLocaleUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "modelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-resource-generation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-response-bot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-name :initarg :bot-name :initform common-lisp:nil
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-bot-response-bot-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-response-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-describe-bot-response-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-privacy :initarg :data-privacy :initform
                         common-lisp:nil :type
                         (common-lisp:or data-privacy common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-response-data-privacy :shape
                         "DataPrivacy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :idle-session-ttlin-seconds :initform common-lisp:nil
                         :type (common-lisp:or session-ttl common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-response-idle-session-ttlin-seconds
                         :shape "SessionTTL" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-status :initarg :bot-status :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         struct-shape-describe-bot-response-bot-status :shape
                         "BotStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-bot-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-type :initarg :bot-type :initform common-lisp:nil
                         :type (common-lisp:or bot-type common-lisp:null)
                         :accessor struct-shape-describe-bot-response-bot-type
                         :shape "BotType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-members :initarg :bot-members :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-members common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-response-bot-members :shape
                         "BotMembers" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-response-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bot-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bot-response 'make-describe-bot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-privacy))
      (common-lisp:list
       (common-lisp:cons "dataPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-type))
      (common-lisp:list
       (common-lisp:cons "botType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-members))
      (common-lisp:list
       (common-lisp:cons "botMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-version-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-version-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-version-request-bot-version
                         :shape "NumericalBotVersion" :location "uri"
                         :location-name "botVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bot-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bot-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bot-version-request
                    'make-describe-bot-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bot-version-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-bot-version-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-name :initarg :bot-name :initform common-lisp:nil
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-bot-version-response-bot-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-version-response-bot-version
                         :shape "NumericalBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-version-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-version-response-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-privacy :initarg :data-privacy :initform
                         common-lisp:nil :type
                         (common-lisp:or data-privacy common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-version-response-data-privacy
                         :shape "DataPrivacy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :idle-session-ttlin-seconds :initform common-lisp:nil
                         :type (common-lisp:or session-ttl common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-version-response-idle-session-ttlin-seconds
                         :shape "SessionTTL" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-status :initarg :bot-status :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         struct-shape-describe-bot-version-response-bot-status
                         :shape "BotStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-version-response-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-bot-version-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parent-bot-networks :initarg :parent-bot-networks
                         :initform common-lisp:nil :type
                         (common-lisp:or parent-bot-networks common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-version-response-parent-bot-networks
                         :shape "ParentBotNetworks" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-type :initarg :bot-type :initform common-lisp:nil
                         :type (common-lisp:or bot-type common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-version-response-bot-type
                         :shape "BotType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-members :initarg :bot-members :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-members common-lisp:null)
                         :accessor
                         struct-shape-describe-bot-version-response-bot-members
                         :shape "BotMembers" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-bot-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-bot-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-bot-version-response
                    'make-describe-bot-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-privacy))
      (common-lisp:list
       (common-lisp:cons "dataPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-bot-networks))
      (common-lisp:list
       (common-lisp:cons "parentBotNetworks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-type))
      (common-lisp:list
       (common-lisp:cons "botType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-members))
      (common-lisp:list
       (common-lisp:cons "botMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bot-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-custom-vocabulary-metadata-request
                       common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-custom-vocabulary-metadata-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-vocabulary-metadata-request-bot-version
                         :shape "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-describe-custom-vocabulary-metadata-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-custom-vocabulary-metadata-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-vocabulary-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-custom-vocabulary-metadata-request
                    'make-describe-custom-vocabulary-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-vocabulary-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-vocabulary-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-vocabulary-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-custom-vocabulary-metadata-response
                       common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-custom-vocabulary-metadata-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-vocabulary-metadata-response-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-describe-custom-vocabulary-metadata-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-vocabulary-status :initarg
                         :custom-vocabulary-status :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-vocabulary-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-vocabulary-metadata-response-custom-vocabulary-status
                         :shape "CustomVocabularyStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-custom-vocabulary-metadata-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-vocabulary-metadata-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-custom-vocabulary-metadata-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-vocabulary-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-custom-vocabulary-metadata-response
                    'make-describe-custom-vocabulary-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-vocabulary-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-vocabulary-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-vocabulary-status))
      (common-lisp:list
       (common-lisp:cons "customVocabularyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-vocabulary-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-export-request common-lisp:nil
                       ((export-id :initarg :export-id :initform
                         (common-lisp:error ":exportid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-export-request-export-id :shape
                         "Id" :location "uri" :location-name "exportId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-export-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-export-request 'make-describe-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-export-response common-lisp:nil
                       ((export-id :initarg :export-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-export-response-export-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-specification :initarg
                         :resource-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or export-resource-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-export-response-resource-specification
                         :shape "ExportResourceSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (file-format :initarg :file-format :initform
                         common-lisp:nil :type
                         (common-lisp:or import-export-file-format
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-export-response-file-format
                         :shape "ImportExportFileFormat" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (export-status :initarg :export-status :initform
                         common-lisp:nil :type
                         (common-lisp:or export-status common-lisp:null)
                         :accessor
                         struct-shape-describe-export-response-export-status
                         :shape "ExportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-describe-export-response-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (download-url :initarg :download-url :initform
                         common-lisp:nil :type
                         (common-lisp:or presigned-s3url common-lisp:null)
                         :accessor
                         struct-shape-describe-export-response-download-url
                         :shape "PresignedS3Url" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-export-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-export-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-export-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-export-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-export-response 'make-describe-export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "resourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "exportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-url))
      (common-lisp:list
       (common-lisp:cons "downloadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-import-request common-lisp:nil
                       ((import-id :initarg :import-id :initform
                         (common-lisp:error ":importid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-import-request-import-id :shape
                         "Id" :location "uri" :location-name "importId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-import-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-import-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-import-request 'make-describe-import-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-import-response common-lisp:nil
                       ((import-id :initarg :import-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-import-response-import-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-specification :initarg
                         :resource-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or import-resource-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-import-response-resource-specification
                         :shape "ImportResourceSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (imported-resource-id :initarg :imported-resource-id
                         :initform common-lisp:nil :type
                         (common-lisp:or imported-resource-id common-lisp:null)
                         :accessor
                         struct-shape-describe-import-response-imported-resource-id
                         :shape "ImportedResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (imported-resource-name :initarg
                         :imported-resource-name :initform common-lisp:nil
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-import-response-imported-resource-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (merge-strategy :initarg :merge-strategy :initform
                         common-lisp:nil :type
                         (common-lisp:or merge-strategy common-lisp:null)
                         :accessor
                         struct-shape-describe-import-response-merge-strategy
                         :shape "MergeStrategy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (import-status :initarg :import-status :initform
                         common-lisp:nil :type
                         (common-lisp:or import-status common-lisp:null)
                         :accessor
                         struct-shape-describe-import-response-import-status
                         :shape "ImportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-describe-import-response-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-import-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-import-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-import-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-import-response 'make-describe-import-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "importId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "resourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-resource-id))
      (common-lisp:list
       (common-lisp:cons "importedResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-resource-name))
      (common-lisp:list
       (common-lisp:cons "importedResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-strategy))
      (common-lisp:list
       (common-lisp:cons "mergeStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-status))
      (common-lisp:list
       (common-lisp:cons "importStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-intent-request common-lisp:nil
                       ((intent-id :initarg :intent-id :initform
                         (common-lisp:error ":intentid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-intent-request-intent-id :shape
                         "Id" :location "uri" :location-name "intentId")
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-intent-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-describe-intent-request-bot-version
                         :shape "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-describe-intent-request-locale-id :shape
                         "LocaleId" :location "uri" :location-name "localeId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-intent-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-intent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-intent-request 'make-describe-intent-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-intent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-intent-response common-lisp:nil
                       ((intent-id :initarg :intent-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-intent-response-intent-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (intent-name :initarg :intent-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-intent-response-intent-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-describe-intent-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parent-intent-signature :initarg
                         :parent-intent-signature :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-signature common-lisp:null)
                         :accessor
                         struct-shape-describe-intent-response-parent-intent-signature
                         :shape "IntentSignature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sample-utterances :initarg :sample-utterances
                         :initform common-lisp:nil :type
                         (common-lisp:or sample-utterances-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-intent-response-sample-utterances
                         :shape "SampleUtterancesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dialog-code-hook :initarg :dialog-code-hook :initform
                         common-lisp:nil :type
                         (common-lisp:or dialog-code-hook-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-intent-response-dialog-code-hook
                         :shape "DialogCodeHookSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (fulfillment-code-hook :initarg :fulfillment-code-hook
                         :initform common-lisp:nil :type
                         (common-lisp:or fulfillment-code-hook-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-intent-response-fulfillment-code-hook
                         :shape "FulfillmentCodeHookSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (slot-priorities :initarg :slot-priorities :initform
                         common-lisp:nil :type
                         (common-lisp:or slot-priorities-list common-lisp:null)
                         :accessor
                         struct-shape-describe-intent-response-slot-priorities
                         :shape "SlotPrioritiesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (intent-confirmation-setting :initarg
                         :intent-confirmation-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-confirmation-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-intent-response-intent-confirmation-setting
                         :shape "IntentConfirmationSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (intent-closing-setting :initarg
                         :intent-closing-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-closing-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-intent-response-intent-closing-setting
                         :shape "IntentClosingSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input-contexts :initarg :input-contexts :initform
                         common-lisp:nil :type
                         (common-lisp:or input-contexts-list common-lisp:null)
                         :accessor
                         struct-shape-describe-intent-response-input-contexts
                         :shape "InputContextsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-contexts :initarg :output-contexts :initform
                         common-lisp:nil :type
                         (common-lisp:or output-contexts-list common-lisp:null)
                         :accessor
                         struct-shape-describe-intent-response-output-contexts
                         :shape "OutputContextsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kendra-configuration :initarg :kendra-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or kendra-configuration common-lisp:null)
                         :accessor
                         struct-shape-describe-intent-response-kendra-configuration
                         :shape "KendraConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-intent-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-describe-intent-response-bot-version
                         :shape "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-describe-intent-response-locale-id :shape
                         "LocaleId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-intent-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-intent-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (initial-response-setting :initarg
                         :initial-response-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or initial-response-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-intent-response-initial-response-setting
                         :shape "InitialResponseSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (qn-aintent-configuration :initarg
                         :qn-aintent-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or qn-aintent-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-intent-response-qn-aintent-configuration
                         :shape "QnAIntentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-intent-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-intent-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-intent-response 'make-describe-intent-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-intent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-intent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-intent-signature))
      (common-lisp:list
       (common-lisp:cons "parentIntentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-code-hook))
      (common-lisp:list
       (common-lisp:cons "dialogCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fulfillment-code-hook))
      (common-lisp:list
       (common-lisp:cons "fulfillmentCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-priorities))
      (common-lisp:list
       (common-lisp:cons "slotPriorities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-confirmation-setting))
      (common-lisp:list
       (common-lisp:cons "intentConfirmationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-closing-setting))
      (common-lisp:list
       (common-lisp:cons "intentClosingSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-contexts))
      (common-lisp:list
       (common-lisp:cons "inputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-contexts))
      (common-lisp:list
       (common-lisp:cons "outputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kendra-configuration))
      (common-lisp:list
       (common-lisp:cons "kendraConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-response-setting))
      (common-lisp:list
       (common-lisp:cons "initialResponseSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qn-aintent-configuration))
      (common-lisp:list
       (common-lisp:cons "qnAIntentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-intent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resource-policy-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-describe-resource-policy-request-resource-arn
                         :shape "AmazonResourceName" :location "uri"
                         :location-name "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-resource-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-resource-policy-request
                    'make-describe-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resource-policy-response common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-describe-resource-policy-response-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy :initarg :policy :initform common-lisp:nil
                         :type (common-lisp:or policy common-lisp:null)
                         :accessor
                         struct-shape-describe-resource-policy-response-policy
                         :shape "Policy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-describe-resource-policy-response-revision-id
                         :shape "RevisionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-resource-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-resource-policy-response
                    'make-describe-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-slot-request common-lisp:nil
                       ((slot-id :initarg :slot-id :initform
                         (common-lisp:error ":slotid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-slot-request-slot-id :shape "Id"
                         :location "uri" :location-name "slotId")
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-slot-request-bot-id :shape "Id"
                         :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-request-bot-version :shape
                         "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-describe-slot-request-locale-id :shape
                         "LocaleId" :location "uri" :location-name "localeId")
                        (intent-id :initarg :intent-id :initform
                         (common-lisp:error ":intentid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-slot-request-intent-id :shape
                         "Id" :location "uri" :location-name "intentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-slot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-slot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-slot-request 'make-describe-slot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-slot-response common-lisp:nil
                       ((slot-id :initarg :slot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-slot-response-slot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-name :initarg :slot-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-slot-response-slot-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-response-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-type-id :initarg :slot-type-id :initform
                         common-lisp:nil :type
                         (common-lisp:or built-in-or-custom-slot-type-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-response-slot-type-id
                         :shape "BuiltInOrCustomSlotTypeId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value-elicitation-setting :initarg
                         :value-elicitation-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-value-elicitation-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-response-value-elicitation-setting
                         :shape "SlotValueElicitationSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (obfuscation-setting :initarg :obfuscation-setting
                         :initform common-lisp:nil :type
                         (common-lisp:or obfuscation-setting common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-response-obfuscation-setting
                         :shape "ObfuscationSetting" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-slot-response-bot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-response-bot-version :shape
                         "BotVersion" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-describe-slot-response-locale-id :shape
                         "LocaleId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (intent-id :initarg :intent-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-slot-response-intent-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-slot-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multiple-values-setting :initarg
                         :multiple-values-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or multiple-values-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-response-multiple-values-setting
                         :shape "MultipleValuesSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sub-slot-setting :initarg :sub-slot-setting :initform
                         common-lisp:nil :type
                         (common-lisp:or sub-slot-setting common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-response-sub-slot-setting
                         :shape "SubSlotSetting" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-slot-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-slot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-slot-response 'make-describe-slot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-id))
      (common-lisp:list
       (common-lisp:cons "slotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "slotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-elicitation-setting))
      (common-lisp:list
       (common-lisp:cons "valueElicitationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obfuscation-setting))
      (common-lisp:list
       (common-lisp:cons "obfuscationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiple-values-setting))
      (common-lisp:list
       (common-lisp:cons "multipleValuesSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slot-setting))
      (common-lisp:list
       (common-lisp:cons "subSlotSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-slot-type-request common-lisp:nil
                       ((slot-type-id :initarg :slot-type-id :initform
                         (common-lisp:error ":slottypeid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-slot-type-request-slot-type-id
                         :shape "Id" :location "uri" :location-name
                         "slotTypeId")
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-slot-type-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-type-request-bot-version
                         :shape "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-describe-slot-type-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-slot-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-slot-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-slot-type-request
                    'make-describe-slot-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-slot-type-response common-lisp:nil
                       ((slot-type-id :initarg :slot-type-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-slot-type-response-slot-type-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-type-name :initarg :slot-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-slot-type-response-slot-type-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-type-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slot-type-values :initarg :slot-type-values :initform
                         common-lisp:nil :type
                         (common-lisp:or slot-type-values common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-type-response-slot-type-values
                         :shape "SlotTypeValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value-selection-setting :initarg
                         :value-selection-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-value-selection-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-type-response-value-selection-setting
                         :shape "SlotValueSelectionSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (parent-slot-type-signature :initarg
                         :parent-slot-type-signature :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-type-signature common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-type-response-parent-slot-type-signature
                         :shape "SlotTypeSignature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-slot-type-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-type-response-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-describe-slot-type-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-slot-type-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-type-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-source-setting :initarg
                         :external-source-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or external-source-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-type-response-external-source-setting
                         :shape "ExternalSourceSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (composite-slot-type-setting :initarg
                         :composite-slot-type-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or composite-slot-type-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-slot-type-response-composite-slot-type-setting
                         :shape "CompositeSlotTypeSetting" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-slot-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-slot-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-slot-type-response
                    'make-describe-slot-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-name))
      (common-lisp:list
       (common-lisp:cons "slotTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-values))
      (common-lisp:list
       (common-lisp:cons "slotTypeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-selection-setting))
      (common-lisp:list
       (common-lisp:cons "valueSelectionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "parentSlotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-source-setting))
      (common-lisp:list
       (common-lisp:cons "externalSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-slot-type-setting))
      (common-lisp:list
       (common-lisp:cons "compositeSlotTypeSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-slot-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-test-execution-request common-lisp:nil
                       ((test-execution-id :initarg :test-execution-id
                         :initform
                         (common-lisp:error ":testexecutionid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-test-execution-request-test-execution-id
                         :shape "Id" :location "uri" :location-name
                         "testExecutionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-test-execution-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-test-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-test-execution-request
                    'make-describe-test-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-test-execution-response common-lisp:nil
                       ((test-execution-id :initarg :test-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-test-execution-response-test-execution-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-test-execution-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-test-execution-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-execution-status :initarg :test-execution-status
                         :initform common-lisp:nil :type
                         (common-lisp:or test-execution-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-test-execution-response-test-execution-status
                         :shape "TestExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-set-id :initarg :test-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-test-execution-response-test-set-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (test-set-name :initarg :test-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-test-execution-response-test-set-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target :initarg :target :initform common-lisp:nil
                         :type
                         (common-lisp:or test-execution-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-test-execution-response-target
                         :shape "TestExecutionTarget" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (api-mode :initarg :api-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or test-execution-api-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-test-execution-response-api-mode
                         :shape "TestExecutionApiMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (test-execution-modality :initarg
                         :test-execution-modality :initform common-lisp:nil
                         :type
                         (common-lisp:or test-execution-modality
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-test-execution-response-test-execution-modality
                         :shape "TestExecutionModality" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-describe-test-execution-response-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-test-execution-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-test-execution-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-test-execution-response
                    'make-describe-test-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-execution-id))
      (common-lisp:list
       (common-lisp:cons "testExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-execution-status))
      (common-lisp:list
       (common-lisp:cons "testExecutionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-id))
      (common-lisp:list
       (common-lisp:cons "testSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-name))
      (common-lisp:list
       (common-lisp:cons "testSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-mode))
      (common-lisp:list
       (common-lisp:cons "apiMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-execution-modality))
      (common-lisp:list
       (common-lisp:cons "testExecutionModality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-test-set-discrepancy-report-request
                       common-lisp:nil
                       ((test-set-discrepancy-report-id :initarg
                         :test-set-discrepancy-report-id :initform
                         (common-lisp:error
                          ":testsetdiscrepancyreportid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-test-set-discrepancy-report-request-test-set-discrepancy-report-id
                         :shape "Id" :location "uri" :location-name
                         "testSetDiscrepancyReportId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-test-set-discrepancy-report-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-test-set-discrepancy-report-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-test-set-discrepancy-report-request
                    'make-describe-test-set-discrepancy-report-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-discrepancy-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-discrepancy-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-discrepancy-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-test-set-discrepancy-report-response
                       common-lisp:nil
                       ((test-set-discrepancy-report-id :initarg
                         :test-set-discrepancy-report-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-test-set-discrepancy-report-response-test-set-discrepancy-report-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (test-set-id :initarg :test-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-test-set-discrepancy-report-response-test-set-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-test-set-discrepancy-report-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target :initarg :target :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          test-set-discrepancy-report-resource-target
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-discrepancy-report-response-target
                         :shape "TestSetDiscrepancyReportResourceTarget"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (test-set-discrepancy-report-status :initarg
                         :test-set-discrepancy-report-status :initform
                         common-lisp:nil :type
                         (common-lisp:or test-set-discrepancy-report-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-discrepancy-report-response-test-set-discrepancy-report-status
                         :shape "TestSetDiscrepancyReportStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-updated-data-time :initarg
                         :last-updated-data-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-discrepancy-report-response-last-updated-data-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-set-discrepancy-top-errors :initarg
                         :test-set-discrepancy-top-errors :initform
                         common-lisp:nil :type
                         (common-lisp:or test-set-discrepancy-errors
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-discrepancy-report-response-test-set-discrepancy-top-errors
                         :shape "TestSetDiscrepancyErrors" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (test-set-discrepancy-raw-output-url :initarg
                         :test-set-discrepancy-raw-output-url :initform
                         common-lisp:nil :type
                         (common-lisp:or presigned-s3url common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-discrepancy-report-response-test-set-discrepancy-raw-output-url
                         :shape "PresignedS3Url" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-discrepancy-report-response-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-test-set-discrepancy-report-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-test-set-discrepancy-report-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-test-set-discrepancy-report-response
                    'make-describe-test-set-discrepancy-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-discrepancy-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-discrepancy-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-set-discrepancy-report-id))
      (common-lisp:list
       (common-lisp:cons "testSetDiscrepancyReportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-id))
      (common-lisp:list
       (common-lisp:cons "testSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-set-discrepancy-report-status))
      (common-lisp:list
       (common-lisp:cons "testSetDiscrepancyReportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-data-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDataTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-set-discrepancy-top-errors))
      (common-lisp:list
       (common-lisp:cons "testSetDiscrepancyTopErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-set-discrepancy-raw-output-url))
      (common-lisp:list
       (common-lisp:cons "testSetDiscrepancyRawOutputUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-discrepancy-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-test-set-generation-request common-lisp:nil
                       ((test-set-generation-id :initarg
                         :test-set-generation-id :initform
                         (common-lisp:error ":testsetgenerationid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-test-set-generation-request-test-set-generation-id
                         :shape "Id" :location "uri" :location-name
                         "testSetGenerationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-test-set-generation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-test-set-generation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-test-set-generation-request
                    'make-describe-test-set-generation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-generation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-test-set-generation-response common-lisp:nil
                       ((test-set-generation-id :initarg
                         :test-set-generation-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-test-set-generation-response-test-set-generation-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (test-set-generation-status :initarg
                         :test-set-generation-status :initform common-lisp:nil
                         :type
                         (common-lisp:or test-set-generation-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-generation-response-test-set-generation-status
                         :shape "TestSetGenerationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-generation-response-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-set-id :initarg :test-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-test-set-generation-response-test-set-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (test-set-name :initarg :test-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-test-set-generation-response-test-set-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-generation-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-location :initarg :storage-location :initform
                         common-lisp:nil :type
                         (common-lisp:or test-set-storage-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-generation-response-storage-location
                         :shape "TestSetStorageLocation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (generation-data-source :initarg
                         :generation-data-source :initform common-lisp:nil
                         :type
                         (common-lisp:or test-set-generation-data-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-generation-response-generation-data-source
                         :shape "TestSetGenerationDataSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-generation-response-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-test-set-generation-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-generation-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-test-set-generation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-test-set-generation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-test-set-generation-response
                    'make-describe-test-set-generation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-generation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-set-generation-id))
      (common-lisp:list
       (common-lisp:cons "testSetGenerationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-set-generation-status))
      (common-lisp:list
       (common-lisp:cons "testSetGenerationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-id))
      (common-lisp:list
       (common-lisp:cons "testSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-name))
      (common-lisp:list
       (common-lisp:cons "testSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-location))
      (common-lisp:list
       (common-lisp:cons "storageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-data-source))
      (common-lisp:list
       (common-lisp:cons "generationDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-generation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-test-set-request common-lisp:nil
                       ((test-set-id :initarg :test-set-id :initform
                         (common-lisp:error ":testsetid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-test-set-request-test-set-id
                         :shape "Id" :location "uri" :location-name
                         "testSetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-test-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-test-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-test-set-request
                    'make-describe-test-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-test-set-response common-lisp:nil
                       ((test-set-id :initarg :test-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-describe-test-set-response-test-set-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (test-set-name :initarg :test-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-test-set-response-test-set-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modality :initarg :modality :initform common-lisp:nil
                         :type
                         (common-lisp:or test-set-modality common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-response-modality
                         :shape "TestSetModality" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or test-set-status common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-response-status :shape
                         "TestSetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-response-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-turns :initarg :num-turns :initform
                         common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-describe-test-set-response-num-turns
                         :shape "Count" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-location :initarg :storage-location :initform
                         common-lisp:nil :type
                         (common-lisp:or test-set-storage-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-response-storage-location
                         :shape "TestSetStorageLocation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-test-set-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-test-set-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-test-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-test-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-test-set-response
                    'make-describe-test-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-id))
      (common-lisp:list
       (common-lisp:cons "testSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-name))
      (common-lisp:list
       (common-lisp:cons "testSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modality))
      (common-lisp:list
       (common-lisp:cons "modality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-turns))
      (common-lisp:list
       (common-lisp:cons "numTurns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-location))
      (common-lisp:list
       (common-lisp:cons "storageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-test-set-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass descriptive-bot-builder-specification common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-descriptive-bot-builder-specification-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bedrock-model-specification :initarg
                         :bedrock-model-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or bedrock-model-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-descriptive-bot-builder-specification-bedrock-model-specification
                         :shape "BedrockModelSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-descriptive-bot-builder-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'descriptive-bot-builder-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'descriptive-bot-builder-specification
                    'make-descriptive-bot-builder-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          descriptive-bot-builder-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          descriptive-bot-builder-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bedrock-model-specification))
      (common-lisp:list
       (common-lisp:cons "bedrockModelSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          descriptive-bot-builder-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dialog-action common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or dialog-action-type common-lisp:null)
                         :accessor struct-shape-dialog-action-type :shape
                         "DialogActionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slot-to-elicit :initarg :slot-to-elicit :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-dialog-action-slot-to-elicit :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (suppress-next-message :initarg :suppress-next-message
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-dialog-action-suppress-next-message
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dialog-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dialog-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dialog-action 'make-dialog-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dialog-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dialog-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-to-elicit))
      (common-lisp:list
       (common-lisp:cons "slotToElicit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppress-next-message))
      (common-lisp:list
       (common-lisp:cons "suppressNextMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dialog-action))
   common-lisp:nil))
(common-lisp:deftype dialog-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dialog-code-hook-invocation-setting common-lisp:nil
                       ((enable-code-hook-invocation :initarg
                         :enable-code-hook-invocation :initform
                         (common-lisp:error
                          ":enablecodehookinvocation is required")
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-dialog-code-hook-invocation-setting-enable-code-hook-invocation
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (active :initarg :active :initform
                         (common-lisp:error ":active is required") :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-dialog-code-hook-invocation-setting-active
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (invocation-label :initarg :invocation-label :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-dialog-code-hook-invocation-setting-invocation-label
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (post-code-hook-specification :initarg
                         :post-code-hook-specification :initform
                         (common-lisp:error
                          ":postcodehookspecification is required")
                         :type
                         (common-lisp:or
                          post-dialog-code-hook-invocation-specification
                          common-lisp:null)
                         :accessor
                         struct-shape-dialog-code-hook-invocation-setting-post-code-hook-specification
                         :shape "PostDialogCodeHookInvocationSpecification"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dialog-code-hook-invocation-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dialog-code-hook-invocation-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dialog-code-hook-invocation-setting
                    'make-dialog-code-hook-invocation-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dialog-code-hook-invocation-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dialog-code-hook-invocation-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-code-hook-invocation))
      (common-lisp:list
       (common-lisp:cons "enableCodeHookInvocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-label))
      (common-lisp:list
       (common-lisp:cons "invocationLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-code-hook-specification))
      (common-lisp:list
       (common-lisp:cons "postCodeHookSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dialog-code-hook-invocation-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dialog-code-hook-settings common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-dialog-code-hook-settings-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dialog-code-hook-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dialog-code-hook-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dialog-code-hook-settings
                    'make-dialog-code-hook-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dialog-code-hook-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dialog-code-hook-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dialog-code-hook-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dialog-state common-lisp:nil
                       ((dialog-action :initarg :dialog-action :initform
                         common-lisp:nil :type
                         (common-lisp:or dialog-action common-lisp:null)
                         :accessor struct-shape-dialog-state-dialog-action
                         :shape "DialogAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (intent :initarg :intent :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-override common-lisp:null)
                         :accessor struct-shape-dialog-state-intent :shape
                         "IntentOverride" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-attributes :initarg :session-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         struct-shape-dialog-state-session-attributes :shape
                         "StringMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dialog-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dialog-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dialog-state 'make-dialog-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dialog-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dialog-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-action))
      (common-lisp:list
       (common-lisp:cons "dialogAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent))
      (common-lisp:list
       (common-lisp:cons "intent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-attributes))
      (common-lisp:list
       (common-lisp:cons "sessionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dialog-state))
   common-lisp:nil))
(common-lisp:deftype domain-endpoint () 'common-lisp:string)
(common-lisp:deftype draft-bot-version () 'common-lisp:string)
(common-lisp:deftype effect () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass elicitation-code-hook-invocation-setting common-lisp:nil
                       ((enable-code-hook-invocation :initarg
                         :enable-code-hook-invocation :initform
                         (common-lisp:error
                          ":enablecodehookinvocation is required")
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-elicitation-code-hook-invocation-setting-enable-code-hook-invocation
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (invocation-label :initarg :invocation-label :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-elicitation-code-hook-invocation-setting-invocation-label
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-elicitation-code-hook-invocation-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'elicitation-code-hook-invocation-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'elicitation-code-hook-invocation-setting
                    'make-elicitation-code-hook-invocation-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elicitation-code-hook-invocation-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elicitation-code-hook-invocation-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-code-hook-invocation))
      (common-lisp:list
       (common-lisp:cons "enableCodeHookInvocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-label))
      (common-lisp:list
       (common-lisp:cons "invocationLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elicitation-code-hook-invocation-setting))
   common-lisp:nil))
(common-lisp:deftype enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass encryption-setting common-lisp:nil
                       ((kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor struct-shape-encryption-setting-kms-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-locale-export-password :initarg
                         :bot-locale-export-password :initform common-lisp:nil
                         :type (common-lisp:or file-password common-lisp:null)
                         :accessor
                         struct-shape-encryption-setting-bot-locale-export-password
                         :shape "FilePassword" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (associated-transcripts-password :initarg
                         :associated-transcripts-password :initform
                         common-lisp:nil :type
                         (common-lisp:or file-password common-lisp:null)
                         :accessor
                         struct-shape-encryption-setting-associated-transcripts-password
                         :shape "FilePassword" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encryption-setting 'make-encryption-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-locale-export-password))
      (common-lisp:list
       (common-lisp:cons "botLocaleExportPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-transcripts-password))
      (common-lisp:list
       (common-lisp:cons "associatedTranscriptsPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-setting))
   common-lisp:nil))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass exact-response-fields common-lisp:nil
                       ((question-field :initarg :question-field :initform
                         (common-lisp:error ":questionfield is required") :type
                         (common-lisp:or question-field common-lisp:null)
                         :accessor
                         struct-shape-exact-response-fields-question-field
                         :shape "QuestionField" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (answer-field :initarg :answer-field :initform
                         (common-lisp:error ":answerfield is required") :type
                         (common-lisp:or answer-field common-lisp:null)
                         :accessor
                         struct-shape-exact-response-fields-answer-field :shape
                         "AnswerField" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-exact-response-fields
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'exact-response-fields
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'exact-response-fields 'make-exact-response-fields))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          exact-response-fields))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          exact-response-fields))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'question-field))
      (common-lisp:list
       (common-lisp:cons "questionField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'answer-field))
      (common-lisp:list
       (common-lisp:cons "answerField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          exact-response-fields))
   common-lisp:nil))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execution-error-details common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         (common-lisp:error ":errorcode is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-execution-error-details-error-code :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         (common-lisp:error ":errormessage is required") :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         struct-shape-execution-error-details-error-message
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execution-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execution-error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execution-error-details 'make-execution-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execution-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execution-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execution-error-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or export-filter-name common-lisp:null)
                         :accessor struct-shape-export-filter-name :shape
                         "ExportFilterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor struct-shape-export-filter-values :shape
                         "FilterValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or export-filter-operator
                                         common-lisp:null)
                         :accessor struct-shape-export-filter-operator :shape
                         "ExportFilterOperator" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'export-filter 'make-export-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-filter))
   common-lisp:nil))
(common-lisp:deftype export-filter-name () 'common-lisp:string)
(common-lisp:deftype export-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype export-filters ()
   '(trivial-types:proper-list export-filter))
 (common-lisp:defun make-export-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass export-resource-specification common-lisp:nil
                       ((bot-export-specification :initarg
                         :bot-export-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-export-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-resource-specification-bot-export-specification
                         :shape "BotExportSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bot-locale-export-specification :initarg
                         :bot-locale-export-specification :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-locale-export-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-resource-specification-bot-locale-export-specification
                         :shape "BotLocaleExportSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-vocabulary-export-specification :initarg
                         :custom-vocabulary-export-specification :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-vocabulary-export-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-resource-specification-custom-vocabulary-export-specification
                         :shape "CustomVocabularyExportSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (test-set-export-specification :initarg
                         :test-set-export-specification :initform
                         common-lisp:nil :type
                         (common-lisp:or test-set-export-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-resource-specification-test-set-export-specification
                         :shape "TestSetExportSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-resource-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-resource-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-resource-specification
                    'make-export-resource-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-resource-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-resource-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-export-specification))
      (common-lisp:list
       (common-lisp:cons "botExportSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-locale-export-specification))
      (common-lisp:list
       (common-lisp:cons "botLocaleExportSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-vocabulary-export-specification))
      (common-lisp:list
       (common-lisp:cons "customVocabularyExportSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-set-export-specification))
      (common-lisp:list
       (common-lisp:cons "testSetExportSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-resource-specification))
   common-lisp:nil))
(common-lisp:deftype export-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-sort-by common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or export-sort-attribute
                                         common-lisp:null)
                         :accessor struct-shape-export-sort-by-attribute :shape
                         "ExportSortAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-export-sort-by-order :shape "SortOrder"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-sort-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'export-sort-by 'make-export-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-sort-by))
   common-lisp:nil))
(common-lisp:deftype export-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-summary common-lisp:nil
                       ((export-id :initarg :export-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-export-summary-export-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-specification :initarg
                         :resource-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or export-resource-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-summary-resource-specification
                         :shape "ExportResourceSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (file-format :initarg :file-format :initform
                         common-lisp:nil :type
                         (common-lisp:or import-export-file-format
                                         common-lisp:null)
                         :accessor struct-shape-export-summary-file-format
                         :shape "ImportExportFileFormat" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (export-status :initarg :export-status :initform
                         common-lisp:nil :type
                         (common-lisp:or export-status common-lisp:null)
                         :accessor struct-shape-export-summary-export-status
                         :shape "ExportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-export-summary-creation-date-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-export-summary-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'export-summary 'make-export-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "resourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "exportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype export-summary-list ()
   '(trivial-types:proper-list export-summary))
 (common-lisp:defun make-export-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass external-source-setting common-lisp:nil
                       ((grammar-slot-type-setting :initarg
                         :grammar-slot-type-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or grammar-slot-type-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-external-source-setting-grammar-slot-type-setting
                         :shape "GrammarSlotTypeSetting" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-external-source-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'external-source-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'external-source-setting 'make-external-source-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          external-source-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          external-source-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grammar-slot-type-setting))
      (common-lisp:list
       (common-lisp:cons "grammarSlotTypeSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          external-source-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failed-custom-vocabulary-item common-lisp:nil
                       ((item-id :initarg :item-id :initform common-lisp:nil
                         :type (common-lisp:or item-id common-lisp:null)
                         :accessor
                         struct-shape-failed-custom-vocabulary-item-item-id
                         :shape "ItemId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-failed-custom-vocabulary-item-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-failed-custom-vocabulary-item-error-code
                         :shape "ErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failed-custom-vocabulary-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'failed-custom-vocabulary-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'failed-custom-vocabulary-item
                    'make-failed-custom-vocabulary-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failed-custom-vocabulary-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failed-custom-vocabulary-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-id))
      (common-lisp:list
       (common-lisp:cons "itemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failed-custom-vocabulary-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-custom-vocabulary-items ()
   '(trivial-types:proper-list failed-custom-vocabulary-item))
 (common-lisp:defun make-failed-custom-vocabulary-items
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-custom-vocabulary-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype failure-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype failure-reasons ()
   '(trivial-types:proper-list failure-reason))
 (common-lisp:defun make-failure-reasons
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failure-reason))
   aws-sdk/generator/shape::members))
(common-lisp:deftype file-password () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun make-filter-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass fulfillment-code-hook-settings common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-fulfillment-code-hook-settings-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (post-fulfillment-status-specification :initarg
                         :post-fulfillment-status-specification :initform
                         common-lisp:nil :type
                         (common-lisp:or post-fulfillment-status-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-fulfillment-code-hook-settings-post-fulfillment-status-specification
                         :shape "PostFulfillmentStatusSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (fulfillment-updates-specification :initarg
                         :fulfillment-updates-specification :initform
                         common-lisp:nil :type
                         (common-lisp:or fulfillment-updates-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-fulfillment-code-hook-settings-fulfillment-updates-specification
                         :shape "FulfillmentUpdatesSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (active :initarg :active :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-fulfillment-code-hook-settings-active
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fulfillment-code-hook-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'fulfillment-code-hook-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fulfillment-code-hook-settings
                    'make-fulfillment-code-hook-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-code-hook-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-code-hook-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-fulfillment-status-specification))
      (common-lisp:list
       (common-lisp:cons "postFulfillmentStatusSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fulfillment-updates-specification))
      (common-lisp:list
       (common-lisp:cons "fulfillmentUpdatesSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-code-hook-settings))
   common-lisp:nil))
(common-lisp:deftype fulfillment-start-response-delay () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass fulfillment-start-response-specification common-lisp:nil
                       ((delay-in-seconds :initarg :delay-in-seconds :initform
                         (common-lisp:error ":delayinseconds is required")
                         :type
                         (common-lisp:or fulfillment-start-response-delay
                                         common-lisp:null)
                         :accessor
                         struct-shape-fulfillment-start-response-specification-delay-in-seconds
                         :shape "FulfillmentStartResponseDelay" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message-groups :initarg :message-groups :initform
                         (common-lisp:error ":messagegroups is required") :type
                         (common-lisp:or message-groups-list common-lisp:null)
                         :accessor
                         struct-shape-fulfillment-start-response-specification-message-groups
                         :shape "MessageGroupsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-interrupt :initarg :allow-interrupt :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-fulfillment-start-response-specification-allow-interrupt
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fulfillment-start-response-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'fulfillment-start-response-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fulfillment-start-response-specification
                    'make-fulfillment-start-response-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-start-response-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-start-response-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delay-in-seconds))
      (common-lisp:list
       (common-lisp:cons "delayInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-groups))
      (common-lisp:list
       (common-lisp:cons "messageGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-interrupt))
      (common-lisp:list
       (common-lisp:cons "allowInterrupt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-start-response-specification))
   common-lisp:nil))
(common-lisp:deftype fulfillment-timeout () 'common-lisp:integer)
(common-lisp:deftype fulfillment-update-response-frequency ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass fulfillment-update-response-specification
                       common-lisp:nil
                       ((frequency-in-seconds :initarg :frequency-in-seconds
                         :initform
                         (common-lisp:error ":frequencyinseconds is required")
                         :type
                         (common-lisp:or fulfillment-update-response-frequency
                                         common-lisp:null)
                         :accessor
                         struct-shape-fulfillment-update-response-specification-frequency-in-seconds
                         :shape "FulfillmentUpdateResponseFrequency" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message-groups :initarg :message-groups :initform
                         (common-lisp:error ":messagegroups is required") :type
                         (common-lisp:or message-groups-list common-lisp:null)
                         :accessor
                         struct-shape-fulfillment-update-response-specification-message-groups
                         :shape "MessageGroupsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-interrupt :initarg :allow-interrupt :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-fulfillment-update-response-specification-allow-interrupt
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fulfillment-update-response-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'fulfillment-update-response-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fulfillment-update-response-specification
                    'make-fulfillment-update-response-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-update-response-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-update-response-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frequency-in-seconds))
      (common-lisp:list
       (common-lisp:cons "frequencyInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-groups))
      (common-lisp:list
       (common-lisp:cons "messageGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-interrupt))
      (common-lisp:list
       (common-lisp:cons "allowInterrupt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-update-response-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fulfillment-updates-specification common-lisp:nil
                       ((active :initarg :active :initform
                         (common-lisp:error ":active is required") :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-fulfillment-updates-specification-active
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-response :initarg :start-response :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          fulfillment-start-response-specification
                          common-lisp:null)
                         :accessor
                         struct-shape-fulfillment-updates-specification-start-response
                         :shape "FulfillmentStartResponseSpecification"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-response :initarg :update-response :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          fulfillment-update-response-specification
                          common-lisp:null)
                         :accessor
                         struct-shape-fulfillment-updates-specification-update-response
                         :shape "FulfillmentUpdateResponseSpecification"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timeout-in-seconds :initarg :timeout-in-seconds
                         :initform common-lisp:nil :type
                         (common-lisp:or fulfillment-timeout common-lisp:null)
                         :accessor
                         struct-shape-fulfillment-updates-specification-timeout-in-seconds
                         :shape "FulfillmentTimeout" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fulfillment-updates-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'fulfillment-updates-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fulfillment-updates-specification
                    'make-fulfillment-updates-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-updates-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-updates-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-response))
      (common-lisp:list
       (common-lisp:cons "startResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-response))
      (common-lisp:list
       (common-lisp:cons "updateResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fulfillment-updates-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-bot-element-request common-lisp:nil
                       ((intent-id :initarg :intent-id :initform
                         (common-lisp:error ":intentid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-generate-bot-element-request-intent-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-generate-bot-element-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-generate-bot-element-request-bot-version
                         :shape "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-generate-bot-element-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-bot-element-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'generate-bot-element-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-bot-element-request
                    'make-generate-bot-element-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-bot-element-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-bot-element-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-bot-element-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-bot-element-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-generate-bot-element-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-generate-bot-element-response-bot-version
                         :shape "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-generate-bot-element-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (intent-id :initarg :intent-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-generate-bot-element-response-intent-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sample-utterances :initarg :sample-utterances
                         :initform common-lisp:nil :type
                         (common-lisp:or sample-utterances-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-generate-bot-element-response-sample-utterances
                         :shape "SampleUtterancesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-bot-element-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-bot-element-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-bot-element-response
                    'make-generate-bot-element-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-bot-element-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-bot-element-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-bot-element-response))
   common-lisp:nil))
(common-lisp:deftype generation-input () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass generation-sort-by common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or generation-sort-by-attribute
                                         common-lisp:null)
                         :accessor struct-shape-generation-sort-by-attribute
                         :shape "GenerationSortByAttribute" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-generation-sort-by-order :shape
                         "SortOrder" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generation-sort-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'generation-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generation-sort-by 'make-generation-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input generation-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input generation-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input generation-sort-by))
   common-lisp:nil))
(common-lisp:deftype generation-sort-by-attribute () 'common-lisp:string)
(common-lisp:deftype generation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass generation-summary common-lisp:nil
                       ((generation-id :initarg :generation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-generation-summary-generation-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (generation-status :initarg :generation-status
                         :initform common-lisp:nil :type
                         (common-lisp:or generation-status common-lisp:null)
                         :accessor
                         struct-shape-generation-summary-generation-status
                         :shape "GenerationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-generation-summary-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-generation-summary-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generation-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'generation-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generation-summary 'make-generation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input generation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input generation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-id))
      (common-lisp:list
       (common-lisp:cons "generationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-status))
      (common-lisp:list
       (common-lisp:cons "generationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input generation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype generation-summary-list ()
   '(trivial-types:proper-list generation-summary))
 (common-lisp:defun make-generation-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass generative-aisettings common-lisp:nil
                       ((runtime-settings :initarg :runtime-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or runtime-settings common-lisp:null)
                         :accessor
                         struct-shape-generative-aisettings-runtime-settings
                         :shape "RuntimeSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (buildtime-settings :initarg :buildtime-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or buildtime-settings common-lisp:null)
                         :accessor
                         struct-shape-generative-aisettings-buildtime-settings
                         :shape "BuildtimeSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generative-aisettings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'generative-aisettings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generative-aisettings 'make-generative-aisettings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generative-aisettings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generative-aisettings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-settings))
      (common-lisp:list
       (common-lisp:cons "runtimeSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buildtime-settings))
      (common-lisp:list
       (common-lisp:cons "buildtimeSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generative-aisettings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-test-execution-artifacts-url-request common-lisp:nil
                       ((test-execution-id :initarg :test-execution-id
                         :initform
                         (common-lisp:error ":testexecutionid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-test-execution-artifacts-url-request-test-execution-id
                         :shape "Id" :location "uri" :location-name
                         "testExecutionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-test-execution-artifacts-url-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-test-execution-artifacts-url-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-test-execution-artifacts-url-request
                    'make-get-test-execution-artifacts-url-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-test-execution-artifacts-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-test-execution-artifacts-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-test-execution-artifacts-url-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-test-execution-artifacts-url-response
                       common-lisp:nil
                       ((test-execution-id :initarg :test-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-get-test-execution-artifacts-url-response-test-execution-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (download-artifacts-url :initarg
                         :download-artifacts-url :initform common-lisp:nil
                         :type
                         (common-lisp:or presigned-s3url common-lisp:null)
                         :accessor
                         struct-shape-get-test-execution-artifacts-url-response-download-artifacts-url
                         :shape "PresignedS3Url" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-test-execution-artifacts-url-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-test-execution-artifacts-url-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-test-execution-artifacts-url-response
                    'make-get-test-execution-artifacts-url-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-test-execution-artifacts-url-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-test-execution-artifacts-url-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-execution-id))
      (common-lisp:list
       (common-lisp:cons "testExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'download-artifacts-url))
      (common-lisp:list
       (common-lisp:cons "downloadArtifactsUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-test-execution-artifacts-url-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grammar-slot-type-setting common-lisp:nil
                       ((source :initarg :source :initform common-lisp:nil
                         :type
                         (common-lisp:or grammar-slot-type-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-grammar-slot-type-setting-source :shape
                         "GrammarSlotTypeSource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grammar-slot-type-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grammar-slot-type-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grammar-slot-type-setting
                    'make-grammar-slot-type-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grammar-slot-type-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grammar-slot-type-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grammar-slot-type-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grammar-slot-type-source common-lisp:nil
                       ((s3bucket-name :initarg :s3bucket-name :initform
                         (common-lisp:error ":s3bucketname is required") :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor
                         struct-shape-grammar-slot-type-source-s3bucket-name
                         :shape "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3object-key :initarg :s3object-key :initform
                         (common-lisp:error ":s3objectkey is required") :type
                         (common-lisp:or s3object-path common-lisp:null)
                         :accessor
                         struct-shape-grammar-slot-type-source-s3object-key
                         :shape "S3ObjectPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-grammar-slot-type-source-kms-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grammar-slot-type-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grammar-slot-type-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grammar-slot-type-source 'make-grammar-slot-type-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grammar-slot-type-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grammar-slot-type-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "s3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object-key))
      (common-lisp:list
       (common-lisp:cons "s3ObjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grammar-slot-type-source))
   common-lisp:nil))
(common-lisp:deftype hit-count () 'common-lisp:integer)
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image-response-card common-lisp:nil
                       ((title :initarg :title :initform
                         (common-lisp:error ":title is required") :type
                         (common-lisp:or attachment-title common-lisp:null)
                         :accessor struct-shape-image-response-card-title
                         :shape "AttachmentTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subtitle :initarg :subtitle :initform common-lisp:nil
                         :type
                         (common-lisp:or attachment-title common-lisp:null)
                         :accessor struct-shape-image-response-card-subtitle
                         :shape "AttachmentTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (image-url :initarg :image-url :initform
                         common-lisp:nil :type
                         (common-lisp:or attachment-url common-lisp:null)
                         :accessor struct-shape-image-response-card-image-url
                         :shape "AttachmentUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (buttons :initarg :buttons :initform common-lisp:nil
                         :type (common-lisp:or buttons-list common-lisp:null)
                         :accessor struct-shape-image-response-card-buttons
                         :shape "ButtonsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-image-response-card
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'image-response-card
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'image-response-card 'make-image-response-card))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-response-card))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-response-card))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-url))
      (common-lisp:list
       (common-lisp:cons "imageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buttons))
      (common-lisp:list
       (common-lisp:cons "buttons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-response-card))
   common-lisp:nil))
(common-lisp:deftype import-export-file-format () 'common-lisp:string)
(common-lisp:deftype import-export-file-password () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or import-filter-name common-lisp:null)
                         :accessor struct-shape-import-filter-name :shape
                         "ImportFilterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor struct-shape-import-filter-values :shape
                         "FilterValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or import-filter-operator
                                         common-lisp:null)
                         :accessor struct-shape-import-filter-operator :shape
                         "ImportFilterOperator" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'import-filter 'make-import-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-filter))
   common-lisp:nil))
(common-lisp:deftype import-filter-name () 'common-lisp:string)
(common-lisp:deftype import-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype import-filters ()
   '(trivial-types:proper-list import-filter))
 (common-lisp:defun make-import-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass import-resource-specification common-lisp:nil
                       ((bot-import-specification :initarg
                         :bot-import-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-import-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-import-resource-specification-bot-import-specification
                         :shape "BotImportSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bot-locale-import-specification :initarg
                         :bot-locale-import-specification :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-locale-import-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-import-resource-specification-bot-locale-import-specification
                         :shape "BotLocaleImportSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-vocabulary-import-specification :initarg
                         :custom-vocabulary-import-specification :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-vocabulary-import-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-import-resource-specification-custom-vocabulary-import-specification
                         :shape "CustomVocabularyImportSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (test-set-import-resource-specification :initarg
                         :test-set-import-resource-specification :initform
                         common-lisp:nil :type
                         (common-lisp:or test-set-import-resource-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-import-resource-specification-test-set-import-resource-specification
                         :shape "TestSetImportResourceSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-resource-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-resource-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-resource-specification
                    'make-import-resource-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-resource-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-resource-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-import-specification))
      (common-lisp:list
       (common-lisp:cons "botImportSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-locale-import-specification))
      (common-lisp:list
       (common-lisp:cons "botLocaleImportSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-vocabulary-import-specification))
      (common-lisp:list
       (common-lisp:cons "customVocabularyImportSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-set-import-resource-specification))
      (common-lisp:list
       (common-lisp:cons "testSetImportResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-resource-specification))
   common-lisp:nil))
(common-lisp:deftype import-resource-type () 'common-lisp:string)
(common-lisp:deftype import-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-sort-by common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or import-sort-attribute
                                         common-lisp:null)
                         :accessor struct-shape-import-sort-by-attribute :shape
                         "ImportSortAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-import-sort-by-order :shape "SortOrder"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-sort-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'import-sort-by 'make-import-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-sort-by))
   common-lisp:nil))
(common-lisp:deftype import-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-summary common-lisp:nil
                       ((import-id :initarg :import-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-import-summary-import-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (imported-resource-id :initarg :imported-resource-id
                         :initform common-lisp:nil :type
                         (common-lisp:or imported-resource-id common-lisp:null)
                         :accessor
                         struct-shape-import-summary-imported-resource-id
                         :shape "ImportedResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (imported-resource-name :initarg
                         :imported-resource-name :initform common-lisp:nil
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-import-summary-imported-resource-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (import-status :initarg :import-status :initform
                         common-lisp:nil :type
                         (common-lisp:or import-status common-lisp:null)
                         :accessor struct-shape-import-summary-import-status
                         :shape "ImportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (merge-strategy :initarg :merge-strategy :initform
                         common-lisp:nil :type
                         (common-lisp:or merge-strategy common-lisp:null)
                         :accessor struct-shape-import-summary-merge-strategy
                         :shape "MergeStrategy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-import-summary-creation-date-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-import-summary-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (imported-resource-type :initarg
                         :imported-resource-type :initform common-lisp:nil
                         :type
                         (common-lisp:or import-resource-type common-lisp:null)
                         :accessor
                         struct-shape-import-summary-imported-resource-type
                         :shape "ImportResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'import-summary 'make-import-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "importId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-resource-id))
      (common-lisp:list
       (common-lisp:cons "importedResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-resource-name))
      (common-lisp:list
       (common-lisp:cons "importedResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-status))
      (common-lisp:list
       (common-lisp:cons "importStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-strategy))
      (common-lisp:list
       (common-lisp:cons "mergeStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-resource-type))
      (common-lisp:list
       (common-lisp:cons "importedResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype import-summary-list ()
   '(trivial-types:proper-list import-summary))
 (common-lisp:defun make-import-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype imported-resource-id () 'common-lisp:string)
(common-lisp:deftype include-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass initial-response-setting common-lisp:nil
                       ((initial-response :initarg :initial-response :initform
                         common-lisp:nil :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-initial-response-setting-initial-response
                         :shape "ResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-step :initarg :next-step :initform
                         common-lisp:nil :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         struct-shape-initial-response-setting-next-step :shape
                         "DialogState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (conditional :initarg :conditional :initform
                         common-lisp:nil :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-initial-response-setting-conditional
                         :shape "ConditionalSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (code-hook :initarg :code-hook :initform
                         common-lisp:nil :type
                         (common-lisp:or dialog-code-hook-invocation-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-initial-response-setting-code-hook :shape
                         "DialogCodeHookInvocationSetting" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-initial-response-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'initial-response-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'initial-response-setting 'make-initial-response-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initial-response-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initial-response-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-response))
      (common-lisp:list
       (common-lisp:cons "initialResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-step))
      (common-lisp:list
       (common-lisp:cons "nextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditional))
      (common-lisp:list
       (common-lisp:cons "conditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-hook))
      (common-lisp:list
       (common-lisp:cons "codeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initial-response-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-context common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-input-context-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'input-context 'make-input-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype input-contexts-list ()
   '(trivial-types:proper-list input-context))
 (common-lisp:defun make-input-contexts-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-context))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass input-session-state-specification common-lisp:nil
                       ((session-attributes :initarg :session-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         struct-shape-input-session-state-specification-session-attributes
                         :shape "StringMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (active-contexts :initarg :active-contexts :initform
                         common-lisp:nil :type
                         (common-lisp:or active-context-list common-lisp:null)
                         :accessor
                         struct-shape-input-session-state-specification-active-contexts
                         :shape "ActiveContextList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime-hints :initarg :runtime-hints :initform
                         common-lisp:nil :type
                         (common-lisp:or runtime-hints common-lisp:null)
                         :accessor
                         struct-shape-input-session-state-specification-runtime-hints
                         :shape "RuntimeHints" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-session-state-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-session-state-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-session-state-specification
                    'make-input-session-state-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-session-state-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-session-state-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-attributes))
      (common-lisp:list
       (common-lisp:cons "sessionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-contexts))
      (common-lisp:list
       (common-lisp:cons "activeContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-hints))
      (common-lisp:list
       (common-lisp:cons "runtimeHints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-session-state-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass intent-classification-test-result-item common-lisp:nil
                       ((intent-name :initarg :intent-name :initform
                         (common-lisp:error ":intentname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-intent-classification-test-result-item-intent-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (multi-turn-conversation :initarg
                         :multi-turn-conversation :initform
                         (common-lisp:error
                          ":multiturnconversation is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-intent-classification-test-result-item-multi-turn-conversation
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-counts :initarg :result-counts :initform
                         (common-lisp:error ":resultcounts is required") :type
                         (common-lisp:or
                          intent-classification-test-result-item-counts
                          common-lisp:null)
                         :accessor
                         struct-shape-intent-classification-test-result-item-result-counts
                         :shape "IntentClassificationTestResultItemCounts"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-intent-classification-test-result-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'intent-classification-test-result-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'intent-classification-test-result-item
                    'make-intent-classification-test-result-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intent-classification-test-result-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intent-classification-test-result-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-turn-conversation))
      (common-lisp:list
       (common-lisp:cons "multiTurnConversation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-counts))
      (common-lisp:list
       (common-lisp:cons "resultCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intent-classification-test-result-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass intent-classification-test-result-item-counts
                       common-lisp:nil
                       ((total-result-count :initarg :total-result-count
                         :initform
                         (common-lisp:error ":totalresultcount is required")
                         :type (common-lisp:or count common-lisp:null)
                         :accessor
                         struct-shape-intent-classification-test-result-item-counts-total-result-count
                         :shape "Count" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (speech-transcription-result-counts :initarg
                         :speech-transcription-result-counts :initform
                         common-lisp:nil :type
                         (common-lisp:or test-result-match-status-count-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-intent-classification-test-result-item-counts-speech-transcription-result-counts
                         :shape "TestResultMatchStatusCountMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (intent-match-result-counts :initarg
                         :intent-match-result-counts :initform
                         (common-lisp:error
                          ":intentmatchresultcounts is required")
                         :type
                         (common-lisp:or test-result-match-status-count-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-intent-classification-test-result-item-counts-intent-match-result-counts
                         :shape "TestResultMatchStatusCountMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-intent-classification-test-result-item-counts
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'intent-classification-test-result-item-counts
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'intent-classification-test-result-item-counts
                    'make-intent-classification-test-result-item-counts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intent-classification-test-result-item-counts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intent-classification-test-result-item-counts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-result-count))
      (common-lisp:list
       (common-lisp:cons "totalResultCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'speech-transcription-result-counts))
      (common-lisp:list
       (common-lisp:cons "speechTranscriptionResultCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-match-result-counts))
      (common-lisp:list
       (common-lisp:cons "intentMatchResultCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intent-classification-test-result-item-counts))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype intent-classification-test-result-item-list ()
   '(trivial-types:proper-list intent-classification-test-result-item))
 (common-lisp:defun make-intent-classification-test-result-item-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            intent-classification-test-result-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass intent-classification-test-results common-lisp:nil
                       ((items :initarg :items :initform
                         (common-lisp:error ":items is required") :type
                         (common-lisp:or
                          intent-classification-test-result-item-list
                          common-lisp:null)
                         :accessor
                         struct-shape-intent-classification-test-results-items
                         :shape "IntentClassificationTestResultItemList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-intent-classification-test-results
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'intent-classification-test-results
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'intent-classification-test-results
                    'make-intent-classification-test-results))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intent-classification-test-results))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intent-classification-test-results))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intent-classification-test-results))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass intent-closing-setting common-lisp:nil
                       ((closing-response :initarg :closing-response :initform
                         common-lisp:nil :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-intent-closing-setting-closing-response
                         :shape "ResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (active :initarg :active :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-intent-closing-setting-active
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-step :initarg :next-step :initform
                         common-lisp:nil :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         struct-shape-intent-closing-setting-next-step :shape
                         "DialogState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (conditional :initarg :conditional :initform
                         common-lisp:nil :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-intent-closing-setting-conditional :shape
                         "ConditionalSpecification" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-intent-closing-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'intent-closing-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'intent-closing-setting 'make-intent-closing-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intent-closing-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intent-closing-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'closing-response))
      (common-lisp:list
       (common-lisp:cons "closingResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-step))
      (common-lisp:list
       (common-lisp:cons "nextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditional))
      (common-lisp:list
       (common-lisp:cons "conditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intent-closing-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass intent-confirmation-setting common-lisp:nil
                       ((prompt-specification :initarg :prompt-specification
                         :initform
                         (common-lisp:error ":promptspecification is required")
                         :type
                         (common-lisp:or prompt-specification common-lisp:null)
                         :accessor
                         struct-shape-intent-confirmation-setting-prompt-specification
                         :shape "PromptSpecification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (declination-response :initarg :declination-response
                         :initform common-lisp:nil :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-intent-confirmation-setting-declination-response
                         :shape "ResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (active :initarg :active :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-intent-confirmation-setting-active :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confirmation-response :initarg :confirmation-response
                         :initform common-lisp:nil :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-intent-confirmation-setting-confirmation-response
                         :shape "ResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (confirmation-next-step :initarg
                         :confirmation-next-step :initform common-lisp:nil
                         :type (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         struct-shape-intent-confirmation-setting-confirmation-next-step
                         :shape "DialogState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confirmation-conditional :initarg
                         :confirmation-conditional :initform common-lisp:nil
                         :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-intent-confirmation-setting-confirmation-conditional
                         :shape "ConditionalSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (declination-next-step :initarg :declination-next-step
                         :initform common-lisp:nil :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         struct-shape-intent-confirmation-setting-declination-next-step
                         :shape "DialogState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (declination-conditional :initarg
                         :declination-conditional :initform common-lisp:nil
                         :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-intent-confirmation-setting-declination-conditional
                         :shape "ConditionalSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-response :initarg :failure-response :initform
                         common-lisp:nil :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-intent-confirmation-setting-failure-response
                         :shape "ResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-next-step :initarg :failure-next-step
                         :initform common-lisp:nil :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         struct-shape-intent-confirmation-setting-failure-next-step
                         :shape "DialogState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-conditional :initarg :failure-conditional
                         :initform common-lisp:nil :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-intent-confirmation-setting-failure-conditional
                         :shape "ConditionalSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (code-hook :initarg :code-hook :initform
                         common-lisp:nil :type
                         (common-lisp:or dialog-code-hook-invocation-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-intent-confirmation-setting-code-hook
                         :shape "DialogCodeHookInvocationSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (elicitation-code-hook :initarg :elicitation-code-hook
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          elicitation-code-hook-invocation-setting
                          common-lisp:null)
                         :accessor
                         struct-shape-intent-confirmation-setting-elicitation-code-hook
                         :shape "ElicitationCodeHookInvocationSetting"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-intent-confirmation-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'intent-confirmation-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'intent-confirmation-setting
                    'make-intent-confirmation-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intent-confirmation-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intent-confirmation-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prompt-specification))
      (common-lisp:list
       (common-lisp:cons "promptSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'declination-response))
      (common-lisp:list
       (common-lisp:cons "declinationResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confirmation-response))
      (common-lisp:list
       (common-lisp:cons "confirmationResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confirmation-next-step))
      (common-lisp:list
       (common-lisp:cons "confirmationNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confirmation-conditional))
      (common-lisp:list
       (common-lisp:cons "confirmationConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'declination-next-step))
      (common-lisp:list
       (common-lisp:cons "declinationNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'declination-conditional))
      (common-lisp:list
       (common-lisp:cons "declinationConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-response))
      (common-lisp:list
       (common-lisp:cons "failureResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-next-step))
      (common-lisp:list
       (common-lisp:cons "failureNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-conditional))
      (common-lisp:list
       (common-lisp:cons "failureConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-hook))
      (common-lisp:list
       (common-lisp:cons "codeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elicitation-code-hook))
      (common-lisp:list
       (common-lisp:cons "elicitationCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intent-confirmation-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass intent-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or intent-filter-name common-lisp:null)
                         :accessor struct-shape-intent-filter-name :shape
                         "IntentFilterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor struct-shape-intent-filter-values :shape
                         "FilterValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or intent-filter-operator
                                         common-lisp:null)
                         :accessor struct-shape-intent-filter-operator :shape
                         "IntentFilterOperator" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-intent-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'intent-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'intent-filter 'make-intent-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input intent-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input intent-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input intent-filter))
   common-lisp:nil))
(common-lisp:deftype intent-filter-name () 'common-lisp:string)
(common-lisp:deftype intent-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype intent-filters ()
   '(trivial-types:proper-list intent-filter))
 (common-lisp:defun make-intent-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list intent-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass intent-level-slot-resolution-test-result-item
                       common-lisp:nil
                       ((intent-name :initarg :intent-name :initform
                         (common-lisp:error ":intentname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-intent-level-slot-resolution-test-result-item-intent-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (multi-turn-conversation :initarg
                         :multi-turn-conversation :initform
                         (common-lisp:error
                          ":multiturnconversation is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-intent-level-slot-resolution-test-result-item-multi-turn-conversation
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slot-resolution-results :initarg
                         :slot-resolution-results :initform
                         (common-lisp:error
                          ":slotresolutionresults is required")
                         :type
                         (common-lisp:or slot-resolution-test-result-items
                                         common-lisp:null)
                         :accessor
                         struct-shape-intent-level-slot-resolution-test-result-item-slot-resolution-results
                         :shape "SlotResolutionTestResultItems" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-intent-level-slot-resolution-test-result-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'intent-level-slot-resolution-test-result-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'intent-level-slot-resolution-test-result-item
                    'make-intent-level-slot-resolution-test-result-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intent-level-slot-resolution-test-result-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intent-level-slot-resolution-test-result-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-turn-conversation))
      (common-lisp:list
       (common-lisp:cons "multiTurnConversation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slot-resolution-results))
      (common-lisp:list
       (common-lisp:cons "slotResolutionResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intent-level-slot-resolution-test-result-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype intent-level-slot-resolution-test-result-item-list ()
   '(trivial-types:proper-list intent-level-slot-resolution-test-result-item))
 (common-lisp:defun make-intent-level-slot-resolution-test-result-item-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            intent-level-slot-resolution-test-result-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass intent-level-slot-resolution-test-results
                       common-lisp:nil
                       ((items :initarg :items :initform
                         (common-lisp:error ":items is required") :type
                         (common-lisp:or
                          intent-level-slot-resolution-test-result-item-list
                          common-lisp:null)
                         :accessor
                         struct-shape-intent-level-slot-resolution-test-results-items
                         :shape "IntentLevelSlotResolutionTestResultItemList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-intent-level-slot-resolution-test-results
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'intent-level-slot-resolution-test-results
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'intent-level-slot-resolution-test-results
                    'make-intent-level-slot-resolution-test-results))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intent-level-slot-resolution-test-results))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intent-level-slot-resolution-test-results))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intent-level-slot-resolution-test-results))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass intent-override common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-intent-override-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slots :initarg :slots :initform common-lisp:nil :type
                         (common-lisp:or slot-value-override-map
                                         common-lisp:null)
                         :accessor struct-shape-intent-override-slots :shape
                         "SlotValueOverrideMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-intent-override
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'intent-override
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'intent-override 'make-intent-override))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input intent-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input intent-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input intent-override))
   common-lisp:nil))
(common-lisp:deftype intent-signature () 'common-lisp:string)
(common-lisp:deftype intent-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass intent-sort-by common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or intent-sort-attribute
                                         common-lisp:null)
                         :accessor struct-shape-intent-sort-by-attribute :shape
                         "IntentSortAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-intent-sort-by-order :shape "SortOrder"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-intent-sort-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'intent-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'intent-sort-by 'make-intent-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input intent-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input intent-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input intent-sort-by))
   common-lisp:nil))
(common-lisp:deftype intent-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass intent-statistics common-lisp:nil
                       ((discovered-intent-count :initarg
                         :discovered-intent-count :initform common-lisp:nil
                         :type (common-lisp:or count common-lisp:null)
                         :accessor
                         struct-shape-intent-statistics-discovered-intent-count
                         :shape "Count" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-intent-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'intent-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'intent-statistics 'make-intent-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input intent-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input intent-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'discovered-intent-count))
      (common-lisp:list
       (common-lisp:cons "discoveredIntentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input intent-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass intent-summary common-lisp:nil
                       ((intent-id :initarg :intent-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-intent-summary-intent-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (intent-name :initarg :intent-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-intent-summary-intent-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-intent-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parent-intent-signature :initarg
                         :parent-intent-signature :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-signature common-lisp:null)
                         :accessor
                         struct-shape-intent-summary-parent-intent-signature
                         :shape "IntentSignature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-contexts :initarg :input-contexts :initform
                         common-lisp:nil :type
                         (common-lisp:or input-contexts-list common-lisp:null)
                         :accessor struct-shape-intent-summary-input-contexts
                         :shape "InputContextsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-contexts :initarg :output-contexts :initform
                         common-lisp:nil :type
                         (common-lisp:or output-contexts-list common-lisp:null)
                         :accessor struct-shape-intent-summary-output-contexts
                         :shape "OutputContextsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-intent-summary-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-intent-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'intent-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'intent-summary 'make-intent-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input intent-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input intent-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-intent-signature))
      (common-lisp:list
       (common-lisp:cons "parentIntentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-contexts))
      (common-lisp:list
       (common-lisp:cons "inputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-contexts))
      (common-lisp:list
       (common-lisp:cons "outputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input intent-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype intent-summary-list ()
   '(trivial-types:proper-list intent-summary))
 (common-lisp:defun make-intent-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list intent-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (models.lex.v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass invoked-intent-sample common-lisp:nil
                       ((intent-name :initarg :intent-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-invoked-intent-sample-intent-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invoked-intent-sample
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invoked-intent-sample
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invoked-intent-sample 'make-invoked-intent-sample))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invoked-intent-sample))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invoked-intent-sample))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invoked-intent-sample))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype invoked-intent-samples ()
   '(trivial-types:proper-list invoked-intent-sample))
 (common-lisp:defun make-invoked-intent-samples
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list invoked-intent-sample))
   aws-sdk/generator/shape::members))
(common-lisp:deftype item-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kendra-configuration common-lisp:nil
                       ((kendra-index :initarg :kendra-index :initform
                         (common-lisp:error ":kendraindex is required") :type
                         (common-lisp:or kendra-index-arn common-lisp:null)
                         :accessor
                         struct-shape-kendra-configuration-kendra-index :shape
                         "KendraIndexArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-filter-string-enabled :initarg
                         :query-filter-string-enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-kendra-configuration-query-filter-string-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-filter-string :initarg :query-filter-string
                         :initform common-lisp:nil :type
                         (common-lisp:or query-filter-string common-lisp:null)
                         :accessor
                         struct-shape-kendra-configuration-query-filter-string
                         :shape "QueryFilterString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kendra-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kendra-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kendra-configuration 'make-kendra-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kendra-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kendra-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kendra-index))
      (common-lisp:list
       (common-lisp:cons "kendraIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-filter-string-enabled))
      (common-lisp:list
       (common-lisp:cons "queryFilterStringEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-filter-string))
      (common-lisp:list
       (common-lisp:cons "queryFilterString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kendra-configuration))
   common-lisp:nil))
(common-lisp:deftype kendra-index-arn () 'common-lisp:string)
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:deftype lambda-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lambda-code-hook common-lisp:nil
                       ((lambda-arn :initarg :lambda-arn :initform
                         (common-lisp:error ":lambdaarn is required") :type
                         (common-lisp:or lambda-arn common-lisp:null) :accessor
                         struct-shape-lambda-code-hook-lambda-arn :shape
                         "LambdaARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (code-hook-interface-version :initarg
                         :code-hook-interface-version :initform
                         (common-lisp:error
                          ":codehookinterfaceversion is required")
                         :type
                         (common-lisp:or code-hook-interface-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-lambda-code-hook-code-hook-interface-version
                         :shape "CodeHookInterfaceVersion" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-code-hook
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-code-hook
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lambda-code-hook 'make-lambda-code-hook))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-code-hook))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-code-hook))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-hook-interface-version))
      (common-lisp:list
       (common-lisp:cons "codeHookInterfaceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-code-hook))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lex-transcript-filter common-lisp:nil
                       ((date-range-filter :initarg :date-range-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or date-range-filter common-lisp:null)
                         :accessor
                         struct-shape-lex-transcript-filter-date-range-filter
                         :shape "DateRangeFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lex-transcript-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lex-transcript-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lex-transcript-filter 'make-lex-transcript-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lex-transcript-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lex-transcript-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range-filter))
      (common-lisp:list
       (common-lisp:cons "dateRangeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lex-transcript-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-aggregated-utterances-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-aggregated-utterances-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-alias-id :initarg :bot-alias-id :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor
                         struct-shape-list-aggregated-utterances-request-bot-alias-id
                         :shape "BotAliasId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-aggregated-utterances-request-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-aggregated-utterances-request-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregation-duration :initarg :aggregation-duration
                         :initform
                         (common-lisp:error ":aggregationduration is required")
                         :type
                         (common-lisp:or utterance-aggregation-duration
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-aggregated-utterances-request-aggregation-duration
                         :shape "UtteranceAggregationDuration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or aggregated-utterances-sort-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-aggregated-utterances-request-sort-by
                         :shape "AggregatedUtterancesSortBy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or aggregated-utterances-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-aggregated-utterances-request-filters
                         :shape "AggregatedUtterancesFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-aggregated-utterances-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-aggregated-utterances-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-aggregated-utterances-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-aggregated-utterances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-aggregated-utterances-request
                    'make-list-aggregated-utterances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregated-utterances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregated-utterances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-duration))
      (common-lisp:list
       (common-lisp:cons "aggregationDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregated-utterances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-aggregated-utterances-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-aggregated-utterances-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-alias-id :initarg :bot-alias-id :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor
                         struct-shape-list-aggregated-utterances-response-bot-alias-id
                         :shape "BotAliasId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-aggregated-utterances-response-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-aggregated-utterances-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregation-duration :initarg :aggregation-duration
                         :initform common-lisp:nil :type
                         (common-lisp:or utterance-aggregation-duration
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-aggregated-utterances-response-aggregation-duration
                         :shape "UtteranceAggregationDuration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (aggregation-window-start-time :initarg
                         :aggregation-window-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-aggregated-utterances-response-aggregation-window-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregation-window-end-time :initarg
                         :aggregation-window-end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-list-aggregated-utterances-response-aggregation-window-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregation-last-refreshed-date-time :initarg
                         :aggregation-last-refreshed-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-aggregated-utterances-response-aggregation-last-refreshed-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregated-utterances-summaries :initarg
                         :aggregated-utterances-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or aggregated-utterances-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-aggregated-utterances-response-aggregated-utterances-summaries
                         :shape "AggregatedUtterancesSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-aggregated-utterances-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-aggregated-utterances-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-aggregated-utterances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-aggregated-utterances-response
                    'make-list-aggregated-utterances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregated-utterances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregated-utterances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-duration))
      (common-lisp:list
       (common-lisp:cons "aggregationDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-window-start-time))
      (common-lisp:list
       (common-lisp:cons "aggregationWindowStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-window-end-time))
      (common-lisp:list
       (common-lisp:cons "aggregationWindowEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-last-refreshed-date-time))
      (common-lisp:list
       (common-lisp:cons "aggregationLastRefreshedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregated-utterances-summaries))
      (common-lisp:list
       (common-lisp:cons "aggregatedUtterancesSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregated-utterances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-alias-replicas-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-bot-alias-replicas-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (replica-region :initarg :replica-region :initform
                         (common-lisp:error ":replicaregion is required") :type
                         (common-lisp:or replica-region common-lisp:null)
                         :accessor
                         struct-shape-list-bot-alias-replicas-request-replica-region
                         :shape "ReplicaRegion" :location "uri" :location-name
                         "replicaRegion")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-bot-alias-replicas-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bot-alias-replicas-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bot-alias-replicas-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bot-alias-replicas-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bot-alias-replicas-request
                    'make-list-bot-alias-replicas-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-alias-replicas-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-alias-replicas-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-alias-replicas-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-alias-replicas-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-bot-alias-replicas-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-region :initarg :source-region :initform
                         common-lisp:nil :type
                         (common-lisp:or replica-region common-lisp:null)
                         :accessor
                         struct-shape-list-bot-alias-replicas-response-source-region
                         :shape "ReplicaRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replica-region :initarg :replica-region :initform
                         common-lisp:nil :type
                         (common-lisp:or replica-region common-lisp:null)
                         :accessor
                         struct-shape-list-bot-alias-replicas-response-replica-region
                         :shape "ReplicaRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-alias-replica-summaries :initarg
                         :bot-alias-replica-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-alias-replica-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-bot-alias-replicas-response-bot-alias-replica-summaries
                         :shape "BotAliasReplicaSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bot-alias-replicas-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bot-alias-replicas-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bot-alias-replicas-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bot-alias-replicas-response
                    'make-list-bot-alias-replicas-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-alias-replicas-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-alias-replicas-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "sourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-region))
      (common-lisp:list
       (common-lisp:cons "replicaRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-alias-replica-summaries))
      (common-lisp:list
       (common-lisp:cons "botAliasReplicaSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-alias-replicas-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-aliases-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-bot-aliases-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-bot-aliases-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bot-aliases-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bot-aliases-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-bot-aliases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bot-aliases-request 'make-list-bot-aliases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-aliases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-aliases-response common-lisp:nil
                       ((bot-alias-summaries :initarg :bot-alias-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or bot-alias-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-bot-aliases-response-bot-alias-summaries
                         :shape "BotAliasSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bot-aliases-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-bot-aliases-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bot-aliases-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-bot-aliases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bot-aliases-response
                    'make-list-bot-aliases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-summaries))
      (common-lisp:list
       (common-lisp:cons "botAliasSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-locales-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-bot-locales-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-bot-locales-request-bot-version
                         :shape "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-locale-sort-by common-lisp:null)
                         :accessor
                         struct-shape-list-bot-locales-request-sort-by :shape
                         "BotLocaleSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-locale-filters common-lisp:null)
                         :accessor
                         struct-shape-list-bot-locales-request-filters :shape
                         "BotLocaleFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-bot-locales-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bot-locales-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bot-locales-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-bot-locales-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bot-locales-request 'make-list-bot-locales-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-locales-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-locales-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-locales-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-locales-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-bot-locales-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-bot-locales-response-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bot-locales-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-locale-summaries :initarg :bot-locale-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or bot-locale-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-bot-locales-response-bot-locale-summaries
                         :shape "BotLocaleSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bot-locales-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-bot-locales-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bot-locales-response
                    'make-list-bot-locales-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-locales-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-locales-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-locale-summaries))
      (common-lisp:list
       (common-lisp:cons "botLocaleSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-locales-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-recommendations-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-bot-recommendations-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-bot-recommendations-request-bot-version
                         :shape "DraftBotVersion" :location "uri"
                         :location-name "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-bot-recommendations-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-bot-recommendations-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bot-recommendations-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bot-recommendations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bot-recommendations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bot-recommendations-request
                    'make-list-bot-recommendations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-recommendations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-recommendations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-recommendations-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-bot-recommendations-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-bot-recommendations-response-bot-version
                         :shape "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-bot-recommendations-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-recommendation-summaries :initarg
                         :bot-recommendation-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-recommendation-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-bot-recommendations-response-bot-recommendation-summaries
                         :shape "BotRecommendationSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bot-recommendations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bot-recommendations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bot-recommendations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bot-recommendations-response
                    'make-list-bot-recommendations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-recommendations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-recommendations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-summaries))
      (common-lisp:list
       (common-lisp:cons "botRecommendationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-recommendations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-replicas-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-bot-replicas-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bot-replicas-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-bot-replicas-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bot-replicas-request
                    'make-list-bot-replicas-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-replicas-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-replicas-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-replicas-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-replicas-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-bot-replicas-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-region :initarg :source-region :initform
                         common-lisp:nil :type
                         (common-lisp:or replica-region common-lisp:null)
                         :accessor
                         struct-shape-list-bot-replicas-response-source-region
                         :shape "ReplicaRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-replica-summaries :initarg :bot-replica-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or bot-replica-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-bot-replicas-response-bot-replica-summaries
                         :shape "BotReplicaSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bot-replicas-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-bot-replicas-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bot-replicas-response
                    'make-list-bot-replicas-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-replicas-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-replicas-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "sourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-replica-summaries))
      (common-lisp:list
       (common-lisp:cons "botReplicaSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-replicas-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-resource-generations-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-bot-resource-generations-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-bot-resource-generations-request-bot-version
                         :shape "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-bot-resource-generations-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId")
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or generation-sort-by common-lisp:null)
                         :accessor
                         struct-shape-list-bot-resource-generations-request-sort-by
                         :shape "GenerationSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-bot-resource-generations-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bot-resource-generations-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bot-resource-generations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bot-resource-generations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bot-resource-generations-request
                    'make-list-bot-resource-generations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-resource-generations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-resource-generations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-resource-generations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-resource-generations-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-bot-resource-generations-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-bot-resource-generations-response-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-bot-resource-generations-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generation-summaries :initarg :generation-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or generation-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-bot-resource-generations-response-generation-summaries
                         :shape "GenerationSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bot-resource-generations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bot-resource-generations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bot-resource-generations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bot-resource-generations-response
                    'make-list-bot-resource-generations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-resource-generations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-resource-generations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-summaries))
      (common-lisp:list
       (common-lisp:cons "generationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-resource-generations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-version-replicas-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-bot-version-replicas-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (replica-region :initarg :replica-region :initform
                         (common-lisp:error ":replicaregion is required") :type
                         (common-lisp:or replica-region common-lisp:null)
                         :accessor
                         struct-shape-list-bot-version-replicas-request-replica-region
                         :shape "ReplicaRegion" :location "uri" :location-name
                         "replicaRegion")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-bot-version-replicas-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bot-version-replicas-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-version-replica-sort-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-bot-version-replicas-request-sort-by
                         :shape "BotVersionReplicaSortBy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bot-version-replicas-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bot-version-replicas-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bot-version-replicas-request
                    'make-list-bot-version-replicas-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-version-replicas-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-version-replicas-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-version-replicas-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-version-replicas-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-bot-version-replicas-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-region :initarg :source-region :initform
                         common-lisp:nil :type
                         (common-lisp:or replica-region common-lisp:null)
                         :accessor
                         struct-shape-list-bot-version-replicas-response-source-region
                         :shape "ReplicaRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replica-region :initarg :replica-region :initform
                         common-lisp:nil :type
                         (common-lisp:or replica-region common-lisp:null)
                         :accessor
                         struct-shape-list-bot-version-replicas-response-replica-region
                         :shape "ReplicaRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-version-replica-summaries :initarg
                         :bot-version-replica-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version-replica-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-bot-version-replicas-response-bot-version-replica-summaries
                         :shape "BotVersionReplicaSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bot-version-replicas-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bot-version-replicas-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bot-version-replicas-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bot-version-replicas-response
                    'make-list-bot-version-replicas-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-version-replicas-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-version-replicas-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "sourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-region))
      (common-lisp:list
       (common-lisp:cons "replicaRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-version-replica-summaries))
      (common-lisp:list
       (common-lisp:cons "botVersionReplicaSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-version-replicas-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-versions-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-bot-versions-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-version-sort-by common-lisp:null)
                         :accessor
                         struct-shape-list-bot-versions-request-sort-by :shape
                         "BotVersionSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-bot-versions-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bot-versions-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bot-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-bot-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bot-versions-request
                    'make-list-bot-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bot-versions-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-bot-versions-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version-summaries :initarg :bot-version-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or bot-version-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-bot-versions-response-bot-version-summaries
                         :shape "BotVersionSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bot-versions-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bot-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-bot-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bot-versions-response
                    'make-list-bot-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-version-summaries))
      (common-lisp:list
       (common-lisp:cons "botVersionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bot-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bots-request common-lisp:nil
                       ((sort-by :initarg :sort-by :initform common-lisp:nil
                         :type (common-lisp:or bot-sort-by common-lisp:null)
                         :accessor struct-shape-list-bots-request-sort-by
                         :shape "BotSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or bot-filters common-lisp:null)
                         :accessor struct-shape-list-bots-request-filters
                         :shape "BotFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-bots-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bots-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bots-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-bots-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bots-request 'make-list-bots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-bots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-bots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-bots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bots-response common-lisp:nil
                       ((bot-summaries :initarg :bot-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-summary-list common-lisp:null)
                         :accessor
                         struct-shape-list-bots-response-bot-summaries :shape
                         "BotSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-bots-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bots-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-bots-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bots-response 'make-list-bots-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-bots-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-bots-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-summaries))
      (common-lisp:list
       (common-lisp:cons "botSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-bots-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-built-in-intents-request common-lisp:nil
                       ((locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-built-in-intents-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId")
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or built-in-intent-sort-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-built-in-intents-request-sort-by
                         :shape "BuiltInIntentSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or built-ins-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-built-in-intents-request-max-results
                         :shape "BuiltInsMaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-built-in-intents-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-built-in-intents-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-built-in-intents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-built-in-intents-request
                    'make-list-built-in-intents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-intents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-intents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-intents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-built-in-intents-response common-lisp:nil
                       ((built-in-intent-summaries :initarg
                         :built-in-intent-summaries :initform common-lisp:nil
                         :type
                         (common-lisp:or built-in-intent-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-built-in-intents-response-built-in-intent-summaries
                         :shape "BuiltInIntentSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-built-in-intents-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-built-in-intents-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-built-in-intents-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-built-in-intents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-built-in-intents-response
                    'make-list-built-in-intents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-intents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-intents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'built-in-intent-summaries))
      (common-lisp:list
       (common-lisp:cons "builtInIntentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-intents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-built-in-slot-types-request common-lisp:nil
                       ((locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-built-in-slot-types-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId")
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or built-in-slot-type-sort-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-built-in-slot-types-request-sort-by
                         :shape "BuiltInSlotTypeSortBy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or built-ins-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-built-in-slot-types-request-max-results
                         :shape "BuiltInsMaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-built-in-slot-types-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-built-in-slot-types-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-built-in-slot-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-built-in-slot-types-request
                    'make-list-built-in-slot-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-slot-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-slot-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-slot-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-built-in-slot-types-response common-lisp:nil
                       ((built-in-slot-type-summaries :initarg
                         :built-in-slot-type-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or built-in-slot-type-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-built-in-slot-types-response-built-in-slot-type-summaries
                         :shape "BuiltInSlotTypeSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-built-in-slot-types-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-built-in-slot-types-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-built-in-slot-types-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-built-in-slot-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-built-in-slot-types-response
                    'make-list-built-in-slot-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-slot-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-slot-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'built-in-slot-type-summaries))
      (common-lisp:list
       (common-lisp:cons "builtInSlotTypeSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-built-in-slot-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-vocabulary-items-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-custom-vocabulary-items-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-custom-vocabulary-items-request-bot-version
                         :shape "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-custom-vocabulary-items-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-custom-vocabulary-items-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-custom-vocabulary-items-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-vocabulary-items-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-vocabulary-items-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-vocabulary-items-request
                    'make-list-custom-vocabulary-items-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-vocabulary-items-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-vocabulary-items-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-vocabulary-items-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-vocabulary-items-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-custom-vocabulary-items-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-custom-vocabulary-items-response-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-custom-vocabulary-items-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-vocabulary-items :initarg
                         :custom-vocabulary-items :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-vocabulary-items
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-custom-vocabulary-items-response-custom-vocabulary-items
                         :shape "CustomVocabularyItems" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-custom-vocabulary-items-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-vocabulary-items-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-vocabulary-items-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-vocabulary-items-response
                    'make-list-custom-vocabulary-items-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-vocabulary-items-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-vocabulary-items-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-vocabulary-items))
      (common-lisp:list
       (common-lisp:cons "customVocabularyItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-vocabulary-items-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-exports-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-exports-request-bot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-exports-request-bot-version :shape
                         "BotVersion" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type (common-lisp:or export-sort-by common-lisp:null)
                         :accessor struct-shape-list-exports-request-sort-by
                         :shape "ExportSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or export-filters common-lisp:null)
                         :accessor struct-shape-list-exports-request-filters
                         :shape "ExportFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-exports-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-exports-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-exports-request-locale-id :shape
                         "LocaleId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-exports-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-exports-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-exports-request 'make-list-exports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-exports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-exports-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-exports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-exports-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-exports-response-bot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-exports-response-bot-version :shape
                         "BotVersion" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (export-summaries :initarg :export-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or export-summary-list common-lisp:null)
                         :accessor
                         struct-shape-list-exports-response-export-summaries
                         :shape "ExportSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-exports-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-exports-response-locale-id :shape
                         "LocaleId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-exports-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-exports-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-exports-response 'make-list-exports-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-exports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-exports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-summaries))
      (common-lisp:list
       (common-lisp:cons "exportSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-exports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-imports-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-imports-request-bot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-imports-request-bot-version :shape
                         "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type (common-lisp:or import-sort-by common-lisp:null)
                         :accessor struct-shape-list-imports-request-sort-by
                         :shape "ImportSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or import-filters common-lisp:null)
                         :accessor struct-shape-list-imports-request-filters
                         :shape "ImportFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-imports-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-imports-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-imports-request-locale-id :shape
                         "LocaleId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-imports-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-imports-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-imports-request 'make-list-imports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-imports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-imports-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-imports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-imports-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-imports-response-bot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-imports-response-bot-version :shape
                         "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (import-summaries :initarg :import-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or import-summary-list common-lisp:null)
                         :accessor
                         struct-shape-list-imports-response-import-summaries
                         :shape "ImportSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-imports-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-imports-response-locale-id :shape
                         "LocaleId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-imports-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-imports-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-imports-response 'make-list-imports-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-imports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-imports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-summaries))
      (common-lisp:list
       (common-lisp:cons "importSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-imports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-intent-metrics-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-intent-metrics-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (start-date-time :initarg :start-date-time :initform
                         (common-lisp:error ":startdatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-intent-metrics-request-start-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         (common-lisp:error ":enddatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-intent-metrics-request-end-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metrics :initarg :metrics :initform
                         (common-lisp:error ":metrics is required") :type
                         (common-lisp:or analytics-intent-metrics
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-intent-metrics-request-metrics
                         :shape "AnalyticsIntentMetrics" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bin-by :initarg :bin-by :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-bin-by-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-intent-metrics-request-bin-by :shape
                         "AnalyticsBinByList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-by :initarg :group-by :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-intent-group-by-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-intent-metrics-request-group-by
                         :shape "AnalyticsIntentGroupByList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-intent-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-intent-metrics-request-filters
                         :shape "AnalyticsIntentFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-intent-metrics-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-intent-metrics-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-intent-metrics-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-intent-metrics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-intent-metrics-request
                    'make-list-intent-metrics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-metrics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "startDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "endDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bin-by))
      (common-lisp:list
       (common-lisp:cons "binBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "groupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-intent-metrics-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-intent-metrics-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (results :initarg :results :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-intent-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-intent-metrics-response-results
                         :shape "AnalyticsIntentResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-intent-metrics-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-intent-metrics-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-intent-metrics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-intent-metrics-response
                    'make-list-intent-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-metrics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-intent-paths-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-intent-paths-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (start-date-time :initarg :start-date-time :initform
                         (common-lisp:error ":startdatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-intent-paths-request-start-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         (common-lisp:error ":enddatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-intent-paths-request-end-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (intent-path :initarg :intent-path :initform
                         (common-lisp:error ":intentpath is required") :type
                         (common-lisp:or analytics-path common-lisp:null)
                         :accessor
                         struct-shape-list-intent-paths-request-intent-path
                         :shape "AnalyticsPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-path-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-intent-paths-request-filters :shape
                         "AnalyticsPathFilters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-intent-paths-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-intent-paths-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-intent-paths-request
                    'make-list-intent-paths-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-paths-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-paths-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "startDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "endDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-path))
      (common-lisp:list
       (common-lisp:cons "intentPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-paths-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-intent-paths-response common-lisp:nil
                       ((node-summaries :initarg :node-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-intent-node-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-intent-paths-response-node-summaries
                         :shape "AnalyticsIntentNodeSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-intent-paths-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-intent-paths-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-intent-paths-response
                    'make-list-intent-paths-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-paths-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-paths-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-summaries))
      (common-lisp:list
       (common-lisp:cons "nodeSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-paths-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-intent-stage-metrics-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-intent-stage-metrics-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (start-date-time :initarg :start-date-time :initform
                         (common-lisp:error ":startdatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-intent-stage-metrics-request-start-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         (common-lisp:error ":enddatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-intent-stage-metrics-request-end-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metrics :initarg :metrics :initform
                         (common-lisp:error ":metrics is required") :type
                         (common-lisp:or analytics-intent-stage-metrics
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-intent-stage-metrics-request-metrics
                         :shape "AnalyticsIntentStageMetrics" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bin-by :initarg :bin-by :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-bin-by-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-intent-stage-metrics-request-bin-by
                         :shape "AnalyticsBinByList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-by :initarg :group-by :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-intent-stage-group-by-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-intent-stage-metrics-request-group-by
                         :shape "AnalyticsIntentStageGroupByList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-intent-stage-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-intent-stage-metrics-request-filters
                         :shape "AnalyticsIntentStageFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-intent-stage-metrics-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-intent-stage-metrics-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-intent-stage-metrics-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-intent-stage-metrics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-intent-stage-metrics-request
                    'make-list-intent-stage-metrics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-stage-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-stage-metrics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "startDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "endDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bin-by))
      (common-lisp:list
       (common-lisp:cons "binBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "groupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-stage-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-intent-stage-metrics-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-intent-stage-metrics-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (results :initarg :results :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-intent-stage-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-intent-stage-metrics-response-results
                         :shape "AnalyticsIntentStageResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-intent-stage-metrics-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-intent-stage-metrics-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-intent-stage-metrics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-intent-stage-metrics-response
                    'make-list-intent-stage-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-stage-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-stage-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-intent-stage-metrics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-intents-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-intents-request-bot-id :shape "Id"
                         :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-intents-request-bot-version :shape
                         "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-intents-request-locale-id :shape
                         "LocaleId" :location "uri" :location-name "localeId")
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type (common-lisp:or intent-sort-by common-lisp:null)
                         :accessor struct-shape-list-intents-request-sort-by
                         :shape "IntentSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or intent-filters common-lisp:null)
                         :accessor struct-shape-list-intents-request-filters
                         :shape "IntentFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-intents-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-intents-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-intents-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-intents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-intents-request 'make-list-intents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-intents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-intents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-intents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-intents-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-intents-response-bot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-intents-response-bot-version :shape
                         "BotVersion" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-intents-response-locale-id :shape
                         "LocaleId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (intent-summaries :initarg :intent-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or intent-summary-list common-lisp:null)
                         :accessor
                         struct-shape-list-intents-response-intent-summaries
                         :shape "IntentSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-intents-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-intents-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-intents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-intents-response 'make-list-intents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-intents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-intents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-summaries))
      (common-lisp:list
       (common-lisp:cons "intentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-intents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-recommended-intents-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-recommended-intents-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-recommended-intents-request-bot-version
                         :shape "DraftBotVersion" :location "uri"
                         :location-name "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-recommended-intents-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId")
                        (bot-recommendation-id :initarg :bot-recommendation-id
                         :initform
                         (common-lisp:error ":botrecommendationid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-recommended-intents-request-bot-recommendation-id
                         :shape "Id" :location "uri" :location-name
                         "botRecommendationId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-recommended-intents-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-recommended-intents-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-recommended-intents-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-recommended-intents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-recommended-intents-request
                    'make-list-recommended-intents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommended-intents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommended-intents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommended-intents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-recommended-intents-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-recommended-intents-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-recommended-intents-response-bot-version
                         :shape "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-recommended-intents-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-recommendation-id :initarg :bot-recommendation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-recommended-intents-response-bot-recommendation-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (summary-list :initarg :summary-list :initform
                         common-lisp:nil :type
                         (common-lisp:or recommended-intent-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-recommended-intents-response-summary-list
                         :shape "RecommendedIntentSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-recommended-intents-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-recommended-intents-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-recommended-intents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-recommended-intents-response
                    'make-list-recommended-intents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommended-intents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommended-intents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-id))
      (common-lisp:list
       (common-lisp:cons "botRecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary-list))
      (common-lisp:list
       (common-lisp:cons "summaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommended-intents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-session-analytics-data-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-session-analytics-data-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (start-date-time :initarg :start-date-time :initform
                         (common-lisp:error ":startdatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-session-analytics-data-request-start-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         (common-lisp:error ":enddatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-session-analytics-data-request-end-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or session-data-sort-by common-lisp:null)
                         :accessor
                         struct-shape-list-session-analytics-data-request-sort-by
                         :shape "SessionDataSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-session-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-session-analytics-data-request-filters
                         :shape "AnalyticsSessionFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-session-analytics-data-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-session-analytics-data-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-session-analytics-data-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-session-analytics-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-session-analytics-data-request
                    'make-list-session-analytics-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-session-analytics-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-session-analytics-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "startDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "endDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-session-analytics-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-session-analytics-data-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-session-analytics-data-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-session-analytics-data-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sessions :initarg :sessions :initform common-lisp:nil
                         :type
                         (common-lisp:or session-specifications
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-session-analytics-data-response-sessions
                         :shape "SessionSpecifications" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-session-analytics-data-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-session-analytics-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-session-analytics-data-response
                    'make-list-session-analytics-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-session-analytics-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-session-analytics-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sessions))
      (common-lisp:list
       (common-lisp:cons "sessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-session-analytics-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-session-metrics-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-session-metrics-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (start-date-time :initarg :start-date-time :initform
                         (common-lisp:error ":startdatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-session-metrics-request-start-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         (common-lisp:error ":enddatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-session-metrics-request-end-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metrics :initarg :metrics :initform
                         (common-lisp:error ":metrics is required") :type
                         (common-lisp:or analytics-session-metrics
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-session-metrics-request-metrics
                         :shape "AnalyticsSessionMetrics" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bin-by :initarg :bin-by :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-bin-by-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-session-metrics-request-bin-by
                         :shape "AnalyticsBinByList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-by :initarg :group-by :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-session-group-by-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-session-metrics-request-group-by
                         :shape "AnalyticsSessionGroupByList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-session-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-session-metrics-request-filters
                         :shape "AnalyticsSessionFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-session-metrics-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-session-metrics-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-session-metrics-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-session-metrics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-session-metrics-request
                    'make-list-session-metrics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-session-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-session-metrics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "startDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "endDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bin-by))
      (common-lisp:list
       (common-lisp:cons "binBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "groupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-session-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-session-metrics-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-session-metrics-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (results :initarg :results :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-session-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-session-metrics-response-results
                         :shape "AnalyticsSessionResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-session-metrics-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-session-metrics-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-session-metrics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-session-metrics-response
                    'make-list-session-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-session-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-session-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-session-metrics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-slot-types-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-slot-types-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-slot-types-request-bot-version
                         :shape "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-slot-types-request-locale-id :shape
                         "LocaleId" :location "uri" :location-name "localeId")
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-type-sort-by common-lisp:null)
                         :accessor struct-shape-list-slot-types-request-sort-by
                         :shape "SlotTypeSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-type-filters common-lisp:null)
                         :accessor struct-shape-list-slot-types-request-filters
                         :shape "SlotTypeFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-slot-types-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-slot-types-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-slot-types-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-slot-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-slot-types-request 'make-list-slot-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-slot-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-slot-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-slot-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-slot-types-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-slot-types-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-list-slot-types-response-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-slot-types-response-locale-id :shape
                         "LocaleId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-type-summaries :initarg :slot-type-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or slot-type-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-slot-types-response-slot-type-summaries
                         :shape "SlotTypeSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-slot-types-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-slot-types-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-slot-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-slot-types-response 'make-list-slot-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-slot-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-slot-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-summaries))
      (common-lisp:list
       (common-lisp:cons "slotTypeSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-slot-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-slots-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-slots-request-bot-id :shape "Id"
                         :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor struct-shape-list-slots-request-bot-version
                         :shape "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-slots-request-locale-id :shape
                         "LocaleId" :location "uri" :location-name "localeId")
                        (intent-id :initarg :intent-id :initform
                         (common-lisp:error ":intentid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-slots-request-intent-id :shape "Id"
                         :location "uri" :location-name "intentId")
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type (common-lisp:or slot-sort-by common-lisp:null)
                         :accessor struct-shape-list-slots-request-sort-by
                         :shape "SlotSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or slot-filters common-lisp:null)
                         :accessor struct-shape-list-slots-request-filters
                         :shape "SlotFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-slots-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-slots-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-slots-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-slots-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-slots-request 'make-list-slots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-slots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-slots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-slots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-slots-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-slots-response-bot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor struct-shape-list-slots-response-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-list-slots-response-locale-id :shape
                         "LocaleId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (intent-id :initarg :intent-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-slots-response-intent-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-summaries :initarg :slot-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or slot-summary-list common-lisp:null)
                         :accessor
                         struct-shape-list-slots-response-slot-summaries :shape
                         "SlotSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-slots-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-slots-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-slots-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-slots-response 'make-list-slots-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-slots-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-slots-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-summaries))
      (common-lisp:list
       (common-lisp:cons "slotSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-slots-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "AmazonResourceName" :location "uri"
                         :location-name "resourceARN"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-test-execution-result-items-request common-lisp:nil
                       ((test-execution-id :initarg :test-execution-id
                         :initform
                         (common-lisp:error ":testexecutionid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-test-execution-result-items-request-test-execution-id
                         :shape "Id" :location "uri" :location-name
                         "testExecutionId")
                        (result-filter-by :initarg :result-filter-by :initform
                         (common-lisp:error ":resultfilterby is required")
                         :type
                         (common-lisp:or test-execution-result-filter-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-test-execution-result-items-request-result-filter-by
                         :shape "TestExecutionResultFilterBy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-test-execution-result-items-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-test-execution-result-items-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-test-execution-result-items-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-test-execution-result-items-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-test-execution-result-items-request
                    'make-list-test-execution-result-items-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-execution-result-items-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-execution-result-items-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-filter-by))
      (common-lisp:list
       (common-lisp:cons "resultFilterBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-execution-result-items-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-test-execution-result-items-response
                       common-lisp:nil
                       ((test-execution-results :initarg
                         :test-execution-results :initform common-lisp:nil
                         :type
                         (common-lisp:or test-execution-result-items
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-test-execution-result-items-response-test-execution-results
                         :shape "TestExecutionResultItems" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-test-execution-result-items-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-test-execution-result-items-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-test-execution-result-items-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-test-execution-result-items-response
                    'make-list-test-execution-result-items-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-execution-result-items-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-execution-result-items-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-execution-results))
      (common-lisp:list
       (common-lisp:cons "testExecutionResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-execution-result-items-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-test-executions-request common-lisp:nil
                       ((sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or test-execution-sort-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-test-executions-request-sort-by
                         :shape "TestExecutionSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-test-executions-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-test-executions-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-test-executions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-test-executions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-test-executions-request
                    'make-list-test-executions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-test-executions-response common-lisp:nil
                       ((test-executions :initarg :test-executions :initform
                         common-lisp:nil :type
                         (common-lisp:or test-execution-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-test-executions-response-test-executions
                         :shape "TestExecutionSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-test-executions-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-test-executions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-test-executions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-test-executions-response
                    'make-list-test-executions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-executions))
      (common-lisp:list
       (common-lisp:cons "testExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-test-set-records-request common-lisp:nil
                       ((test-set-id :initarg :test-set-id :initform
                         (common-lisp:error ":testsetid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-test-set-records-request-test-set-id
                         :shape "Id" :location "uri" :location-name
                         "testSetId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-test-set-records-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-test-set-records-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-test-set-records-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-test-set-records-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-test-set-records-request
                    'make-list-test-set-records-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-set-records-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-set-records-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-set-records-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-test-set-records-response common-lisp:nil
                       ((test-set-records :initarg :test-set-records :initform
                         common-lisp:nil :type
                         (common-lisp:or test-set-turn-record-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-test-set-records-response-test-set-records
                         :shape "TestSetTurnRecordList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-test-set-records-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-test-set-records-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-test-set-records-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-test-set-records-response
                    'make-list-test-set-records-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-set-records-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-set-records-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-records))
      (common-lisp:list
       (common-lisp:cons "testSetRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-set-records-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-test-sets-request common-lisp:nil
                       ((sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or test-set-sort-by common-lisp:null)
                         :accessor struct-shape-list-test-sets-request-sort-by
                         :shape "TestSetSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-test-sets-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-test-sets-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-test-sets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-test-sets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-test-sets-request 'make-list-test-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-test-sets-response common-lisp:nil
                       ((test-sets :initarg :test-sets :initform
                         common-lisp:nil :type
                         (common-lisp:or test-set-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-test-sets-response-test-sets :shape
                         "TestSetSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-test-sets-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-test-sets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-test-sets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-test-sets-response 'make-list-test-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-test-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-test-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-sets))
      (common-lisp:list
       (common-lisp:cons "testSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-test-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-utterance-analytics-data-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-utterance-analytics-data-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (start-date-time :initarg :start-date-time :initform
                         (common-lisp:error ":startdatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-utterance-analytics-data-request-start-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         (common-lisp:error ":enddatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-utterance-analytics-data-request-end-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or utterance-data-sort-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-utterance-analytics-data-request-sort-by
                         :shape "UtteranceDataSortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-utterance-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-utterance-analytics-data-request-filters
                         :shape "AnalyticsUtteranceFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-utterance-analytics-data-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-utterance-analytics-data-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-utterance-analytics-data-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-utterance-analytics-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-utterance-analytics-data-request
                    'make-list-utterance-analytics-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-utterance-analytics-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-utterance-analytics-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "startDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "endDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-utterance-analytics-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-utterance-analytics-data-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-utterance-analytics-data-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-utterance-analytics-data-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (utterances :initarg :utterances :initform
                         common-lisp:nil :type
                         (common-lisp:or utterance-specifications
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-utterance-analytics-data-response-utterances
                         :shape "UtteranceSpecifications" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-utterance-analytics-data-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-utterance-analytics-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-utterance-analytics-data-response
                    'make-list-utterance-analytics-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-utterance-analytics-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-utterance-analytics-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utterances))
      (common-lisp:list
       (common-lisp:cons "utterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-utterance-analytics-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-utterance-metrics-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-utterance-metrics-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (start-date-time :initarg :start-date-time :initform
                         (common-lisp:error ":startdatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-utterance-metrics-request-start-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         (common-lisp:error ":enddatetime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-utterance-metrics-request-end-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metrics :initarg :metrics :initform
                         (common-lisp:error ":metrics is required") :type
                         (common-lisp:or analytics-utterance-metrics
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-utterance-metrics-request-metrics
                         :shape "AnalyticsUtteranceMetrics" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bin-by :initarg :bin-by :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-bin-by-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-utterance-metrics-request-bin-by
                         :shape "AnalyticsBinByList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-by :initarg :group-by :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-utterance-group-by-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-utterance-metrics-request-group-by
                         :shape "AnalyticsUtteranceGroupByList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-utterance-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-utterance-metrics-request-attributes
                         :shape "AnalyticsUtteranceAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-utterance-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-utterance-metrics-request-filters
                         :shape "AnalyticsUtteranceFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-utterance-metrics-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-utterance-metrics-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-utterance-metrics-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-utterance-metrics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-utterance-metrics-request
                    'make-list-utterance-metrics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-utterance-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-utterance-metrics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "startDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "endDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bin-by))
      (common-lisp:list
       (common-lisp:cons "binBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "groupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-utterance-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-utterance-metrics-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-list-utterance-metrics-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (results :initarg :results :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-utterance-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-utterance-metrics-response-results
                         :shape "AnalyticsUtteranceResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-utterance-metrics-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-utterance-metrics-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-utterance-metrics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-utterance-metrics-response
                    'make-list-utterance-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-utterance-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-utterance-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-utterance-metrics-response))
   common-lisp:nil))
(common-lisp:deftype locale-id () 'common-lisp:string)
(common-lisp:deftype locale-name () 'common-lisp:string)
(common-lisp:deftype log-prefix () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype max-utterance-digits () 'common-lisp:integer)
(common-lisp:deftype merge-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass message common-lisp:nil
                       ((plain-text-message :initarg :plain-text-message
                         :initform common-lisp:nil :type
                         (common-lisp:or plain-text-message common-lisp:null)
                         :accessor struct-shape-message-plain-text-message
                         :shape "PlainTextMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-payload :initarg :custom-payload :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-payload common-lisp:null)
                         :accessor struct-shape-message-custom-payload :shape
                         "CustomPayload" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssml-message :initarg :ssml-message :initform
                         common-lisp:nil :type
                         (common-lisp:or ssmlmessage common-lisp:null)
                         :accessor struct-shape-message-ssml-message :shape
                         "SSMLMessage" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (image-response-card :initarg :image-response-card
                         :initform common-lisp:nil :type
                         (common-lisp:or image-response-card common-lisp:null)
                         :accessor struct-shape-message-image-response-card
                         :shape "ImageResponseCard" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'message
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'message 'make-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plain-text-message))
      (common-lisp:list
       (common-lisp:cons "plainTextMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-payload))
      (common-lisp:list
       (common-lisp:cons "customPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssml-message))
      (common-lisp:list
       (common-lisp:cons "ssmlMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-response-card))
      (common-lisp:list
       (common-lisp:cons "imageResponseCard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass message-group common-lisp:nil
                       ((message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or message common-lisp:null) :accessor
                         struct-shape-message-group-message :shape "Message"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (variations :initarg :variations :initform
                         common-lisp:nil :type
                         (common-lisp:or message-variations-list
                                         common-lisp:null)
                         :accessor struct-shape-message-group-variations :shape
                         "MessageVariationsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-message-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'message-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'message-group 'make-message-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variations))
      (common-lisp:list
       (common-lisp:cons "variations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype message-groups-list ()
   '(trivial-types:proper-list message-group))
 (common-lisp:defun make-message-groups-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list message-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype message-selection-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype message-variations-list ()
   '(trivial-types:proper-list message))
 (common-lisp:defun make-message-variations-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype missed-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass multiple-values-setting common-lisp:nil
                       ((allow-multiple-values :initarg :allow-multiple-values
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-multiple-values-setting-allow-multiple-values
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multiple-values-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multiple-values-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multiple-values-setting 'make-multiple-values-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiple-values-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiple-values-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-multiple-values))
      (common-lisp:list
       (common-lisp:cons "allowMultipleValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiple-values-setting))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass new-custom-vocabulary-item common-lisp:nil
                       ((phrase :initarg :phrase :initform
                         (common-lisp:error ":phrase is required") :type
                         (common-lisp:or phrase common-lisp:null) :accessor
                         struct-shape-new-custom-vocabulary-item-phrase :shape
                         "Phrase" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (weight :initarg :weight :initform common-lisp:nil
                         :type (common-lisp:or weight common-lisp:null)
                         :accessor
                         struct-shape-new-custom-vocabulary-item-weight :shape
                         "Weight" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-as :initarg :display-as :initform
                         common-lisp:nil :type
                         (common-lisp:or phrase common-lisp:null) :accessor
                         struct-shape-new-custom-vocabulary-item-display-as
                         :shape "Phrase" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-new-custom-vocabulary-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'new-custom-vocabulary-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'new-custom-vocabulary-item
                    'make-new-custom-vocabulary-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          new-custom-vocabulary-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          new-custom-vocabulary-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phrase))
      (common-lisp:list
       (common-lisp:cons "phrase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-as))
      (common-lisp:list
       (common-lisp:cons "displayAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          new-custom-vocabulary-item))
   common-lisp:nil))
(common-lisp:deftype next-index () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:deftype numerical-bot-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype osinclude-fields ()
   '(trivial-types:proper-list include-field))
 (common-lisp:defun make-osinclude-fields
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list include-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype osindex-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass obfuscation-setting common-lisp:nil
                       ((obfuscation-setting-type :initarg
                         :obfuscation-setting-type :initform
                         (common-lisp:error
                          ":obfuscationsettingtype is required")
                         :type
                         (common-lisp:or obfuscation-setting-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-obfuscation-setting-obfuscation-setting-type
                         :shape "ObfuscationSettingType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-obfuscation-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'obfuscation-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'obfuscation-setting 'make-obfuscation-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input obfuscation-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input obfuscation-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'obfuscation-setting-type))
      (common-lisp:list
       (common-lisp:cons "obfuscationSettingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input obfuscation-setting))
   common-lisp:nil))
(common-lisp:deftype obfuscation-setting-type () 'common-lisp:string)
(common-lisp:deftype object-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-prefixes ()
   '(trivial-types:proper-list object-prefix))
 (common-lisp:defun make-object-prefixes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-prefix))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass opensearch-configuration common-lisp:nil
                       ((domain-endpoint :initarg :domain-endpoint :initform
                         (common-lisp:error ":domainendpoint is required")
                         :type
                         (common-lisp:or domain-endpoint common-lisp:null)
                         :accessor
                         struct-shape-opensearch-configuration-domain-endpoint
                         :shape "DomainEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-name :initarg :index-name :initform
                         (common-lisp:error ":indexname is required") :type
                         (common-lisp:or osindex-name common-lisp:null)
                         :accessor
                         struct-shape-opensearch-configuration-index-name
                         :shape "OSIndexName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exact-response :initarg :exact-response :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-opensearch-configuration-exact-response
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exact-response-fields :initarg :exact-response-fields
                         :initform common-lisp:nil :type
                         (common-lisp:or exact-response-fields
                                         common-lisp:null)
                         :accessor
                         struct-shape-opensearch-configuration-exact-response-fields
                         :shape "ExactResponseFields" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-fields :initarg :include-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or osinclude-fields common-lisp:null)
                         :accessor
                         struct-shape-opensearch-configuration-include-fields
                         :shape "OSIncludeFields" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-opensearch-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'opensearch-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'opensearch-configuration 'make-opensearch-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          opensearch-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          opensearch-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-endpoint))
      (common-lisp:list
       (common-lisp:cons "domainEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "indexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact-response))
      (common-lisp:list
       (common-lisp:cons "exactResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exact-response-fields))
      (common-lisp:list
       (common-lisp:cons "exactResponseFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-fields))
      (common-lisp:list
       (common-lisp:cons "includeFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          opensearch-configuration))
   common-lisp:nil))
(common-lisp:deftype operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype operation-list () '(trivial-types:proper-list operation))
 (common-lisp:defun make-operation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass output-context common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-output-context-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (time-to-live-in-seconds :initarg
                         :time-to-live-in-seconds :initform
                         (common-lisp:error ":timetoliveinseconds is required")
                         :type
                         (common-lisp:or context-time-to-live-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-output-context-time-to-live-in-seconds
                         :shape "ContextTimeToLiveInSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (turns-to-live :initarg :turns-to-live :initform
                         (common-lisp:error ":turnstolive is required") :type
                         (common-lisp:or context-turns-to-live
                                         common-lisp:null)
                         :accessor struct-shape-output-context-turns-to-live
                         :shape "ContextTurnsToLive" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'output-context 'make-output-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-to-live-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeToLiveInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'turns-to-live))
      (common-lisp:list
       (common-lisp:cons "turnsToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-contexts-list ()
   '(trivial-types:proper-list output-context))
 (common-lisp:defun make-output-contexts-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-context))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass overall-test-result-item common-lisp:nil
                       ((multi-turn-conversation :initarg
                         :multi-turn-conversation :initform
                         (common-lisp:error
                          ":multiturnconversation is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-overall-test-result-item-multi-turn-conversation
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-result-count :initarg :total-result-count
                         :initform
                         (common-lisp:error ":totalresultcount is required")
                         :type (common-lisp:or count common-lisp:null)
                         :accessor
                         struct-shape-overall-test-result-item-total-result-count
                         :shape "Count" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (speech-transcription-result-counts :initarg
                         :speech-transcription-result-counts :initform
                         common-lisp:nil :type
                         (common-lisp:or test-result-match-status-count-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-overall-test-result-item-speech-transcription-result-counts
                         :shape "TestResultMatchStatusCountMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (end-to-end-result-counts :initarg
                         :end-to-end-result-counts :initform
                         (common-lisp:error
                          ":endtoendresultcounts is required")
                         :type
                         (common-lisp:or test-result-match-status-count-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-overall-test-result-item-end-to-end-result-counts
                         :shape "TestResultMatchStatusCountMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-overall-test-result-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'overall-test-result-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'overall-test-result-item 'make-overall-test-result-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          overall-test-result-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          overall-test-result-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-turn-conversation))
      (common-lisp:list
       (common-lisp:cons "multiTurnConversation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-result-count))
      (common-lisp:list
       (common-lisp:cons "totalResultCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'speech-transcription-result-counts))
      (common-lisp:list
       (common-lisp:cons "speechTranscriptionResultCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'end-to-end-result-counts))
      (common-lisp:list
       (common-lisp:cons "endToEndResultCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          overall-test-result-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype overall-test-result-item-list ()
   '(trivial-types:proper-list overall-test-result-item))
 (common-lisp:defun make-overall-test-result-item-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            overall-test-result-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass overall-test-results common-lisp:nil
                       ((items :initarg :items :initform
                         (common-lisp:error ":items is required") :type
                         (common-lisp:or overall-test-result-item-list
                                         common-lisp:null)
                         :accessor struct-shape-overall-test-results-items
                         :shape "OverallTestResultItemList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-overall-test-results
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'overall-test-results
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'overall-test-results 'make-overall-test-results))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input overall-test-results))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input overall-test-results))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input overall-test-results))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parent-bot-network common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-parent-bot-network-bot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor struct-shape-parent-bot-network-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-parent-bot-network
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'parent-bot-network
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'parent-bot-network 'make-parent-bot-network))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parent-bot-network))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parent-bot-network))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parent-bot-network))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parent-bot-networks ()
   '(trivial-types:proper-list parent-bot-network))
 (common-lisp:defun make-parent-bot-networks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parent-bot-network))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass path-format common-lisp:nil
                       ((object-prefixes :initarg :object-prefixes :initform
                         common-lisp:nil :type
                         (common-lisp:or object-prefixes common-lisp:null)
                         :accessor struct-shape-path-format-object-prefixes
                         :shape "ObjectPrefixes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-path-format
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'path-format
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'path-format 'make-path-format))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input path-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input path-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-prefixes))
      (common-lisp:list
       (common-lisp:cons "objectPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input path-format))
   common-lisp:nil))
(common-lisp:deftype phrase () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass plain-text-message common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or plain-text-message-value
                                         common-lisp:null)
                         :accessor struct-shape-plain-text-message-value :shape
                         "PlainTextMessageValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-plain-text-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'plain-text-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'plain-text-message 'make-plain-text-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input plain-text-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input plain-text-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input plain-text-message))
   common-lisp:nil))
(common-lisp:deftype plain-text-message-value () 'common-lisp:string)
(common-lisp:deftype policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass post-dialog-code-hook-invocation-specification
                       common-lisp:nil
                       ((success-response :initarg :success-response :initform
                         common-lisp:nil :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-dialog-code-hook-invocation-specification-success-response
                         :shape "ResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (success-next-step :initarg :success-next-step
                         :initform common-lisp:nil :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         struct-shape-post-dialog-code-hook-invocation-specification-success-next-step
                         :shape "DialogState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (success-conditional :initarg :success-conditional
                         :initform common-lisp:nil :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-dialog-code-hook-invocation-specification-success-conditional
                         :shape "ConditionalSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-response :initarg :failure-response :initform
                         common-lisp:nil :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-dialog-code-hook-invocation-specification-failure-response
                         :shape "ResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-next-step :initarg :failure-next-step
                         :initform common-lisp:nil :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         struct-shape-post-dialog-code-hook-invocation-specification-failure-next-step
                         :shape "DialogState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-conditional :initarg :failure-conditional
                         :initform common-lisp:nil :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-dialog-code-hook-invocation-specification-failure-conditional
                         :shape "ConditionalSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timeout-response :initarg :timeout-response :initform
                         common-lisp:nil :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-dialog-code-hook-invocation-specification-timeout-response
                         :shape "ResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timeout-next-step :initarg :timeout-next-step
                         :initform common-lisp:nil :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         struct-shape-post-dialog-code-hook-invocation-specification-timeout-next-step
                         :shape "DialogState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-conditional :initarg :timeout-conditional
                         :initform common-lisp:nil :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-dialog-code-hook-invocation-specification-timeout-conditional
                         :shape "ConditionalSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-post-dialog-code-hook-invocation-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'post-dialog-code-hook-invocation-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'post-dialog-code-hook-invocation-specification
                    'make-post-dialog-code-hook-invocation-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          post-dialog-code-hook-invocation-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          post-dialog-code-hook-invocation-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-response))
      (common-lisp:list
       (common-lisp:cons "successResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-next-step))
      (common-lisp:list
       (common-lisp:cons "successNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-conditional))
      (common-lisp:list
       (common-lisp:cons "successConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-response))
      (common-lisp:list
       (common-lisp:cons "failureResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-next-step))
      (common-lisp:list
       (common-lisp:cons "failureNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-conditional))
      (common-lisp:list
       (common-lisp:cons "failureConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-response))
      (common-lisp:list
       (common-lisp:cons "timeoutResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-next-step))
      (common-lisp:list
       (common-lisp:cons "timeoutNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-conditional))
      (common-lisp:list
       (common-lisp:cons "timeoutConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          post-dialog-code-hook-invocation-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass post-fulfillment-status-specification common-lisp:nil
                       ((success-response :initarg :success-response :initform
                         common-lisp:nil :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-fulfillment-status-specification-success-response
                         :shape "ResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-response :initarg :failure-response :initform
                         common-lisp:nil :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-fulfillment-status-specification-failure-response
                         :shape "ResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timeout-response :initarg :timeout-response :initform
                         common-lisp:nil :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-fulfillment-status-specification-timeout-response
                         :shape "ResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (success-next-step :initarg :success-next-step
                         :initform common-lisp:nil :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         struct-shape-post-fulfillment-status-specification-success-next-step
                         :shape "DialogState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (success-conditional :initarg :success-conditional
                         :initform common-lisp:nil :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-fulfillment-status-specification-success-conditional
                         :shape "ConditionalSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-next-step :initarg :failure-next-step
                         :initform common-lisp:nil :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         struct-shape-post-fulfillment-status-specification-failure-next-step
                         :shape "DialogState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-conditional :initarg :failure-conditional
                         :initform common-lisp:nil :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-fulfillment-status-specification-failure-conditional
                         :shape "ConditionalSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timeout-next-step :initarg :timeout-next-step
                         :initform common-lisp:nil :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         struct-shape-post-fulfillment-status-specification-timeout-next-step
                         :shape "DialogState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-conditional :initarg :timeout-conditional
                         :initform common-lisp:nil :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-fulfillment-status-specification-timeout-conditional
                         :shape "ConditionalSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-post-fulfillment-status-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'post-fulfillment-status-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'post-fulfillment-status-specification
                    'make-post-fulfillment-status-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          post-fulfillment-status-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          post-fulfillment-status-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-response))
      (common-lisp:list
       (common-lisp:cons "successResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-response))
      (common-lisp:list
       (common-lisp:cons "failureResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-response))
      (common-lisp:list
       (common-lisp:cons "timeoutResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-next-step))
      (common-lisp:list
       (common-lisp:cons "successNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-conditional))
      (common-lisp:list
       (common-lisp:cons "successConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-next-step))
      (common-lisp:list
       (common-lisp:cons "failureNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-conditional))
      (common-lisp:list
       (common-lisp:cons "failureConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-next-step))
      (common-lisp:list
       (common-lisp:cons "timeoutNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-conditional))
      (common-lisp:list
       (common-lisp:cons "timeoutConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          post-fulfillment-status-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition precondition-failed-exception
     (models.lex.v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       precondition-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'precondition-failed-exception
                    'precondition-failed-exception-message)))
(common-lisp:deftype presigned-s3url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass principal common-lisp:nil
                       ((service :initarg :service :initform common-lisp:nil
                         :type
                         (common-lisp:or service-principal common-lisp:null)
                         :accessor struct-shape-principal-service :shape
                         "ServicePrincipal" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or principal-arn common-lisp:null)
                         :accessor struct-shape-principal-arn :shape
                         "PrincipalArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-principal
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'principal
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'principal 'make-principal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input principal))
   common-lisp:nil))
(common-lisp:deftype principal-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principal-list () '(trivial-types:proper-list principal))
 (common-lisp:defun make-principal-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal))
   aws-sdk/generator/shape::members))
(common-lisp:deftype priority-value () 'common-lisp:integer)
(common-lisp:deftype prompt-attempt () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass prompt-attempt-specification common-lisp:nil
                       ((allow-interrupt :initarg :allow-interrupt :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-prompt-attempt-specification-allow-interrupt
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allowed-input-types :initarg :allowed-input-types
                         :initform
                         (common-lisp:error ":allowedinputtypes is required")
                         :type
                         (common-lisp:or allowed-input-types common-lisp:null)
                         :accessor
                         struct-shape-prompt-attempt-specification-allowed-input-types
                         :shape "AllowedInputTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (audio-and-dtmfinput-specification :initarg
                         :audio-and-dtmfinput-specification :initform
                         common-lisp:nil :type
                         (common-lisp:or audio-and-dtmfinput-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-prompt-attempt-specification-audio-and-dtmfinput-specification
                         :shape "AudioAndDTMFInputSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (text-input-specification :initarg
                         :text-input-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or text-input-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-prompt-attempt-specification-text-input-specification
                         :shape "TextInputSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-prompt-attempt-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'prompt-attempt-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'prompt-attempt-specification
                    'make-prompt-attempt-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          prompt-attempt-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          prompt-attempt-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-interrupt))
      (common-lisp:list
       (common-lisp:cons "allowInterrupt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-input-types))
      (common-lisp:list
       (common-lisp:cons "allowedInputTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-and-dtmfinput-specification))
      (common-lisp:list
       (common-lisp:cons "audioAndDTMFInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-input-specification))
      (common-lisp:list
       (common-lisp:cons "textInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          prompt-attempt-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype prompt-attempts-specification-map ()
   'common-lisp:hash-table)
 (common-lisp:defun make-prompt-attempts-specification-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype prompt-max-retries () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass prompt-specification common-lisp:nil
                       ((message-groups :initarg :message-groups :initform
                         (common-lisp:error ":messagegroups is required") :type
                         (common-lisp:or message-groups-list common-lisp:null)
                         :accessor
                         struct-shape-prompt-specification-message-groups
                         :shape "MessageGroupsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-retries :initarg :max-retries :initform
                         (common-lisp:error ":maxretries is required") :type
                         (common-lisp:or prompt-max-retries common-lisp:null)
                         :accessor
                         struct-shape-prompt-specification-max-retries :shape
                         "PromptMaxRetries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-interrupt :initarg :allow-interrupt :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-prompt-specification-allow-interrupt
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message-selection-strategy :initarg
                         :message-selection-strategy :initform common-lisp:nil
                         :type
                         (common-lisp:or message-selection-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-prompt-specification-message-selection-strategy
                         :shape "MessageSelectionStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (prompt-attempts-specification :initarg
                         :prompt-attempts-specification :initform
                         common-lisp:nil :type
                         (common-lisp:or prompt-attempts-specification-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-prompt-specification-prompt-attempts-specification
                         :shape "PromptAttemptsSpecificationMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-prompt-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'prompt-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'prompt-specification 'make-prompt-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prompt-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prompt-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-groups))
      (common-lisp:list
       (common-lisp:cons "messageGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "maxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-interrupt))
      (common-lisp:list
       (common-lisp:cons "allowInterrupt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'message-selection-strategy))
      (common-lisp:list
       (common-lisp:cons "messageSelectionStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prompt-attempts-specification))
      (common-lisp:list
       (common-lisp:cons "promptAttemptsSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prompt-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass qn-aintent-configuration common-lisp:nil
                       ((data-source-configuration :initarg
                         :data-source-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-qn-aintent-configuration-data-source-configuration
                         :shape "DataSourceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bedrock-model-configuration :initarg
                         :bedrock-model-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or bedrock-model-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-qn-aintent-configuration-bedrock-model-configuration
                         :shape "BedrockModelSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-qn-aintent-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'qn-aintent-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'qn-aintent-configuration 'make-qn-aintent-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          qn-aintent-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          qn-aintent-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-source-configuration))
      (common-lisp:list
       (common-lisp:cons "dataSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bedrock-model-configuration))
      (common-lisp:list
       (common-lisp:cons "bedrockModelConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          qn-aintent-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass qn-akendra-configuration common-lisp:nil
                       ((kendra-index :initarg :kendra-index :initform
                         (common-lisp:error ":kendraindex is required") :type
                         (common-lisp:or kendra-index-arn common-lisp:null)
                         :accessor
                         struct-shape-qn-akendra-configuration-kendra-index
                         :shape "KendraIndexArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-filter-string-enabled :initarg
                         :query-filter-string-enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-qn-akendra-configuration-query-filter-string-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-filter-string :initarg :query-filter-string
                         :initform common-lisp:nil :type
                         (common-lisp:or query-filter-string common-lisp:null)
                         :accessor
                         struct-shape-qn-akendra-configuration-query-filter-string
                         :shape "QueryFilterString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exact-response :initarg :exact-response :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-qn-akendra-configuration-exact-response
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-qn-akendra-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'qn-akendra-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'qn-akendra-configuration 'make-qn-akendra-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          qn-akendra-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          qn-akendra-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kendra-index))
      (common-lisp:list
       (common-lisp:cons "kendraIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-filter-string-enabled))
      (common-lisp:list
       (common-lisp:cons "queryFilterStringEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-filter-string))
      (common-lisp:list
       (common-lisp:cons "queryFilterString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact-response))
      (common-lisp:list
       (common-lisp:cons "exactResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          qn-akendra-configuration))
   common-lisp:nil))
(common-lisp:deftype query-filter-string () 'common-lisp:string)
(common-lisp:deftype question-field () 'common-lisp:string)
(common-lisp:deftype recommended-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recommended-actions ()
   '(trivial-types:proper-list recommended-action))
 (common-lisp:defun make-recommended-actions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommended-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass recommended-intent-summary common-lisp:nil
                       ((intent-id :initarg :intent-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-recommended-intent-summary-intent-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (intent-name :initarg :intent-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-recommended-intent-summary-intent-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sample-utterances-count :initarg
                         :sample-utterances-count :initform common-lisp:nil
                         :type
                         (common-lisp:or sample-utterances-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-recommended-intent-summary-sample-utterances-count
                         :shape "SampleUtterancesCount" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommended-intent-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommended-intent-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recommended-intent-summary
                    'make-recommended-intent-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommended-intent-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommended-intent-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sample-utterances-count))
      (common-lisp:list
       (common-lisp:cons "sampleUtterancesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommended-intent-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommended-intent-summary-list ()
   '(trivial-types:proper-list recommended-intent-summary))
 (common-lisp:defun make-recommended-intent-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommended-intent-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype record-number () 'common-lisp:integer)
(common-lisp:deftype regex-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass relative-aggregation-duration common-lisp:nil
                       ((time-dimension :initarg :time-dimension :initform
                         (common-lisp:error ":timedimension is required") :type
                         (common-lisp:or time-dimension common-lisp:null)
                         :accessor
                         struct-shape-relative-aggregation-duration-time-dimension
                         :shape "TimeDimension" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-value :initarg :time-value :initform
                         (common-lisp:error ":timevalue is required") :type
                         (common-lisp:or time-value common-lisp:null) :accessor
                         struct-shape-relative-aggregation-duration-time-value
                         :shape "TimeValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-relative-aggregation-duration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'relative-aggregation-duration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'relative-aggregation-duration
                    'make-relative-aggregation-duration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relative-aggregation-duration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relative-aggregation-duration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-dimension))
      (common-lisp:list
       (common-lisp:cons "timeDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-value))
      (common-lisp:list
       (common-lisp:cons "timeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relative-aggregation-duration))
   common-lisp:nil))
(common-lisp:deftype replica-region () 'common-lisp:string)
(common-lisp:deftype resource-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (models.lex.v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass response-specification common-lisp:nil
                       ((message-groups :initarg :message-groups :initform
                         (common-lisp:error ":messagegroups is required") :type
                         (common-lisp:or message-groups-list common-lisp:null)
                         :accessor
                         struct-shape-response-specification-message-groups
                         :shape "MessageGroupsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-interrupt :initarg :allow-interrupt :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-response-specification-allow-interrupt
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-response-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'response-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'response-specification 'make-response-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-groups))
      (common-lisp:list
       (common-lisp:cons "messageGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-interrupt))
      (common-lisp:list
       (common-lisp:cons "allowInterrupt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-specification))
   common-lisp:nil))
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:deftype revision-id () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass runtime-hint-details common-lisp:nil
                       ((runtime-hint-values :initarg :runtime-hint-values
                         :initform common-lisp:nil :type
                         (common-lisp:or runtime-hint-values-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-runtime-hint-details-runtime-hint-values
                         :shape "RuntimeHintValuesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sub-slot-hints :initarg :sub-slot-hints :initform
                         common-lisp:nil :type
                         (common-lisp:or slot-hints-slot-map common-lisp:null)
                         :accessor
                         struct-shape-runtime-hint-details-sub-slot-hints
                         :shape "SlotHintsSlotMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-runtime-hint-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'runtime-hint-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'runtime-hint-details 'make-runtime-hint-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input runtime-hint-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input runtime-hint-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-hint-values))
      (common-lisp:list
       (common-lisp:cons "runtimeHintValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slot-hints))
      (common-lisp:list
       (common-lisp:cons "subSlotHints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input runtime-hint-details))
   common-lisp:nil))
(common-lisp:deftype runtime-hint-phrase () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass runtime-hint-value common-lisp:nil
                       ((phrase :initarg :phrase :initform
                         (common-lisp:error ":phrase is required") :type
                         (common-lisp:or runtime-hint-phrase common-lisp:null)
                         :accessor struct-shape-runtime-hint-value-phrase
                         :shape "RuntimeHintPhrase" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-runtime-hint-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'runtime-hint-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'runtime-hint-value 'make-runtime-hint-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input runtime-hint-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input runtime-hint-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phrase))
      (common-lisp:list
       (common-lisp:cons "phrase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input runtime-hint-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype runtime-hint-values-list ()
   '(trivial-types:proper-list runtime-hint-value))
 (common-lisp:defun make-runtime-hint-values-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list runtime-hint-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass runtime-hints common-lisp:nil
                       ((slot-hints :initarg :slot-hints :initform
                         common-lisp:nil :type
                         (common-lisp:or slot-hints-intent-map
                                         common-lisp:null)
                         :accessor struct-shape-runtime-hints-slot-hints :shape
                         "SlotHintsIntentMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-runtime-hints
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'runtime-hints
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'runtime-hints 'make-runtime-hints))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input runtime-hints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input runtime-hints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-hints))
      (common-lisp:list
       (common-lisp:cons "slotHints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input runtime-hints))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass runtime-settings common-lisp:nil
                       ((slot-resolution-improvement :initarg
                         :slot-resolution-improvement :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          slot-resolution-improvement-specification
                          common-lisp:null)
                         :accessor
                         struct-shape-runtime-settings-slot-resolution-improvement
                         :shape "SlotResolutionImprovementSpecification"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-runtime-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'runtime-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'runtime-settings 'make-runtime-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input runtime-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input runtime-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slot-resolution-improvement))
      (common-lisp:list
       (common-lisp:cons "slotResolutionImprovement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input runtime-settings))
   common-lisp:nil))
(common-lisp:deftype s3bucket-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3bucket-log-destination common-lisp:nil
                       ((kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-s3bucket-log-destination-kms-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-arn :initarg :s3bucket-arn :initform
                         (common-lisp:error ":s3bucketarn is required") :type
                         (common-lisp:or s3bucket-arn common-lisp:null)
                         :accessor
                         struct-shape-s3bucket-log-destination-s3bucket-arn
                         :shape "S3BucketArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-prefix :initarg :log-prefix :initform
                         (common-lisp:error ":logprefix is required") :type
                         (common-lisp:or log-prefix common-lisp:null) :accessor
                         struct-shape-s3bucket-log-destination-log-prefix
                         :shape "LogPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3bucket-log-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3bucket-log-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3bucket-log-destination 'make-s3bucket-log-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-log-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-log-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-arn))
      (common-lisp:list
       (common-lisp:cons "s3BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-prefix))
      (common-lisp:list
       (common-lisp:cons "logPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-log-destination))
   common-lisp:nil))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3bucket-transcript-source common-lisp:nil
                       ((s3bucket-name :initarg :s3bucket-name :initform
                         (common-lisp:error ":s3bucketname is required") :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor
                         struct-shape-s3bucket-transcript-source-s3bucket-name
                         :shape "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path-format :initarg :path-format :initform
                         common-lisp:nil :type
                         (common-lisp:or path-format common-lisp:null)
                         :accessor
                         struct-shape-s3bucket-transcript-source-path-format
                         :shape "PathFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transcript-format :initarg :transcript-format
                         :initform
                         (common-lisp:error ":transcriptformat is required")
                         :type
                         (common-lisp:or transcript-format common-lisp:null)
                         :accessor
                         struct-shape-s3bucket-transcript-source-transcript-format
                         :shape "TranscriptFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transcript-filter :initarg :transcript-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or transcript-filter common-lisp:null)
                         :accessor
                         struct-shape-s3bucket-transcript-source-transcript-filter
                         :shape "TranscriptFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-s3bucket-transcript-source-kms-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3bucket-transcript-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3bucket-transcript-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3bucket-transcript-source
                    'make-s3bucket-transcript-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-transcript-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-transcript-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "s3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-format))
      (common-lisp:list
       (common-lisp:cons "pathFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript-format))
      (common-lisp:list
       (common-lisp:cons "transcriptFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript-filter))
      (common-lisp:list
       (common-lisp:cons "transcriptFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-transcript-source))
   common-lisp:nil))
(common-lisp:deftype s3object-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ssmlmessage common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or ssmlmessage-value common-lisp:null)
                         :accessor struct-shape-ssmlmessage-value :shape
                         "SSMLMessageValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ssmlmessage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ssmlmessage
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ssmlmessage 'make-ssmlmessage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssmlmessage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssmlmessage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssmlmessage))
   common-lisp:nil))
(common-lisp:deftype ssmlmessage-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sample-utterance common-lisp:nil
                       ((utterance :initarg :utterance :initform
                         (common-lisp:error ":utterance is required") :type
                         (common-lisp:or utterance common-lisp:null) :accessor
                         struct-shape-sample-utterance-utterance :shape
                         "Utterance" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sample-utterance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sample-utterance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sample-utterance 'make-sample-utterance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sample-utterance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sample-utterance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utterance))
      (common-lisp:list
       (common-lisp:cons "utterance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sample-utterance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sample-utterance-generation-specification
                       common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-sample-utterance-generation-specification-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bedrock-model-specification :initarg
                         :bedrock-model-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or bedrock-model-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-sample-utterance-generation-specification-bedrock-model-specification
                         :shape "BedrockModelSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sample-utterance-generation-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'sample-utterance-generation-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sample-utterance-generation-specification
                    'make-sample-utterance-generation-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sample-utterance-generation-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sample-utterance-generation-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bedrock-model-specification))
      (common-lisp:list
       (common-lisp:cons "bedrockModelSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sample-utterance-generation-specification))
   common-lisp:nil))
(common-lisp:deftype sample-utterances-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype sample-utterances-list ()
   '(trivial-types:proper-list sample-utterance))
 (common-lisp:defun make-sample-utterances-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sample-utterance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sample-value common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or value common-lisp:null) :accessor
                         struct-shape-sample-value-value :shape "Value"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sample-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sample-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sample-value 'make-sample-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sample-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sample-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sample-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-associated-transcripts-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-search-associated-transcripts-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-search-associated-transcripts-request-bot-version
                         :shape "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-search-associated-transcripts-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId")
                        (bot-recommendation-id :initarg :bot-recommendation-id
                         :initform
                         (common-lisp:error ":botrecommendationid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-search-associated-transcripts-request-bot-recommendation-id
                         :shape "Id" :location "uri" :location-name
                         "botRecommendationId")
                        (search-order :initarg :search-order :initform
                         common-lisp:nil :type
                         (common-lisp:or search-order common-lisp:null)
                         :accessor
                         struct-shape-search-associated-transcripts-request-search-order
                         :shape "SearchOrder" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform
                         (common-lisp:error ":filters is required") :type
                         (common-lisp:or associated-transcript-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-associated-transcripts-request-filters
                         :shape "AssociatedTranscriptFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-search-associated-transcripts-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-index :initarg :next-index :initform
                         common-lisp:nil :type
                         (common-lisp:or next-index common-lisp:null) :accessor
                         struct-shape-search-associated-transcripts-request-next-index
                         :shape "NextIndex" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-associated-transcripts-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-associated-transcripts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-associated-transcripts-request
                    'make-search-associated-transcripts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-associated-transcripts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-associated-transcripts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-order))
      (common-lisp:list
       (common-lisp:cons "searchOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-index))
      (common-lisp:list
       (common-lisp:cons "nextIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-associated-transcripts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-associated-transcripts-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-search-associated-transcripts-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-search-associated-transcripts-response-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-search-associated-transcripts-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-recommendation-id :initarg :bot-recommendation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-search-associated-transcripts-response-bot-recommendation-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-index :initarg :next-index :initform
                         common-lisp:nil :type
                         (common-lisp:or next-index common-lisp:null) :accessor
                         struct-shape-search-associated-transcripts-response-next-index
                         :shape "NextIndex" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (associated-transcripts :initarg
                         :associated-transcripts :initform common-lisp:nil
                         :type
                         (common-lisp:or associated-transcript-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-search-associated-transcripts-response-associated-transcripts
                         :shape "AssociatedTranscriptList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (total-results :initarg :total-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-search-associated-transcripts-response-total-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-associated-transcripts-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-associated-transcripts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-associated-transcripts-response
                    'make-search-associated-transcripts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-associated-transcripts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-associated-transcripts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-id))
      (common-lisp:list
       (common-lisp:cons "botRecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-index))
      (common-lisp:list
       (common-lisp:cons "nextIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-transcripts))
      (common-lisp:list
       (common-lisp:cons "associatedTranscripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-results))
      (common-lisp:list
       (common-lisp:cons "totalResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-associated-transcripts-response))
   common-lisp:nil))
(common-lisp:deftype search-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sentiment-analysis-settings common-lisp:nil
                       ((detect-sentiment :initarg :detect-sentiment :initform
                         (common-lisp:error ":detectsentiment is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-sentiment-analysis-settings-detect-sentiment
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sentiment-analysis-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sentiment-analysis-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sentiment-analysis-settings
                    'make-sentiment-analysis-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sentiment-analysis-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sentiment-analysis-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detect-sentiment))
      (common-lisp:list
       (common-lisp:cons "detectSentiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sentiment-analysis-settings))
   common-lisp:nil))
(common-lisp:deftype service-principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (models.lex.v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass session-data-sort-by common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or analytics-session-sort-by-name
                                         common-lisp:null)
                         :accessor struct-shape-session-data-sort-by-name
                         :shape "AnalyticsSessionSortByName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or analytics-sort-order common-lisp:null)
                         :accessor struct-shape-session-data-sort-by-order
                         :shape "AnalyticsSortOrder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-session-data-sort-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'session-data-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'session-data-sort-by 'make-session-data-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-data-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-data-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-data-sort-by))
   common-lisp:nil))
(common-lisp:deftype session-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass session-specification common-lisp:nil
                       ((bot-alias-id :initarg :bot-alias-id :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor
                         struct-shape-session-specification-bot-alias-id :shape
                         "BotAliasId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-specification-bot-version :shape
                         "NumericalBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-session-specification-locale-id :shape
                         "LocaleId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (channel :initarg :channel :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-channel common-lisp:null)
                         :accessor struct-shape-session-specification-channel
                         :shape "AnalyticsChannel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-session-id common-lisp:null)
                         :accessor
                         struct-shape-session-specification-session-id :shape
                         "AnalyticsSessionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conversation-start-time :initarg
                         :conversation-start-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-session-specification-conversation-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conversation-end-time :initarg :conversation-end-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-session-specification-conversation-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conversation-duration-seconds :initarg
                         :conversation-duration-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-long-value common-lisp:null)
                         :accessor
                         struct-shape-session-specification-conversation-duration-seconds
                         :shape "AnalyticsLongValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conversation-end-state :initarg
                         :conversation-end-state :initform common-lisp:nil
                         :type
                         (common-lisp:or conversation-end-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-specification-conversation-end-state
                         :shape "ConversationEndState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or analytics-modality common-lisp:null)
                         :accessor struct-shape-session-specification-mode
                         :shape "AnalyticsModality" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-turns :initarg :number-of-turns :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-long-value common-lisp:null)
                         :accessor
                         struct-shape-session-specification-number-of-turns
                         :shape "AnalyticsLongValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (invoked-intent-samples :initarg
                         :invoked-intent-samples :initform common-lisp:nil
                         :type
                         (common-lisp:or invoked-intent-samples
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-specification-invoked-intent-samples
                         :shape "InvokedIntentSamples" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (originating-request-id :initarg
                         :originating-request-id :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-originating-request-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-specification-originating-request-id
                         :shape "AnalyticsOriginatingRequestId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-session-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'session-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'session-specification 'make-session-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          session-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          session-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-start-time))
      (common-lisp:list
       (common-lisp:cons "conversationStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-end-time))
      (common-lisp:list
       (common-lisp:cons "conversationEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "conversationDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-end-state))
      (common-lisp:list
       (common-lisp:cons "conversationEndState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-turns))
      (common-lisp:list
       (common-lisp:cons "numberOfTurns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invoked-intent-samples))
      (common-lisp:list
       (common-lisp:cons "invokedIntentSamples"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'originating-request-id))
      (common-lisp:list
       (common-lisp:cons "originatingRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          session-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype session-specifications ()
   '(trivial-types:proper-list session-specification))
 (common-lisp:defun make-session-specifications
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list session-specification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype session-ttl () 'common-lisp:integer)
(common-lisp:deftype skip-resource-in-use-check () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass slot-capture-setting common-lisp:nil
                       ((capture-response :initarg :capture-response :initform
                         common-lisp:nil :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-capture-setting-capture-response
                         :shape "ResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (capture-next-step :initarg :capture-next-step
                         :initform common-lisp:nil :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         struct-shape-slot-capture-setting-capture-next-step
                         :shape "DialogState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capture-conditional :initarg :capture-conditional
                         :initform common-lisp:nil :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-capture-setting-capture-conditional
                         :shape "ConditionalSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-response :initarg :failure-response :initform
                         common-lisp:nil :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-capture-setting-failure-response
                         :shape "ResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-next-step :initarg :failure-next-step
                         :initform common-lisp:nil :type
                         (common-lisp:or dialog-state common-lisp:null)
                         :accessor
                         struct-shape-slot-capture-setting-failure-next-step
                         :shape "DialogState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-conditional :initarg :failure-conditional
                         :initform common-lisp:nil :type
                         (common-lisp:or conditional-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-capture-setting-failure-conditional
                         :shape "ConditionalSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (code-hook :initarg :code-hook :initform
                         common-lisp:nil :type
                         (common-lisp:or dialog-code-hook-invocation-setting
                                         common-lisp:null)
                         :accessor struct-shape-slot-capture-setting-code-hook
                         :shape "DialogCodeHookInvocationSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (elicitation-code-hook :initarg :elicitation-code-hook
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          elicitation-code-hook-invocation-setting
                          common-lisp:null)
                         :accessor
                         struct-shape-slot-capture-setting-elicitation-code-hook
                         :shape "ElicitationCodeHookInvocationSetting"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-capture-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'slot-capture-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'slot-capture-setting 'make-slot-capture-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-capture-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-capture-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-response))
      (common-lisp:list
       (common-lisp:cons "captureResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-next-step))
      (common-lisp:list
       (common-lisp:cons "captureNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-conditional))
      (common-lisp:list
       (common-lisp:cons "captureConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-response))
      (common-lisp:list
       (common-lisp:cons "failureResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-next-step))
      (common-lisp:list
       (common-lisp:cons "failureNextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-conditional))
      (common-lisp:list
       (common-lisp:cons "failureConditional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-hook))
      (common-lisp:list
       (common-lisp:cons "codeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elicitation-code-hook))
      (common-lisp:list
       (common-lisp:cons "elicitationCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-capture-setting))
   common-lisp:nil))
(common-lisp:deftype slot-constraint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slot-default-value common-lisp:nil
                       ((default-value :initarg :default-value :initform
                         (common-lisp:error ":defaultvalue is required") :type
                         (common-lisp:or slot-default-value-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-default-value-default-value :shape
                         "SlotDefaultValueString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-default-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'slot-default-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'slot-default-value 'make-slot-default-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-default-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-default-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-default-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-default-value-list ()
   '(trivial-types:proper-list slot-default-value))
 (common-lisp:defun make-slot-default-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-default-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass slot-default-value-specification common-lisp:nil
                       ((default-value-list :initarg :default-value-list
                         :initform
                         (common-lisp:error ":defaultvaluelist is required")
                         :type
                         (common-lisp:or slot-default-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-default-value-specification-default-value-list
                         :shape "SlotDefaultValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-default-value-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'slot-default-value-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'slot-default-value-specification
                    'make-slot-default-value-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slot-default-value-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slot-default-value-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value-list))
      (common-lisp:list
       (common-lisp:cons "defaultValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slot-default-value-specification))
   common-lisp:nil))
(common-lisp:deftype slot-default-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slot-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or slot-filter-name common-lisp:null)
                         :accessor struct-shape-slot-filter-name :shape
                         "SlotFilterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor struct-shape-slot-filter-values :shape
                         "FilterValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or slot-filter-operator common-lisp:null)
                         :accessor struct-shape-slot-filter-operator :shape
                         "SlotFilterOperator" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'slot-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'slot-filter 'make-slot-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-filter))
   common-lisp:nil))
(common-lisp:deftype slot-filter-name () 'common-lisp:string)
(common-lisp:deftype slot-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype slot-filters () '(trivial-types:proper-list slot-filter))
 (common-lisp:defun make-slot-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype slot-hints-intent-map () 'common-lisp:hash-table)
 (common-lisp:defun make-slot-hints-intent-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype slot-hints-slot-map () 'common-lisp:hash-table)
 (common-lisp:defun make-slot-hints-slot-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype slot-priorities-list ()
   '(trivial-types:proper-list slot-priority))
 (common-lisp:defun make-slot-priorities-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-priority))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass slot-priority common-lisp:nil
                       ((priority :initarg :priority :initform
                         (common-lisp:error ":priority is required") :type
                         (common-lisp:or priority-value common-lisp:null)
                         :accessor struct-shape-slot-priority-priority :shape
                         "PriorityValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slot-id :initarg :slot-id :initform
                         (common-lisp:error ":slotid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-slot-priority-slot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-priority
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'slot-priority
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'slot-priority 'make-slot-priority))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-priority))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-priority))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-id))
      (common-lisp:list
       (common-lisp:cons "slotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-priority))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass slot-resolution-improvement-specification
                       common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or enabled common-lisp:null) :accessor
                         struct-shape-slot-resolution-improvement-specification-enabled
                         :shape "Enabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bedrock-model-specification :initarg
                         :bedrock-model-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or bedrock-model-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-resolution-improvement-specification-bedrock-model-specification
                         :shape "BedrockModelSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-resolution-improvement-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'slot-resolution-improvement-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'slot-resolution-improvement-specification
                    'make-slot-resolution-improvement-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slot-resolution-improvement-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slot-resolution-improvement-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bedrock-model-specification))
      (common-lisp:list
       (common-lisp:cons "bedrockModelSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slot-resolution-improvement-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass slot-resolution-setting common-lisp:nil
                       ((slot-resolution-strategy :initarg
                         :slot-resolution-strategy :initform
                         (common-lisp:error
                          ":slotresolutionstrategy is required")
                         :type
                         (common-lisp:or slot-resolution-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-resolution-setting-slot-resolution-strategy
                         :shape "SlotResolutionStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-resolution-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'slot-resolution-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'slot-resolution-setting 'make-slot-resolution-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slot-resolution-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slot-resolution-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slot-resolution-strategy))
      (common-lisp:list
       (common-lisp:cons "slotResolutionStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slot-resolution-setting))
   common-lisp:nil))
(common-lisp:deftype slot-resolution-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slot-resolution-test-result-item common-lisp:nil
                       ((slot-name :initarg :slot-name :initform
                         (common-lisp:error ":slotname is required") :type
                         (common-lisp:or test-result-slot-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-resolution-test-result-item-slot-name
                         :shape "TestResultSlotName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-counts :initarg :result-counts :initform
                         (common-lisp:error ":resultcounts is required") :type
                         (common-lisp:or
                          slot-resolution-test-result-item-counts
                          common-lisp:null)
                         :accessor
                         struct-shape-slot-resolution-test-result-item-result-counts
                         :shape "SlotResolutionTestResultItemCounts" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-resolution-test-result-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'slot-resolution-test-result-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'slot-resolution-test-result-item
                    'make-slot-resolution-test-result-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slot-resolution-test-result-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slot-resolution-test-result-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "slotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-counts))
      (common-lisp:list
       (common-lisp:cons "resultCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slot-resolution-test-result-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass slot-resolution-test-result-item-counts common-lisp:nil
                       ((total-result-count :initarg :total-result-count
                         :initform
                         (common-lisp:error ":totalresultcount is required")
                         :type (common-lisp:or count common-lisp:null)
                         :accessor
                         struct-shape-slot-resolution-test-result-item-counts-total-result-count
                         :shape "Count" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (speech-transcription-result-counts :initarg
                         :speech-transcription-result-counts :initform
                         common-lisp:nil :type
                         (common-lisp:or test-result-match-status-count-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-resolution-test-result-item-counts-speech-transcription-result-counts
                         :shape "TestResultMatchStatusCountMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (slot-match-result-counts :initarg
                         :slot-match-result-counts :initform
                         (common-lisp:error
                          ":slotmatchresultcounts is required")
                         :type
                         (common-lisp:or test-result-match-status-count-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-resolution-test-result-item-counts-slot-match-result-counts
                         :shape "TestResultMatchStatusCountMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-resolution-test-result-item-counts
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'slot-resolution-test-result-item-counts
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'slot-resolution-test-result-item-counts
                    'make-slot-resolution-test-result-item-counts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slot-resolution-test-result-item-counts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slot-resolution-test-result-item-counts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-result-count))
      (common-lisp:list
       (common-lisp:cons "totalResultCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'speech-transcription-result-counts))
      (common-lisp:list
       (common-lisp:cons "speechTranscriptionResultCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slot-match-result-counts))
      (common-lisp:list
       (common-lisp:cons "slotMatchResultCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slot-resolution-test-result-item-counts))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-resolution-test-result-items ()
   '(trivial-types:proper-list slot-resolution-test-result-item))
 (common-lisp:defun make-slot-resolution-test-result-items
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            slot-resolution-test-result-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype slot-shape () 'common-lisp:string)
(common-lisp:deftype slot-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slot-sort-by common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or slot-sort-attribute common-lisp:null)
                         :accessor struct-shape-slot-sort-by-attribute :shape
                         "SlotSortAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-slot-sort-by-order :shape "SortOrder"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-sort-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'slot-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'slot-sort-by 'make-slot-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-sort-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass slot-summary common-lisp:nil
                       ((slot-id :initarg :slot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-slot-summary-slot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-name :initarg :slot-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-slot-summary-slot-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-slot-summary-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-constraint :initarg :slot-constraint :initform
                         common-lisp:nil :type
                         (common-lisp:or slot-constraint common-lisp:null)
                         :accessor struct-shape-slot-summary-slot-constraint
                         :shape "SlotConstraint" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slot-type-id :initarg :slot-type-id :initform
                         common-lisp:nil :type
                         (common-lisp:or built-in-or-custom-slot-type-id
                                         common-lisp:null)
                         :accessor struct-shape-slot-summary-slot-type-id
                         :shape "BuiltInOrCustomSlotTypeId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value-elicitation-prompt-specification :initarg
                         :value-elicitation-prompt-specification :initform
                         common-lisp:nil :type
                         (common-lisp:or prompt-specification common-lisp:null)
                         :accessor
                         struct-shape-slot-summary-value-elicitation-prompt-specification
                         :shape "PromptSpecification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-slot-summary-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'slot-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'slot-summary 'make-slot-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-id))
      (common-lisp:list
       (common-lisp:cons "slotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "slotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-constraint))
      (common-lisp:list
       (common-lisp:cons "slotConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-elicitation-prompt-specification))
      (common-lisp:list
       (common-lisp:cons "valueElicitationPromptSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-summary-list ()
   '(trivial-types:proper-list slot-summary))
 (common-lisp:defun make-slot-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype slot-type-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slot-type-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or slot-type-filter-name
                                         common-lisp:null)
                         :accessor struct-shape-slot-type-filter-name :shape
                         "SlotTypeFilterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor struct-shape-slot-type-filter-values :shape
                         "FilterValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or slot-type-filter-operator
                                         common-lisp:null)
                         :accessor struct-shape-slot-type-filter-operator
                         :shape "SlotTypeFilterOperator" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-type-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'slot-type-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'slot-type-filter 'make-slot-type-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-type-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-type-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-type-filter))
   common-lisp:nil))
(common-lisp:deftype slot-type-filter-name () 'common-lisp:string)
(common-lisp:deftype slot-type-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype slot-type-filters ()
   '(trivial-types:proper-list slot-type-filter))
 (common-lisp:defun make-slot-type-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-type-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype slot-type-signature () 'common-lisp:string)
(common-lisp:deftype slot-type-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slot-type-sort-by common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or slot-type-sort-attribute
                                         common-lisp:null)
                         :accessor struct-shape-slot-type-sort-by-attribute
                         :shape "SlotTypeSortAttribute" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-slot-type-sort-by-order :shape
                         "SortOrder" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-type-sort-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'slot-type-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'slot-type-sort-by 'make-slot-type-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-type-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-type-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-type-sort-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass slot-type-statistics common-lisp:nil
                       ((discovered-slot-type-count :initarg
                         :discovered-slot-type-count :initform common-lisp:nil
                         :type (common-lisp:or count common-lisp:null)
                         :accessor
                         struct-shape-slot-type-statistics-discovered-slot-type-count
                         :shape "Count" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-type-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'slot-type-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'slot-type-statistics 'make-slot-type-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-type-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-type-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'discovered-slot-type-count))
      (common-lisp:list
       (common-lisp:cons "discoveredSlotTypeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-type-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass slot-type-summary common-lisp:nil
                       ((slot-type-id :initarg :slot-type-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-slot-type-summary-slot-type-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-type-name :initarg :slot-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-slot-type-summary-slot-type-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-slot-type-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parent-slot-type-signature :initarg
                         :parent-slot-type-signature :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-type-signature common-lisp:null)
                         :accessor
                         struct-shape-slot-type-summary-parent-slot-type-signature
                         :shape "SlotTypeSignature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-slot-type-summary-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slot-type-category :initarg :slot-type-category
                         :initform common-lisp:nil :type
                         (common-lisp:or slot-type-category common-lisp:null)
                         :accessor
                         struct-shape-slot-type-summary-slot-type-category
                         :shape "SlotTypeCategory" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-type-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'slot-type-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'slot-type-summary 'make-slot-type-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-type-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-type-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-name))
      (common-lisp:list
       (common-lisp:cons "slotTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "parentSlotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-category))
      (common-lisp:list
       (common-lisp:cons "slotTypeCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-type-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-type-summary-list ()
   '(trivial-types:proper-list slot-type-summary))
 (common-lisp:defun make-slot-type-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-type-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass slot-type-value common-lisp:nil
                       ((sample-value :initarg :sample-value :initform
                         common-lisp:nil :type
                         (common-lisp:or sample-value common-lisp:null)
                         :accessor struct-shape-slot-type-value-sample-value
                         :shape "SampleValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (synonyms :initarg :synonyms :initform common-lisp:nil
                         :type (common-lisp:or synonym-list common-lisp:null)
                         :accessor struct-shape-slot-type-value-synonyms :shape
                         "SynonymList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-type-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'slot-type-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'slot-type-value 'make-slot-type-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-type-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-type-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-value))
      (common-lisp:list
       (common-lisp:cons "sampleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'synonyms))
      (common-lisp:list
       (common-lisp:cons "synonyms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-type-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-type-values ()
   '(trivial-types:proper-list slot-type-value))
 (common-lisp:defun make-slot-type-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-type-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass slot-value common-lisp:nil
                       ((interpreted-value :initarg :interpreted-value
                         :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-slot-value-interpreted-value
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'slot-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'slot-value 'make-slot-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interpreted-value))
      (common-lisp:list
       (common-lisp:cons "interpretedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass slot-value-elicitation-setting common-lisp:nil
                       ((default-value-specification :initarg
                         :default-value-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-default-value-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-value-elicitation-setting-default-value-specification
                         :shape "SlotDefaultValueSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (slot-constraint :initarg :slot-constraint :initform
                         (common-lisp:error ":slotconstraint is required")
                         :type
                         (common-lisp:or slot-constraint common-lisp:null)
                         :accessor
                         struct-shape-slot-value-elicitation-setting-slot-constraint
                         :shape "SlotConstraint" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prompt-specification :initarg :prompt-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or prompt-specification common-lisp:null)
                         :accessor
                         struct-shape-slot-value-elicitation-setting-prompt-specification
                         :shape "PromptSpecification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sample-utterances :initarg :sample-utterances
                         :initform common-lisp:nil :type
                         (common-lisp:or sample-utterances-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-value-elicitation-setting-sample-utterances
                         :shape "SampleUtterancesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (wait-and-continue-specification :initarg
                         :wait-and-continue-specification :initform
                         common-lisp:nil :type
                         (common-lisp:or wait-and-continue-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-value-elicitation-setting-wait-and-continue-specification
                         :shape "WaitAndContinueSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (slot-capture-setting :initarg :slot-capture-setting
                         :initform common-lisp:nil :type
                         (common-lisp:or slot-capture-setting common-lisp:null)
                         :accessor
                         struct-shape-slot-value-elicitation-setting-slot-capture-setting
                         :shape "SlotCaptureSetting" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slot-resolution-setting :initarg
                         :slot-resolution-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-resolution-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-value-elicitation-setting-slot-resolution-setting
                         :shape "SlotResolutionSetting" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-value-elicitation-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'slot-value-elicitation-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'slot-value-elicitation-setting
                    'make-slot-value-elicitation-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-elicitation-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-elicitation-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-value-specification))
      (common-lisp:list
       (common-lisp:cons "defaultValueSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-constraint))
      (common-lisp:list
       (common-lisp:cons "slotConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prompt-specification))
      (common-lisp:list
       (common-lisp:cons "promptSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wait-and-continue-specification))
      (common-lisp:list
       (common-lisp:cons "waitAndContinueSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slot-capture-setting))
      (common-lisp:list
       (common-lisp:cons "slotCaptureSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slot-resolution-setting))
      (common-lisp:list
       (common-lisp:cons "slotResolutionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-elicitation-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass slot-value-override common-lisp:nil
                       ((shape :initarg :shape :initform common-lisp:nil :type
                         (common-lisp:or slot-shape common-lisp:null) :accessor
                         struct-shape-slot-value-override-shape :shape
                         "SlotShape" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or slot-value common-lisp:null) :accessor
                         struct-shape-slot-value-override-value :shape
                         "SlotValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type (common-lisp:or slot-values common-lisp:null)
                         :accessor struct-shape-slot-value-override-values
                         :shape "SlotValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-value-override
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'slot-value-override
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'slot-value-override 'make-slot-value-override))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-value-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-value-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shape))
      (common-lisp:list
       (common-lisp:cons "shape"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-value-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-value-override-map () 'common-lisp:hash-table)
 (common-lisp:defun make-slot-value-override-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass slot-value-regex-filter common-lisp:nil
                       ((pattern :initarg :pattern :initform
                         (common-lisp:error ":pattern is required") :type
                         (common-lisp:or regex-pattern common-lisp:null)
                         :accessor struct-shape-slot-value-regex-filter-pattern
                         :shape "RegexPattern" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-value-regex-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'slot-value-regex-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'slot-value-regex-filter 'make-slot-value-regex-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-regex-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-regex-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-regex-filter))
   common-lisp:nil))
(common-lisp:deftype slot-value-resolution-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slot-value-selection-setting common-lisp:nil
                       ((resolution-strategy :initarg :resolution-strategy
                         :initform
                         (common-lisp:error ":resolutionstrategy is required")
                         :type
                         (common-lisp:or slot-value-resolution-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-value-selection-setting-resolution-strategy
                         :shape "SlotValueResolutionStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (regex-filter :initarg :regex-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or slot-value-regex-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-value-selection-setting-regex-filter
                         :shape "SlotValueRegexFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (advanced-recognition-setting :initarg
                         :advanced-recognition-setting :initform
                         common-lisp:nil :type
                         (common-lisp:or advanced-recognition-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-slot-value-selection-setting-advanced-recognition-setting
                         :shape "AdvancedRecognitionSetting" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-slot-value-selection-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'slot-value-selection-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'slot-value-selection-setting
                    'make-slot-value-selection-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-selection-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-selection-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution-strategy))
      (common-lisp:list
       (common-lisp:cons "resolutionStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-filter))
      (common-lisp:list
       (common-lisp:cons "regexFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-recognition-setting))
      (common-lisp:list
       (common-lisp:cons "advancedRecognitionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slot-value-selection-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-values ()
   '(trivial-types:proper-list slot-value-override))
 (common-lisp:defun make-slot-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-value-override))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass specifications common-lisp:nil
                       ((slot-type-id :initarg :slot-type-id :initform
                         (common-lisp:error ":slottypeid is required") :type
                         (common-lisp:or built-in-or-custom-slot-type-id
                                         common-lisp:null)
                         :accessor struct-shape-specifications-slot-type-id
                         :shape "BuiltInOrCustomSlotTypeId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value-elicitation-setting :initarg
                         :value-elicitation-setting :initform
                         (common-lisp:error
                          ":valueelicitationsetting is required")
                         :type
                         (common-lisp:or sub-slot-value-elicitation-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-specifications-value-elicitation-setting
                         :shape "SubSlotValueElicitationSetting" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-specifications
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'specifications
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'specifications 'make-specifications))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input specifications))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input specifications))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-elicitation-setting))
      (common-lisp:list
       (common-lisp:cons "valueElicitationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input specifications))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-bot-recommendation-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-start-bot-recommendation-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-start-bot-recommendation-request-bot-version
                         :shape "DraftBotVersion" :location "uri"
                         :location-name "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-start-bot-recommendation-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId")
                        (transcript-source-setting :initarg
                         :transcript-source-setting :initform
                         (common-lisp:error
                          ":transcriptsourcesetting is required")
                         :type
                         (common-lisp:or transcript-source-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-bot-recommendation-request-transcript-source-setting
                         :shape "TranscriptSourceSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-setting :initarg :encryption-setting
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-setting common-lisp:null)
                         :accessor
                         struct-shape-start-bot-recommendation-request-encryption-setting
                         :shape "EncryptionSetting" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-bot-recommendation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-bot-recommendation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-bot-recommendation-request
                    'make-start-bot-recommendation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-recommendation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcript-source-setting))
      (common-lisp:list
       (common-lisp:cons "transcriptSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-setting))
      (common-lisp:list
       (common-lisp:cons "encryptionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-bot-recommendation-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-start-bot-recommendation-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-start-bot-recommendation-response-bot-version
                         :shape "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-start-bot-recommendation-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-recommendation-status :initarg
                         :bot-recommendation-status :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-recommendation-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-bot-recommendation-response-bot-recommendation-status
                         :shape "BotRecommendationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bot-recommendation-id :initarg :bot-recommendation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-start-bot-recommendation-response-bot-recommendation-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-start-bot-recommendation-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transcript-source-setting :initarg
                         :transcript-source-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or transcript-source-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-bot-recommendation-response-transcript-source-setting
                         :shape "TranscriptSourceSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-setting :initarg :encryption-setting
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-setting common-lisp:null)
                         :accessor
                         struct-shape-start-bot-recommendation-response-encryption-setting
                         :shape "EncryptionSetting" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-bot-recommendation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-bot-recommendation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-bot-recommendation-response
                    'make-start-bot-recommendation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-status))
      (common-lisp:list
       (common-lisp:cons "botRecommendationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-id))
      (common-lisp:list
       (common-lisp:cons "botRecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcript-source-setting))
      (common-lisp:list
       (common-lisp:cons "transcriptSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-setting))
      (common-lisp:list
       (common-lisp:cons "encryptionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-recommendation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-bot-resource-generation-request common-lisp:nil
                       ((generation-input-prompt :initarg
                         :generation-input-prompt :initform
                         (common-lisp:error
                          ":generationinputprompt is required")
                         :type
                         (common-lisp:or generation-input common-lisp:null)
                         :accessor
                         struct-shape-start-bot-resource-generation-request-generation-input-prompt
                         :shape "GenerationInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-start-bot-resource-generation-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-start-bot-resource-generation-request-bot-version
                         :shape "BotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-start-bot-resource-generation-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-bot-resource-generation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-bot-resource-generation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-bot-resource-generation-request
                    'make-start-bot-resource-generation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-resource-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-resource-generation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-input-prompt))
      (common-lisp:list
       (common-lisp:cons "generationInputPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-resource-generation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-bot-resource-generation-response common-lisp:nil
                       ((generation-input-prompt :initarg
                         :generation-input-prompt :initform common-lisp:nil
                         :type
                         (common-lisp:or generation-input common-lisp:null)
                         :accessor
                         struct-shape-start-bot-resource-generation-response-generation-input-prompt
                         :shape "GenerationInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generation-id :initarg :generation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-start-bot-resource-generation-response-generation-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-start-bot-resource-generation-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-start-bot-resource-generation-response-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-start-bot-resource-generation-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generation-status :initarg :generation-status
                         :initform common-lisp:nil :type
                         (common-lisp:or generation-status common-lisp:null)
                         :accessor
                         struct-shape-start-bot-resource-generation-response-generation-status
                         :shape "GenerationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-start-bot-resource-generation-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-bot-resource-generation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-bot-resource-generation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-bot-resource-generation-response
                    'make-start-bot-resource-generation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-resource-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-resource-generation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-input-prompt))
      (common-lisp:list
       (common-lisp:cons "generationInputPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-id))
      (common-lisp:list
       (common-lisp:cons "generationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-status))
      (common-lisp:list
       (common-lisp:cons "generationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-bot-resource-generation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-import-request common-lisp:nil
                       ((import-id :initarg :import-id :initform
                         (common-lisp:error ":importid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-start-import-request-import-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-specification :initarg
                         :resource-specification :initform
                         (common-lisp:error
                          ":resourcespecification is required")
                         :type
                         (common-lisp:or import-resource-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-import-request-resource-specification
                         :shape "ImportResourceSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (merge-strategy :initarg :merge-strategy :initform
                         (common-lisp:error ":mergestrategy is required") :type
                         (common-lisp:or merge-strategy common-lisp:null)
                         :accessor
                         struct-shape-start-import-request-merge-strategy
                         :shape "MergeStrategy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (file-password :initarg :file-password :initform
                         common-lisp:nil :type
                         (common-lisp:or import-export-file-password
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-import-request-file-password :shape
                         "ImportExportFilePassword" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-import-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-import-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-import-request 'make-start-import-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-import-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "importId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "resourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-strategy))
      (common-lisp:list
       (common-lisp:cons "mergeStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-password))
      (common-lisp:list
       (common-lisp:cons "filePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-import-response common-lisp:nil
                       ((import-id :initarg :import-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-start-import-response-import-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-specification :initarg
                         :resource-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or import-resource-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-import-response-resource-specification
                         :shape "ImportResourceSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (merge-strategy :initarg :merge-strategy :initform
                         common-lisp:nil :type
                         (common-lisp:or merge-strategy common-lisp:null)
                         :accessor
                         struct-shape-start-import-response-merge-strategy
                         :shape "MergeStrategy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (import-status :initarg :import-status :initform
                         common-lisp:nil :type
                         (common-lisp:or import-status common-lisp:null)
                         :accessor
                         struct-shape-start-import-response-import-status
                         :shape "ImportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-start-import-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-import-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-import-response 'make-start-import-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "importId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "resourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-strategy))
      (common-lisp:list
       (common-lisp:cons "mergeStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-status))
      (common-lisp:list
       (common-lisp:cons "importStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-test-execution-request common-lisp:nil
                       ((test-set-id :initarg :test-set-id :initform
                         (common-lisp:error ":testsetid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-start-test-execution-request-test-set-id
                         :shape "Id" :location "uri" :location-name
                         "testSetId")
                        (target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or test-execution-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-test-execution-request-target
                         :shape "TestExecutionTarget" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (api-mode :initarg :api-mode :initform
                         (common-lisp:error ":apimode is required") :type
                         (common-lisp:or test-execution-api-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-test-execution-request-api-mode
                         :shape "TestExecutionApiMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (test-execution-modality :initarg
                         :test-execution-modality :initform common-lisp:nil
                         :type
                         (common-lisp:or test-execution-modality
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-test-execution-request-test-execution-modality
                         :shape "TestExecutionModality" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-test-execution-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-test-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-test-execution-request
                    'make-start-test-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-test-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-test-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-mode))
      (common-lisp:list
       (common-lisp:cons "apiMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-execution-modality))
      (common-lisp:list
       (common-lisp:cons "testExecutionModality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-test-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-test-execution-response common-lisp:nil
                       ((test-execution-id :initarg :test-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-start-test-execution-response-test-execution-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-start-test-execution-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-set-id :initarg :test-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-start-test-execution-response-test-set-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target :initarg :target :initform common-lisp:nil
                         :type
                         (common-lisp:or test-execution-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-test-execution-response-target
                         :shape "TestExecutionTarget" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (api-mode :initarg :api-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or test-execution-api-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-test-execution-response-api-mode
                         :shape "TestExecutionApiMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (test-execution-modality :initarg
                         :test-execution-modality :initform common-lisp:nil
                         :type
                         (common-lisp:or test-execution-modality
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-test-execution-response-test-execution-modality
                         :shape "TestExecutionModality" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-test-execution-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-test-execution-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-test-execution-response
                    'make-start-test-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-test-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-test-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-execution-id))
      (common-lisp:list
       (common-lisp:cons "testExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-id))
      (common-lisp:list
       (common-lisp:cons "testSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-mode))
      (common-lisp:list
       (common-lisp:cons "apiMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-execution-modality))
      (common-lisp:list
       (common-lisp:cons "testExecutionModality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-test-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-test-set-generation-request common-lisp:nil
                       ((test-set-name :initarg :test-set-name :initform
                         (common-lisp:error ":testsetname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-start-test-set-generation-request-test-set-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-start-test-set-generation-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-location :initarg :storage-location :initform
                         (common-lisp:error ":storagelocation is required")
                         :type
                         (common-lisp:or test-set-storage-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-test-set-generation-request-storage-location
                         :shape "TestSetStorageLocation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (generation-data-source :initarg
                         :generation-data-source :initform
                         (common-lisp:error
                          ":generationdatasource is required")
                         :type
                         (common-lisp:or test-set-generation-data-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-test-set-generation-request-generation-data-source
                         :shape "TestSetGenerationDataSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-start-test-set-generation-request-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-set-tags :initarg :test-set-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-start-test-set-generation-request-test-set-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-test-set-generation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-test-set-generation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-test-set-generation-request
                    'make-start-test-set-generation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-test-set-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-test-set-generation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-name))
      (common-lisp:list
       (common-lisp:cons "testSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-location))
      (common-lisp:list
       (common-lisp:cons "storageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-data-source))
      (common-lisp:list
       (common-lisp:cons "generationDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-tags))
      (common-lisp:list
       (common-lisp:cons "testSetTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-test-set-generation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-test-set-generation-response common-lisp:nil
                       ((test-set-generation-id :initarg
                         :test-set-generation-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-start-test-set-generation-response-test-set-generation-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-start-test-set-generation-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-set-generation-status :initarg
                         :test-set-generation-status :initform common-lisp:nil
                         :type
                         (common-lisp:or test-set-generation-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-test-set-generation-response-test-set-generation-status
                         :shape "TestSetGenerationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (test-set-name :initarg :test-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-start-test-set-generation-response-test-set-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-start-test-set-generation-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-location :initarg :storage-location :initform
                         common-lisp:nil :type
                         (common-lisp:or test-set-storage-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-test-set-generation-response-storage-location
                         :shape "TestSetStorageLocation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (generation-data-source :initarg
                         :generation-data-source :initform common-lisp:nil
                         :type
                         (common-lisp:or test-set-generation-data-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-test-set-generation-response-generation-data-source
                         :shape "TestSetGenerationDataSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-start-test-set-generation-response-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-set-tags :initarg :test-set-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-start-test-set-generation-response-test-set-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-test-set-generation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-test-set-generation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-test-set-generation-response
                    'make-start-test-set-generation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-test-set-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-test-set-generation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-set-generation-id))
      (common-lisp:list
       (common-lisp:cons "testSetGenerationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-set-generation-status))
      (common-lisp:list
       (common-lisp:cons "testSetGenerationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-name))
      (common-lisp:list
       (common-lisp:cons "testSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-location))
      (common-lisp:list
       (common-lisp:cons "storageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-data-source))
      (common-lisp:list
       (common-lisp:cons "generationDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-tags))
      (common-lisp:list
       (common-lisp:cons "testSetTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-test-set-generation-response))
   common-lisp:nil))
(common-lisp:deftype still-waiting-response-frequency () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass still-waiting-response-specification common-lisp:nil
                       ((message-groups :initarg :message-groups :initform
                         (common-lisp:error ":messagegroups is required") :type
                         (common-lisp:or message-groups-list common-lisp:null)
                         :accessor
                         struct-shape-still-waiting-response-specification-message-groups
                         :shape "MessageGroupsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (frequency-in-seconds :initarg :frequency-in-seconds
                         :initform
                         (common-lisp:error ":frequencyinseconds is required")
                         :type
                         (common-lisp:or still-waiting-response-frequency
                                         common-lisp:null)
                         :accessor
                         struct-shape-still-waiting-response-specification-frequency-in-seconds
                         :shape "StillWaitingResponseFrequency" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timeout-in-seconds :initarg :timeout-in-seconds
                         :initform
                         (common-lisp:error ":timeoutinseconds is required")
                         :type
                         (common-lisp:or still-waiting-response-timeout
                                         common-lisp:null)
                         :accessor
                         struct-shape-still-waiting-response-specification-timeout-in-seconds
                         :shape "StillWaitingResponseTimeout" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (allow-interrupt :initarg :allow-interrupt :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-still-waiting-response-specification-allow-interrupt
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-still-waiting-response-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'still-waiting-response-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'still-waiting-response-specification
                    'make-still-waiting-response-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          still-waiting-response-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          still-waiting-response-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-groups))
      (common-lisp:list
       (common-lisp:cons "messageGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frequency-in-seconds))
      (common-lisp:list
       (common-lisp:cons "frequencyInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-interrupt))
      (common-lisp:list
       (common-lisp:cons "allowInterrupt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          still-waiting-response-specification))
   common-lisp:nil))
(common-lisp:deftype still-waiting-response-timeout () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass stop-bot-recommendation-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-stop-bot-recommendation-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-stop-bot-recommendation-request-bot-version
                         :shape "DraftBotVersion" :location "uri"
                         :location-name "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-stop-bot-recommendation-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId")
                        (bot-recommendation-id :initarg :bot-recommendation-id
                         :initform
                         (common-lisp:error ":botrecommendationid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-stop-bot-recommendation-request-bot-recommendation-id
                         :shape "Id" :location "uri" :location-name
                         "botRecommendationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-bot-recommendation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-bot-recommendation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-bot-recommendation-request
                    'make-stop-bot-recommendation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-bot-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-bot-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-bot-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-bot-recommendation-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-stop-bot-recommendation-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-stop-bot-recommendation-response-bot-version
                         :shape "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-stop-bot-recommendation-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-recommendation-status :initarg
                         :bot-recommendation-status :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-recommendation-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-bot-recommendation-response-bot-recommendation-status
                         :shape "BotRecommendationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bot-recommendation-id :initarg :bot-recommendation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-stop-bot-recommendation-response-bot-recommendation-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-bot-recommendation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-bot-recommendation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-bot-recommendation-response
                    'make-stop-bot-recommendation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-bot-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-bot-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-status))
      (common-lisp:list
       (common-lisp:cons "botRecommendationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-id))
      (common-lisp:list
       (common-lisp:cons "botRecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-bot-recommendation-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-map () 'common-lisp:hash-table)
 (common-lisp:defun make-string-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype sub-slot-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sub-slot-setting common-lisp:nil
                       ((expression :initarg :expression :initform
                         common-lisp:nil :type
                         (common-lisp:or sub-slot-expression common-lisp:null)
                         :accessor struct-shape-sub-slot-setting-expression
                         :shape "SubSlotExpression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slot-specifications :initarg :slot-specifications
                         :initform common-lisp:nil :type
                         (common-lisp:or sub-slot-specification-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-sub-slot-setting-slot-specifications
                         :shape "SubSlotSpecificationMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sub-slot-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sub-slot-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sub-slot-setting 'make-sub-slot-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sub-slot-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sub-slot-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-specifications))
      (common-lisp:list
       (common-lisp:cons "slotSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sub-slot-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sub-slot-specification-map () 'common-lisp:hash-table)
 (common-lisp:defun make-sub-slot-specification-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass sub-slot-type-composition common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-sub-slot-type-composition-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-type-id :initarg :slot-type-id :initform
                         (common-lisp:error ":slottypeid is required") :type
                         (common-lisp:or built-in-or-custom-slot-type-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-sub-slot-type-composition-slot-type-id
                         :shape "BuiltInOrCustomSlotTypeId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sub-slot-type-composition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sub-slot-type-composition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sub-slot-type-composition
                    'make-sub-slot-type-composition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sub-slot-type-composition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sub-slot-type-composition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sub-slot-type-composition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sub-slot-type-list ()
   '(trivial-types:proper-list sub-slot-type-composition))
 (common-lisp:defun make-sub-slot-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sub-slot-type-composition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sub-slot-value-elicitation-setting common-lisp:nil
                       ((default-value-specification :initarg
                         :default-value-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-default-value-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-sub-slot-value-elicitation-setting-default-value-specification
                         :shape "SlotDefaultValueSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (prompt-specification :initarg :prompt-specification
                         :initform
                         (common-lisp:error ":promptspecification is required")
                         :type
                         (common-lisp:or prompt-specification common-lisp:null)
                         :accessor
                         struct-shape-sub-slot-value-elicitation-setting-prompt-specification
                         :shape "PromptSpecification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sample-utterances :initarg :sample-utterances
                         :initform common-lisp:nil :type
                         (common-lisp:or sample-utterances-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-sub-slot-value-elicitation-setting-sample-utterances
                         :shape "SampleUtterancesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (wait-and-continue-specification :initarg
                         :wait-and-continue-specification :initform
                         common-lisp:nil :type
                         (common-lisp:or wait-and-continue-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-sub-slot-value-elicitation-setting-wait-and-continue-specification
                         :shape "WaitAndContinueSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sub-slot-value-elicitation-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'sub-slot-value-elicitation-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sub-slot-value-elicitation-setting
                    'make-sub-slot-value-elicitation-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sub-slot-value-elicitation-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sub-slot-value-elicitation-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-value-specification))
      (common-lisp:list
       (common-lisp:cons "defaultValueSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prompt-specification))
      (common-lisp:list
       (common-lisp:cons "promptSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wait-and-continue-specification))
      (common-lisp:list
       (common-lisp:cons "waitAndContinueSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sub-slot-value-elicitation-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype synonym-list ()
   '(trivial-types:proper-list sample-value))
 (common-lisp:defun make-synonym-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sample-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "AmazonResourceName" :location "uri" :location-name
                         "resourceARN")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype test-execution-api-mode () 'common-lisp:string)
(common-lisp:deftype test-execution-modality () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass test-execution-result-filter-by common-lisp:nil
                       ((result-type-filter :initarg :result-type-filter
                         :initform
                         (common-lisp:error ":resulttypefilter is required")
                         :type
                         (common-lisp:or test-result-type-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-execution-result-filter-by-result-type-filter
                         :shape "TestResultTypeFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (conversation-level-test-results-filter-by :initarg
                         :conversation-level-test-results-filter-by :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          conversation-level-test-results-filter-by
                          common-lisp:null)
                         :accessor
                         struct-shape-test-execution-result-filter-by-conversation-level-test-results-filter-by
                         :shape "ConversationLevelTestResultsFilterBy"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-execution-result-filter-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-execution-result-filter-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-execution-result-filter-by
                    'make-test-execution-result-filter-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-execution-result-filter-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-execution-result-filter-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-type-filter))
      (common-lisp:list
       (common-lisp:cons "resultTypeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-level-test-results-filter-by))
      (common-lisp:list
       (common-lisp:cons "conversationLevelTestResultsFilterBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-execution-result-filter-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-execution-result-items common-lisp:nil
                       ((overall-test-results :initarg :overall-test-results
                         :initform common-lisp:nil :type
                         (common-lisp:or overall-test-results common-lisp:null)
                         :accessor
                         struct-shape-test-execution-result-items-overall-test-results
                         :shape "OverallTestResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conversation-level-test-results :initarg
                         :conversation-level-test-results :initform
                         common-lisp:nil :type
                         (common-lisp:or conversation-level-test-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-execution-result-items-conversation-level-test-results
                         :shape "ConversationLevelTestResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (intent-classification-test-results :initarg
                         :intent-classification-test-results :initform
                         common-lisp:nil :type
                         (common-lisp:or intent-classification-test-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-execution-result-items-intent-classification-test-results
                         :shape "IntentClassificationTestResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (intent-level-slot-resolution-test-results :initarg
                         :intent-level-slot-resolution-test-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          intent-level-slot-resolution-test-results
                          common-lisp:null)
                         :accessor
                         struct-shape-test-execution-result-items-intent-level-slot-resolution-test-results
                         :shape "IntentLevelSlotResolutionTestResults"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (utterance-level-test-results :initarg
                         :utterance-level-test-results :initform
                         common-lisp:nil :type
                         (common-lisp:or utterance-level-test-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-execution-result-items-utterance-level-test-results
                         :shape "UtteranceLevelTestResults" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-execution-result-items
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-execution-result-items
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-execution-result-items
                    'make-test-execution-result-items))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-execution-result-items))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-execution-result-items))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'overall-test-results))
      (common-lisp:list
       (common-lisp:cons "overallTestResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-level-test-results))
      (common-lisp:list
       (common-lisp:cons "conversationLevelTestResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-classification-test-results))
      (common-lisp:list
       (common-lisp:cons "intentClassificationTestResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-level-slot-resolution-test-results))
      (common-lisp:list
       (common-lisp:cons "intentLevelSlotResolutionTestResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'utterance-level-test-results))
      (common-lisp:list
       (common-lisp:cons "utteranceLevelTestResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-execution-result-items))
   common-lisp:nil))
(common-lisp:deftype test-execution-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass test-execution-sort-by common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or test-execution-sort-attribute
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-execution-sort-by-attribute :shape
                         "TestExecutionSortAttribute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-test-execution-sort-by-order :shape
                         "SortOrder" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-execution-sort-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-execution-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-execution-sort-by 'make-test-execution-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-execution-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-execution-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-execution-sort-by))
   common-lisp:nil))
(common-lisp:deftype test-execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass test-execution-summary common-lisp:nil
                       ((test-execution-id :initarg :test-execution-id
                         :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-test-execution-summary-test-execution-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-test-execution-summary-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-test-execution-summary-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-execution-status :initarg :test-execution-status
                         :initform common-lisp:nil :type
                         (common-lisp:or test-execution-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-execution-summary-test-execution-status
                         :shape "TestExecutionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-set-id :initarg :test-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-test-execution-summary-test-set-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (test-set-name :initarg :test-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-test-execution-summary-test-set-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target :initarg :target :initform common-lisp:nil
                         :type
                         (common-lisp:or test-execution-target
                                         common-lisp:null)
                         :accessor struct-shape-test-execution-summary-target
                         :shape "TestExecutionTarget" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (api-mode :initarg :api-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or test-execution-api-mode
                                         common-lisp:null)
                         :accessor struct-shape-test-execution-summary-api-mode
                         :shape "TestExecutionApiMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (test-execution-modality :initarg
                         :test-execution-modality :initform common-lisp:nil
                         :type
                         (common-lisp:or test-execution-modality
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-execution-summary-test-execution-modality
                         :shape "TestExecutionModality" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-execution-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-execution-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-execution-summary 'make-test-execution-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-execution-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-execution-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-execution-id))
      (common-lisp:list
       (common-lisp:cons "testExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-execution-status))
      (common-lisp:list
       (common-lisp:cons "testExecutionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-id))
      (common-lisp:list
       (common-lisp:cons "testSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-name))
      (common-lisp:list
       (common-lisp:cons "testSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-mode))
      (common-lisp:list
       (common-lisp:cons "apiMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'test-execution-modality))
      (common-lisp:list
       (common-lisp:cons "testExecutionModality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-execution-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype test-execution-summary-list ()
   '(trivial-types:proper-list test-execution-summary))
 (common-lisp:defun make-test-execution-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list test-execution-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass test-execution-target common-lisp:nil
                       ((bot-alias-target :initarg :bot-alias-target :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-alias-test-execution-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-execution-target-bot-alias-target
                         :shape "BotAliasTestExecutionTarget" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-execution-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-execution-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-execution-target 'make-test-execution-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-execution-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-execution-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-target))
      (common-lisp:list
       (common-lisp:cons "botAliasTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-execution-target))
   common-lisp:nil))
(common-lisp:deftype test-result-match-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype test-result-match-status-count-map ()
   'common-lisp:hash-table)
 (common-lisp:defun make-test-result-match-status-count-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype test-result-slot-name () 'common-lisp:string)
(common-lisp:deftype test-result-type-filter () 'common-lisp:string)
(common-lisp:deftype test-set-agent-prompt () 'common-lisp:string)
(common-lisp:deftype test-set-conversation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass test-set-discrepancy-errors common-lisp:nil
                       ((intent-discrepancies :initarg :intent-discrepancies
                         :initform
                         (common-lisp:error ":intentdiscrepancies is required")
                         :type
                         (common-lisp:or test-set-intent-discrepancy-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-set-discrepancy-errors-intent-discrepancies
                         :shape "TestSetIntentDiscrepancyList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (slot-discrepancies :initarg :slot-discrepancies
                         :initform
                         (common-lisp:error ":slotdiscrepancies is required")
                         :type
                         (common-lisp:or test-set-slot-discrepancy-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-set-discrepancy-errors-slot-discrepancies
                         :shape "TestSetSlotDiscrepancyList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-set-discrepancy-errors
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-set-discrepancy-errors
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-set-discrepancy-errors
                    'make-test-set-discrepancy-errors))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-set-discrepancy-errors))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-set-discrepancy-errors))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-discrepancies))
      (common-lisp:list
       (common-lisp:cons "intentDiscrepancies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-discrepancies))
      (common-lisp:list
       (common-lisp:cons "slotDiscrepancies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-set-discrepancy-errors))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-set-discrepancy-report-bot-alias-target
                       common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-test-set-discrepancy-report-bot-alias-target-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-alias-id :initarg :bot-alias-id :initform
                         (common-lisp:error ":botaliasid is required") :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor
                         struct-shape-test-set-discrepancy-report-bot-alias-target-bot-alias-id
                         :shape "BotAliasId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-test-set-discrepancy-report-bot-alias-target-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-set-discrepancy-report-bot-alias-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-set-discrepancy-report-bot-alias-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-set-discrepancy-report-bot-alias-target
                    'make-test-set-discrepancy-report-bot-alias-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-set-discrepancy-report-bot-alias-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-set-discrepancy-report-bot-alias-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-set-discrepancy-report-bot-alias-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-set-discrepancy-report-resource-target
                       common-lisp:nil
                       ((bot-alias-target :initarg :bot-alias-target :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          test-set-discrepancy-report-bot-alias-target
                          common-lisp:null)
                         :accessor
                         struct-shape-test-set-discrepancy-report-resource-target-bot-alias-target
                         :shape "TestSetDiscrepancyReportBotAliasTarget"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-set-discrepancy-report-resource-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-set-discrepancy-report-resource-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-set-discrepancy-report-resource-target
                    'make-test-set-discrepancy-report-resource-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-set-discrepancy-report-resource-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-set-discrepancy-report-resource-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-target))
      (common-lisp:list
       (common-lisp:cons "botAliasTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-set-discrepancy-report-resource-target))
   common-lisp:nil))
(common-lisp:deftype test-set-discrepancy-report-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass test-set-export-specification common-lisp:nil
                       ((test-set-id :initarg :test-set-id :initform
                         (common-lisp:error ":testsetid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-test-set-export-specification-test-set-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-set-export-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-set-export-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-set-export-specification
                    'make-test-set-export-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-set-export-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-set-export-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-id))
      (common-lisp:list
       (common-lisp:cons "testSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-set-export-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-set-generation-data-source common-lisp:nil
                       ((conversation-logs-data-source :initarg
                         :conversation-logs-data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or conversation-logs-data-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-set-generation-data-source-conversation-logs-data-source
                         :shape "ConversationLogsDataSource" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-set-generation-data-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-set-generation-data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-set-generation-data-source
                    'make-test-set-generation-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-set-generation-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-set-generation-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-logs-data-source))
      (common-lisp:list
       (common-lisp:cons "conversationLogsDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-set-generation-data-source))
   common-lisp:nil))
(common-lisp:deftype test-set-generation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass test-set-import-input-location common-lisp:nil
                       ((s3bucket-name :initarg :s3bucket-name :initform
                         (common-lisp:error ":s3bucketname is required") :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor
                         struct-shape-test-set-import-input-location-s3bucket-name
                         :shape "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3path :initarg :s3path :initform
                         (common-lisp:error ":s3path is required") :type
                         (common-lisp:or s3object-path common-lisp:null)
                         :accessor
                         struct-shape-test-set-import-input-location-s3path
                         :shape "S3ObjectPath" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-set-import-input-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-set-import-input-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-set-import-input-location
                    'make-test-set-import-input-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-set-import-input-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-set-import-input-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "s3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3path))
      (common-lisp:list
       (common-lisp:cons "s3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-set-import-input-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-set-import-resource-specification common-lisp:nil
                       ((test-set-name :initarg :test-set-name :initform
                         (common-lisp:error ":testsetname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-test-set-import-resource-specification-test-set-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-test-set-import-resource-specification-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-test-set-import-resource-specification-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-location :initarg :storage-location :initform
                         (common-lisp:error ":storagelocation is required")
                         :type
                         (common-lisp:or test-set-storage-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-set-import-resource-specification-storage-location
                         :shape "TestSetStorageLocation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (import-input-location :initarg :import-input-location
                         :initform
                         (common-lisp:error ":importinputlocation is required")
                         :type
                         (common-lisp:or test-set-import-input-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-set-import-resource-specification-import-input-location
                         :shape "TestSetImportInputLocation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (modality :initarg :modality :initform
                         (common-lisp:error ":modality is required") :type
                         (common-lisp:or test-set-modality common-lisp:null)
                         :accessor
                         struct-shape-test-set-import-resource-specification-modality
                         :shape "TestSetModality" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-set-tags :initarg :test-set-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-test-set-import-resource-specification-test-set-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-set-import-resource-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-set-import-resource-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-set-import-resource-specification
                    'make-test-set-import-resource-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-set-import-resource-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-set-import-resource-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-name))
      (common-lisp:list
       (common-lisp:cons "testSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-location))
      (common-lisp:list
       (common-lisp:cons "storageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-input-location))
      (common-lisp:list
       (common-lisp:cons "importInputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modality))
      (common-lisp:list
       (common-lisp:cons "modality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-tags))
      (common-lisp:list
       (common-lisp:cons "testSetTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-set-import-resource-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-set-intent-discrepancy-item common-lisp:nil
                       ((intent-name :initarg :intent-name :initform
                         (common-lisp:error ":intentname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-test-set-intent-discrepancy-item-intent-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         (common-lisp:error ":errormessage is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-test-set-intent-discrepancy-item-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-set-intent-discrepancy-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-set-intent-discrepancy-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-set-intent-discrepancy-item
                    'make-test-set-intent-discrepancy-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-set-intent-discrepancy-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-set-intent-discrepancy-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-set-intent-discrepancy-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype test-set-intent-discrepancy-list ()
   '(trivial-types:proper-list test-set-intent-discrepancy-item))
 (common-lisp:defun make-test-set-intent-discrepancy-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            test-set-intent-discrepancy-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype test-set-modality () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass test-set-slot-discrepancy-item common-lisp:nil
                       ((intent-name :initarg :intent-name :initform
                         (common-lisp:error ":intentname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-test-set-slot-discrepancy-item-intent-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-name :initarg :slot-name :initform
                         (common-lisp:error ":slotname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-test-set-slot-discrepancy-item-slot-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         (common-lisp:error ":errormessage is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-test-set-slot-discrepancy-item-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-set-slot-discrepancy-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-set-slot-discrepancy-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-set-slot-discrepancy-item
                    'make-test-set-slot-discrepancy-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-set-slot-discrepancy-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-set-slot-discrepancy-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "slotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-set-slot-discrepancy-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype test-set-slot-discrepancy-list ()
   '(trivial-types:proper-list test-set-slot-discrepancy-item))
 (common-lisp:defun make-test-set-slot-discrepancy-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            test-set-slot-discrepancy-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype test-set-sort-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass test-set-sort-by common-lisp:nil
                       ((attribute :initarg :attribute :initform
                         (common-lisp:error ":attribute is required") :type
                         (common-lisp:or test-set-sort-attribute
                                         common-lisp:null)
                         :accessor struct-shape-test-set-sort-by-attribute
                         :shape "TestSetSortAttribute" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-test-set-sort-by-order :shape "SortOrder"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-set-sort-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-set-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-set-sort-by 'make-test-set-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-set-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-set-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-set-sort-by))
   common-lisp:nil))
(common-lisp:deftype test-set-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass test-set-storage-location common-lisp:nil
                       ((s3bucket-name :initarg :s3bucket-name :initform
                         (common-lisp:error ":s3bucketname is required") :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor
                         struct-shape-test-set-storage-location-s3bucket-name
                         :shape "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3path :initarg :s3path :initform
                         (common-lisp:error ":s3path is required") :type
                         (common-lisp:or s3object-path common-lisp:null)
                         :accessor
                         struct-shape-test-set-storage-location-s3path :shape
                         "S3ObjectPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-test-set-storage-location-kms-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-set-storage-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-set-storage-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-set-storage-location
                    'make-test-set-storage-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-set-storage-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-set-storage-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "s3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3path))
      (common-lisp:list
       (common-lisp:cons "s3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-set-storage-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-set-summary common-lisp:nil
                       ((test-set-id :initarg :test-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-test-set-summary-test-set-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (test-set-name :initarg :test-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-test-set-summary-test-set-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-test-set-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modality :initarg :modality :initform common-lisp:nil
                         :type
                         (common-lisp:or test-set-modality common-lisp:null)
                         :accessor struct-shape-test-set-summary-modality
                         :shape "TestSetModality" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or test-set-status common-lisp:null)
                         :accessor struct-shape-test-set-summary-status :shape
                         "TestSetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-test-set-summary-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-turns :initarg :num-turns :initform
                         common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-test-set-summary-num-turns :shape "Count"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-location :initarg :storage-location :initform
                         common-lisp:nil :type
                         (common-lisp:or test-set-storage-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-set-summary-storage-location :shape
                         "TestSetStorageLocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-test-set-summary-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-test-set-summary-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-set-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-set-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-set-summary 'make-test-set-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-id))
      (common-lisp:list
       (common-lisp:cons "testSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-name))
      (common-lisp:list
       (common-lisp:cons "testSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modality))
      (common-lisp:list
       (common-lisp:cons "modality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-turns))
      (common-lisp:list
       (common-lisp:cons "numTurns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-location))
      (common-lisp:list
       (common-lisp:cons "storageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-set-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype test-set-summary-list ()
   '(trivial-types:proper-list test-set-summary))
 (common-lisp:defun make-test-set-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list test-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass test-set-turn-record common-lisp:nil
                       ((record-number :initarg :record-number :initform
                         (common-lisp:error ":recordnumber is required") :type
                         (common-lisp:or record-number common-lisp:null)
                         :accessor
                         struct-shape-test-set-turn-record-record-number :shape
                         "RecordNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conversation-id :initarg :conversation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or test-set-conversation-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-test-set-turn-record-conversation-id
                         :shape "TestSetConversationId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (turn-number :initarg :turn-number :initform
                         common-lisp:nil :type
                         (common-lisp:or turn-number common-lisp:null)
                         :accessor
                         struct-shape-test-set-turn-record-turn-number :shape
                         "TurnNumber" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (turn-specification :initarg :turn-specification
                         :initform
                         (common-lisp:error ":turnspecification is required")
                         :type
                         (common-lisp:or turn-specification common-lisp:null)
                         :accessor
                         struct-shape-test-set-turn-record-turn-specification
                         :shape "TurnSpecification" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-set-turn-record
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-set-turn-record
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-set-turn-record 'make-test-set-turn-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-set-turn-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-set-turn-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-number))
      (common-lisp:list
       (common-lisp:cons "recordNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversation-id))
      (common-lisp:list
       (common-lisp:cons "conversationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'turn-number))
      (common-lisp:list
       (common-lisp:cons "turnNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'turn-specification))
      (common-lisp:list
       (common-lisp:cons "turnSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-set-turn-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype test-set-turn-record-list ()
   '(trivial-types:proper-list test-set-turn-record))
 (common-lisp:defun make-test-set-turn-record-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list test-set-turn-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass test-set-turn-result common-lisp:nil
                       ((agent :initarg :agent :initform common-lisp:nil :type
                         (common-lisp:or agent-turn-result common-lisp:null)
                         :accessor struct-shape-test-set-turn-result-agent
                         :shape "AgentTurnResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user :initarg :user :initform common-lisp:nil :type
                         (common-lisp:or user-turn-result common-lisp:null)
                         :accessor struct-shape-test-set-turn-result-user
                         :shape "UserTurnResult" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-set-turn-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-set-turn-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-set-turn-result 'make-test-set-turn-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-set-turn-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-set-turn-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent))
      (common-lisp:list
       (common-lisp:cons "agent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "user"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-set-turn-result))
   common-lisp:nil))
(common-lisp:deftype test-set-utterance-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass text-input-specification common-lisp:nil
                       ((start-timeout-ms :initarg :start-timeout-ms :initform
                         (common-lisp:error ":starttimeoutms is required")
                         :type
                         (common-lisp:or time-in-milli-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-text-input-specification-start-timeout-ms
                         :shape "TimeInMilliSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-text-input-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'text-input-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'text-input-specification 'make-text-input-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-input-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-input-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timeout-ms))
      (common-lisp:list
       (common-lisp:cons "startTimeoutMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-input-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass text-log-destination common-lisp:nil
                       ((cloud-watch :initarg :cloud-watch :initform
                         (common-lisp:error ":cloudwatch is required") :type
                         (common-lisp:or cloud-watch-log-group-log-destination
                                         common-lisp:null)
                         :accessor
                         struct-shape-text-log-destination-cloud-watch :shape
                         "CloudWatchLogGroupLogDestination" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-text-log-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'text-log-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'text-log-destination 'make-text-log-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input text-log-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input text-log-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-watch))
      (common-lisp:list
       (common-lisp:cons "cloudWatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input text-log-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass text-log-setting common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-text-log-setting-enabled :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or text-log-destination common-lisp:null)
                         :accessor struct-shape-text-log-setting-destination
                         :shape "TextLogDestination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selective-logging-enabled :initarg
                         :selective-logging-enabled :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-text-log-setting-selective-logging-enabled
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-text-log-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'text-log-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'text-log-setting 'make-text-log-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input text-log-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input text-log-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selective-logging-enabled))
      (common-lisp:list
       (common-lisp:cons "selectiveLoggingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input text-log-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype text-log-settings-list ()
   '(trivial-types:proper-list text-log-setting))
 (common-lisp:defun make-text-log-settings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list text-log-setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (models.lex.v2-error)
     ((retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)
      (message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception
                    'throttling-exception-retry-after-seconds
                    'throttling-exception-message)))
(common-lisp:deftype time-dimension () 'common-lisp:string)
(common-lisp:deftype time-in-milli-seconds () 'common-lisp:integer)
(common-lisp:deftype time-value () 'common-lisp:integer)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype transcript () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass transcript-filter common-lisp:nil
                       ((lex-transcript-filter :initarg :lex-transcript-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or lex-transcript-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcript-filter-lex-transcript-filter
                         :shape "LexTranscriptFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transcript-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transcript-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transcript-filter 'make-transcript-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transcript-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transcript-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lex-transcript-filter))
      (common-lisp:list
       (common-lisp:cons "lexTranscriptFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transcript-filter))
   common-lisp:nil))
(common-lisp:deftype transcript-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass transcript-source-setting common-lisp:nil
                       ((s3bucket-transcript-source :initarg
                         :s3bucket-transcript-source :initform common-lisp:nil
                         :type
                         (common-lisp:or s3bucket-transcript-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-transcript-source-setting-s3bucket-transcript-source
                         :shape "S3BucketTranscriptSource" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transcript-source-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transcript-source-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transcript-source-setting
                    'make-transcript-source-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transcript-source-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transcript-source-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-transcript-source))
      (common-lisp:list
       (common-lisp:cons "s3BucketTranscriptSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transcript-source-setting))
   common-lisp:nil))
(common-lisp:deftype turn-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass turn-specification common-lisp:nil
                       ((agent-turn :initarg :agent-turn :initform
                         common-lisp:nil :type
                         (common-lisp:or agent-turn-specification
                                         common-lisp:null)
                         :accessor struct-shape-turn-specification-agent-turn
                         :shape "AgentTurnSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-turn :initarg :user-turn :initform
                         common-lisp:nil :type
                         (common-lisp:or user-turn-specification
                                         common-lisp:null)
                         :accessor struct-shape-turn-specification-user-turn
                         :shape "UserTurnSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-turn-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'turn-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'turn-specification 'make-turn-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input turn-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input turn-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-turn))
      (common-lisp:list
       (common-lisp:cons "agentTurn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-turn))
      (common-lisp:list
       (common-lisp:cons "userTurn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input turn-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "AmazonResourceName" :location "uri"
                         :location-name "resourceARN")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bot-alias-request common-lisp:nil
                       ((bot-alias-id :initarg :bot-alias-id :initform
                         (common-lisp:error ":botaliasid is required") :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor
                         struct-shape-update-bot-alias-request-bot-alias-id
                         :shape "BotAliasId" :location "uri" :location-name
                         "botAliasId")
                        (bot-alias-name :initarg :bot-alias-name :initform
                         (common-lisp:error ":botaliasname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-bot-alias-request-bot-alias-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-bot-alias-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-update-bot-alias-request-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-alias-locale-settings :initarg
                         :bot-alias-locale-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-alias-locale-settings-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bot-alias-request-bot-alias-locale-settings
                         :shape "BotAliasLocaleSettingsMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (conversation-log-settings :initarg
                         :conversation-log-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or conversation-log-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bot-alias-request-conversation-log-settings
                         :shape "ConversationLogSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sentiment-analysis-settings :initarg
                         :sentiment-analysis-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or sentiment-analysis-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bot-alias-request-sentiment-analysis-settings
                         :shape "SentimentAnalysisSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-bot-alias-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bot-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-bot-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bot-alias-request 'make-update-bot-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-name))
      (common-lisp:list
       (common-lisp:cons "botAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-alias-locale-settings))
      (common-lisp:list
       (common-lisp:cons "botAliasLocaleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-log-settings))
      (common-lisp:list
       (common-lisp:cons "conversationLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sentiment-analysis-settings))
      (common-lisp:list
       (common-lisp:cons "sentimentAnalysisSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bot-alias-response common-lisp:nil
                       ((bot-alias-id :initarg :bot-alias-id :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor
                         struct-shape-update-bot-alias-response-bot-alias-id
                         :shape "BotAliasId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-alias-name :initarg :bot-alias-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-bot-alias-response-bot-alias-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-bot-alias-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-version common-lisp:null)
                         :accessor
                         struct-shape-update-bot-alias-response-bot-version
                         :shape "BotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-alias-locale-settings :initarg
                         :bot-alias-locale-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-alias-locale-settings-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bot-alias-response-bot-alias-locale-settings
                         :shape "BotAliasLocaleSettingsMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (conversation-log-settings :initarg
                         :conversation-log-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or conversation-log-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bot-alias-response-conversation-log-settings
                         :shape "ConversationLogSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sentiment-analysis-settings :initarg
                         :sentiment-analysis-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or sentiment-analysis-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bot-alias-response-sentiment-analysis-settings
                         :shape "SentimentAnalysisSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bot-alias-status :initarg :bot-alias-status :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-alias-status common-lisp:null)
                         :accessor
                         struct-shape-update-bot-alias-response-bot-alias-status
                         :shape "BotAliasStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-bot-alias-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-bot-alias-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-bot-alias-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bot-alias-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-bot-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bot-alias-response
                    'make-update-bot-alias-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-name))
      (common-lisp:list
       (common-lisp:cons "botAliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-alias-locale-settings))
      (common-lisp:list
       (common-lisp:cons "botAliasLocaleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-log-settings))
      (common-lisp:list
       (common-lisp:cons "conversationLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sentiment-analysis-settings))
      (common-lisp:list
       (common-lisp:cons "sentimentAnalysisSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-status))
      (common-lisp:list
       (common-lisp:cons "botAliasStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bot-locale-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-bot-locale-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-update-bot-locale-request-bot-version
                         :shape "DraftBotVersion" :location "uri"
                         :location-name "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-update-bot-locale-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-bot-locale-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nlu-intent-confidence-threshold :initarg
                         :nlu-intent-confidence-threshold :initform
                         (common-lisp:error
                          ":nluintentconfidencethreshold is required")
                         :type
                         (common-lisp:or confidence-threshold common-lisp:null)
                         :accessor
                         struct-shape-update-bot-locale-request-nlu-intent-confidence-threshold
                         :shape "ConfidenceThreshold" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (voice-settings :initarg :voice-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or voice-settings common-lisp:null)
                         :accessor
                         struct-shape-update-bot-locale-request-voice-settings
                         :shape "VoiceSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generative-aisettings :initarg :generative-aisettings
                         :initform common-lisp:nil :type
                         (common-lisp:or generative-aisettings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bot-locale-request-generative-aisettings
                         :shape "GenerativeAISettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bot-locale-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-bot-locale-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bot-locale-request
                    'make-update-bot-locale-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-locale-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-locale-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence-threshold))
      (common-lisp:list
       (common-lisp:cons "nluIntentConfidenceThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-settings))
      (common-lisp:list
       (common-lisp:cons "voiceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generative-aisettings))
      (common-lisp:list
       (common-lisp:cons "generativeAISettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-locale-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bot-locale-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-bot-locale-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-update-bot-locale-response-bot-version
                         :shape "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-update-bot-locale-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-name :initarg :locale-name :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-name common-lisp:null)
                         :accessor
                         struct-shape-update-bot-locale-response-locale-name
                         :shape "LocaleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-bot-locale-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nlu-intent-confidence-threshold :initarg
                         :nlu-intent-confidence-threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or confidence-threshold common-lisp:null)
                         :accessor
                         struct-shape-update-bot-locale-response-nlu-intent-confidence-threshold
                         :shape "ConfidenceThreshold" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (voice-settings :initarg :voice-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or voice-settings common-lisp:null)
                         :accessor
                         struct-shape-update-bot-locale-response-voice-settings
                         :shape "VoiceSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-locale-status :initarg :bot-locale-status
                         :initform common-lisp:nil :type
                         (common-lisp:or bot-locale-status common-lisp:null)
                         :accessor
                         struct-shape-update-bot-locale-response-bot-locale-status
                         :shape "BotLocaleStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reasons :initarg :failure-reasons :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reasons common-lisp:null)
                         :accessor
                         struct-shape-update-bot-locale-response-failure-reasons
                         :shape "FailureReasons" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-bot-locale-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-bot-locale-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-actions :initarg :recommended-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or recommended-actions common-lisp:null)
                         :accessor
                         struct-shape-update-bot-locale-response-recommended-actions
                         :shape "RecommendedActions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generative-aisettings :initarg :generative-aisettings
                         :initform common-lisp:nil :type
                         (common-lisp:or generative-aisettings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bot-locale-response-generative-aisettings
                         :shape "GenerativeAISettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bot-locale-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-bot-locale-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bot-locale-response
                    'make-update-bot-locale-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-locale-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-locale-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-name))
      (common-lisp:list
       (common-lisp:cons "localeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence-threshold))
      (common-lisp:list
       (common-lisp:cons "nluIntentConfidenceThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-settings))
      (common-lisp:list
       (common-lisp:cons "voiceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-locale-status))
      (common-lisp:list
       (common-lisp:cons "botLocaleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reasons))
      (common-lisp:list
       (common-lisp:cons "failureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-actions))
      (common-lisp:list
       (common-lisp:cons "recommendedActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generative-aisettings))
      (common-lisp:list
       (common-lisp:cons "generativeAISettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-locale-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bot-recommendation-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-bot-recommendation-request-bot-id
                         :shape "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-update-bot-recommendation-request-bot-version
                         :shape "DraftBotVersion" :location "uri"
                         :location-name "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-update-bot-recommendation-request-locale-id
                         :shape "LocaleId" :location "uri" :location-name
                         "localeId")
                        (bot-recommendation-id :initarg :bot-recommendation-id
                         :initform
                         (common-lisp:error ":botrecommendationid is required")
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-bot-recommendation-request-bot-recommendation-id
                         :shape "Id" :location "uri" :location-name
                         "botRecommendationId")
                        (encryption-setting :initarg :encryption-setting
                         :initform
                         (common-lisp:error ":encryptionsetting is required")
                         :type
                         (common-lisp:or encryption-setting common-lisp:null)
                         :accessor
                         struct-shape-update-bot-recommendation-request-encryption-setting
                         :shape "EncryptionSetting" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bot-recommendation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-bot-recommendation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bot-recommendation-request
                    'make-update-bot-recommendation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-recommendation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-setting))
      (common-lisp:list
       (common-lisp:cons "encryptionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bot-recommendation-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-bot-recommendation-response-bot-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-update-bot-recommendation-response-bot-version
                         :shape "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-update-bot-recommendation-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-recommendation-status :initarg
                         :bot-recommendation-status :initform common-lisp:nil
                         :type
                         (common-lisp:or bot-recommendation-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bot-recommendation-response-bot-recommendation-status
                         :shape "BotRecommendationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bot-recommendation-id :initarg :bot-recommendation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-bot-recommendation-response-bot-recommendation-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-bot-recommendation-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-bot-recommendation-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transcript-source-setting :initarg
                         :transcript-source-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or transcript-source-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-bot-recommendation-response-transcript-source-setting
                         :shape "TranscriptSourceSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-setting :initarg :encryption-setting
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-setting common-lisp:null)
                         :accessor
                         struct-shape-update-bot-recommendation-response-encryption-setting
                         :shape "EncryptionSetting" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bot-recommendation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-bot-recommendation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bot-recommendation-response
                    'make-update-bot-recommendation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-status))
      (common-lisp:list
       (common-lisp:cons "botRecommendationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-recommendation-id))
      (common-lisp:list
       (common-lisp:cons "botRecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcript-source-setting))
      (common-lisp:list
       (common-lisp:cons "transcriptSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-setting))
      (common-lisp:list
       (common-lisp:cons "encryptionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bot-recommendation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bot-request common-lisp:nil
                       ((bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-bot-request-bot-id :shape "Id"
                         :location "uri" :location-name "botId")
                        (bot-name :initarg :bot-name :initform
                         (common-lisp:error ":botname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-bot-request-bot-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-update-bot-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-update-bot-request-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-privacy :initarg :data-privacy :initform
                         (common-lisp:error ":dataprivacy is required") :type
                         (common-lisp:or data-privacy common-lisp:null)
                         :accessor struct-shape-update-bot-request-data-privacy
                         :shape "DataPrivacy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :idle-session-ttlin-seconds :initform
                         (common-lisp:error
                          ":idlesessionttlinseconds is required")
                         :type (common-lisp:or session-ttl common-lisp:null)
                         :accessor
                         struct-shape-update-bot-request-idle-session-ttlin-seconds
                         :shape "SessionTTL" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-type :initarg :bot-type :initform common-lisp:nil
                         :type (common-lisp:or bot-type common-lisp:null)
                         :accessor struct-shape-update-bot-request-bot-type
                         :shape "BotType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-members :initarg :bot-members :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-members common-lisp:null)
                         :accessor struct-shape-update-bot-request-bot-members
                         :shape "BotMembers" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-bot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bot-request 'make-update-bot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-bot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-privacy))
      (common-lisp:list
       (common-lisp:cons "dataPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-type))
      (common-lisp:list
       (common-lisp:cons "botType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-members))
      (common-lisp:list
       (common-lisp:cons "botMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-bot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bot-response common-lisp:nil
                       ((bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-bot-response-bot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-name :initarg :bot-name :initform common-lisp:nil
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-bot-response-bot-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-update-bot-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-update-bot-response-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-privacy :initarg :data-privacy :initform
                         common-lisp:nil :type
                         (common-lisp:or data-privacy common-lisp:null)
                         :accessor
                         struct-shape-update-bot-response-data-privacy :shape
                         "DataPrivacy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :idle-session-ttlin-seconds :initform common-lisp:nil
                         :type (common-lisp:or session-ttl common-lisp:null)
                         :accessor
                         struct-shape-update-bot-response-idle-session-ttlin-seconds
                         :shape "SessionTTL" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-status :initarg :bot-status :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-status common-lisp:null) :accessor
                         struct-shape-update-bot-response-bot-status :shape
                         "BotStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-bot-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-bot-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-type :initarg :bot-type :initform common-lisp:nil
                         :type (common-lisp:or bot-type common-lisp:null)
                         :accessor struct-shape-update-bot-response-bot-type
                         :shape "BotType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-members :initarg :bot-members :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-members common-lisp:null)
                         :accessor struct-shape-update-bot-response-bot-members
                         :shape "BotMembers" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-bot-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-bot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-bot-response 'make-update-bot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-bot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-bot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-privacy))
      (common-lisp:list
       (common-lisp:cons "dataPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-status))
      (common-lisp:list
       (common-lisp:cons "botStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-type))
      (common-lisp:list
       (common-lisp:cons "botType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-members))
      (common-lisp:list
       (common-lisp:cons "botMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-bot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-custom-vocabulary-items-list ()
   '(trivial-types:proper-list custom-vocabulary-item))
 (common-lisp:defun make-update-custom-vocabulary-items-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-vocabulary-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-export-request common-lisp:nil
                       ((export-id :initarg :export-id :initform
                         (common-lisp:error ":exportid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-export-request-export-id :shape
                         "Id" :location "uri" :location-name "exportId")
                        (file-password :initarg :file-password :initform
                         common-lisp:nil :type
                         (common-lisp:or import-export-file-password
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-export-request-file-password
                         :shape "ImportExportFilePassword" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-export-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-export-request 'make-update-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-export-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-password))
      (common-lisp:list
       (common-lisp:cons "filePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-export-response common-lisp:nil
                       ((export-id :initarg :export-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-export-response-export-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-specification :initarg
                         :resource-specification :initform common-lisp:nil
                         :type
                         (common-lisp:or export-resource-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-export-response-resource-specification
                         :shape "ExportResourceSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (file-format :initarg :file-format :initform
                         common-lisp:nil :type
                         (common-lisp:or import-export-file-format
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-export-response-file-format :shape
                         "ImportExportFileFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (export-status :initarg :export-status :initform
                         common-lisp:nil :type
                         (common-lisp:or export-status common-lisp:null)
                         :accessor
                         struct-shape-update-export-response-export-status
                         :shape "ExportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-export-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-export-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-export-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-export-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-export-response 'make-update-export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "resourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "exportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-intent-request common-lisp:nil
                       ((intent-id :initarg :intent-id :initform
                         (common-lisp:error ":intentid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-intent-request-intent-id :shape
                         "Id" :location "uri" :location-name "intentId")
                        (intent-name :initarg :intent-name :initform
                         (common-lisp:error ":intentname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-intent-request-intent-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-intent-request-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parent-intent-signature :initarg
                         :parent-intent-signature :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-signature common-lisp:null)
                         :accessor
                         struct-shape-update-intent-request-parent-intent-signature
                         :shape "IntentSignature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sample-utterances :initarg :sample-utterances
                         :initform common-lisp:nil :type
                         (common-lisp:or sample-utterances-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-intent-request-sample-utterances
                         :shape "SampleUtterancesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dialog-code-hook :initarg :dialog-code-hook :initform
                         common-lisp:nil :type
                         (common-lisp:or dialog-code-hook-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-intent-request-dialog-code-hook
                         :shape "DialogCodeHookSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (fulfillment-code-hook :initarg :fulfillment-code-hook
                         :initform common-lisp:nil :type
                         (common-lisp:or fulfillment-code-hook-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-intent-request-fulfillment-code-hook
                         :shape "FulfillmentCodeHookSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (slot-priorities :initarg :slot-priorities :initform
                         common-lisp:nil :type
                         (common-lisp:or slot-priorities-list common-lisp:null)
                         :accessor
                         struct-shape-update-intent-request-slot-priorities
                         :shape "SlotPrioritiesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (intent-confirmation-setting :initarg
                         :intent-confirmation-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-confirmation-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-intent-request-intent-confirmation-setting
                         :shape "IntentConfirmationSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (intent-closing-setting :initarg
                         :intent-closing-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-closing-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-intent-request-intent-closing-setting
                         :shape "IntentClosingSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input-contexts :initarg :input-contexts :initform
                         common-lisp:nil :type
                         (common-lisp:or input-contexts-list common-lisp:null)
                         :accessor
                         struct-shape-update-intent-request-input-contexts
                         :shape "InputContextsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-contexts :initarg :output-contexts :initform
                         common-lisp:nil :type
                         (common-lisp:or output-contexts-list common-lisp:null)
                         :accessor
                         struct-shape-update-intent-request-output-contexts
                         :shape "OutputContextsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kendra-configuration :initarg :kendra-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or kendra-configuration common-lisp:null)
                         :accessor
                         struct-shape-update-intent-request-kendra-configuration
                         :shape "KendraConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-intent-request-bot-id :shape "Id"
                         :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-update-intent-request-bot-version :shape
                         "DraftBotVersion" :location "uri" :location-name
                         "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-update-intent-request-locale-id :shape
                         "LocaleId" :location "uri" :location-name "localeId")
                        (initial-response-setting :initarg
                         :initial-response-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or initial-response-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-intent-request-initial-response-setting
                         :shape "InitialResponseSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (qn-aintent-configuration :initarg
                         :qn-aintent-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or qn-aintent-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-intent-request-qn-aintent-configuration
                         :shape "QnAIntentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-intent-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-intent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-intent-request 'make-update-intent-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-intent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-intent-signature))
      (common-lisp:list
       (common-lisp:cons "parentIntentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-code-hook))
      (common-lisp:list
       (common-lisp:cons "dialogCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fulfillment-code-hook))
      (common-lisp:list
       (common-lisp:cons "fulfillmentCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-priorities))
      (common-lisp:list
       (common-lisp:cons "slotPriorities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-confirmation-setting))
      (common-lisp:list
       (common-lisp:cons "intentConfirmationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-closing-setting))
      (common-lisp:list
       (common-lisp:cons "intentClosingSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-contexts))
      (common-lisp:list
       (common-lisp:cons "inputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-contexts))
      (common-lisp:list
       (common-lisp:cons "outputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kendra-configuration))
      (common-lisp:list
       (common-lisp:cons "kendraConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-response-setting))
      (common-lisp:list
       (common-lisp:cons "initialResponseSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qn-aintent-configuration))
      (common-lisp:list
       (common-lisp:cons "qnAIntentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-intent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-intent-response common-lisp:nil
                       ((intent-id :initarg :intent-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-intent-response-intent-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (intent-name :initarg :intent-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-intent-response-intent-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-intent-response-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parent-intent-signature :initarg
                         :parent-intent-signature :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-signature common-lisp:null)
                         :accessor
                         struct-shape-update-intent-response-parent-intent-signature
                         :shape "IntentSignature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sample-utterances :initarg :sample-utterances
                         :initform common-lisp:nil :type
                         (common-lisp:or sample-utterances-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-intent-response-sample-utterances
                         :shape "SampleUtterancesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dialog-code-hook :initarg :dialog-code-hook :initform
                         common-lisp:nil :type
                         (common-lisp:or dialog-code-hook-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-intent-response-dialog-code-hook
                         :shape "DialogCodeHookSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (fulfillment-code-hook :initarg :fulfillment-code-hook
                         :initform common-lisp:nil :type
                         (common-lisp:or fulfillment-code-hook-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-intent-response-fulfillment-code-hook
                         :shape "FulfillmentCodeHookSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (slot-priorities :initarg :slot-priorities :initform
                         common-lisp:nil :type
                         (common-lisp:or slot-priorities-list common-lisp:null)
                         :accessor
                         struct-shape-update-intent-response-slot-priorities
                         :shape "SlotPrioritiesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (intent-confirmation-setting :initarg
                         :intent-confirmation-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-confirmation-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-intent-response-intent-confirmation-setting
                         :shape "IntentConfirmationSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (intent-closing-setting :initarg
                         :intent-closing-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or intent-closing-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-intent-response-intent-closing-setting
                         :shape "IntentClosingSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input-contexts :initarg :input-contexts :initform
                         common-lisp:nil :type
                         (common-lisp:or input-contexts-list common-lisp:null)
                         :accessor
                         struct-shape-update-intent-response-input-contexts
                         :shape "InputContextsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-contexts :initarg :output-contexts :initform
                         common-lisp:nil :type
                         (common-lisp:or output-contexts-list common-lisp:null)
                         :accessor
                         struct-shape-update-intent-response-output-contexts
                         :shape "OutputContextsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kendra-configuration :initarg :kendra-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or kendra-configuration common-lisp:null)
                         :accessor
                         struct-shape-update-intent-response-kendra-configuration
                         :shape "KendraConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-intent-response-bot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-update-intent-response-bot-version :shape
                         "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-update-intent-response-locale-id :shape
                         "LocaleId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-intent-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-intent-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (initial-response-setting :initarg
                         :initial-response-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or initial-response-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-intent-response-initial-response-setting
                         :shape "InitialResponseSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (qn-aintent-configuration :initarg
                         :qn-aintent-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or qn-aintent-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-intent-response-qn-aintent-configuration
                         :shape "QnAIntentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-intent-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-intent-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-intent-response 'make-update-intent-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-intent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-intent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-intent-signature))
      (common-lisp:list
       (common-lisp:cons "parentIntentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-code-hook))
      (common-lisp:list
       (common-lisp:cons "dialogCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fulfillment-code-hook))
      (common-lisp:list
       (common-lisp:cons "fulfillmentCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-priorities))
      (common-lisp:list
       (common-lisp:cons "slotPriorities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-confirmation-setting))
      (common-lisp:list
       (common-lisp:cons "intentConfirmationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intent-closing-setting))
      (common-lisp:list
       (common-lisp:cons "intentClosingSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-contexts))
      (common-lisp:list
       (common-lisp:cons "inputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-contexts))
      (common-lisp:list
       (common-lisp:cons "outputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kendra-configuration))
      (common-lisp:list
       (common-lisp:cons "kendraConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-response-setting))
      (common-lisp:list
       (common-lisp:cons "initialResponseSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qn-aintent-configuration))
      (common-lisp:list
       (common-lisp:cons "qnAIntentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-intent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-policy-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-resource-policy-request-resource-arn
                         :shape "AmazonResourceName" :location "uri"
                         :location-name "resourceArn")
                        (policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         struct-shape-update-resource-policy-request-policy
                         :shape "Policy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expected-revision-id :initarg :expected-revision-id
                         :initform common-lisp:nil :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-update-resource-policy-request-expected-revision-id
                         :shape "RevisionId" :location "querystring"
                         :location-name "expectedRevisionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-resource-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-resource-policy-request
                    'make-update-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-policy-response common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-resource-policy-response-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-update-resource-policy-response-revision-id
                         :shape "RevisionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-resource-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-resource-policy-response
                    'make-update-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-slot-request common-lisp:nil
                       ((slot-id :initarg :slot-id :initform
                         (common-lisp:error ":slotid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-slot-request-slot-id :shape "Id"
                         :location "uri" :location-name "slotId")
                        (slot-name :initarg :slot-name :initform
                         (common-lisp:error ":slotname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-slot-request-slot-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-update-slot-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slot-type-id :initarg :slot-type-id :initform
                         common-lisp:nil :type
                         (common-lisp:or built-in-or-custom-slot-type-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-slot-request-slot-type-id :shape
                         "BuiltInOrCustomSlotTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value-elicitation-setting :initarg
                         :value-elicitation-setting :initform
                         (common-lisp:error
                          ":valueelicitationsetting is required")
                         :type
                         (common-lisp:or slot-value-elicitation-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-slot-request-value-elicitation-setting
                         :shape "SlotValueElicitationSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (obfuscation-setting :initarg :obfuscation-setting
                         :initform common-lisp:nil :type
                         (common-lisp:or obfuscation-setting common-lisp:null)
                         :accessor
                         struct-shape-update-slot-request-obfuscation-setting
                         :shape "ObfuscationSetting" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-slot-request-bot-id :shape "Id"
                         :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor struct-shape-update-slot-request-bot-version
                         :shape "DraftBotVersion" :location "uri"
                         :location-name "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-update-slot-request-locale-id :shape
                         "LocaleId" :location "uri" :location-name "localeId")
                        (intent-id :initarg :intent-id :initform
                         (common-lisp:error ":intentid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-slot-request-intent-id :shape "Id"
                         :location "uri" :location-name "intentId")
                        (multiple-values-setting :initarg
                         :multiple-values-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or multiple-values-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-slot-request-multiple-values-setting
                         :shape "MultipleValuesSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sub-slot-setting :initarg :sub-slot-setting :initform
                         common-lisp:nil :type
                         (common-lisp:or sub-slot-setting common-lisp:null)
                         :accessor
                         struct-shape-update-slot-request-sub-slot-setting
                         :shape "SubSlotSetting" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-slot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-slot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-slot-request 'make-update-slot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-slot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-slot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "slotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-elicitation-setting))
      (common-lisp:list
       (common-lisp:cons "valueElicitationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obfuscation-setting))
      (common-lisp:list
       (common-lisp:cons "obfuscationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiple-values-setting))
      (common-lisp:list
       (common-lisp:cons "multipleValuesSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slot-setting))
      (common-lisp:list
       (common-lisp:cons "subSlotSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-slot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-slot-response common-lisp:nil
                       ((slot-id :initarg :slot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-slot-response-slot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-name :initarg :slot-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-slot-response-slot-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-slot-response-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-type-id :initarg :slot-type-id :initform
                         common-lisp:nil :type
                         (common-lisp:or built-in-or-custom-slot-type-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-slot-response-slot-type-id :shape
                         "BuiltInOrCustomSlotTypeId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value-elicitation-setting :initarg
                         :value-elicitation-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-value-elicitation-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-slot-response-value-elicitation-setting
                         :shape "SlotValueElicitationSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (obfuscation-setting :initarg :obfuscation-setting
                         :initform common-lisp:nil :type
                         (common-lisp:or obfuscation-setting common-lisp:null)
                         :accessor
                         struct-shape-update-slot-response-obfuscation-setting
                         :shape "ObfuscationSetting" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-slot-response-bot-id :shape "Id"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-update-slot-response-bot-version :shape
                         "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-update-slot-response-locale-id :shape
                         "LocaleId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (intent-id :initarg :intent-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-slot-response-intent-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-slot-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-slot-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multiple-values-setting :initarg
                         :multiple-values-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or multiple-values-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-slot-response-multiple-values-setting
                         :shape "MultipleValuesSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sub-slot-setting :initarg :sub-slot-setting :initform
                         common-lisp:nil :type
                         (common-lisp:or sub-slot-setting common-lisp:null)
                         :accessor
                         struct-shape-update-slot-response-sub-slot-setting
                         :shape "SubSlotSetting" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-slot-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-slot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-slot-response 'make-update-slot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-slot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-slot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-id))
      (common-lisp:list
       (common-lisp:cons "slotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "slotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-elicitation-setting))
      (common-lisp:list
       (common-lisp:cons "valueElicitationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obfuscation-setting))
      (common-lisp:list
       (common-lisp:cons "obfuscationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-id))
      (common-lisp:list
       (common-lisp:cons "intentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiple-values-setting))
      (common-lisp:list
       (common-lisp:cons "multipleValuesSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slot-setting))
      (common-lisp:list
       (common-lisp:cons "subSlotSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-slot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-slot-type-request common-lisp:nil
                       ((slot-type-id :initarg :slot-type-id :initform
                         (common-lisp:error ":slottypeid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-slot-type-request-slot-type-id
                         :shape "Id" :location "uri" :location-name
                         "slotTypeId")
                        (slot-type-name :initarg :slot-type-name :initform
                         (common-lisp:error ":slottypename is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-slot-type-request-slot-type-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-slot-type-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slot-type-values :initarg :slot-type-values :initform
                         common-lisp:nil :type
                         (common-lisp:or slot-type-values common-lisp:null)
                         :accessor
                         struct-shape-update-slot-type-request-slot-type-values
                         :shape "SlotTypeValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value-selection-setting :initarg
                         :value-selection-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-value-selection-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-slot-type-request-value-selection-setting
                         :shape "SlotValueSelectionSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (parent-slot-type-signature :initarg
                         :parent-slot-type-signature :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-type-signature common-lisp:null)
                         :accessor
                         struct-shape-update-slot-type-request-parent-slot-type-signature
                         :shape "SlotTypeSignature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform
                         (common-lisp:error ":botid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-slot-type-request-bot-id :shape
                         "Id" :location "uri" :location-name "botId")
                        (bot-version :initarg :bot-version :initform
                         (common-lisp:error ":botversion is required") :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-update-slot-type-request-bot-version
                         :shape "DraftBotVersion" :location "uri"
                         :location-name "botVersion")
                        (locale-id :initarg :locale-id :initform
                         (common-lisp:error ":localeid is required") :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-update-slot-type-request-locale-id :shape
                         "LocaleId" :location "uri" :location-name "localeId")
                        (external-source-setting :initarg
                         :external-source-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or external-source-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-slot-type-request-external-source-setting
                         :shape "ExternalSourceSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (composite-slot-type-setting :initarg
                         :composite-slot-type-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or composite-slot-type-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-slot-type-request-composite-slot-type-setting
                         :shape "CompositeSlotTypeSetting" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-slot-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-slot-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-slot-type-request 'make-update-slot-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-slot-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-slot-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-name))
      (common-lisp:list
       (common-lisp:cons "slotTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-values))
      (common-lisp:list
       (common-lisp:cons "slotTypeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-selection-setting))
      (common-lisp:list
       (common-lisp:cons "valueSelectionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "parentSlotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-source-setting))
      (common-lisp:list
       (common-lisp:cons "externalSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-slot-type-setting))
      (common-lisp:list
       (common-lisp:cons "compositeSlotTypeSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-slot-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-slot-type-response common-lisp:nil
                       ((slot-type-id :initarg :slot-type-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-slot-type-response-slot-type-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slot-type-name :initarg :slot-type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-slot-type-response-slot-type-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-slot-type-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slot-type-values :initarg :slot-type-values :initform
                         common-lisp:nil :type
                         (common-lisp:or slot-type-values common-lisp:null)
                         :accessor
                         struct-shape-update-slot-type-response-slot-type-values
                         :shape "SlotTypeValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value-selection-setting :initarg
                         :value-selection-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-value-selection-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-slot-type-response-value-selection-setting
                         :shape "SlotValueSelectionSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (parent-slot-type-signature :initarg
                         :parent-slot-type-signature :initform common-lisp:nil
                         :type
                         (common-lisp:or slot-type-signature common-lisp:null)
                         :accessor
                         struct-shape-update-slot-type-response-parent-slot-type-signature
                         :shape "SlotTypeSignature" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-id :initarg :bot-id :initform common-lisp:nil
                         :type (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-slot-type-response-bot-id :shape
                         "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or draft-bot-version common-lisp:null)
                         :accessor
                         struct-shape-update-slot-type-response-bot-version
                         :shape "DraftBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-update-slot-type-response-locale-id
                         :shape "LocaleId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-slot-type-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-slot-type-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-source-setting :initarg
                         :external-source-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or external-source-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-slot-type-response-external-source-setting
                         :shape "ExternalSourceSetting" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (composite-slot-type-setting :initarg
                         :composite-slot-type-setting :initform common-lisp:nil
                         :type
                         (common-lisp:or composite-slot-type-setting
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-slot-type-response-composite-slot-type-setting
                         :shape "CompositeSlotTypeSetting" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-slot-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-slot-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-slot-type-response
                    'make-update-slot-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-slot-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-slot-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-id))
      (common-lisp:list
       (common-lisp:cons "slotTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-name))
      (common-lisp:list
       (common-lisp:cons "slotTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-values))
      (common-lisp:list
       (common-lisp:cons "slotTypeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-selection-setting))
      (common-lisp:list
       (common-lisp:cons "valueSelectionSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "parentSlotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-source-setting))
      (common-lisp:list
       (common-lisp:cons "externalSourceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'composite-slot-type-setting))
      (common-lisp:list
       (common-lisp:cons "compositeSlotTypeSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-slot-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-test-set-request common-lisp:nil
                       ((test-set-id :initarg :test-set-id :initform
                         (common-lisp:error ":testsetid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-test-set-request-test-set-id
                         :shape "Id" :location "uri" :location-name
                         "testSetId")
                        (test-set-name :initarg :test-set-name :initform
                         (common-lisp:error ":testsetname is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-test-set-request-test-set-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-test-set-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-test-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-test-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-test-set-request 'make-update-test-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-test-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-test-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-name))
      (common-lisp:list
       (common-lisp:cons "testSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-test-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-test-set-response common-lisp:nil
                       ((test-set-id :initarg :test-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-update-test-set-response-test-set-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (test-set-name :initarg :test-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-test-set-response-test-set-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-test-set-response-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modality :initarg :modality :initform common-lisp:nil
                         :type
                         (common-lisp:or test-set-modality common-lisp:null)
                         :accessor
                         struct-shape-update-test-set-response-modality :shape
                         "TestSetModality" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or test-set-status common-lisp:null)
                         :accessor struct-shape-update-test-set-response-status
                         :shape "TestSetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-test-set-response-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (num-turns :initarg :num-turns :initform
                         common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-update-test-set-response-num-turns :shape
                         "Count" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-location :initarg :storage-location :initform
                         common-lisp:nil :type
                         (common-lisp:or test-set-storage-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-test-set-response-storage-location
                         :shape "TestSetStorageLocation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-test-set-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-test-set-response-last-updated-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-test-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-test-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-test-set-response 'make-update-test-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-test-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-test-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-id))
      (common-lisp:list
       (common-lisp:cons "testSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-set-name))
      (common-lisp:list
       (common-lisp:cons "testSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modality))
      (common-lisp:list
       (common-lisp:cons "modality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-turns))
      (common-lisp:list
       (common-lisp:cons "numTurns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-location))
      (common-lisp:list
       (common-lisp:cons "storageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-test-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-turn-input-specification common-lisp:nil
                       ((utterance-input :initarg :utterance-input :initform
                         (common-lisp:error ":utteranceinput is required")
                         :type
                         (common-lisp:or utterance-input-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-turn-input-specification-utterance-input
                         :shape "UtteranceInputSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (request-attributes :initarg :request-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         struct-shape-user-turn-input-specification-request-attributes
                         :shape "StringMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-state :initarg :session-state :initform
                         common-lisp:nil :type
                         (common-lisp:or input-session-state-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-turn-input-specification-session-state
                         :shape "InputSessionStateSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-turn-input-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'user-turn-input-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-turn-input-specification
                    'make-user-turn-input-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-turn-input-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-turn-input-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utterance-input))
      (common-lisp:list
       (common-lisp:cons "utteranceInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-attributes))
      (common-lisp:list
       (common-lisp:cons "requestAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-state))
      (common-lisp:list
       (common-lisp:cons "sessionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-turn-input-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-turn-intent-output common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-user-turn-intent-output-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slots :initarg :slots :initform common-lisp:nil :type
                         (common-lisp:or user-turn-slot-output-map
                                         common-lisp:null)
                         :accessor struct-shape-user-turn-intent-output-slots
                         :shape "UserTurnSlotOutputMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-turn-intent-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-turn-intent-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-turn-intent-output 'make-user-turn-intent-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-turn-intent-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-turn-intent-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-turn-intent-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-turn-output-specification common-lisp:nil
                       ((intent :initarg :intent :initform
                         (common-lisp:error ":intent is required") :type
                         (common-lisp:or user-turn-intent-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-turn-output-specification-intent
                         :shape "UserTurnIntentOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (active-contexts :initarg :active-contexts :initform
                         common-lisp:nil :type
                         (common-lisp:or active-context-list common-lisp:null)
                         :accessor
                         struct-shape-user-turn-output-specification-active-contexts
                         :shape "ActiveContextList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transcript :initarg :transcript :initform
                         common-lisp:nil :type
                         (common-lisp:or test-set-utterance-text
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-turn-output-specification-transcript
                         :shape "TestSetUtteranceText" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-turn-output-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'user-turn-output-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-turn-output-specification
                    'make-user-turn-output-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-turn-output-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-turn-output-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent))
      (common-lisp:list
       (common-lisp:cons "intent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-contexts))
      (common-lisp:list
       (common-lisp:cons "activeContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-turn-output-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-turn-result common-lisp:nil
                       ((input :initarg :input :initform
                         (common-lisp:error ":input is required") :type
                         (common-lisp:or user-turn-input-specification
                                         common-lisp:null)
                         :accessor struct-shape-user-turn-result-input :shape
                         "UserTurnInputSpecification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expected-output :initarg :expected-output :initform
                         (common-lisp:error ":expectedoutput is required")
                         :type
                         (common-lisp:or user-turn-output-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-turn-result-expected-output :shape
                         "UserTurnOutputSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (actual-output :initarg :actual-output :initform
                         common-lisp:nil :type
                         (common-lisp:or user-turn-output-specification
                                         common-lisp:null)
                         :accessor struct-shape-user-turn-result-actual-output
                         :shape "UserTurnOutputSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-details :initarg :error-details :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-error-details
                                         common-lisp:null)
                         :accessor struct-shape-user-turn-result-error-details
                         :shape "ExecutionErrorDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (end-to-end-result :initarg :end-to-end-result
                         :initform common-lisp:nil :type
                         (common-lisp:or test-result-match-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-turn-result-end-to-end-result :shape
                         "TestResultMatchStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (intent-match-result :initarg :intent-match-result
                         :initform common-lisp:nil :type
                         (common-lisp:or test-result-match-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-turn-result-intent-match-result
                         :shape "TestResultMatchStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (slot-match-result :initarg :slot-match-result
                         :initform common-lisp:nil :type
                         (common-lisp:or test-result-match-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-turn-result-slot-match-result :shape
                         "TestResultMatchStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (speech-transcription-result :initarg
                         :speech-transcription-result :initform common-lisp:nil
                         :type
                         (common-lisp:or test-result-match-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-turn-result-speech-transcription-result
                         :shape "TestResultMatchStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (conversation-level-result :initarg
                         :conversation-level-result :initform common-lisp:nil
                         :type
                         (common-lisp:or conversation-level-result-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-turn-result-conversation-level-result
                         :shape "ConversationLevelResultDetail" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-turn-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-turn-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-turn-result 'make-user-turn-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-turn-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-turn-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-output))
      (common-lisp:list
       (common-lisp:cons "expectedOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual-output))
      (common-lisp:list
       (common-lisp:cons "actualOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "errorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-to-end-result))
      (common-lisp:list
       (common-lisp:cons "endToEndResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-match-result))
      (common-lisp:list
       (common-lisp:cons "intentMatchResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-match-result))
      (common-lisp:list
       (common-lisp:cons "slotMatchResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'speech-transcription-result))
      (common-lisp:list
       (common-lisp:cons "speechTranscriptionResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-level-result))
      (common-lisp:list
       (common-lisp:cons "conversationLevelResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-turn-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-turn-slot-output common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-user-turn-slot-output-value
                         :shape "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type
                         (common-lisp:or user-turn-slot-output-list
                                         common-lisp:null)
                         :accessor struct-shape-user-turn-slot-output-values
                         :shape "UserTurnSlotOutputList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sub-slots :initarg :sub-slots :initform
                         common-lisp:nil :type
                         (common-lisp:or user-turn-slot-output-map
                                         common-lisp:null)
                         :accessor struct-shape-user-turn-slot-output-sub-slots
                         :shape "UserTurnSlotOutputMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-turn-slot-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-turn-slot-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-turn-slot-output 'make-user-turn-slot-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-turn-slot-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-turn-slot-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slots))
      (common-lisp:list
       (common-lisp:cons "subSlots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-turn-slot-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-turn-slot-output-list ()
   '(trivial-types:proper-list user-turn-slot-output))
 (common-lisp:defun make-user-turn-slot-output-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-turn-slot-output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-turn-slot-output-map () 'common-lisp:hash-table)
 (common-lisp:defun make-user-turn-slot-output-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass user-turn-specification common-lisp:nil
                       ((input :initarg :input :initform
                         (common-lisp:error ":input is required") :type
                         (common-lisp:or user-turn-input-specification
                                         common-lisp:null)
                         :accessor struct-shape-user-turn-specification-input
                         :shape "UserTurnInputSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (expected :initarg :expected :initform
                         (common-lisp:error ":expected is required") :type
                         (common-lisp:or user-turn-output-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-turn-specification-expected :shape
                         "UserTurnOutputSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-turn-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-turn-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-turn-specification 'make-user-turn-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-turn-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-turn-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected))
      (common-lisp:list
       (common-lisp:cons "expected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-turn-specification))
   common-lisp:nil))
(common-lisp:deftype utterance () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass utterance-aggregation-duration common-lisp:nil
                       ((relative-aggregation-duration :initarg
                         :relative-aggregation-duration :initform
                         (common-lisp:error
                          ":relativeaggregationduration is required")
                         :type
                         (common-lisp:or relative-aggregation-duration
                                         common-lisp:null)
                         :accessor
                         struct-shape-utterance-aggregation-duration-relative-aggregation-duration
                         :shape "RelativeAggregationDuration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-utterance-aggregation-duration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'utterance-aggregation-duration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'utterance-aggregation-duration
                    'make-utterance-aggregation-duration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          utterance-aggregation-duration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          utterance-aggregation-duration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relative-aggregation-duration))
      (common-lisp:list
       (common-lisp:cons "relativeAggregationDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          utterance-aggregation-duration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass utterance-audio-input-specification common-lisp:nil
                       ((audio-file-s3location :initarg :audio-file-s3location
                         :initform
                         (common-lisp:error ":audiofiles3location is required")
                         :type
                         (common-lisp:or audio-file-s3location
                                         common-lisp:null)
                         :accessor
                         struct-shape-utterance-audio-input-specification-audio-file-s3location
                         :shape "AudioFileS3Location" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-utterance-audio-input-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'utterance-audio-input-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'utterance-audio-input-specification
                    'make-utterance-audio-input-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          utterance-audio-input-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          utterance-audio-input-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-file-s3location))
      (common-lisp:list
       (common-lisp:cons "audioFileS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          utterance-audio-input-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass utterance-bot-response common-lisp:nil
                       ((content :initarg :content :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-utterance-bot-response-content
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or utterance-content-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-utterance-bot-response-content-type
                         :shape "UtteranceContentType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (image-response-card :initarg :image-response-card
                         :initform common-lisp:nil :type
                         (common-lisp:or image-response-card common-lisp:null)
                         :accessor
                         struct-shape-utterance-bot-response-image-response-card
                         :shape "ImageResponseCard" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-utterance-bot-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'utterance-bot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'utterance-bot-response 'make-utterance-bot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          utterance-bot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          utterance-bot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-response-card))
      (common-lisp:list
       (common-lisp:cons "imageResponseCard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          utterance-bot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype utterance-bot-responses ()
   '(trivial-types:proper-list utterance-bot-response))
 (common-lisp:defun make-utterance-bot-responses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list utterance-bot-response))
   aws-sdk/generator/shape::members))
(common-lisp:deftype utterance-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass utterance-data-sort-by common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or analytics-utterance-sort-by-name
                                         common-lisp:null)
                         :accessor struct-shape-utterance-data-sort-by-name
                         :shape "AnalyticsUtteranceSortByName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or analytics-sort-order common-lisp:null)
                         :accessor struct-shape-utterance-data-sort-by-order
                         :shape "AnalyticsSortOrder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-utterance-data-sort-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'utterance-data-sort-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'utterance-data-sort-by 'make-utterance-data-sort-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          utterance-data-sort-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          utterance-data-sort-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          utterance-data-sort-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass utterance-input-specification common-lisp:nil
                       ((text-input :initarg :text-input :initform
                         common-lisp:nil :type
                         (common-lisp:or test-set-utterance-text
                                         common-lisp:null)
                         :accessor
                         struct-shape-utterance-input-specification-text-input
                         :shape "TestSetUtteranceText" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (audio-input :initarg :audio-input :initform
                         common-lisp:nil :type
                         (common-lisp:or utterance-audio-input-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-utterance-input-specification-audio-input
                         :shape "UtteranceAudioInputSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-utterance-input-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'utterance-input-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'utterance-input-specification
                    'make-utterance-input-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          utterance-input-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          utterance-input-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-input))
      (common-lisp:list
       (common-lisp:cons "textInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-input))
      (common-lisp:list
       (common-lisp:cons "audioInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          utterance-input-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass utterance-level-test-result-item common-lisp:nil
                       ((record-number :initarg :record-number :initform
                         (common-lisp:error ":recordnumber is required") :type
                         (common-lisp:or record-number common-lisp:null)
                         :accessor
                         struct-shape-utterance-level-test-result-item-record-number
                         :shape "RecordNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conversation-id :initarg :conversation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or test-set-conversation-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-utterance-level-test-result-item-conversation-id
                         :shape "TestSetConversationId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (turn-result :initarg :turn-result :initform
                         (common-lisp:error ":turnresult is required") :type
                         (common-lisp:or test-set-turn-result common-lisp:null)
                         :accessor
                         struct-shape-utterance-level-test-result-item-turn-result
                         :shape "TestSetTurnResult" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-utterance-level-test-result-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'utterance-level-test-result-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'utterance-level-test-result-item
                    'make-utterance-level-test-result-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          utterance-level-test-result-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          utterance-level-test-result-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-number))
      (common-lisp:list
       (common-lisp:cons "recordNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversation-id))
      (common-lisp:list
       (common-lisp:cons "conversationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'turn-result))
      (common-lisp:list
       (common-lisp:cons "turnResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          utterance-level-test-result-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype utterance-level-test-result-item-list ()
   '(trivial-types:proper-list utterance-level-test-result-item))
 (common-lisp:defun make-utterance-level-test-result-item-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            utterance-level-test-result-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass utterance-level-test-results common-lisp:nil
                       ((items :initarg :items :initform
                         (common-lisp:error ":items is required") :type
                         (common-lisp:or utterance-level-test-result-item-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-utterance-level-test-results-items :shape
                         "UtteranceLevelTestResultItemList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-utterance-level-test-results
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'utterance-level-test-results
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'utterance-level-test-results
                    'make-utterance-level-test-results))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          utterance-level-test-results))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          utterance-level-test-results))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          utterance-level-test-results))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass utterance-specification common-lisp:nil
                       ((bot-alias-id :initarg :bot-alias-id :initform
                         common-lisp:nil :type
                         (common-lisp:or bot-alias-id common-lisp:null)
                         :accessor
                         struct-shape-utterance-specification-bot-alias-id
                         :shape "BotAliasId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-version :initarg :bot-version :initform
                         common-lisp:nil :type
                         (common-lisp:or numerical-bot-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-utterance-specification-bot-version
                         :shape "NumericalBotVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locale-id :initarg :locale-id :initform
                         common-lisp:nil :type
                         (common-lisp:or locale-id common-lisp:null) :accessor
                         struct-shape-utterance-specification-locale-id :shape
                         "LocaleId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-session-id common-lisp:null)
                         :accessor
                         struct-shape-utterance-specification-session-id :shape
                         "AnalyticsSessionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (channel :initarg :channel :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-channel common-lisp:null)
                         :accessor struct-shape-utterance-specification-channel
                         :shape "AnalyticsChannel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or analytics-modality common-lisp:null)
                         :accessor struct-shape-utterance-specification-mode
                         :shape "AnalyticsModality" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conversation-start-time :initarg
                         :conversation-start-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-utterance-specification-conversation-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conversation-end-time :initarg :conversation-end-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-utterance-specification-conversation-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (utterance :initarg :utterance :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-utterance-specification-utterance :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (utterance-timestamp :initarg :utterance-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-utterance-specification-utterance-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (audio-voice-duration-millis :initarg
                         :audio-voice-duration-millis :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-long-value common-lisp:null)
                         :accessor
                         struct-shape-utterance-specification-audio-voice-duration-millis
                         :shape "AnalyticsLongValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (utterance-understood :initarg :utterance-understood
                         :initform common-lisp:nil :type
                         (common-lisp:or utterance-understood common-lisp:null)
                         :accessor
                         struct-shape-utterance-specification-utterance-understood
                         :shape "UtteranceUnderstood" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-type :initarg :input-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-utterance-specification-input-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output-type :initarg :output-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-utterance-specification-output-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (associated-intent-name :initarg
                         :associated-intent-name :initform common-lisp:nil
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-utterance-specification-associated-intent-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (associated-slot-name :initarg :associated-slot-name
                         :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-utterance-specification-associated-slot-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (intent-state :initarg :intent-state :initform
                         common-lisp:nil :type
                         (common-lisp:or intent-state common-lisp:null)
                         :accessor
                         struct-shape-utterance-specification-intent-state
                         :shape "IntentState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dialog-action-type :initarg :dialog-action-type
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-utterance-specification-dialog-action-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bot-response-audio-voice-id :initarg
                         :bot-response-audio-voice-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-utterance-specification-bot-response-audio-voice-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slots-filled-in-session :initarg
                         :slots-filled-in-session :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-utterance-specification-slots-filled-in-session
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (utterance-request-id :initarg :utterance-request-id
                         :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-utterance-specification-utterance-request-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bot-responses :initarg :bot-responses :initform
                         common-lisp:nil :type
                         (common-lisp:or utterance-bot-responses
                                         common-lisp:null)
                         :accessor
                         struct-shape-utterance-specification-bot-responses
                         :shape "UtteranceBotResponses" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-utterance-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'utterance-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'utterance-specification 'make-utterance-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          utterance-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          utterance-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-start-time))
      (common-lisp:list
       (common-lisp:cons "conversationStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversation-end-time))
      (common-lisp:list
       (common-lisp:cons "conversationEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utterance))
      (common-lisp:list
       (common-lisp:cons "utterance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utterance-timestamp))
      (common-lisp:list
       (common-lisp:cons "utteranceTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-voice-duration-millis))
      (common-lisp:list
       (common-lisp:cons "audioVoiceDurationMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'utterance-understood))
      (common-lisp:list
       (common-lisp:cons "utteranceUnderstood"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-type))
      (common-lisp:list
       (common-lisp:cons "inputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-type))
      (common-lisp:list
       (common-lisp:cons "outputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-intent-name))
      (common-lisp:list
       (common-lisp:cons "associatedIntentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-slot-name))
      (common-lisp:list
       (common-lisp:cons "associatedSlotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-state))
      (common-lisp:list
       (common-lisp:cons "intentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-action-type))
      (common-lisp:list
       (common-lisp:cons "dialogActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-response-audio-voice-id))
      (common-lisp:list
       (common-lisp:cons "botResponseAudioVoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slots-filled-in-session))
      (common-lisp:list
       (common-lisp:cons "slotsFilledInSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'utterance-request-id))
      (common-lisp:list
       (common-lisp:cons "utteranceRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-responses))
      (common-lisp:list
       (common-lisp:cons "botResponses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          utterance-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype utterance-specifications ()
   '(trivial-types:proper-list utterance-specification))
 (common-lisp:defun make-utterance-specifications
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list utterance-specification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype utterance-understood () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (models.lex.v2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:deftype voice-engine () 'common-lisp:string)
(common-lisp:deftype voice-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass voice-settings common-lisp:nil
                       ((voice-id :initarg :voice-id :initform
                         (common-lisp:error ":voiceid is required") :type
                         (common-lisp:or voice-id common-lisp:null) :accessor
                         struct-shape-voice-settings-voice-id :shape "VoiceId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or voice-engine common-lisp:null)
                         :accessor struct-shape-voice-settings-engine :shape
                         "VoiceEngine" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-voice-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'voice-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'voice-settings 'make-voice-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input voice-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input voice-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-id))
      (common-lisp:list
       (common-lisp:cons "voiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input voice-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass wait-and-continue-specification common-lisp:nil
                       ((waiting-response :initarg :waiting-response :initform
                         (common-lisp:error ":waitingresponse is required")
                         :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-wait-and-continue-specification-waiting-response
                         :shape "ResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (continue-response :initarg :continue-response
                         :initform
                         (common-lisp:error ":continueresponse is required")
                         :type
                         (common-lisp:or response-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-wait-and-continue-specification-continue-response
                         :shape "ResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (still-waiting-response :initarg
                         :still-waiting-response :initform common-lisp:nil
                         :type
                         (common-lisp:or still-waiting-response-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-wait-and-continue-specification-still-waiting-response
                         :shape "StillWaitingResponseSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (active :initarg :active :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-wait-and-continue-specification-active
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-wait-and-continue-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'wait-and-continue-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'wait-and-continue-specification
                    'make-wait-and-continue-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          wait-and-continue-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          wait-and-continue-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'waiting-response))
      (common-lisp:list
       (common-lisp:cons "waitingResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continue-response))
      (common-lisp:list
       (common-lisp:cons "continueResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'still-waiting-response))
      (common-lisp:list
       (common-lisp:cons "stillWaitingResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          wait-and-continue-specification))
   common-lisp:nil))
(common-lisp:deftype weight () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun batch-create-custom-vocabulary-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     custom-vocabulary-item-list)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id
     custom-vocabulary-item-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-create-custom-vocabulary-item-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/customvocabulary/DEFAULT/batchcreate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "BatchCreateCustomVocabularyItem"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-create-custom-vocabulary-item))
(common-lisp:progn
 (common-lisp:defun batch-delete-custom-vocabulary-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     custom-vocabulary-item-list)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id
     custom-vocabulary-item-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-delete-custom-vocabulary-item-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/customvocabulary/DEFAULT/batchdelete"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "BatchDeleteCustomVocabularyItem"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-delete-custom-vocabulary-item))
(common-lisp:progn
 (common-lisp:defun batch-update-custom-vocabulary-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     custom-vocabulary-item-list)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id
     custom-vocabulary-item-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-update-custom-vocabulary-item-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/customvocabulary/DEFAULT/batchupdate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "BatchUpdateCustomVocabularyItem"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-update-custom-vocabulary-item))
(common-lisp:progn
 (common-lisp:defun build-bot-locale
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id)
   (common-lisp:declare (common-lisp:ignorable bot-id bot-version locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-build-bot-locale-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "BuildBotLocale"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'build-bot-locale))
(common-lisp:progn
 (common-lisp:defun create-bot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-name description role-arn
                     data-privacy idle-session-ttlin-seconds bot-tags
                     test-bot-alias-tags bot-type bot-members)
   (common-lisp:declare
    (common-lisp:ignorable bot-name description role-arn data-privacy
     idle-session-ttlin-seconds bot-tags test-bot-alias-tags bot-type
     bot-members))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/bots/"
                                                        "CreateBot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-bot))
(common-lisp:progn
 (common-lisp:defun create-bot-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-alias-name description bot-version
                     bot-alias-locale-settings conversation-log-settings
                     sentiment-analysis-settings bot-id tags)
   (common-lisp:declare
    (common-lisp:ignorable bot-alias-name description bot-version
     bot-alias-locale-settings conversation-log-settings
     sentiment-analysis-settings bot-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bot-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botaliases/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "CreateBotAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-bot-alias))
(common-lisp:progn
 (common-lisp:defun create-bot-locale
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id description
                     nlu-intent-confidence-threshold voice-settings
                     generative-aisettings)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id description
     nlu-intent-confidence-threshold voice-settings generative-aisettings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bot-locale-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))))
                                                        "CreateBotLocale"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-bot-locale))
(common-lisp:progn
 (common-lisp:defun create-bot-replica
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id replica-region)
   (common-lisp:declare (common-lisp:ignorable bot-id replica-region))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bot-replica-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/replicas/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "CreateBotReplica"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-bot-replica))
(common-lisp:progn
 (common-lisp:defun create-bot-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id description
                     bot-version-locale-specification)
   (common-lisp:declare
    (common-lisp:ignorable bot-id description
     bot-version-locale-specification))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bot-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "CreateBotVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-bot-version))
(common-lisp:progn
 (common-lisp:defun create-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-specification file-format
                     file-password)
   (common-lisp:declare
    (common-lisp:ignorable resource-specification file-format file-password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-export-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/exports/"
                                                        "CreateExport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-export))
(common-lisp:progn
 (common-lisp:defun create-intent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key intent-name description
                     parent-intent-signature sample-utterances dialog-code-hook
                     fulfillment-code-hook intent-confirmation-setting
                     intent-closing-setting input-contexts output-contexts
                     kendra-configuration bot-id bot-version locale-id
                     initial-response-setting qn-aintent-configuration)
   (common-lisp:declare
    (common-lisp:ignorable intent-name description parent-intent-signature
     sample-utterances dialog-code-hook fulfillment-code-hook
     intent-confirmation-setting intent-closing-setting input-contexts
     output-contexts kendra-configuration bot-id bot-version locale-id
     initial-response-setting qn-aintent-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-intent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "CreateIntent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-intent))
(common-lisp:progn
 (common-lisp:defun create-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn policy)
   (common-lisp:declare (common-lisp:ignorable resource-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "CreateResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-resource-policy))
(common-lisp:progn
 (common-lisp:defun create-resource-policy-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn statement-id effect
                     principal action condition expected-revision-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn statement-id effect principal action
     condition expected-revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-resource-policy-statement-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/~A/statements/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "CreateResourcePolicyStatement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-resource-policy-statement))
(common-lisp:progn
 (common-lisp:defun create-slot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key slot-name description slot-type-id
                     value-elicitation-setting obfuscation-setting bot-id
                     bot-version locale-id intent-id multiple-values-setting
                     sub-slot-setting)
   (common-lisp:declare
    (common-lisp:ignorable slot-name description slot-type-id
     value-elicitation-setting obfuscation-setting bot-id bot-version locale-id
     intent-id multiple-values-setting sub-slot-setting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-slot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/~A/slots/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'intent-id))))
                                                        "CreateSlot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-slot))
(common-lisp:progn
 (common-lisp:defun create-slot-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key slot-type-name description
                     slot-type-values value-selection-setting
                     parent-slot-type-signature bot-id bot-version locale-id
                     external-source-setting composite-slot-type-setting)
   (common-lisp:declare
    (common-lisp:ignorable slot-type-name description slot-type-values
     value-selection-setting parent-slot-type-signature bot-id bot-version
     locale-id external-source-setting composite-slot-type-setting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-slot-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/slottypes/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "CreateSlotType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-slot-type))
(common-lisp:progn
 (common-lisp:defun create-test-set-discrepancy-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key test-set-id target)
   (common-lisp:declare (common-lisp:ignorable test-set-id target))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-test-set-discrepancy-report-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/testsets/~A/testsetdiscrepancy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'test-set-id))))
                                                        "CreateTestSetDiscrepancyReport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-test-set-discrepancy-report))
(common-lisp:progn
 (common-lisp:defun create-upload-url ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'models.lex.v2-request :method "POST" :path
                                "/createuploadurl/" :operation
                                "CreateUploadUrl"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'create-upload-url))
(common-lisp:progn
 (common-lisp:defun delete-bot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id skip-resource-in-use-check)
   (common-lisp:declare
    (common-lisp:ignorable bot-id skip-resource-in-use-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "DeleteBot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-bot))
(common-lisp:progn
 (common-lisp:defun delete-bot-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-alias-id bot-id
                     skip-resource-in-use-check)
   (common-lisp:declare
    (common-lisp:ignorable bot-alias-id bot-id skip-resource-in-use-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bot-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botaliases/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-alias-id))))
                                                        "DeleteBotAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-bot-alias))
(common-lisp:progn
 (common-lisp:defun delete-bot-locale
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id)
   (common-lisp:declare (common-lisp:ignorable bot-id bot-version locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bot-locale-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "DeleteBotLocale"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-bot-locale))
(common-lisp:progn
 (common-lisp:defun delete-bot-replica
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id replica-region)
   (common-lisp:declare (common-lisp:ignorable bot-id replica-region))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bot-replica-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/replicas/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'replica-region))))
                                                        "DeleteBotReplica"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-bot-replica))
(common-lisp:progn
 (common-lisp:defun delete-bot-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version
                     skip-resource-in-use-check)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version skip-resource-in-use-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bot-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))))
                                                        "DeleteBotVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-bot-version))
(common-lisp:progn
 (common-lisp:defun delete-custom-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id)
   (common-lisp:declare (common-lisp:ignorable bot-id bot-version locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-custom-vocabulary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/customvocabulary"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "DeleteCustomVocabulary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-custom-vocabulary))
(common-lisp:progn
 (common-lisp:defun delete-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-id)
   (common-lisp:declare (common-lisp:ignorable export-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-export-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/exports/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'export-id))))
                                                        "DeleteExport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-export))
(common-lisp:progn
 (common-lisp:defun delete-import
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key import-id)
   (common-lisp:declare (common-lisp:ignorable import-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/imports/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'import-id))))
                                                        "DeleteImport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-import))
(common-lisp:progn
 (common-lisp:defun delete-intent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key intent-id bot-id bot-version locale-id)
   (common-lisp:declare
    (common-lisp:ignorable intent-id bot-id bot-version locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-intent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'intent-id))))
                                                        "DeleteIntent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-intent))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn expected-revision-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn expected-revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "DeleteResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn statement-id
                     expected-revision-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn statement-id expected-revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-resource-policy-statement-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/~A/statements/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'statement-id))))
                                                        "DeleteResourcePolicyStatement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-resource-policy-statement))
(common-lisp:progn
 (common-lisp:defun delete-slot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key slot-id bot-id bot-version locale-id
                     intent-id)
   (common-lisp:declare
    (common-lisp:ignorable slot-id bot-id bot-version locale-id intent-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-slot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/~A/slots/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'intent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'slot-id))))
                                                        "DeleteSlot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-slot))
(common-lisp:progn
 (common-lisp:defun delete-slot-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key slot-type-id bot-id bot-version locale-id
                     skip-resource-in-use-check)
   (common-lisp:declare
    (common-lisp:ignorable slot-type-id bot-id bot-version locale-id
     skip-resource-in-use-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-slot-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/slottypes/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'slot-type-id))))
                                                        "DeleteSlotType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-slot-type))
(common-lisp:progn
 (common-lisp:defun delete-test-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key test-set-id)
   (common-lisp:declare (common-lisp:ignorable test-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-test-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/testsets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'test-set-id))))
                                                        "DeleteTestSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-test-set))
(common-lisp:progn
 (common-lisp:defun delete-utterances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id locale-id session-id)
   (common-lisp:declare (common-lisp:ignorable bot-id locale-id session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-utterances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/utterances/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "DeleteUtterances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-utterances))
(common-lisp:progn
 (common-lisp:defun describe-bot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id)
   (common-lisp:declare (common-lisp:ignorable bot-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-bot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "DescribeBot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-bot))
(common-lisp:progn
 (common-lisp:defun describe-bot-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-alias-id bot-id)
   (common-lisp:declare (common-lisp:ignorable bot-alias-id bot-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-bot-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botaliases/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-alias-id))))
                                                        "DescribeBotAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-bot-alias))
(common-lisp:progn
 (common-lisp:defun describe-bot-locale
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id)
   (common-lisp:declare (common-lisp:ignorable bot-id bot-version locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-bot-locale-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "DescribeBotLocale"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-bot-locale))
(common-lisp:progn
 (common-lisp:defun describe-bot-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     bot-recommendation-id)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id bot-recommendation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-bot-recommendation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/botrecommendations/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-recommendation-id))))
                                                        "DescribeBotRecommendation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-bot-recommendation))
(common-lisp:progn
 (common-lisp:defun describe-bot-replica
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id replica-region)
   (common-lisp:declare (common-lisp:ignorable bot-id replica-region))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-bot-replica-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/replicas/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'replica-region))))
                                                        "DescribeBotReplica"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-bot-replica))
(common-lisp:progn
 (common-lisp:defun describe-bot-resource-generation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     generation-id)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id generation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-bot-resource-generation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/generations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'generation-id))))
                                                        "DescribeBotResourceGeneration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-bot-resource-generation))
(common-lisp:progn
 (common-lisp:defun describe-bot-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version)
   (common-lisp:declare (common-lisp:ignorable bot-id bot-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-bot-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))))
                                                        "DescribeBotVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-bot-version))
(common-lisp:progn
 (common-lisp:defun describe-custom-vocabulary-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id)
   (common-lisp:declare (common-lisp:ignorable bot-id bot-version locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-custom-vocabulary-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/customvocabulary/DEFAULT/metadata"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "DescribeCustomVocabularyMetadata"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-custom-vocabulary-metadata))
(common-lisp:progn
 (common-lisp:defun describe-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-id)
   (common-lisp:declare (common-lisp:ignorable export-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-export-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/exports/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'export-id))))
                                                        "DescribeExport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-export))
(common-lisp:progn
 (common-lisp:defun describe-import
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key import-id)
   (common-lisp:declare (common-lisp:ignorable import-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/imports/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'import-id))))
                                                        "DescribeImport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-import))
(common-lisp:progn
 (common-lisp:defun describe-intent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key intent-id bot-id bot-version locale-id)
   (common-lisp:declare
    (common-lisp:ignorable intent-id bot-id bot-version locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-intent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'intent-id))))
                                                        "DescribeIntent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-intent))
(common-lisp:progn
 (common-lisp:defun describe-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "DescribeResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-resource-policy))
(common-lisp:progn
 (common-lisp:defun describe-slot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key slot-id bot-id bot-version locale-id
                     intent-id)
   (common-lisp:declare
    (common-lisp:ignorable slot-id bot-id bot-version locale-id intent-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-slot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/~A/slots/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'intent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'slot-id))))
                                                        "DescribeSlot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-slot))
(common-lisp:progn
 (common-lisp:defun describe-slot-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key slot-type-id bot-id bot-version
                     locale-id)
   (common-lisp:declare
    (common-lisp:ignorable slot-type-id bot-id bot-version locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-slot-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/slottypes/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'slot-type-id))))
                                                        "DescribeSlotType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-slot-type))
(common-lisp:progn
 (common-lisp:defun describe-test-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key test-execution-id)
   (common-lisp:declare (common-lisp:ignorable test-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-test-execution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/testexecutions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'test-execution-id))))
                                                        "DescribeTestExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-test-execution))
(common-lisp:progn
 (common-lisp:defun describe-test-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key test-set-id)
   (common-lisp:declare (common-lisp:ignorable test-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-test-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/testsets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'test-set-id))))
                                                        "DescribeTestSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-test-set))
(common-lisp:progn
 (common-lisp:defun describe-test-set-discrepancy-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key test-set-discrepancy-report-id)
   (common-lisp:declare (common-lisp:ignorable test-set-discrepancy-report-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-test-set-discrepancy-report-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/testsetdiscrepancy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'test-set-discrepancy-report-id))))
                                                        "DescribeTestSetDiscrepancyReport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-test-set-discrepancy-report))
(common-lisp:progn
 (common-lisp:defun describe-test-set-generation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key test-set-generation-id)
   (common-lisp:declare (common-lisp:ignorable test-set-generation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-test-set-generation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/testsetgenerations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'test-set-generation-id))))
                                                        "DescribeTestSetGeneration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-test-set-generation))
(common-lisp:progn
 (common-lisp:defun generate-bot-element
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key intent-id bot-id bot-version locale-id)
   (common-lisp:declare
    (common-lisp:ignorable intent-id bot-id bot-version locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-generate-bot-element-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/generate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "GenerateBotElement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'generate-bot-element))
(common-lisp:progn
 (common-lisp:defun get-test-execution-artifacts-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key test-execution-id)
   (common-lisp:declare (common-lisp:ignorable test-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-test-execution-artifacts-url-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/testexecutions/~A/artifacturl"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'test-execution-id))))
                                                        "GetTestExecutionArtifactsUrl"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-test-execution-artifacts-url))
(common-lisp:progn
 (common-lisp:defun list-aggregated-utterances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-alias-id bot-version locale-id
                     aggregation-duration sort-by filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-alias-id bot-version locale-id
     aggregation-duration sort-by filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-aggregated-utterances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/aggregatedutterances/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "ListAggregatedUtterances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-aggregated-utterances))
(common-lisp:progn
 (common-lisp:defun list-bot-alias-replicas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id replica-region max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id replica-region max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bot-alias-replicas-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/replicas/~A/botaliases/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'replica-region))))
                                                        "ListBotAliasReplicas"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-bot-alias-replicas))
(common-lisp:progn
 (common-lisp:defun list-bot-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id max-results next-token)
   (common-lisp:declare (common-lisp:ignorable bot-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bot-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botaliases/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "ListBotAliases"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-bot-aliases))
(common-lisp:progn
 (common-lisp:defun list-bot-locales
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version sort-by filters
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version sort-by filters max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bot-locales-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))))
                                                        "ListBotLocales"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-bot-locales))
(common-lisp:progn
 (common-lisp:defun list-bot-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bot-recommendations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/botrecommendations/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "ListBotRecommendations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-bot-recommendations))
(common-lisp:progn
 (common-lisp:defun list-bot-replicas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id)
   (common-lisp:declare (common-lisp:ignorable bot-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bot-replicas-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/replicas/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "ListBotReplicas"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-bot-replicas))
(common-lisp:progn
 (common-lisp:defun list-bot-resource-generations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id sort-by
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id sort-by max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-bot-resource-generations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/generations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "ListBotResourceGenerations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-bot-resource-generations))
(common-lisp:progn
 (common-lisp:defun list-bot-version-replicas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id replica-region max-results
                     next-token sort-by)
   (common-lisp:declare
    (common-lisp:ignorable bot-id replica-region max-results next-token
     sort-by))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-bot-version-replicas-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/replicas/~A/botversions/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'replica-region))))
                                                        "ListBotVersionReplicas"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-bot-version-replicas))
(common-lisp:progn
 (common-lisp:defun list-bot-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id sort-by max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id sort-by max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bot-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "ListBotVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-bot-versions))
(common-lisp:progn
 (common-lisp:defun list-bots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sort-by filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable sort-by filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/bots/"
                                                        "ListBots"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-bots))
(common-lisp:progn
 (common-lisp:defun list-built-in-intents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key locale-id sort-by max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable locale-id sort-by max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-built-in-intents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/builtins/locales/~A/intents/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "ListBuiltInIntents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-built-in-intents))
(common-lisp:progn
 (common-lisp:defun list-built-in-slot-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key locale-id sort-by max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable locale-id sort-by max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-built-in-slot-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/builtins/locales/~A/slottypes/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "ListBuiltInSlotTypes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-built-in-slot-types))
(common-lisp:progn
 (common-lisp:defun list-custom-vocabulary-items
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-custom-vocabulary-items-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/customvocabulary/DEFAULT/list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "ListCustomVocabularyItems"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-custom-vocabulary-items))
(common-lisp:progn
 (common-lisp:defun list-exports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version sort-by filters
                     max-results next-token locale-id)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version sort-by filters max-results
     next-token locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-exports-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/exports/"
                                                        "ListExports"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-exports))
(common-lisp:progn
 (common-lisp:defun list-imports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version sort-by filters
                     max-results next-token locale-id)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version sort-by filters max-results
     next-token locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-imports-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/imports/"
                                                        "ListImports"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-imports))
(common-lisp:progn
 (common-lisp:defun list-intent-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id start-date-time end-date-time
                     metrics bin-by group-by filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id start-date-time end-date-time metrics bin-by
     group-by filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-intent-metrics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/analytics/intentmetrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "ListIntentMetrics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-intent-metrics))
(common-lisp:progn
 (common-lisp:defun list-intent-paths
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id start-date-time end-date-time
                     intent-path filters)
   (common-lisp:declare
    (common-lisp:ignorable bot-id start-date-time end-date-time intent-path
     filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-intent-paths-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/analytics/intentpaths"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "ListIntentPaths"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-intent-paths))
(common-lisp:progn
 (common-lisp:defun list-intent-stage-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id start-date-time end-date-time
                     metrics bin-by group-by filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id start-date-time end-date-time metrics bin-by
     group-by filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-intent-stage-metrics-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/analytics/intentstagemetrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "ListIntentStageMetrics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-intent-stage-metrics))
(common-lisp:progn
 (common-lisp:defun list-intents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id sort-by
                     filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id sort-by filters
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-intents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "ListIntents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-intents))
(common-lisp:progn
 (common-lisp:defun list-recommended-intents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     bot-recommendation-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id bot-recommendation-id
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-recommended-intents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/botrecommendations/~A/intents"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-recommendation-id))))
                                                        "ListRecommendedIntents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-recommended-intents))
(common-lisp:progn
 (common-lisp:defun list-session-analytics-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id start-date-time end-date-time
                     sort-by filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id start-date-time end-date-time sort-by filters
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-session-analytics-data-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/analytics/sessions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "ListSessionAnalyticsData"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-session-analytics-data))
(common-lisp:progn
 (common-lisp:defun list-session-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id start-date-time end-date-time
                     metrics bin-by group-by filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id start-date-time end-date-time metrics bin-by
     group-by filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-session-metrics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/analytics/sessionmetrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "ListSessionMetrics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-session-metrics))
(common-lisp:progn
 (common-lisp:defun list-slot-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id sort-by
                     filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id sort-by filters
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-slot-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/slottypes/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "ListSlotTypes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-slot-types))
(common-lisp:progn
 (common-lisp:defun list-slots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id intent-id
                     sort-by filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id intent-id sort-by
     filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-slots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/~A/slots/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'intent-id))))
                                                        "ListSlots"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-slots))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-test-execution-result-items
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key test-execution-id result-filter-by
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable test-execution-id result-filter-by max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-test-execution-result-items-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/testexecutions/~A/results"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'test-execution-id))))
                                                        "ListTestExecutionResultItems"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-test-execution-result-items))
(common-lisp:progn
 (common-lisp:defun list-test-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sort-by max-results next-token)
   (common-lisp:declare (common-lisp:ignorable sort-by max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-test-executions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/testexecutions"
                                                        "ListTestExecutions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-test-executions))
(common-lisp:progn
 (common-lisp:defun list-test-set-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key test-set-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable test-set-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-test-set-records-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/testsets/~A/records"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'test-set-id))))
                                                        "ListTestSetRecords"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-test-set-records))
(common-lisp:progn
 (common-lisp:defun list-test-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sort-by max-results next-token)
   (common-lisp:declare (common-lisp:ignorable sort-by max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-test-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/testsets"
                                                        "ListTestSets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-test-sets))
(common-lisp:progn
 (common-lisp:defun list-utterance-analytics-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id start-date-time end-date-time
                     sort-by filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id start-date-time end-date-time sort-by filters
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-utterance-analytics-data-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/analytics/utterances"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "ListUtteranceAnalyticsData"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-utterance-analytics-data))
(common-lisp:progn
 (common-lisp:defun list-utterance-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id start-date-time end-date-time
                     metrics bin-by group-by attributes filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable bot-id start-date-time end-date-time metrics bin-by
     group-by attributes filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-utterance-metrics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/analytics/utterancemetrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "ListUtteranceMetrics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-utterance-metrics))
(common-lisp:progn
 (common-lisp:defun search-associated-transcripts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     bot-recommendation-id search-order filters max-results
                     next-index)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id bot-recommendation-id
     search-order filters max-results next-index))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-search-associated-transcripts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/botrecommendations/~A/associatedtranscripts"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-recommendation-id))))
                                                        "SearchAssociatedTranscripts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-associated-transcripts))
(common-lisp:progn
 (common-lisp:defun start-bot-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     transcript-source-setting encryption-setting)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id
     transcript-source-setting encryption-setting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-bot-recommendation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/botrecommendations/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "StartBotRecommendation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-bot-recommendation))
(common-lisp:progn
 (common-lisp:defun start-bot-resource-generation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key generation-input-prompt bot-id
                     bot-version locale-id)
   (common-lisp:declare
    (common-lisp:ignorable generation-input-prompt bot-id bot-version
     locale-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-bot-resource-generation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/startgeneration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "StartBotResourceGeneration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-bot-resource-generation))
(common-lisp:progn
 (common-lisp:defun start-import
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key import-id resource-specification
                     merge-strategy file-password)
   (common-lisp:declare
    (common-lisp:ignorable import-id resource-specification merge-strategy
     file-password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/imports/"
                                                        "StartImport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-import))
(common-lisp:progn
 (common-lisp:defun start-test-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key test-set-id target api-mode
                     test-execution-modality)
   (common-lisp:declare
    (common-lisp:ignorable test-set-id target api-mode
     test-execution-modality))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-test-execution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/testsets/~A/testexecutions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'test-set-id))))
                                                        "StartTestExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-test-execution))
(common-lisp:progn
 (common-lisp:defun start-test-set-generation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key test-set-name description
                     storage-location generation-data-source role-arn
                     test-set-tags)
   (common-lisp:declare
    (common-lisp:ignorable test-set-name description storage-location
     generation-data-source role-arn test-set-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-test-set-generation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/testsetgenerations"
                                                        "StartTestSetGeneration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-test-set-generation))
(common-lisp:progn
 (common-lisp:defun stop-bot-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     bot-recommendation-id)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id bot-recommendation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-bot-recommendation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/botrecommendations/~A/stopbotrecommendation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-recommendation-id))))
                                                        "StopBotRecommendation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-bot-recommendation))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-bot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-name description role-arn
                     data-privacy idle-session-ttlin-seconds bot-type
                     bot-members)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-name description role-arn data-privacy
     idle-session-ttlin-seconds bot-type bot-members))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))))
                                                        "UpdateBot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-bot))
(common-lisp:progn
 (common-lisp:defun update-bot-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-alias-id bot-alias-name description
                     bot-version bot-alias-locale-settings
                     conversation-log-settings sentiment-analysis-settings
                     bot-id)
   (common-lisp:declare
    (common-lisp:ignorable bot-alias-id bot-alias-name description bot-version
     bot-alias-locale-settings conversation-log-settings
     sentiment-analysis-settings bot-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bot-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botaliases/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-alias-id))))
                                                        "UpdateBotAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-bot-alias))
(common-lisp:progn
 (common-lisp:defun update-bot-locale
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id description
                     nlu-intent-confidence-threshold voice-settings
                     generative-aisettings)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id description
     nlu-intent-confidence-threshold voice-settings generative-aisettings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bot-locale-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))))
                                                        "UpdateBotLocale"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-bot-locale))
(common-lisp:progn
 (common-lisp:defun update-bot-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-version locale-id
                     bot-recommendation-id encryption-setting)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-version locale-id bot-recommendation-id
     encryption-setting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-bot-recommendation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/botrecommendations/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-recommendation-id))))
                                                        "UpdateBotRecommendation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-bot-recommendation))
(common-lisp:progn
 (common-lisp:defun update-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-id file-password)
   (common-lisp:declare (common-lisp:ignorable export-id file-password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-export-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/exports/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'export-id))))
                                                        "UpdateExport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-export))
(common-lisp:progn
 (common-lisp:defun update-intent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key intent-id intent-name description
                     parent-intent-signature sample-utterances dialog-code-hook
                     fulfillment-code-hook slot-priorities
                     intent-confirmation-setting intent-closing-setting
                     input-contexts output-contexts kendra-configuration bot-id
                     bot-version locale-id initial-response-setting
                     qn-aintent-configuration)
   (common-lisp:declare
    (common-lisp:ignorable intent-id intent-name description
     parent-intent-signature sample-utterances dialog-code-hook
     fulfillment-code-hook slot-priorities intent-confirmation-setting
     intent-closing-setting input-contexts output-contexts kendra-configuration
     bot-id bot-version locale-id initial-response-setting
     qn-aintent-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-intent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'intent-id))))
                                                        "UpdateIntent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-intent))
(common-lisp:progn
 (common-lisp:defun update-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn policy expected-revision-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn policy expected-revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UpdateResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-resource-policy))
(common-lisp:progn
 (common-lisp:defun update-slot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key slot-id slot-name description
                     slot-type-id value-elicitation-setting obfuscation-setting
                     bot-id bot-version locale-id intent-id
                     multiple-values-setting sub-slot-setting)
   (common-lisp:declare
    (common-lisp:ignorable slot-id slot-name description slot-type-id
     value-elicitation-setting obfuscation-setting bot-id bot-version locale-id
     intent-id multiple-values-setting sub-slot-setting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-slot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/intents/~A/slots/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'intent-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'slot-id))))
                                                        "UpdateSlot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-slot))
(common-lisp:progn
 (common-lisp:defun update-slot-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key slot-type-id slot-type-name description
                     slot-type-values value-selection-setting
                     parent-slot-type-signature bot-id bot-version locale-id
                     external-source-setting composite-slot-type-setting)
   (common-lisp:declare
    (common-lisp:ignorable slot-type-id slot-type-name description
     slot-type-values value-selection-setting parent-slot-type-signature bot-id
     bot-version locale-id external-source-setting
     composite-slot-type-setting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-slot-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botversions/~A/botlocales/~A/slottypes/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'slot-type-id))))
                                                        "UpdateSlotType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-slot-type))
(common-lisp:progn
 (common-lisp:defun update-test-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key test-set-id test-set-name description)
   (common-lisp:declare
    (common-lisp:ignorable test-set-id test-set-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-test-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'models.lex.v2-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/testsets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'test-set-id))))
                                                        "UpdateTestSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-test-set))
