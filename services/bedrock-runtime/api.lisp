;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/bedrock-runtime/api (:use)
                             (:nicknames #:aws/bedrock-runtime)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/bedrock-runtime/api)
(common-lisp:progn
 (common-lisp:define-condition bedrock-runtime-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'bedrock-runtime-error))
(common-lisp:progn
 (common-lisp:defclass bedrock-runtime-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "bedrock-runtime"
                        :api-version "2023-09-30" :host-prefix
                        "bedrock-runtime" :signing-name "bedrock" :global-host
                        common-lisp:nil))
 (common-lisp:export 'bedrock-runtime-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServerException" . internal-server-exception)
    ("ModelErrorException" . model-error-exception)
    ("ModelNotReadyException" . model-not-ready-exception)
    ("ModelStreamErrorException" . model-stream-error-exception)
    ("ModelTimeoutException" . model-timeout-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (bedrock-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype body ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (bedrock-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype invoke-model-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass invoke-model-request common-lisp:nil
                       ((body :initarg :body :initform
                         (common-lisp:error ":body is required") :type
                         (common-lisp:or body common-lisp:null) :accessor
                         struct-shape-invoke-model-request-body :shape "Body"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or mime-type common-lisp:null) :accessor
                         struct-shape-invoke-model-request-content-type :shape
                         "MimeType" :location "header" :location-name
                         "Content-Type")
                        (accept :initarg :accept :initform common-lisp:nil
                         :type (common-lisp:or mime-type common-lisp:null)
                         :accessor struct-shape-invoke-model-request-accept
                         :shape "MimeType" :location "header" :location-name
                         "Accept")
                        (model-id :initarg :model-id :initform
                         (common-lisp:error ":modelid is required") :type
                         (common-lisp:or invoke-model-identifier
                                         common-lisp:null)
                         :accessor struct-shape-invoke-model-request-model-id
                         :shape "InvokeModelIdentifier" :location "uri"
                         :location-name "modelId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invoke-model-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invoke-model-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invoke-model-request 'make-invoke-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invoke-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept))
      (common-lisp:cons "Accept" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invoke-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invoke-model-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input invoke-model-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass invoke-model-response common-lisp:nil
                       ((body :initarg :body :initform
                         (common-lisp:error ":body is required") :type
                         (common-lisp:or body common-lisp:null) :accessor
                         struct-shape-invoke-model-response-body :shape "Body"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         (common-lisp:error ":contenttype is required") :type
                         (common-lisp:or mime-type common-lisp:null) :accessor
                         struct-shape-invoke-model-response-content-type :shape
                         "MimeType" :location "header" :location-name
                         "Content-Type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invoke-model-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'invoke-model-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invoke-model-response 'make-invoke-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invoke-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invoke-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invoke-model-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          invoke-model-response))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass invoke-model-with-response-stream-request
                       common-lisp:nil
                       ((body :initarg :body :initform
                         (common-lisp:error ":body is required") :type
                         (common-lisp:or body common-lisp:null) :accessor
                         struct-shape-invoke-model-with-response-stream-request-body
                         :shape "Body" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or mime-type common-lisp:null) :accessor
                         struct-shape-invoke-model-with-response-stream-request-content-type
                         :shape "MimeType" :location "header" :location-name
                         "Content-Type")
                        (accept :initarg :accept :initform common-lisp:nil
                         :type (common-lisp:or mime-type common-lisp:null)
                         :accessor
                         struct-shape-invoke-model-with-response-stream-request-accept
                         :shape "MimeType" :location "header" :location-name
                         "X-Amzn-Bedrock-Accept")
                        (model-id :initarg :model-id :initform
                         (common-lisp:error ":modelid is required") :type
                         (common-lisp:or invoke-model-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-invoke-model-with-response-stream-request-model-id
                         :shape "InvokeModelIdentifier" :location "uri"
                         :location-name "modelId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invoke-model-with-response-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'invoke-model-with-response-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invoke-model-with-response-stream-request
                    'make-invoke-model-with-response-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invoke-model-with-response-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept))
      (common-lisp:cons "X-Amzn-Bedrock-Accept"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invoke-model-with-response-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invoke-model-with-response-stream-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          invoke-model-with-response-stream-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass invoke-model-with-response-stream-response
                       common-lisp:nil
                       ((body :initarg :body :initform
                         (common-lisp:error ":body is required") :type
                         (common-lisp:or response-stream common-lisp:null)
                         :accessor
                         struct-shape-invoke-model-with-response-stream-response-body
                         :shape "ResponseStream" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         (common-lisp:error ":contenttype is required") :type
                         (common-lisp:or mime-type common-lisp:null) :accessor
                         struct-shape-invoke-model-with-response-stream-response-content-type
                         :shape "MimeType" :location "header" :location-name
                         "X-Amzn-Bedrock-Content-Type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-invoke-model-with-response-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'invoke-model-with-response-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'invoke-model-with-response-stream-response
                    'make-invoke-model-with-response-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invoke-model-with-response-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "X-Amzn-Bedrock-Content-Type"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invoke-model-with-response-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invoke-model-with-response-stream-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          invoke-model-with-response-stream-response))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:deftype mime-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition model-error-exception
     (bedrock-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       model-error-exception-message)
      (original-status-code :initarg :original-status-code :initform
       common-lisp:nil :reader model-error-exception-original-status-code)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       model-error-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'model-error-exception 'model-error-exception-message
                    'model-error-exception-original-status-code
                    'model-error-exception-resource-name)))
(common-lisp:progn
 (common-lisp:define-condition model-not-ready-exception
     (bedrock-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       model-not-ready-exception-message)))
 (common-lisp:export
  (common-lisp:list 'model-not-ready-exception
                    'model-not-ready-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition model-stream-error-exception
     (bedrock-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       model-stream-error-exception-message)
      (original-status-code :initarg :original-status-code :initform
       common-lisp:nil :reader
       model-stream-error-exception-original-status-code)
      (original-message :initarg :original-message :initform common-lisp:nil
       :reader model-stream-error-exception-original-message)))
 (common-lisp:export
  (common-lisp:list 'model-stream-error-exception
                    'model-stream-error-exception-message
                    'model-stream-error-exception-original-status-code
                    'model-stream-error-exception-original-message)))
(common-lisp:progn
 (common-lisp:define-condition model-timeout-exception
     (bedrock-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       model-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'model-timeout-exception 'model-timeout-exception-message)))
(common-lisp:deftype non-blank-string () 'common-lisp:string)
(common-lisp:deftype part-body ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass payload-part common-lisp:nil
                       ((bytes :initarg :bytes :initform common-lisp:nil :type
                         (common-lisp:or part-body common-lisp:null) :accessor
                         struct-shape-payload-part-bytes :shape "PartBody"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-payload-part
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'payload-part
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'payload-part 'make-payload-part))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input payload-part))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input payload-part))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes))
      (common-lisp:list
       (common-lisp:cons "bytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input payload-part))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (bedrock-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass response-stream common-lisp:nil
                       ((chunk :initarg :chunk :initform common-lisp:nil :type
                         (common-lisp:or payload-part common-lisp:null)
                         :accessor struct-shape-response-stream-chunk :shape
                         "PayloadPart" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (internal-server-exception :initarg
                         :internal-server-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or internal-server-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-response-stream-internal-server-exception
                         :shape "InternalServerException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (model-stream-error-exception :initarg
                         :model-stream-error-exception :initform
                         common-lisp:nil :type
                         (common-lisp:or model-stream-error-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-response-stream-model-stream-error-exception
                         :shape "ModelStreamErrorException" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (validation-exception :initarg :validation-exception
                         :initform common-lisp:nil :type
                         (common-lisp:or validation-exception common-lisp:null)
                         :accessor
                         struct-shape-response-stream-validation-exception
                         :shape "ValidationException" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (throttling-exception :initarg :throttling-exception
                         :initform common-lisp:nil :type
                         (common-lisp:or throttling-exception common-lisp:null)
                         :accessor
                         struct-shape-response-stream-throttling-exception
                         :shape "ThrottlingException" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-timeout-exception :initarg
                         :model-timeout-exception :initform common-lisp:nil
                         :type
                         (common-lisp:or model-timeout-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-response-stream-model-timeout-exception
                         :shape "ModelTimeoutException" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-response-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'response-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'response-stream 'make-response-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input response-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input response-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chunk))
      (common-lisp:list
       (common-lisp:cons "chunk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internal-server-exception))
      (common-lisp:list
       (common-lisp:cons "internalServerException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-stream-error-exception))
      (common-lisp:list
       (common-lisp:cons "modelStreamErrorException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validation-exception))
      (common-lisp:list
       (common-lisp:cons "validationException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'throttling-exception))
      (common-lisp:list
       (common-lisp:cons "throttlingException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-timeout-exception))
      (common-lisp:list
       (common-lisp:cons "modelTimeoutException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input response-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (bedrock-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype status-code () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (bedrock-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (bedrock-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun invoke-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key body content-type accept model-id)
   (common-lisp:declare
    (common-lisp:ignorable body content-type accept model-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-invoke-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'bedrock-runtime-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/model/~A/invoke"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'model-id))))
        "InvokeModel")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'invoke-model))
(common-lisp:progn
 (common-lisp:defun invoke-model-with-response-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key body content-type accept model-id)
   (common-lisp:declare
    (common-lisp:ignorable body content-type accept model-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-invoke-model-with-response-stream-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'bedrock-runtime-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/model/~A/invoke-with-response-stream"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'model-id))))
        "InvokeModelWithResponseStream"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'invoke-model-with-response-stream))
