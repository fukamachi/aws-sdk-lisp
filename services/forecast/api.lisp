;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/forecast/api (:use)
                             (:nicknames #:aws/forecast)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/forecast/api)
(common-lisp:progn
 (common-lisp:define-condition forecast-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'forecast-error))
(common-lisp:progn
 (common-lisp:defclass forecast-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "forecast" :api-version
                        "2018-06-26" :host-prefix "forecast" :signing-name
                        "forecast" :global-host common-lisp:nil :target-prefix
                        "AmazonForecast" :json-version "1.1"))
 (common-lisp:export 'forecast-request))
(common-lisp:defvar *error-map*
  '(("InvalidInputException" . invalid-input-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass action common-lisp:nil
                       ((attribute-name :initarg :attribute-name :initform
                         (common-lisp:error ":attribute-name is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-action-attribute-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (operation :initarg :operation :initform
                         (common-lisp:error ":operation is required") :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         struct-shape-action-operation :shape "Operation"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-action-value :shape "Double" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass additional-dataset common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-additional-dataset-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration common-lisp:null)
                         :accessor
                         struct-shape-additional-dataset-configuration :shape
                         "Configuration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-additional-dataset
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'additional-dataset
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'additional-dataset 'make-additional-dataset))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input additional-dataset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input additional-dataset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input additional-dataset))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype additional-datasets ()
   '(trivial-types:proper-list additional-dataset))
 (common-lisp:defun make-additional-datasets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list additional-dataset))
   aws-sdk/generator/shape::members))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype arn-list () '(trivial-types:proper-list arn))
 (common-lisp:defun make-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass attribute-config common-lisp:nil
                       ((attribute-name :initarg :attribute-name :initform
                         (common-lisp:error ":attribute-name is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-attribute-config-attribute-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (transformations :initarg :transformations :initform
                         (common-lisp:error ":transformations is required")
                         :type
                         (common-lisp:or transformations common-lisp:null)
                         :accessor
                         struct-shape-attribute-config-transformations :shape
                         "Transformations" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attribute-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attribute-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attribute-config 'make-attribute-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transformations))
      (common-lisp:list
       (common-lisp:cons "Transformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attribute-configs ()
   '(trivial-types:proper-list attribute-config))
 (common-lisp:defun make-attribute-configs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attribute-type () 'common-lisp:string)
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:deftype auto-mloverride-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass baseline common-lisp:nil
                       ((predictor-baseline :initarg :predictor-baseline
                         :initform common-lisp:nil :type
                         (common-lisp:or predictor-baseline common-lisp:null)
                         :accessor struct-shape-baseline-predictor-baseline
                         :shape "PredictorBaseline" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-baseline
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'baseline
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'baseline 'make-baseline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input baseline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input baseline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-baseline))
      (common-lisp:list
       (common-lisp:cons "PredictorBaseline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input baseline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass baseline-metric common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-baseline-metric-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-baseline-metric-value :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-baseline-metric
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'baseline-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'baseline-metric 'make-baseline-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input baseline-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input baseline-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input baseline-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype baseline-metrics ()
   '(trivial-types:proper-list baseline-metric))
 (common-lisp:defun make-baseline-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list baseline-metric))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass categorical-parameter-range common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-categorical-parameter-range-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or values common-lisp:null) :accessor
                         struct-shape-categorical-parameter-range-values :shape
                         "Values" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-categorical-parameter-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'categorical-parameter-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'categorical-parameter-range
                    'make-categorical-parameter-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          categorical-parameter-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          categorical-parameter-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          categorical-parameter-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype categorical-parameter-ranges ()
   '(trivial-types:proper-list categorical-parameter-range))
 (common-lisp:defun make-categorical-parameter-ranges
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            categorical-parameter-range))
   aws-sdk/generator/shape::members))
(common-lisp:deftype condition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configuration () 'common-lisp:hash-table)
 (common-lisp:defun make-configuration (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass continuous-parameter-range common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-continuous-parameter-range-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-value :initarg :max-value :initform
                         (common-lisp:error ":max-value is required") :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-continuous-parameter-range-max-value
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-value :initarg :min-value :initform
                         (common-lisp:error ":min-value is required") :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-continuous-parameter-range-min-value
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scaling-type :initarg :scaling-type :initform
                         common-lisp:nil :type
                         (common-lisp:or scaling-type common-lisp:null)
                         :accessor
                         struct-shape-continuous-parameter-range-scaling-type
                         :shape "ScalingType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-continuous-parameter-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'continuous-parameter-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'continuous-parameter-range
                    'make-continuous-parameter-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continuous-parameter-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continuous-parameter-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-value))
      (common-lisp:list
       (common-lisp:cons "MaxValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-value))
      (common-lisp:list
       (common-lisp:cons "MinValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-type))
      (common-lisp:list
       (common-lisp:cons "ScalingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continuous-parameter-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype continuous-parameter-ranges ()
   '(trivial-types:proper-list continuous-parameter-range))
 (common-lisp:defun make-continuous-parameter-ranges
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            continuous-parameter-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-auto-predictor-request common-lisp:nil
                       ((predictor-name :initarg :predictor-name :initform
                         (common-lisp:error ":predictor-name is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-auto-predictor-request-predictor-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forecast-horizon :initarg :forecast-horizon :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-create-auto-predictor-request-forecast-horizon
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forecast-types :initarg :forecast-types :initform
                         common-lisp:nil :type
                         (common-lisp:or forecast-types common-lisp:null)
                         :accessor
                         struct-shape-create-auto-predictor-request-forecast-types
                         :shape "ForecastTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forecast-dimensions :initarg :forecast-dimensions
                         :initform common-lisp:nil :type
                         (common-lisp:or forecast-dimensions common-lisp:null)
                         :accessor
                         struct-shape-create-auto-predictor-request-forecast-dimensions
                         :shape "ForecastDimensions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forecast-frequency :initarg :forecast-frequency
                         :initform common-lisp:nil :type
                         (common-lisp:or frequency common-lisp:null) :accessor
                         struct-shape-create-auto-predictor-request-forecast-frequency
                         :shape "Frequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-config :initarg :data-config :initform
                         common-lisp:nil :type
                         (common-lisp:or data-config common-lisp:null)
                         :accessor
                         struct-shape-create-auto-predictor-request-data-config
                         :shape "DataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-config :initarg :encryption-config
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-config common-lisp:null)
                         :accessor
                         struct-shape-create-auto-predictor-request-encryption-config
                         :shape "EncryptionConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reference-predictor-arn :initarg
                         :reference-predictor-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-auto-predictor-request-reference-predictor-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (optimization-metric :initarg :optimization-metric
                         :initform common-lisp:nil :type
                         (common-lisp:or optimization-metric common-lisp:null)
                         :accessor
                         struct-shape-create-auto-predictor-request-optimization-metric
                         :shape "OptimizationMetric" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (explain-predictor :initarg :explain-predictor
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-auto-predictor-request-explain-predictor
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-auto-predictor-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (monitor-config :initarg :monitor-config :initform
                         common-lisp:nil :type
                         (common-lisp:or monitor-config common-lisp:null)
                         :accessor
                         struct-shape-create-auto-predictor-request-monitor-config
                         :shape "MonitorConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-alignment-boundary :initarg
                         :time-alignment-boundary :initform common-lisp:nil
                         :type
                         (common-lisp:or time-alignment-boundary
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-auto-predictor-request-time-alignment-boundary
                         :shape "TimeAlignmentBoundary" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-auto-predictor-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-auto-predictor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-auto-predictor-request
                    'make-create-auto-predictor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-predictor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-predictor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-name))
      (common-lisp:list
       (common-lisp:cons "PredictorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-horizon))
      (common-lisp:list
       (common-lisp:cons "ForecastHorizon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-types))
      (common-lisp:list
       (common-lisp:cons "ForecastTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-dimensions))
      (common-lisp:list
       (common-lisp:cons "ForecastDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-frequency))
      (common-lisp:list
       (common-lisp:cons "ForecastFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-config))
      (common-lisp:list
       (common-lisp:cons "DataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-predictor-arn))
      (common-lisp:list
       (common-lisp:cons "ReferencePredictorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optimization-metric))
      (common-lisp:list
       (common-lisp:cons "OptimizationMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explain-predictor))
      (common-lisp:list
       (common-lisp:cons "ExplainPredictor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-config))
      (common-lisp:list
       (common-lisp:cons "MonitorConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-alignment-boundary))
      (common-lisp:list
       (common-lisp:cons "TimeAlignmentBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-predictor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-auto-predictor-response common-lisp:nil
                       ((predictor-arn :initarg :predictor-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-auto-predictor-response-predictor-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-auto-predictor-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-auto-predictor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-auto-predictor-response
                    'make-create-auto-predictor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-predictor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-predictor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-predictor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dataset-group-request common-lisp:nil
                       ((dataset-group-name :initarg :dataset-group-name
                         :initform
                         (common-lisp:error ":dataset-group-name is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-dataset-group-request-dataset-group-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain :initarg :domain :initform
                         (common-lisp:error ":domain is required") :type
                         (common-lisp:or domain common-lisp:null) :accessor
                         struct-shape-create-dataset-group-request-domain
                         :shape "Domain" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-arns :initarg :dataset-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         struct-shape-create-dataset-group-request-dataset-arns
                         :shape "ArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-dataset-group-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dataset-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dataset-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dataset-group-request
                    'make-create-dataset-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-group-name))
      (common-lisp:list
       (common-lisp:cons "DatasetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arns))
      (common-lisp:list
       (common-lisp:cons "DatasetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dataset-group-response common-lisp:nil
                       ((dataset-group-arn :initarg :dataset-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-dataset-group-response-dataset-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dataset-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dataset-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dataset-group-response
                    'make-create-dataset-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-group-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dataset-import-job-request common-lisp:nil
                       ((dataset-import-job-name :initarg
                         :dataset-import-job-name :initform
                         (common-lisp:error
                          ":dataset-import-job-name is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-dataset-import-job-request-dataset-import-job-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-arn :initarg :dataset-arn :initform
                         (common-lisp:error ":dataset-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-dataset-import-job-request-dataset-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-source :initarg :data-source :initform
                         (common-lisp:error ":data-source is required") :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-import-job-request-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp-format :initarg :timestamp-format :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-format common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-import-job-request-timestamp-format
                         :shape "TimestampFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-zone :initarg :time-zone :initform
                         common-lisp:nil :type
                         (common-lisp:or time-zone common-lisp:null) :accessor
                         struct-shape-create-dataset-import-job-request-time-zone
                         :shape "TimeZone" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-geolocation-for-time-zone :initarg
                         :use-geolocation-for-time-zone :initform
                         common-lisp:nil :type
                         (common-lisp:or use-geolocation-for-time-zone
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-import-job-request-use-geolocation-for-time-zone
                         :shape "UseGeolocationForTimeZone" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (geolocation-format :initarg :geolocation-format
                         :initform common-lisp:nil :type
                         (common-lisp:or geolocation-format common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-import-job-request-geolocation-format
                         :shape "GeolocationFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-dataset-import-job-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (format :initarg :format :initform common-lisp:nil
                         :type (common-lisp:or format common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-import-job-request-format
                         :shape "Format" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (import-mode :initarg :import-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or import-mode common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-import-job-request-import-mode
                         :shape "ImportMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dataset-import-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dataset-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dataset-import-job-request
                    'make-create-dataset-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataset-import-job-name))
      (common-lisp:list
       (common-lisp:cons "DatasetImportJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-format))
      (common-lisp:list
       (common-lisp:cons "TimestampFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone))
      (common-lisp:list
       (common-lisp:cons "TimeZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-geolocation-for-time-zone))
      (common-lisp:list
       (common-lisp:cons "UseGeolocationForTimeZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geolocation-format))
      (common-lisp:list
       (common-lisp:cons "GeolocationFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-mode))
      (common-lisp:list
       (common-lisp:cons "ImportMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dataset-import-job-response common-lisp:nil
                       ((dataset-import-job-arn :initarg
                         :dataset-import-job-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-dataset-import-job-response-dataset-import-job-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dataset-import-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dataset-import-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dataset-import-job-response
                    'make-create-dataset-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataset-import-job-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetImportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dataset-request common-lisp:nil
                       ((dataset-name :initarg :dataset-name :initform
                         (common-lisp:error ":dataset-name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-dataset-request-dataset-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain :initarg :domain :initform
                         (common-lisp:error ":domain is required") :type
                         (common-lisp:or domain common-lisp:null) :accessor
                         struct-shape-create-dataset-request-domain :shape
                         "Domain" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-type :initarg :dataset-type :initform
                         (common-lisp:error ":dataset-type is required") :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-dataset-type
                         :shape "DatasetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-frequency :initarg :data-frequency :initform
                         common-lisp:nil :type
                         (common-lisp:or frequency common-lisp:null) :accessor
                         struct-shape-create-dataset-request-data-frequency
                         :shape "Frequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema :initarg :schema :initform
                         (common-lisp:error ":schema is required") :type
                         (common-lisp:or schema common-lisp:null) :accessor
                         struct-shape-create-dataset-request-schema :shape
                         "Schema" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-config :initarg :encryption-config
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-config common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-encryption-config
                         :shape "EncryptionConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-dataset-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dataset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dataset-request 'make-create-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "DatasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-type))
      (common-lisp:list
       (common-lisp:cons "DatasetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-frequency))
      (common-lisp:list
       (common-lisp:cons "DataFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dataset-response common-lisp:nil
                       ((dataset-arn :initarg :dataset-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-dataset-response-dataset-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dataset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dataset-response 'make-create-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-explainability-export-request common-lisp:nil
                       ((explainability-export-name :initarg
                         :explainability-export-name :initform
                         (common-lisp:error
                          ":explainability-export-name is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-explainability-export-request-explainability-export-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (explainability-arn :initarg :explainability-arn
                         :initform
                         (common-lisp:error ":explainability-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-explainability-export-request-explainability-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or data-destination common-lisp:null)
                         :accessor
                         struct-shape-create-explainability-export-request-destination
                         :shape "DataDestination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-explainability-export-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (format :initarg :format :initform common-lisp:nil
                         :type (common-lisp:or format common-lisp:null)
                         :accessor
                         struct-shape-create-explainability-export-request-format
                         :shape "Format" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-explainability-export-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-explainability-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-explainability-export-request
                    'make-create-explainability-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-explainability-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-explainability-export-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'explainability-export-name))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityExportName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainability-arn))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-explainability-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-explainability-export-response common-lisp:nil
                       ((explainability-export-arn :initarg
                         :explainability-export-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-explainability-export-response-explainability-export-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-explainability-export-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-explainability-export-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-explainability-export-response
                    'make-create-explainability-export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-explainability-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-explainability-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'explainability-export-arn))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityExportArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-explainability-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-explainability-request common-lisp:nil
                       ((explainability-name :initarg :explainability-name
                         :initform
                         (common-lisp:error ":explainability-name is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-explainability-request-explainability-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-explainability-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (explainability-config :initarg :explainability-config
                         :initform
                         (common-lisp:error
                          ":explainability-config is required")
                         :type
                         (common-lisp:or explainability-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-explainability-request-explainability-config
                         :shape "ExplainabilityConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-create-explainability-request-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type (common-lisp:or schema common-lisp:null)
                         :accessor
                         struct-shape-create-explainability-request-schema
                         :shape "Schema" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-visualization :initarg :enable-visualization
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-explainability-request-enable-visualization
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-date-time :initarg :start-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or local-date-time common-lisp:null)
                         :accessor
                         struct-shape-create-explainability-request-start-date-time
                         :shape "LocalDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or local-date-time common-lisp:null)
                         :accessor
                         struct-shape-create-explainability-request-end-date-time
                         :shape "LocalDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-explainability-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-explainability-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-explainability-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-explainability-request
                    'make-create-explainability-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-explainability-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-explainability-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainability-name))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'explainability-config))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-visualization))
      (common-lisp:list
       (common-lisp:cons "EnableVisualization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "StartDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "EndDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-explainability-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-explainability-response common-lisp:nil
                       ((explainability-arn :initarg :explainability-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-explainability-response-explainability-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-explainability-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-explainability-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-explainability-response
                    'make-create-explainability-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-explainability-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-explainability-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainability-arn))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-explainability-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-forecast-export-job-request common-lisp:nil
                       ((forecast-export-job-name :initarg
                         :forecast-export-job-name :initform
                         (common-lisp:error
                          ":forecast-export-job-name is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-forecast-export-job-request-forecast-export-job-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forecast-arn :initarg :forecast-arn :initform
                         (common-lisp:error ":forecast-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-forecast-export-job-request-forecast-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or data-destination common-lisp:null)
                         :accessor
                         struct-shape-create-forecast-export-job-request-destination
                         :shape "DataDestination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-forecast-export-job-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (format :initarg :format :initform common-lisp:nil
                         :type (common-lisp:or format common-lisp:null)
                         :accessor
                         struct-shape-create-forecast-export-job-request-format
                         :shape "Format" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-forecast-export-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-forecast-export-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-forecast-export-job-request
                    'make-create-forecast-export-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-forecast-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-forecast-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forecast-export-job-name))
      (common-lisp:list
       (common-lisp:cons "ForecastExportJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-arn))
      (common-lisp:list
       (common-lisp:cons "ForecastArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-forecast-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-forecast-export-job-response common-lisp:nil
                       ((forecast-export-job-arn :initarg
                         :forecast-export-job-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-forecast-export-job-response-forecast-export-job-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-forecast-export-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-forecast-export-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-forecast-export-job-response
                    'make-create-forecast-export-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-forecast-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-forecast-export-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forecast-export-job-arn))
      (common-lisp:list
       (common-lisp:cons "ForecastExportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-forecast-export-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-forecast-request common-lisp:nil
                       ((forecast-name :initarg :forecast-name :initform
                         (common-lisp:error ":forecast-name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-forecast-request-forecast-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (predictor-arn :initarg :predictor-arn :initform
                         (common-lisp:error ":predictor-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-forecast-request-predictor-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forecast-types :initarg :forecast-types :initform
                         common-lisp:nil :type
                         (common-lisp:or forecast-types common-lisp:null)
                         :accessor
                         struct-shape-create-forecast-request-forecast-types
                         :shape "ForecastTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-forecast-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (time-series-selector :initarg :time-series-selector
                         :initform common-lisp:nil :type
                         (common-lisp:or time-series-selector common-lisp:null)
                         :accessor
                         struct-shape-create-forecast-request-time-series-selector
                         :shape "TimeSeriesSelector" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-forecast-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-forecast-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-forecast-request 'make-create-forecast-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-forecast-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-forecast-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-name))
      (common-lisp:list
       (common-lisp:cons "ForecastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-types))
      (common-lisp:list
       (common-lisp:cons "ForecastTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-selector))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-forecast-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-forecast-response common-lisp:nil
                       ((forecast-arn :initarg :forecast-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-forecast-response-forecast-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-forecast-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-forecast-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-forecast-response 'make-create-forecast-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-forecast-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-forecast-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-arn))
      (common-lisp:list
       (common-lisp:cons "ForecastArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-forecast-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-monitor-request common-lisp:nil
                       ((monitor-name :initarg :monitor-name :initform
                         (common-lisp:error ":monitor-name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-monitor-request-monitor-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-monitor-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-monitor-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-monitor-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-monitor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-monitor-request 'make-create-monitor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-monitor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-monitor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-name))
      (common-lisp:list
       (common-lisp:cons "MonitorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-monitor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-monitor-response common-lisp:nil
                       ((monitor-arn :initarg :monitor-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-monitor-response-monitor-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-monitor-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-monitor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-monitor-response 'make-create-monitor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-monitor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-monitor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-monitor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-predictor-backtest-export-job-request
                       common-lisp:nil
                       ((predictor-backtest-export-job-name :initarg
                         :predictor-backtest-export-job-name :initform
                         (common-lisp:error
                          ":predictor-backtest-export-job-name is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-predictor-backtest-export-job-request-predictor-backtest-export-job-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (predictor-arn :initarg :predictor-arn :initform
                         (common-lisp:error ":predictor-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-predictor-backtest-export-job-request-predictor-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or data-destination common-lisp:null)
                         :accessor
                         struct-shape-create-predictor-backtest-export-job-request-destination
                         :shape "DataDestination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-predictor-backtest-export-job-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (format :initarg :format :initform common-lisp:nil
                         :type (common-lisp:or format common-lisp:null)
                         :accessor
                         struct-shape-create-predictor-backtest-export-job-request-format
                         :shape "Format" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-predictor-backtest-export-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-predictor-backtest-export-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-predictor-backtest-export-job-request
                    'make-create-predictor-backtest-export-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-predictor-backtest-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-predictor-backtest-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictor-backtest-export-job-name))
      (common-lisp:list
       (common-lisp:cons "PredictorBacktestExportJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-predictor-backtest-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-predictor-backtest-export-job-response
                       common-lisp:nil
                       ((predictor-backtest-export-job-arn :initarg
                         :predictor-backtest-export-job-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-predictor-backtest-export-job-response-predictor-backtest-export-job-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-predictor-backtest-export-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-predictor-backtest-export-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-predictor-backtest-export-job-response
                    'make-create-predictor-backtest-export-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-predictor-backtest-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-predictor-backtest-export-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictor-backtest-export-job-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorBacktestExportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-predictor-backtest-export-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-predictor-request common-lisp:nil
                       ((predictor-name :initarg :predictor-name :initform
                         (common-lisp:error ":predictor-name is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-predictor-request-predictor-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (algorithm-arn :initarg :algorithm-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-predictor-request-algorithm-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forecast-horizon :initarg :forecast-horizon :initform
                         (common-lisp:error ":forecast-horizon is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-create-predictor-request-forecast-horizon
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forecast-types :initarg :forecast-types :initform
                         common-lisp:nil :type
                         (common-lisp:or forecast-types common-lisp:null)
                         :accessor
                         struct-shape-create-predictor-request-forecast-types
                         :shape "ForecastTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (perform-auto-ml :initarg :perform-auto-ml :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-predictor-request-perform-auto-ml
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-mloverride-strategy :initarg
                         :auto-mloverride-strategy :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-mloverride-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-predictor-request-auto-mloverride-strategy
                         :shape "AutoMLOverrideStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (perform-hpo :initarg :perform-hpo :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-predictor-request-perform-hpo
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (training-parameters :initarg :training-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or training-parameters common-lisp:null)
                         :accessor
                         struct-shape-create-predictor-request-training-parameters
                         :shape "TrainingParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-parameters :initarg :evaluation-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-predictor-request-evaluation-parameters
                         :shape "EvaluationParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (hpoconfig :initarg :hpoconfig :initform
                         common-lisp:nil :type
                         (common-lisp:or hyper-parameter-tuning-job-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-predictor-request-hpoconfig :shape
                         "HyperParameterTuningJobConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input-data-config :initarg :input-data-config
                         :initform
                         (common-lisp:error ":input-data-config is required")
                         :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor
                         struct-shape-create-predictor-request-input-data-config
                         :shape "InputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (featurization-config :initarg :featurization-config
                         :initform
                         (common-lisp:error
                          ":featurization-config is required")
                         :type
                         (common-lisp:or featurization-config common-lisp:null)
                         :accessor
                         struct-shape-create-predictor-request-featurization-config
                         :shape "FeaturizationConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-config :initarg :encryption-config
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-config common-lisp:null)
                         :accessor
                         struct-shape-create-predictor-request-encryption-config
                         :shape "EncryptionConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-predictor-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (optimization-metric :initarg :optimization-metric
                         :initform common-lisp:nil :type
                         (common-lisp:or optimization-metric common-lisp:null)
                         :accessor
                         struct-shape-create-predictor-request-optimization-metric
                         :shape "OptimizationMetric" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-predictor-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-predictor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-predictor-request 'make-create-predictor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-predictor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-predictor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-name))
      (common-lisp:list
       (common-lisp:cons "PredictorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-arn))
      (common-lisp:list
       (common-lisp:cons "AlgorithmArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-horizon))
      (common-lisp:list
       (common-lisp:cons "ForecastHorizon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-types))
      (common-lisp:list
       (common-lisp:cons "ForecastTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'perform-auto-ml))
      (common-lisp:list
       (common-lisp:cons "PerformAutoML"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mloverride-strategy))
      (common-lisp:list
       (common-lisp:cons "AutoMLOverrideStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'perform-hpo))
      (common-lisp:list
       (common-lisp:cons "PerformHPO"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-parameters))
      (common-lisp:list
       (common-lisp:cons "TrainingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-parameters))
      (common-lisp:list
       (common-lisp:cons "EvaluationParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hpoconfig))
      (common-lisp:list
       (common-lisp:cons "HPOConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'featurization-config))
      (common-lisp:list
       (common-lisp:cons "FeaturizationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optimization-metric))
      (common-lisp:list
       (common-lisp:cons "OptimizationMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-predictor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-predictor-response common-lisp:nil
                       ((predictor-arn :initarg :predictor-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-predictor-response-predictor-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-predictor-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-predictor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-predictor-response
                    'make-create-predictor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-predictor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-predictor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-predictor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-what-if-analysis-request common-lisp:nil
                       ((what-if-analysis-name :initarg :what-if-analysis-name
                         :initform
                         (common-lisp:error
                          ":what-if-analysis-name is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-what-if-analysis-request-what-if-analysis-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forecast-arn :initarg :forecast-arn :initform
                         (common-lisp:error ":forecast-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-what-if-analysis-request-forecast-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (time-series-selector :initarg :time-series-selector
                         :initform common-lisp:nil :type
                         (common-lisp:or time-series-selector common-lisp:null)
                         :accessor
                         struct-shape-create-what-if-analysis-request-time-series-selector
                         :shape "TimeSeriesSelector" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-what-if-analysis-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-what-if-analysis-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-what-if-analysis-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-what-if-analysis-request
                    'make-create-what-if-analysis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-analysis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-analysis-name))
      (common-lisp:list
       (common-lisp:cons "WhatIfAnalysisName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-arn))
      (common-lisp:list
       (common-lisp:cons "ForecastArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-selector))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-what-if-analysis-response common-lisp:nil
                       ((what-if-analysis-arn :initarg :what-if-analysis-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-what-if-analysis-response-what-if-analysis-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-what-if-analysis-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-what-if-analysis-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-what-if-analysis-response
                    'make-create-what-if-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-analysis-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfAnalysisArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-what-if-forecast-export-request common-lisp:nil
                       ((what-if-forecast-export-name :initarg
                         :what-if-forecast-export-name :initform
                         (common-lisp:error
                          ":what-if-forecast-export-name is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-what-if-forecast-export-request-what-if-forecast-export-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (what-if-forecast-arns :initarg :what-if-forecast-arns
                         :initform
                         (common-lisp:error
                          ":what-if-forecast-arns is required")
                         :type
                         (common-lisp:or what-if-forecast-arn-list-for-export
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-what-if-forecast-export-request-what-if-forecast-arns
                         :shape "WhatIfForecastArnListForExport" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or data-destination common-lisp:null)
                         :accessor
                         struct-shape-create-what-if-forecast-export-request-destination
                         :shape "DataDestination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-what-if-forecast-export-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (format :initarg :format :initform common-lisp:nil
                         :type (common-lisp:or format common-lisp:null)
                         :accessor
                         struct-shape-create-what-if-forecast-export-request-format
                         :shape "Format" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-what-if-forecast-export-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-what-if-forecast-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-what-if-forecast-export-request
                    'make-create-what-if-forecast-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-forecast-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-forecast-export-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-export-name))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastExportName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-arns))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-forecast-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-what-if-forecast-export-response common-lisp:nil
                       ((what-if-forecast-export-arn :initarg
                         :what-if-forecast-export-arn :initform common-lisp:nil
                         :type (common-lisp:or long-arn common-lisp:null)
                         :accessor
                         struct-shape-create-what-if-forecast-export-response-what-if-forecast-export-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-what-if-forecast-export-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-what-if-forecast-export-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-what-if-forecast-export-response
                    'make-create-what-if-forecast-export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-forecast-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-forecast-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-export-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastExportArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-forecast-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-what-if-forecast-request common-lisp:nil
                       ((what-if-forecast-name :initarg :what-if-forecast-name
                         :initform
                         (common-lisp:error
                          ":what-if-forecast-name is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-what-if-forecast-request-what-if-forecast-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (what-if-analysis-arn :initarg :what-if-analysis-arn
                         :initform
                         (common-lisp:error
                          ":what-if-analysis-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-what-if-forecast-request-what-if-analysis-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (time-series-transformations :initarg
                         :time-series-transformations :initform common-lisp:nil
                         :type
                         (common-lisp:or time-series-transformations
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-what-if-forecast-request-time-series-transformations
                         :shape "TimeSeriesTransformations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (time-series-replacements-data-source :initarg
                         :time-series-replacements-data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or time-series-replacements-data-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-what-if-forecast-request-time-series-replacements-data-source
                         :shape "TimeSeriesReplacementsDataSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-what-if-forecast-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-what-if-forecast-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-what-if-forecast-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-what-if-forecast-request
                    'make-create-what-if-forecast-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-forecast-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-forecast-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-name))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-analysis-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfAnalysisArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-transformations))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesTransformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-replacements-data-source))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesReplacementsDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-forecast-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-what-if-forecast-response common-lisp:nil
                       ((what-if-forecast-arn :initarg :what-if-forecast-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or long-arn common-lisp:null) :accessor
                         struct-shape-create-what-if-forecast-response-what-if-forecast-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-what-if-forecast-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-what-if-forecast-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-what-if-forecast-response
                    'make-create-what-if-forecast-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-forecast-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-forecast-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-what-if-forecast-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-config common-lisp:nil
                       ((dataset-group-arn :initarg :dataset-group-arn
                         :initform
                         (common-lisp:error ":dataset-group-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-data-config-dataset-group-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attribute-configs :initarg :attribute-configs
                         :initform common-lisp:nil :type
                         (common-lisp:or attribute-configs common-lisp:null)
                         :accessor struct-shape-data-config-attribute-configs
                         :shape "AttributeConfigs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-datasets :initarg :additional-datasets
                         :initform common-lisp:nil :type
                         (common-lisp:or additional-datasets common-lisp:null)
                         :accessor struct-shape-data-config-additional-datasets
                         :shape "AdditionalDatasets" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'data-config 'make-data-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-group-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-configs))
      (common-lisp:list
       (common-lisp:cons "AttributeConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-datasets))
      (common-lisp:list
       (common-lisp:cons "AdditionalDatasets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-destination common-lisp:nil
                       ((s3config :initarg :s3config :initform
                         (common-lisp:error ":s3config is required") :type
                         (common-lisp:or s3config common-lisp:null) :accessor
                         struct-shape-data-destination-s3config :shape
                         "S3Config" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-destination 'make-data-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3config))
      (common-lisp:list
       (common-lisp:cons "S3Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source common-lisp:nil
                       ((s3config :initarg :s3config :initform
                         (common-lisp:error ":s3config is required") :type
                         (common-lisp:or s3config common-lisp:null) :accessor
                         struct-shape-data-source-s3config :shape "S3Config"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3config))
      (common-lisp:list
       (common-lisp:cons "S3Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dataset-group-summary common-lisp:nil
                       ((dataset-group-arn :initarg :dataset-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-dataset-group-summary-dataset-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-group-name :initarg :dataset-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-dataset-group-summary-dataset-group-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-dataset-group-summary-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-dataset-group-summary-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-group-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-group-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dataset-group-summary 'make-dataset-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataset-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataset-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-group-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-group-name))
      (common-lisp:list
       (common-lisp:cons "DatasetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataset-group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dataset-groups ()
   '(trivial-types:proper-list dataset-group-summary))
 (common-lisp:defun make-dataset-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dataset-import-job-summary common-lisp:nil
                       ((dataset-import-job-arn :initarg
                         :dataset-import-job-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-dataset-import-job-summary-dataset-import-job-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-import-job-name :initarg
                         :dataset-import-job-name :initform common-lisp:nil
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-dataset-import-job-summary-dataset-import-job-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-dataset-import-job-summary-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-dataset-import-job-summary-status :shape
                         "Status" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-dataset-import-job-summary-message :shape
                         "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-dataset-import-job-summary-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-dataset-import-job-summary-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (import-mode :initarg :import-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or import-mode common-lisp:null)
                         :accessor
                         struct-shape-dataset-import-job-summary-import-mode
                         :shape "ImportMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-import-job-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-import-job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dataset-import-job-summary
                    'make-dataset-import-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataset-import-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataset-import-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataset-import-job-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetImportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataset-import-job-name))
      (common-lisp:list
       (common-lisp:cons "DatasetImportJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-mode))
      (common-lisp:list
       (common-lisp:cons "ImportMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataset-import-job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dataset-import-jobs ()
   '(trivial-types:proper-list dataset-import-job-summary))
 (common-lisp:defun make-dataset-import-jobs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dataset-import-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dataset-summary common-lisp:nil
                       ((dataset-arn :initarg :dataset-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-dataset-summary-dataset-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-name :initarg :dataset-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-dataset-summary-dataset-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-type :initarg :dataset-type :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor struct-shape-dataset-summary-dataset-type
                         :shape "DatasetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or domain common-lisp:null)
                         :accessor struct-shape-dataset-summary-domain :shape
                         "Domain" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-dataset-summary-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-dataset-summary-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dataset-summary 'make-dataset-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "DatasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-type))
      (common-lisp:list
       (common-lisp:cons "DatasetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-summary))
   common-lisp:nil))
(common-lisp:deftype dataset-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype datasets () '(trivial-types:proper-list dataset-summary))
 (common-lisp:defun make-datasets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype day-of-month () 'common-lisp:integer)
(common-lisp:deftype day-of-week () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-dataset-group-request common-lisp:nil
                       ((dataset-group-arn :initarg :dataset-group-arn
                         :initform
                         (common-lisp:error ":dataset-group-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-dataset-group-request-dataset-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dataset-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dataset-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dataset-group-request
                    'make-delete-dataset-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-group-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dataset-import-job-request common-lisp:nil
                       ((dataset-import-job-arn :initarg
                         :dataset-import-job-arn :initform
                         (common-lisp:error
                          ":dataset-import-job-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-dataset-import-job-request-dataset-import-job-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dataset-import-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dataset-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dataset-import-job-request
                    'make-delete-dataset-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataset-import-job-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetImportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dataset-request common-lisp:nil
                       ((dataset-arn :initarg :dataset-arn :initform
                         (common-lisp:error ":dataset-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-dataset-request-dataset-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dataset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dataset-request 'make-delete-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-explainability-export-request common-lisp:nil
                       ((explainability-export-arn :initarg
                         :explainability-export-arn :initform
                         (common-lisp:error
                          ":explainability-export-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-explainability-export-request-explainability-export-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-explainability-export-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-explainability-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-explainability-export-request
                    'make-delete-explainability-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-explainability-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-explainability-export-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'explainability-export-arn))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityExportArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-explainability-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-explainability-request common-lisp:nil
                       ((explainability-arn :initarg :explainability-arn
                         :initform
                         (common-lisp:error ":explainability-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-explainability-request-explainability-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-explainability-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-explainability-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-explainability-request
                    'make-delete-explainability-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-explainability-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-explainability-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainability-arn))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-explainability-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-forecast-export-job-request common-lisp:nil
                       ((forecast-export-job-arn :initarg
                         :forecast-export-job-arn :initform
                         (common-lisp:error
                          ":forecast-export-job-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-forecast-export-job-request-forecast-export-job-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-forecast-export-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-forecast-export-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-forecast-export-job-request
                    'make-delete-forecast-export-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-forecast-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-forecast-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forecast-export-job-arn))
      (common-lisp:list
       (common-lisp:cons "ForecastExportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-forecast-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-forecast-request common-lisp:nil
                       ((forecast-arn :initarg :forecast-arn :initform
                         (common-lisp:error ":forecast-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-forecast-request-forecast-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-forecast-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-forecast-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-forecast-request 'make-delete-forecast-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-forecast-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-forecast-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-arn))
      (common-lisp:list
       (common-lisp:cons "ForecastArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-forecast-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-monitor-request common-lisp:nil
                       ((monitor-arn :initarg :monitor-arn :initform
                         (common-lisp:error ":monitor-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-monitor-request-monitor-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-monitor-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-monitor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-monitor-request 'make-delete-monitor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-monitor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-monitor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-monitor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-predictor-backtest-export-job-request
                       common-lisp:nil
                       ((predictor-backtest-export-job-arn :initarg
                         :predictor-backtest-export-job-arn :initform
                         (common-lisp:error
                          ":predictor-backtest-export-job-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-predictor-backtest-export-job-request-predictor-backtest-export-job-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-predictor-backtest-export-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-predictor-backtest-export-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-predictor-backtest-export-job-request
                    'make-delete-predictor-backtest-export-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-predictor-backtest-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-predictor-backtest-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictor-backtest-export-job-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorBacktestExportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-predictor-backtest-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-predictor-request common-lisp:nil
                       ((predictor-arn :initarg :predictor-arn :initform
                         (common-lisp:error ":predictor-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-predictor-request-predictor-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-predictor-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-predictor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-predictor-request 'make-delete-predictor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-predictor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-predictor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-predictor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-tree-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-resource-tree-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-tree-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-resource-tree-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-tree-request
                    'make-delete-resource-tree-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-tree-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-tree-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-tree-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-what-if-analysis-request common-lisp:nil
                       ((what-if-analysis-arn :initarg :what-if-analysis-arn
                         :initform
                         (common-lisp:error
                          ":what-if-analysis-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-what-if-analysis-request-what-if-analysis-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-what-if-analysis-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-what-if-analysis-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-what-if-analysis-request
                    'make-delete-what-if-analysis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-what-if-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-what-if-analysis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-analysis-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfAnalysisArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-what-if-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-what-if-forecast-export-request common-lisp:nil
                       ((what-if-forecast-export-arn :initarg
                         :what-if-forecast-export-arn :initform
                         (common-lisp:error
                          ":what-if-forecast-export-arn is required")
                         :type (common-lisp:or long-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-what-if-forecast-export-request-what-if-forecast-export-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-what-if-forecast-export-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-what-if-forecast-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-what-if-forecast-export-request
                    'make-delete-what-if-forecast-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-what-if-forecast-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-what-if-forecast-export-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-export-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastExportArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-what-if-forecast-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-what-if-forecast-request common-lisp:nil
                       ((what-if-forecast-arn :initarg :what-if-forecast-arn
                         :initform
                         (common-lisp:error
                          ":what-if-forecast-arn is required")
                         :type (common-lisp:or long-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-what-if-forecast-request-what-if-forecast-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-what-if-forecast-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-what-if-forecast-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-what-if-forecast-request
                    'make-delete-what-if-forecast-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-what-if-forecast-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-what-if-forecast-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-what-if-forecast-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-auto-predictor-request common-lisp:nil
                       ((predictor-arn :initarg :predictor-arn :initform
                         (common-lisp:error ":predictor-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-auto-predictor-request-predictor-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-auto-predictor-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-auto-predictor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-auto-predictor-request
                    'make-describe-auto-predictor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-predictor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-predictor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-predictor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-auto-predictor-response common-lisp:nil
                       ((predictor-arn :initarg :predictor-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-auto-predictor-response-predictor-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (predictor-name :initarg :predictor-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-auto-predictor-response-predictor-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forecast-horizon :initarg :forecast-horizon :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-describe-auto-predictor-response-forecast-horizon
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forecast-types :initarg :forecast-types :initform
                         common-lisp:nil :type
                         (common-lisp:or forecast-types common-lisp:null)
                         :accessor
                         struct-shape-describe-auto-predictor-response-forecast-types
                         :shape "ForecastTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forecast-frequency :initarg :forecast-frequency
                         :initform common-lisp:nil :type
                         (common-lisp:or frequency common-lisp:null) :accessor
                         struct-shape-describe-auto-predictor-response-forecast-frequency
                         :shape "Frequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forecast-dimensions :initarg :forecast-dimensions
                         :initform common-lisp:nil :type
                         (common-lisp:or forecast-dimensions common-lisp:null)
                         :accessor
                         struct-shape-describe-auto-predictor-response-forecast-dimensions
                         :shape "ForecastDimensions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-import-job-arns :initarg
                         :dataset-import-job-arns :initform common-lisp:nil
                         :type (common-lisp:or arn-list common-lisp:null)
                         :accessor
                         struct-shape-describe-auto-predictor-response-dataset-import-job-arns
                         :shape "ArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-config :initarg :data-config :initform
                         common-lisp:nil :type
                         (common-lisp:or data-config common-lisp:null)
                         :accessor
                         struct-shape-describe-auto-predictor-response-data-config
                         :shape "DataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-config :initarg :encryption-config
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-config common-lisp:null)
                         :accessor
                         struct-shape-describe-auto-predictor-response-encryption-config
                         :shape "EncryptionConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reference-predictor-summary :initarg
                         :reference-predictor-summary :initform common-lisp:nil
                         :type
                         (common-lisp:or reference-predictor-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-auto-predictor-response-reference-predictor-summary
                         :shape "ReferencePredictorSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (estimated-time-remaining-in-minutes :initarg
                         :estimated-time-remaining-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-describe-auto-predictor-response-estimated-time-remaining-in-minutes
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-describe-auto-predictor-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor
                         struct-shape-describe-auto-predictor-response-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-auto-predictor-response-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-auto-predictor-response-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (optimization-metric :initarg :optimization-metric
                         :initform common-lisp:nil :type
                         (common-lisp:or optimization-metric common-lisp:null)
                         :accessor
                         struct-shape-describe-auto-predictor-response-optimization-metric
                         :shape "OptimizationMetric" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (explainability-info :initarg :explainability-info
                         :initform common-lisp:nil :type
                         (common-lisp:or explainability-info common-lisp:null)
                         :accessor
                         struct-shape-describe-auto-predictor-response-explainability-info
                         :shape "ExplainabilityInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitor-info :initarg :monitor-info :initform
                         common-lisp:nil :type
                         (common-lisp:or monitor-info common-lisp:null)
                         :accessor
                         struct-shape-describe-auto-predictor-response-monitor-info
                         :shape "MonitorInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-alignment-boundary :initarg
                         :time-alignment-boundary :initform common-lisp:nil
                         :type
                         (common-lisp:or time-alignment-boundary
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-auto-predictor-response-time-alignment-boundary
                         :shape "TimeAlignmentBoundary" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-auto-predictor-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-auto-predictor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-auto-predictor-response
                    'make-describe-auto-predictor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-predictor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-predictor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-name))
      (common-lisp:list
       (common-lisp:cons "PredictorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-horizon))
      (common-lisp:list
       (common-lisp:cons "ForecastHorizon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-types))
      (common-lisp:list
       (common-lisp:cons "ForecastTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-frequency))
      (common-lisp:list
       (common-lisp:cons "ForecastFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-dimensions))
      (common-lisp:list
       (common-lisp:cons "ForecastDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataset-import-job-arns))
      (common-lisp:list
       (common-lisp:cons "DatasetImportJobArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-config))
      (common-lisp:list
       (common-lisp:cons "DataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-predictor-summary))
      (common-lisp:list
       (common-lisp:cons "ReferencePredictorSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-time-remaining-in-minutes))
      (common-lisp:list
       (common-lisp:cons "EstimatedTimeRemainingInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optimization-metric))
      (common-lisp:list
       (common-lisp:cons "OptimizationMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainability-info))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-info))
      (common-lisp:list
       (common-lisp:cons "MonitorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-alignment-boundary))
      (common-lisp:list
       (common-lisp:cons "TimeAlignmentBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-predictor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dataset-group-request common-lisp:nil
                       ((dataset-group-arn :initarg :dataset-group-arn
                         :initform
                         (common-lisp:error ":dataset-group-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-dataset-group-request-dataset-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dataset-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dataset-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-group-request
                    'make-describe-dataset-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-group-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dataset-group-response common-lisp:nil
                       ((dataset-group-name :initarg :dataset-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-dataset-group-response-dataset-group-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-group-arn :initarg :dataset-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-dataset-group-response-dataset-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-arns :initarg :dataset-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         struct-shape-describe-dataset-group-response-dataset-arns
                         :shape "ArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or domain common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-group-response-domain
                         :shape "Domain" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-group-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-dataset-group-response-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-group-response-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dataset-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dataset-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-group-response
                    'make-describe-dataset-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-group-name))
      (common-lisp:list
       (common-lisp:cons "DatasetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-group-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arns))
      (common-lisp:list
       (common-lisp:cons "DatasetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dataset-import-job-request common-lisp:nil
                       ((dataset-import-job-arn :initarg
                         :dataset-import-job-arn :initform
                         (common-lisp:error
                          ":dataset-import-job-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-dataset-import-job-request-dataset-import-job-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dataset-import-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dataset-import-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-import-job-request
                    'make-describe-dataset-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataset-import-job-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetImportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dataset-import-job-response common-lisp:nil
                       ((dataset-import-job-name :initarg
                         :dataset-import-job-name :initform common-lisp:nil
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-dataset-import-job-response-dataset-import-job-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-import-job-arn :initarg
                         :dataset-import-job-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-dataset-import-job-response-dataset-import-job-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-arn :initarg :dataset-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-dataset-import-job-response-dataset-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timestamp-format :initarg :timestamp-format :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-format common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-import-job-response-timestamp-format
                         :shape "TimestampFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-zone :initarg :time-zone :initform
                         common-lisp:nil :type
                         (common-lisp:or time-zone common-lisp:null) :accessor
                         struct-shape-describe-dataset-import-job-response-time-zone
                         :shape "TimeZone" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-geolocation-for-time-zone :initarg
                         :use-geolocation-for-time-zone :initform
                         common-lisp:nil :type
                         (common-lisp:or use-geolocation-for-time-zone
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-import-job-response-use-geolocation-for-time-zone
                         :shape "UseGeolocationForTimeZone" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (geolocation-format :initarg :geolocation-format
                         :initform common-lisp:nil :type
                         (common-lisp:or geolocation-format common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-import-job-response-geolocation-format
                         :shape "GeolocationFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-import-job-response-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-time-remaining-in-minutes :initarg
                         :estimated-time-remaining-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-describe-dataset-import-job-response-estimated-time-remaining-in-minutes
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (field-statistics :initarg :field-statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or field-statistics common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-import-job-response-field-statistics
                         :shape "FieldStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-size :initarg :data-size :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-describe-dataset-import-job-response-data-size
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-import-job-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-import-job-response-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-dataset-import-job-response-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-import-job-response-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform common-lisp:nil
                         :type (common-lisp:or format common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-import-job-response-format
                         :shape "Format" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (import-mode :initarg :import-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or import-mode common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-import-job-response-import-mode
                         :shape "ImportMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dataset-import-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dataset-import-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-import-job-response
                    'make-describe-dataset-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataset-import-job-name))
      (common-lisp:list
       (common-lisp:cons "DatasetImportJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataset-import-job-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetImportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-format))
      (common-lisp:list
       (common-lisp:cons "TimestampFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone))
      (common-lisp:list
       (common-lisp:cons "TimeZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-geolocation-for-time-zone))
      (common-lisp:list
       (common-lisp:cons "UseGeolocationForTimeZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geolocation-format))
      (common-lisp:list
       (common-lisp:cons "GeolocationFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-time-remaining-in-minutes))
      (common-lisp:list
       (common-lisp:cons "EstimatedTimeRemainingInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-statistics))
      (common-lisp:list
       (common-lisp:cons "FieldStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-size))
      (common-lisp:list
       (common-lisp:cons "DataSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-mode))
      (common-lisp:list
       (common-lisp:cons "ImportMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dataset-request common-lisp:nil
                       ((dataset-arn :initarg :dataset-arn :initform
                         (common-lisp:error ":dataset-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-dataset-request-dataset-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dataset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-request 'make-describe-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dataset-response common-lisp:nil
                       ((dataset-arn :initarg :dataset-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-dataset-response-dataset-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-name :initarg :dataset-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-dataset-response-dataset-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or domain common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-response-domain :shape
                         "Domain" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-type :initarg :dataset-type :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-type common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-response-dataset-type
                         :shape "DatasetType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-frequency :initarg :data-frequency :initform
                         common-lisp:nil :type
                         (common-lisp:or frequency common-lisp:null) :accessor
                         struct-shape-describe-dataset-response-data-frequency
                         :shape "Frequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type (common-lisp:or schema common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-response-schema :shape
                         "Schema" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-config :initarg :encryption-config
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-config common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-response-encryption-config
                         :shape "EncryptionConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-response-status :shape
                         "Status" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-dataset-response-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-dataset-response-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-dataset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-response
                    'make-describe-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "DatasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-type))
      (common-lisp:list
       (common-lisp:cons "DatasetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-frequency))
      (common-lisp:list
       (common-lisp:cons "DataFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-explainability-export-request common-lisp:nil
                       ((explainability-export-arn :initarg
                         :explainability-export-arn :initform
                         (common-lisp:error
                          ":explainability-export-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-explainability-export-request-explainability-export-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-explainability-export-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-explainability-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-explainability-export-request
                    'make-describe-explainability-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-explainability-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-explainability-export-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'explainability-export-arn))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityExportArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-explainability-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-explainability-export-response common-lisp:nil
                       ((explainability-export-arn :initarg
                         :explainability-export-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-explainability-export-response-explainability-export-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (explainability-export-name :initarg
                         :explainability-export-name :initform common-lisp:nil
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-explainability-export-response-explainability-export-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (explainability-arn :initarg :explainability-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-explainability-export-response-explainability-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or data-destination common-lisp:null)
                         :accessor
                         struct-shape-describe-explainability-export-response-destination
                         :shape "DataDestination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor
                         struct-shape-describe-explainability-export-response-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-describe-explainability-export-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-explainability-export-response-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-explainability-export-response-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform common-lisp:nil
                         :type (common-lisp:or format common-lisp:null)
                         :accessor
                         struct-shape-describe-explainability-export-response-format
                         :shape "Format" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-explainability-export-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-explainability-export-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-explainability-export-response
                    'make-describe-explainability-export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-explainability-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-explainability-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'explainability-export-arn))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityExportArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'explainability-export-name))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityExportName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainability-arn))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-explainability-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-explainability-request common-lisp:nil
                       ((explainability-arn :initarg :explainability-arn
                         :initform
                         (common-lisp:error ":explainability-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-explainability-request-explainability-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-explainability-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-explainability-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-explainability-request
                    'make-describe-explainability-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-explainability-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-explainability-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainability-arn))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-explainability-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-explainability-response common-lisp:nil
                       ((explainability-arn :initarg :explainability-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-explainability-response-explainability-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (explainability-name :initarg :explainability-name
                         :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-explainability-response-explainability-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-explainability-response-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (explainability-config :initarg :explainability-config
                         :initform common-lisp:nil :type
                         (common-lisp:or explainability-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-explainability-response-explainability-config
                         :shape "ExplainabilityConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enable-visualization :initarg :enable-visualization
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-explainability-response-enable-visualization
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-describe-explainability-response-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type (common-lisp:or schema common-lisp:null)
                         :accessor
                         struct-shape-describe-explainability-response-schema
                         :shape "Schema" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-date-time :initarg :start-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or local-date-time common-lisp:null)
                         :accessor
                         struct-shape-describe-explainability-response-start-date-time
                         :shape "LocalDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or local-date-time common-lisp:null)
                         :accessor
                         struct-shape-describe-explainability-response-end-date-time
                         :shape "LocalDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-time-remaining-in-minutes :initarg
                         :estimated-time-remaining-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-describe-explainability-response-estimated-time-remaining-in-minutes
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor
                         struct-shape-describe-explainability-response-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-describe-explainability-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-explainability-response-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-explainability-response-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-explainability-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-explainability-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-explainability-response
                    'make-describe-explainability-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-explainability-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-explainability-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainability-arn))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainability-name))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'explainability-config))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-visualization))
      (common-lisp:list
       (common-lisp:cons "EnableVisualization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "StartDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "EndDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-time-remaining-in-minutes))
      (common-lisp:list
       (common-lisp:cons "EstimatedTimeRemainingInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-explainability-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-forecast-export-job-request common-lisp:nil
                       ((forecast-export-job-arn :initarg
                         :forecast-export-job-arn :initform
                         (common-lisp:error
                          ":forecast-export-job-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-forecast-export-job-request-forecast-export-job-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-forecast-export-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-forecast-export-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-forecast-export-job-request
                    'make-describe-forecast-export-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-forecast-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-forecast-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forecast-export-job-arn))
      (common-lisp:list
       (common-lisp:cons "ForecastExportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-forecast-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-forecast-export-job-response common-lisp:nil
                       ((forecast-export-job-arn :initarg
                         :forecast-export-job-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-forecast-export-job-response-forecast-export-job-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forecast-export-job-name :initarg
                         :forecast-export-job-name :initform common-lisp:nil
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-forecast-export-job-response-forecast-export-job-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forecast-arn :initarg :forecast-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-forecast-export-job-response-forecast-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or data-destination common-lisp:null)
                         :accessor
                         struct-shape-describe-forecast-export-job-response-destination
                         :shape "DataDestination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor
                         struct-shape-describe-forecast-export-job-response-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-describe-forecast-export-job-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-forecast-export-job-response-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-forecast-export-job-response-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform common-lisp:nil
                         :type (common-lisp:or format common-lisp:null)
                         :accessor
                         struct-shape-describe-forecast-export-job-response-format
                         :shape "Format" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-forecast-export-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-forecast-export-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-forecast-export-job-response
                    'make-describe-forecast-export-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-forecast-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-forecast-export-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forecast-export-job-arn))
      (common-lisp:list
       (common-lisp:cons "ForecastExportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forecast-export-job-name))
      (common-lisp:list
       (common-lisp:cons "ForecastExportJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-arn))
      (common-lisp:list
       (common-lisp:cons "ForecastArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-forecast-export-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-forecast-request common-lisp:nil
                       ((forecast-arn :initarg :forecast-arn :initform
                         (common-lisp:error ":forecast-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-forecast-request-forecast-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-forecast-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-forecast-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-forecast-request
                    'make-describe-forecast-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-forecast-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-forecast-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-arn))
      (common-lisp:list
       (common-lisp:cons "ForecastArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-forecast-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-forecast-response common-lisp:nil
                       ((forecast-arn :initarg :forecast-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-forecast-response-forecast-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forecast-name :initarg :forecast-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-forecast-response-forecast-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forecast-types :initarg :forecast-types :initform
                         common-lisp:nil :type
                         (common-lisp:or forecast-types common-lisp:null)
                         :accessor
                         struct-shape-describe-forecast-response-forecast-types
                         :shape "ForecastTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (predictor-arn :initarg :predictor-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-forecast-response-predictor-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-group-arn :initarg :dataset-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-forecast-response-dataset-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (estimated-time-remaining-in-minutes :initarg
                         :estimated-time-remaining-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-describe-forecast-response-estimated-time-remaining-in-minutes
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-forecast-response-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-describe-forecast-response-message :shape
                         "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-forecast-response-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-forecast-response-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-series-selector :initarg :time-series-selector
                         :initform common-lisp:nil :type
                         (common-lisp:or time-series-selector common-lisp:null)
                         :accessor
                         struct-shape-describe-forecast-response-time-series-selector
                         :shape "TimeSeriesSelector" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-forecast-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-forecast-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-forecast-response
                    'make-describe-forecast-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-forecast-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-forecast-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-arn))
      (common-lisp:list
       (common-lisp:cons "ForecastArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-name))
      (common-lisp:list
       (common-lisp:cons "ForecastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-types))
      (common-lisp:list
       (common-lisp:cons "ForecastTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-group-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-time-remaining-in-minutes))
      (common-lisp:list
       (common-lisp:cons "EstimatedTimeRemainingInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-selector))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-forecast-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-monitor-request common-lisp:nil
                       ((monitor-arn :initarg :monitor-arn :initform
                         (common-lisp:error ":monitor-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-monitor-request-monitor-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-monitor-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-monitor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-monitor-request 'make-describe-monitor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-monitor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-monitor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-monitor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-monitor-response common-lisp:nil
                       ((monitor-name :initarg :monitor-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-monitor-response-monitor-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (monitor-arn :initarg :monitor-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-monitor-response-monitor-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-monitor-response-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-describe-monitor-response-status :shape
                         "Status" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-evaluation-time :initarg :last-evaluation-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-monitor-response-last-evaluation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-evaluation-state :initarg :last-evaluation-state
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-state common-lisp:null)
                         :accessor
                         struct-shape-describe-monitor-response-last-evaluation-state
                         :shape "EvaluationState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (baseline :initarg :baseline :initform common-lisp:nil
                         :type (common-lisp:or baseline common-lisp:null)
                         :accessor
                         struct-shape-describe-monitor-response-baseline :shape
                         "Baseline" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor
                         struct-shape-describe-monitor-response-message :shape
                         "Message" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-monitor-response-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-monitor-response-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-evaluation-time-remaining-in-minutes
                         :initarg
                         :estimated-evaluation-time-remaining-in-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-describe-monitor-response-estimated-evaluation-time-remaining-in-minutes
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-monitor-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-monitor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-monitor-response
                    'make-describe-monitor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-monitor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-monitor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-name))
      (common-lisp:list
       (common-lisp:cons "MonitorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-evaluation-time))
      (common-lisp:list
       (common-lisp:cons "LastEvaluationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-evaluation-state))
      (common-lisp:list
       (common-lisp:cons "LastEvaluationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline))
      (common-lisp:list
       (common-lisp:cons "Baseline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-evaluation-time-remaining-in-minutes))
      (common-lisp:list
       (common-lisp:cons "EstimatedEvaluationTimeRemainingInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-monitor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-predictor-backtest-export-job-request
                       common-lisp:nil
                       ((predictor-backtest-export-job-arn :initarg
                         :predictor-backtest-export-job-arn :initform
                         (common-lisp:error
                          ":predictor-backtest-export-job-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-predictor-backtest-export-job-request-predictor-backtest-export-job-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-predictor-backtest-export-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-predictor-backtest-export-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-predictor-backtest-export-job-request
                    'make-describe-predictor-backtest-export-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-predictor-backtest-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-predictor-backtest-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictor-backtest-export-job-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorBacktestExportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-predictor-backtest-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-predictor-backtest-export-job-response
                       common-lisp:nil
                       ((predictor-backtest-export-job-arn :initarg
                         :predictor-backtest-export-job-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-predictor-backtest-export-job-response-predictor-backtest-export-job-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (predictor-backtest-export-job-name :initarg
                         :predictor-backtest-export-job-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-predictor-backtest-export-job-response-predictor-backtest-export-job-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (predictor-arn :initarg :predictor-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-predictor-backtest-export-job-response-predictor-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or data-destination common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-backtest-export-job-response-destination
                         :shape "DataDestination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-backtest-export-job-response-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-backtest-export-job-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-predictor-backtest-export-job-response-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-backtest-export-job-response-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform common-lisp:nil
                         :type (common-lisp:or format common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-backtest-export-job-response-format
                         :shape "Format" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-predictor-backtest-export-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-predictor-backtest-export-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-predictor-backtest-export-job-response
                    'make-describe-predictor-backtest-export-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-predictor-backtest-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-predictor-backtest-export-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictor-backtest-export-job-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorBacktestExportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictor-backtest-export-job-name))
      (common-lisp:list
       (common-lisp:cons "PredictorBacktestExportJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-predictor-backtest-export-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-predictor-request common-lisp:nil
                       ((predictor-arn :initarg :predictor-arn :initform
                         (common-lisp:error ":predictor-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-predictor-request-predictor-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-predictor-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-predictor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-predictor-request
                    'make-describe-predictor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-predictor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-predictor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-predictor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-predictor-response common-lisp:nil
                       ((predictor-arn :initarg :predictor-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-predictor-response-predictor-arn
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (predictor-name :initarg :predictor-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-predictor-response-predictor-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (algorithm-arn :initarg :algorithm-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-predictor-response-algorithm-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-mlalgorithm-arns :initarg :auto-mlalgorithm-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         struct-shape-describe-predictor-response-auto-mlalgorithm-arns
                         :shape "ArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forecast-horizon :initarg :forecast-horizon :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-describe-predictor-response-forecast-horizon
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forecast-types :initarg :forecast-types :initform
                         common-lisp:nil :type
                         (common-lisp:or forecast-types common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-response-forecast-types
                         :shape "ForecastTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (perform-auto-ml :initarg :perform-auto-ml :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-predictor-response-perform-auto-ml
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-mloverride-strategy :initarg
                         :auto-mloverride-strategy :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-mloverride-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-response-auto-mloverride-strategy
                         :shape "AutoMLOverrideStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (perform-hpo :initarg :perform-hpo :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-predictor-response-perform-hpo
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (training-parameters :initarg :training-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or training-parameters common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-response-training-parameters
                         :shape "TrainingParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-parameters :initarg :evaluation-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-response-evaluation-parameters
                         :shape "EvaluationParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (hpoconfig :initarg :hpoconfig :initform
                         common-lisp:nil :type
                         (common-lisp:or hyper-parameter-tuning-job-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-response-hpoconfig
                         :shape "HyperParameterTuningJobConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input-data-config :initarg :input-data-config
                         :initform common-lisp:nil :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-response-input-data-config
                         :shape "InputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (featurization-config :initarg :featurization-config
                         :initform common-lisp:nil :type
                         (common-lisp:or featurization-config common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-response-featurization-config
                         :shape "FeaturizationConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-config :initarg :encryption-config
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-config common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-response-encryption-config
                         :shape "EncryptionConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (predictor-execution-details :initarg
                         :predictor-execution-details :initform common-lisp:nil
                         :type
                         (common-lisp:or predictor-execution-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-response-predictor-execution-details
                         :shape "PredictorExecutionDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (estimated-time-remaining-in-minutes :initarg
                         :estimated-time-remaining-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-describe-predictor-response-estimated-time-remaining-in-minutes
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-auto-predictor :initarg :is-auto-predictor
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-predictor-response-is-auto-predictor
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-import-job-arns :initarg
                         :dataset-import-job-arns :initform common-lisp:nil
                         :type (common-lisp:or arn-list common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-response-dataset-import-job-arns
                         :shape "ArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-response-status :shape
                         "Status" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-response-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-predictor-response-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-response-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (optimization-metric :initarg :optimization-metric
                         :initform common-lisp:nil :type
                         (common-lisp:or optimization-metric common-lisp:null)
                         :accessor
                         struct-shape-describe-predictor-response-optimization-metric
                         :shape "OptimizationMetric" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-predictor-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-predictor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-predictor-response
                    'make-describe-predictor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-predictor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-predictor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-name))
      (common-lisp:list
       (common-lisp:cons "PredictorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-arn))
      (common-lisp:list
       (common-lisp:cons "AlgorithmArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mlalgorithm-arns))
      (common-lisp:list
       (common-lisp:cons "AutoMLAlgorithmArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-horizon))
      (common-lisp:list
       (common-lisp:cons "ForecastHorizon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-types))
      (common-lisp:list
       (common-lisp:cons "ForecastTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'perform-auto-ml))
      (common-lisp:list
       (common-lisp:cons "PerformAutoML"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mloverride-strategy))
      (common-lisp:list
       (common-lisp:cons "AutoMLOverrideStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'perform-hpo))
      (common-lisp:list
       (common-lisp:cons "PerformHPO"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-parameters))
      (common-lisp:list
       (common-lisp:cons "TrainingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-parameters))
      (common-lisp:list
       (common-lisp:cons "EvaluationParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hpoconfig))
      (common-lisp:list
       (common-lisp:cons "HPOConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'featurization-config))
      (common-lisp:list
       (common-lisp:cons "FeaturizationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictor-execution-details))
      (common-lisp:list
       (common-lisp:cons "PredictorExecutionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-time-remaining-in-minutes))
      (common-lisp:list
       (common-lisp:cons "EstimatedTimeRemainingInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-auto-predictor))
      (common-lisp:list
       (common-lisp:cons "IsAutoPredictor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataset-import-job-arns))
      (common-lisp:list
       (common-lisp:cons "DatasetImportJobArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optimization-metric))
      (common-lisp:list
       (common-lisp:cons "OptimizationMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-predictor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-what-if-analysis-request common-lisp:nil
                       ((what-if-analysis-arn :initarg :what-if-analysis-arn
                         :initform
                         (common-lisp:error
                          ":what-if-analysis-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-what-if-analysis-request-what-if-analysis-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-what-if-analysis-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-what-if-analysis-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-what-if-analysis-request
                    'make-describe-what-if-analysis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-analysis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-analysis-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfAnalysisArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-what-if-analysis-response common-lisp:nil
                       ((what-if-analysis-name :initarg :what-if-analysis-name
                         :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-what-if-analysis-response-what-if-analysis-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (what-if-analysis-arn :initarg :what-if-analysis-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-what-if-analysis-response-what-if-analysis-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forecast-arn :initarg :forecast-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-what-if-analysis-response-forecast-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (estimated-time-remaining-in-minutes :initarg
                         :estimated-time-remaining-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-describe-what-if-analysis-response-estimated-time-remaining-in-minutes
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-analysis-response-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-analysis-response-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-what-if-analysis-response-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-analysis-response-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-series-selector :initarg :time-series-selector
                         :initform common-lisp:nil :type
                         (common-lisp:or time-series-selector common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-analysis-response-time-series-selector
                         :shape "TimeSeriesSelector" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-what-if-analysis-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-what-if-analysis-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-what-if-analysis-response
                    'make-describe-what-if-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-analysis-name))
      (common-lisp:list
       (common-lisp:cons "WhatIfAnalysisName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-analysis-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfAnalysisArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-arn))
      (common-lisp:list
       (common-lisp:cons "ForecastArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-time-remaining-in-minutes))
      (common-lisp:list
       (common-lisp:cons "EstimatedTimeRemainingInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-selector))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-what-if-forecast-export-request common-lisp:nil
                       ((what-if-forecast-export-arn :initarg
                         :what-if-forecast-export-arn :initform
                         (common-lisp:error
                          ":what-if-forecast-export-arn is required")
                         :type (common-lisp:or long-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-forecast-export-request-what-if-forecast-export-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-what-if-forecast-export-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-what-if-forecast-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-what-if-forecast-export-request
                    'make-describe-what-if-forecast-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-forecast-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-forecast-export-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-export-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastExportArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-forecast-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-what-if-forecast-export-response
                       common-lisp:nil
                       ((what-if-forecast-export-arn :initarg
                         :what-if-forecast-export-arn :initform common-lisp:nil
                         :type (common-lisp:or long-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-forecast-export-response-what-if-forecast-export-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (what-if-forecast-export-name :initarg
                         :what-if-forecast-export-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-what-if-forecast-export-response-what-if-forecast-export-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (what-if-forecast-arns :initarg :what-if-forecast-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or long-arn-list common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-forecast-export-response-what-if-forecast-arns
                         :shape "LongArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or data-destination common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-forecast-export-response-destination
                         :shape "DataDestination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-forecast-export-response-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-forecast-export-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-what-if-forecast-export-response-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-time-remaining-in-minutes :initarg
                         :estimated-time-remaining-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-describe-what-if-forecast-export-response-estimated-time-remaining-in-minutes
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-forecast-export-response-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform common-lisp:nil
                         :type (common-lisp:or format common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-forecast-export-response-format
                         :shape "Format" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-what-if-forecast-export-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-what-if-forecast-export-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-what-if-forecast-export-response
                    'make-describe-what-if-forecast-export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-forecast-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-forecast-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-export-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastExportArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-export-name))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastExportName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-arns))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-time-remaining-in-minutes))
      (common-lisp:list
       (common-lisp:cons "EstimatedTimeRemainingInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-forecast-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-what-if-forecast-request common-lisp:nil
                       ((what-if-forecast-arn :initarg :what-if-forecast-arn
                         :initform
                         (common-lisp:error
                          ":what-if-forecast-arn is required")
                         :type (common-lisp:or long-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-forecast-request-what-if-forecast-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-what-if-forecast-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-what-if-forecast-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-what-if-forecast-request
                    'make-describe-what-if-forecast-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-forecast-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-forecast-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-forecast-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-what-if-forecast-response common-lisp:nil
                       ((what-if-forecast-name :initarg :what-if-forecast-name
                         :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-describe-what-if-forecast-response-what-if-forecast-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (what-if-forecast-arn :initarg :what-if-forecast-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or long-arn common-lisp:null) :accessor
                         struct-shape-describe-what-if-forecast-response-what-if-forecast-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (what-if-analysis-arn :initarg :what-if-analysis-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-what-if-forecast-response-what-if-analysis-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (estimated-time-remaining-in-minutes :initarg
                         :estimated-time-remaining-in-minutes :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-describe-what-if-forecast-response-estimated-time-remaining-in-minutes
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-forecast-response-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-forecast-response-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-what-if-forecast-response-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-forecast-response-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-series-transformations :initarg
                         :time-series-transformations :initform common-lisp:nil
                         :type
                         (common-lisp:or time-series-transformations
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-forecast-response-time-series-transformations
                         :shape "TimeSeriesTransformations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (time-series-replacements-data-source :initarg
                         :time-series-replacements-data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or time-series-replacements-data-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-forecast-response-time-series-replacements-data-source
                         :shape "TimeSeriesReplacementsDataSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (forecast-types :initarg :forecast-types :initform
                         common-lisp:nil :type
                         (common-lisp:or forecast-types common-lisp:null)
                         :accessor
                         struct-shape-describe-what-if-forecast-response-forecast-types
                         :shape "ForecastTypes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-what-if-forecast-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-what-if-forecast-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-what-if-forecast-response
                    'make-describe-what-if-forecast-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-forecast-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-forecast-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-name))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-analysis-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfAnalysisArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-time-remaining-in-minutes))
      (common-lisp:list
       (common-lisp:cons "EstimatedTimeRemainingInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-transformations))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesTransformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-replacements-data-source))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesReplacementsDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-types))
      (common-lisp:list
       (common-lisp:cons "ForecastTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-what-if-forecast-response))
   common-lisp:nil))
(common-lisp:deftype detail () 'common-lisp:string)
(common-lisp:deftype domain () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass encryption-config common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-encryption-config-role-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kmskey-arn :initarg :kmskey-arn :initform
                         (common-lisp:error ":kmskey-arn is required") :type
                         (common-lisp:or kmskey-arn common-lisp:null) :accessor
                         struct-shape-encryption-config-kmskey-arn :shape
                         "KMSKeyArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encryption-config 'make-encryption-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-arn))
      (common-lisp:list
       (common-lisp:cons "KMSKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-config))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-metric common-lisp:nil
                       ((forecast-type :initarg :forecast-type :initform
                         common-lisp:nil :type
                         (common-lisp:or forecast-type common-lisp:null)
                         :accessor struct-shape-error-metric-forecast-type
                         :shape "ForecastType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (wape :initarg :wape :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-error-metric-wape :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rmse :initarg :rmse :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-error-metric-rmse :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mase :initarg :mase :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-error-metric-mase :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mape :initarg :mape :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-error-metric-mape :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-metric
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-metric 'make-error-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-type))
      (common-lisp:list
       (common-lisp:cons "ForecastType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wape))
      (common-lisp:list
       (common-lisp:cons "WAPE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rmse))
      (common-lisp:list
       (common-lisp:cons "RMSE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mase))
      (common-lisp:list
       (common-lisp:cons "MASE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mape))
      (common-lisp:list
       (common-lisp:cons "MAPE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype error-metrics ()
   '(trivial-types:proper-list error-metric))
 (common-lisp:defun make-error-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error-metric))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass evaluation-parameters common-lisp:nil
                       ((number-of-backtest-windows :initarg
                         :number-of-backtest-windows :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-evaluation-parameters-number-of-backtest-windows
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (back-test-window-offset :initarg
                         :back-test-window-offset :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-evaluation-parameters-back-test-window-offset
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluation-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evaluation-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluation-parameters 'make-evaluation-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-backtest-windows))
      (common-lisp:list
       (common-lisp:cons "NumberOfBacktestWindows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'back-test-window-offset))
      (common-lisp:list
       (common-lisp:cons "BackTestWindowOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluation-result common-lisp:nil
                       ((algorithm-arn :initarg :algorithm-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-evaluation-result-algorithm-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (test-windows :initarg :test-windows :initform
                         common-lisp:nil :type
                         (common-lisp:or test-windows common-lisp:null)
                         :accessor struct-shape-evaluation-result-test-windows
                         :shape "TestWindows" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluation-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evaluation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluation-result 'make-evaluation-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-arn))
      (common-lisp:list
       (common-lisp:cons "AlgorithmArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-windows))
      (common-lisp:list
       (common-lisp:cons "TestWindows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-result))
   common-lisp:nil))
(common-lisp:deftype evaluation-state () 'common-lisp:string)
(common-lisp:deftype evaluation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype explainabilities ()
   '(trivial-types:proper-list explainability-summary))
 (common-lisp:defun make-explainabilities
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list explainability-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass explainability-config common-lisp:nil
                       ((time-series-granularity :initarg
                         :time-series-granularity :initform
                         (common-lisp:error
                          ":time-series-granularity is required")
                         :type
                         (common-lisp:or time-series-granularity
                                         common-lisp:null)
                         :accessor
                         struct-shape-explainability-config-time-series-granularity
                         :shape "TimeSeriesGranularity" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (time-point-granularity :initarg
                         :time-point-granularity :initform
                         (common-lisp:error
                          ":time-point-granularity is required")
                         :type
                         (common-lisp:or time-point-granularity
                                         common-lisp:null)
                         :accessor
                         struct-shape-explainability-config-time-point-granularity
                         :shape "TimePointGranularity" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-explainability-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'explainability-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'explainability-config 'make-explainability-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          explainability-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          explainability-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-granularity))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-point-granularity))
      (common-lisp:list
       (common-lisp:cons "TimePointGranularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          explainability-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass explainability-export-summary common-lisp:nil
                       ((explainability-export-arn :initarg
                         :explainability-export-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-explainability-export-summary-explainability-export-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (explainability-export-name :initarg
                         :explainability-export-name :initform common-lisp:nil
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-explainability-export-summary-explainability-export-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or data-destination common-lisp:null)
                         :accessor
                         struct-shape-explainability-export-summary-destination
                         :shape "DataDestination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-explainability-export-summary-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-explainability-export-summary-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-explainability-export-summary-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-explainability-export-summary-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-explainability-export-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'explainability-export-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'explainability-export-summary
                    'make-explainability-export-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          explainability-export-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          explainability-export-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'explainability-export-arn))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityExportArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'explainability-export-name))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityExportName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          explainability-export-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype explainability-exports ()
   '(trivial-types:proper-list explainability-export-summary))
 (common-lisp:defun make-explainability-exports
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            explainability-export-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass explainability-info common-lisp:nil
                       ((explainability-arn :initarg :explainability-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-explainability-info-explainability-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-explainability-info-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-explainability-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'explainability-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'explainability-info 'make-explainability-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input explainability-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input explainability-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainability-arn))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input explainability-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass explainability-summary common-lisp:nil
                       ((explainability-arn :initarg :explainability-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-explainability-summary-explainability-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (explainability-name :initarg :explainability-name
                         :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-explainability-summary-explainability-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-explainability-summary-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (explainability-config :initarg :explainability-config
                         :initform common-lisp:nil :type
                         (common-lisp:or explainability-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-explainability-summary-explainability-config
                         :shape "ExplainabilityConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-explainability-summary-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-explainability-summary-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-explainability-summary-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-explainability-summary-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-explainability-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'explainability-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'explainability-summary 'make-explainability-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          explainability-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          explainability-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainability-arn))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainability-name))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'explainability-config))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          explainability-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass featurization common-lisp:nil
                       ((attribute-name :initarg :attribute-name :initform
                         (common-lisp:error ":attribute-name is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-featurization-attribute-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (featurization-pipeline :initarg
                         :featurization-pipeline :initform common-lisp:nil
                         :type
                         (common-lisp:or featurization-pipeline
                                         common-lisp:null)
                         :accessor
                         struct-shape-featurization-featurization-pipeline
                         :shape "FeaturizationPipeline" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-featurization
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'featurization
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'featurization 'make-featurization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input featurization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input featurization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'featurization-pipeline))
      (common-lisp:list
       (common-lisp:cons "FeaturizationPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input featurization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass featurization-config common-lisp:nil
                       ((forecast-frequency :initarg :forecast-frequency
                         :initform
                         (common-lisp:error ":forecast-frequency is required")
                         :type (common-lisp:or frequency common-lisp:null)
                         :accessor
                         struct-shape-featurization-config-forecast-frequency
                         :shape "Frequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forecast-dimensions :initarg :forecast-dimensions
                         :initform common-lisp:nil :type
                         (common-lisp:or forecast-dimensions common-lisp:null)
                         :accessor
                         struct-shape-featurization-config-forecast-dimensions
                         :shape "ForecastDimensions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (featurizations :initarg :featurizations :initform
                         common-lisp:nil :type
                         (common-lisp:or featurizations common-lisp:null)
                         :accessor
                         struct-shape-featurization-config-featurizations
                         :shape "Featurizations" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-featurization-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'featurization-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'featurization-config 'make-featurization-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input featurization-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input featurization-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-frequency))
      (common-lisp:list
       (common-lisp:cons "ForecastFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-dimensions))
      (common-lisp:list
       (common-lisp:cons "ForecastDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'featurizations))
      (common-lisp:list
       (common-lisp:cons "Featurizations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input featurization-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass featurization-method common-lisp:nil
                       ((featurization-method-name :initarg
                         :featurization-method-name :initform
                         (common-lisp:error
                          ":featurization-method-name is required")
                         :type
                         (common-lisp:or featurization-method-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-featurization-method-featurization-method-name
                         :shape "FeaturizationMethodName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (featurization-method-parameters :initarg
                         :featurization-method-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or featurization-method-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-featurization-method-featurization-method-parameters
                         :shape "FeaturizationMethodParameters" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-featurization-method
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'featurization-method
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'featurization-method 'make-featurization-method))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input featurization-method))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input featurization-method))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'featurization-method-name))
      (common-lisp:list
       (common-lisp:cons "FeaturizationMethodName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'featurization-method-parameters))
      (common-lisp:list
       (common-lisp:cons "FeaturizationMethodParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input featurization-method))
   common-lisp:nil))
(common-lisp:deftype featurization-method-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype featurization-method-parameters ()
   'common-lisp:hash-table)
 (common-lisp:defun make-featurization-method-parameters
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype featurization-pipeline ()
   '(trivial-types:proper-list featurization-method))
 (common-lisp:defun make-featurization-pipeline
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list featurization-method))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype featurizations ()
   '(trivial-types:proper-list featurization))
 (common-lisp:defun make-featurizations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list featurization))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype field-statistics () 'common-lisp:hash-table)
 (common-lisp:defun make-field-statistics (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-filter-key :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-filter-value :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (condition :initarg :condition :initform
                         (common-lisp:error ":condition is required") :type
                         (common-lisp:or filter-condition-string
                                         common-lisp:null)
                         :accessor struct-shape-filter-condition :shape
                         "FilterConditionString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:deftype filter-condition-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filters () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype forecast-dimensions () '(trivial-types:proper-list name))
 (common-lisp:defun make-forecast-dimensions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass forecast-export-job-summary common-lisp:nil
                       ((forecast-export-job-arn :initarg
                         :forecast-export-job-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-forecast-export-job-summary-forecast-export-job-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forecast-export-job-name :initarg
                         :forecast-export-job-name :initform common-lisp:nil
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-forecast-export-job-summary-forecast-export-job-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or data-destination common-lisp:null)
                         :accessor
                         struct-shape-forecast-export-job-summary-destination
                         :shape "DataDestination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-forecast-export-job-summary-status :shape
                         "Status" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-forecast-export-job-summary-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-forecast-export-job-summary-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-forecast-export-job-summary-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-forecast-export-job-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'forecast-export-job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'forecast-export-job-summary
                    'make-forecast-export-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          forecast-export-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          forecast-export-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forecast-export-job-arn))
      (common-lisp:list
       (common-lisp:cons "ForecastExportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forecast-export-job-name))
      (common-lisp:list
       (common-lisp:cons "ForecastExportJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          forecast-export-job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype forecast-export-jobs ()
   '(trivial-types:proper-list forecast-export-job-summary))
 (common-lisp:defun make-forecast-export-jobs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            forecast-export-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass forecast-summary common-lisp:nil
                       ((forecast-arn :initarg :forecast-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-forecast-summary-forecast-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forecast-name :initarg :forecast-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-forecast-summary-forecast-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (predictor-arn :initarg :predictor-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-forecast-summary-predictor-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-using-auto-predictor :initarg
                         :created-using-auto-predictor :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-forecast-summary-created-using-auto-predictor
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-group-arn :initarg :dataset-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-forecast-summary-dataset-group-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-forecast-summary-status :shape
                         "Status" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor struct-shape-forecast-summary-message :shape
                         "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-forecast-summary-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-forecast-summary-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-forecast-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'forecast-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'forecast-summary 'make-forecast-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input forecast-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input forecast-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-arn))
      (common-lisp:list
       (common-lisp:cons "ForecastArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-name))
      (common-lisp:list
       (common-lisp:cons "ForecastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'created-using-auto-predictor))
      (common-lisp:list
       (common-lisp:cons "CreatedUsingAutoPredictor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-group-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input forecast-summary))
   common-lisp:nil))
(common-lisp:deftype forecast-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype forecast-types ()
   '(trivial-types:proper-list forecast-type))
 (common-lisp:defun make-forecast-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list forecast-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype forecasts ()
   '(trivial-types:proper-list forecast-summary))
 (common-lisp:defun make-forecasts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list forecast-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype format () 'common-lisp:string)
(common-lisp:deftype frequency () 'common-lisp:string)
(common-lisp:deftype geolocation-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-accuracy-metrics-request common-lisp:nil
                       ((predictor-arn :initarg :predictor-arn :initform
                         (common-lisp:error ":predictor-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-accuracy-metrics-request-predictor-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-accuracy-metrics-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-accuracy-metrics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-accuracy-metrics-request
                    'make-get-accuracy-metrics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-accuracy-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-accuracy-metrics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-accuracy-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-accuracy-metrics-response common-lisp:nil
                       ((predictor-evaluation-results :initarg
                         :predictor-evaluation-results :initform
                         common-lisp:nil :type
                         (common-lisp:or predictor-evaluation-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-accuracy-metrics-response-predictor-evaluation-results
                         :shape "PredictorEvaluationResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-auto-predictor :initarg :is-auto-predictor
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-accuracy-metrics-response-is-auto-predictor
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-mloverride-strategy :initarg
                         :auto-mloverride-strategy :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-mloverride-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-accuracy-metrics-response-auto-mloverride-strategy
                         :shape "AutoMLOverrideStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (optimization-metric :initarg :optimization-metric
                         :initform common-lisp:nil :type
                         (common-lisp:or optimization-metric common-lisp:null)
                         :accessor
                         struct-shape-get-accuracy-metrics-response-optimization-metric
                         :shape "OptimizationMetric" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-accuracy-metrics-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-accuracy-metrics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-accuracy-metrics-response
                    'make-get-accuracy-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-accuracy-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-accuracy-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictor-evaluation-results))
      (common-lisp:list
       (common-lisp:cons "PredictorEvaluationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-auto-predictor))
      (common-lisp:list
       (common-lisp:cons "IsAutoPredictor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mloverride-strategy))
      (common-lisp:list
       (common-lisp:cons "AutoMLOverrideStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optimization-metric))
      (common-lisp:list
       (common-lisp:cons "OptimizationMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-accuracy-metrics-response))
   common-lisp:nil))
(common-lisp:deftype hour () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass hyper-parameter-tuning-job-config common-lisp:nil
                       ((parameter-ranges :initarg :parameter-ranges :initform
                         common-lisp:nil :type
                         (common-lisp:or parameter-ranges common-lisp:null)
                         :accessor
                         struct-shape-hyper-parameter-tuning-job-config-parameter-ranges
                         :shape "ParameterRanges" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hyper-parameter-tuning-job-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'hyper-parameter-tuning-job-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'hyper-parameter-tuning-job-config
                    'make-hyper-parameter-tuning-job-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-ranges))
      (common-lisp:list
       (common-lisp:cons "ParameterRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-config))
   common-lisp:nil))
(common-lisp:deftype import-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-data-config common-lisp:nil
                       ((dataset-group-arn :initarg :dataset-group-arn
                         :initform
                         (common-lisp:error ":dataset-group-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-input-data-config-dataset-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (supplementary-features :initarg
                         :supplementary-features :initform common-lisp:nil
                         :type
                         (common-lisp:or supplementary-features
                                         common-lisp:null)
                         :accessor
                         struct-shape-input-data-config-supplementary-features
                         :shape "SupplementaryFeatures" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-data-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-data-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-data-config 'make-input-data-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-group-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supplementary-features))
      (common-lisp:list
       (common-lisp:cons "SupplementaryFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-data-config))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass integer-parameter-range common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-integer-parameter-range-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-value :initarg :max-value :initform
                         (common-lisp:error ":max-value is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-integer-parameter-range-max-value :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (min-value :initarg :min-value :initform
                         (common-lisp:error ":min-value is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-integer-parameter-range-min-value :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scaling-type :initarg :scaling-type :initform
                         common-lisp:nil :type
                         (common-lisp:or scaling-type common-lisp:null)
                         :accessor
                         struct-shape-integer-parameter-range-scaling-type
                         :shape "ScalingType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-integer-parameter-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'integer-parameter-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'integer-parameter-range 'make-integer-parameter-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          integer-parameter-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          integer-parameter-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-value))
      (common-lisp:list
       (common-lisp:cons "MaxValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-value))
      (common-lisp:list
       (common-lisp:cons "MinValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-type))
      (common-lisp:list
       (common-lisp:cons "ScalingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          integer-parameter-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype integer-parameter-ranges ()
   '(trivial-types:proper-list integer-parameter-range))
 (common-lisp:defun make-integer-parameter-ranges
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer-parameter-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (forecast-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (forecast-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:deftype kmskey-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (forecast-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-dataset-groups-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-dataset-groups-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-groups-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dataset-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-dataset-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dataset-groups-request
                    'make-list-dataset-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dataset-groups-response common-lisp:nil
                       ((dataset-groups :initarg :dataset-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-groups common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-groups-response-dataset-groups
                         :shape "DatasetGroups" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-dataset-groups-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dataset-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-dataset-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dataset-groups-response
                    'make-list-dataset-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-groups))
      (common-lisp:list
       (common-lisp:cons "DatasetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dataset-import-jobs-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-dataset-import-jobs-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-import-jobs-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-import-jobs-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dataset-import-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-dataset-import-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dataset-import-jobs-request
                    'make-list-dataset-import-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-import-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-import-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dataset-import-jobs-response common-lisp:nil
                       ((dataset-import-jobs :initarg :dataset-import-jobs
                         :initform common-lisp:nil :type
                         (common-lisp:or dataset-import-jobs common-lisp:null)
                         :accessor
                         struct-shape-list-dataset-import-jobs-response-dataset-import-jobs
                         :shape "DatasetImportJobs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-dataset-import-jobs-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dataset-import-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-dataset-import-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dataset-import-jobs-response
                    'make-list-dataset-import-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-import-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-import-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-import-jobs))
      (common-lisp:list
       (common-lisp:cons "DatasetImportJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataset-import-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-datasets-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-datasets-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-datasets-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-datasets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-datasets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-datasets-request 'make-list-datasets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-datasets-response common-lisp:nil
                       ((datasets :initarg :datasets :initform common-lisp:nil
                         :type (common-lisp:or datasets common-lisp:null)
                         :accessor struct-shape-list-datasets-response-datasets
                         :shape "Datasets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-datasets-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-datasets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-datasets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-datasets-response 'make-list-datasets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datasets))
      (common-lisp:list
       (common-lisp:cons "Datasets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-explainabilities-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-explainabilities-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-explainabilities-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-list-explainabilities-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-explainabilities-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-explainabilities-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-explainabilities-request
                    'make-list-explainabilities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-explainabilities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-explainabilities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-explainabilities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-explainabilities-response common-lisp:nil
                       ((explainabilities :initarg :explainabilities :initform
                         common-lisp:nil :type
                         (common-lisp:or explainabilities common-lisp:null)
                         :accessor
                         struct-shape-list-explainabilities-response-explainabilities
                         :shape "Explainabilities" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-explainabilities-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-explainabilities-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-explainabilities-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-explainabilities-response
                    'make-list-explainabilities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-explainabilities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-explainabilities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainabilities))
      (common-lisp:list
       (common-lisp:cons "Explainabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-explainabilities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-explainability-exports-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-explainability-exports-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-explainability-exports-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-list-explainability-exports-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-explainability-exports-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-explainability-exports-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-explainability-exports-request
                    'make-list-explainability-exports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-explainability-exports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-explainability-exports-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-explainability-exports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-explainability-exports-response common-lisp:nil
                       ((explainability-exports :initarg
                         :explainability-exports :initform common-lisp:nil
                         :type
                         (common-lisp:or explainability-exports
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-explainability-exports-response-explainability-exports
                         :shape "ExplainabilityExports" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-explainability-exports-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-explainability-exports-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-explainability-exports-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-explainability-exports-response
                    'make-list-explainability-exports-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-explainability-exports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-explainability-exports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'explainability-exports))
      (common-lisp:list
       (common-lisp:cons "ExplainabilityExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-explainability-exports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-forecast-export-jobs-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-forecast-export-jobs-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-forecast-export-jobs-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-list-forecast-export-jobs-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-forecast-export-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-forecast-export-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-forecast-export-jobs-request
                    'make-list-forecast-export-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-forecast-export-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-forecast-export-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-forecast-export-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-forecast-export-jobs-response common-lisp:nil
                       ((forecast-export-jobs :initarg :forecast-export-jobs
                         :initform common-lisp:nil :type
                         (common-lisp:or forecast-export-jobs common-lisp:null)
                         :accessor
                         struct-shape-list-forecast-export-jobs-response-forecast-export-jobs
                         :shape "ForecastExportJobs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-forecast-export-jobs-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-forecast-export-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-forecast-export-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-forecast-export-jobs-response
                    'make-list-forecast-export-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-forecast-export-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-forecast-export-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forecast-export-jobs))
      (common-lisp:list
       (common-lisp:cons "ForecastExportJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-forecast-export-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-forecasts-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-forecasts-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-forecasts-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor struct-shape-list-forecasts-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-forecasts-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-forecasts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-forecasts-request 'make-list-forecasts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-forecasts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-forecasts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-forecasts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-forecasts-response common-lisp:nil
                       ((forecasts :initarg :forecasts :initform
                         common-lisp:nil :type
                         (common-lisp:or forecasts common-lisp:null) :accessor
                         struct-shape-list-forecasts-response-forecasts :shape
                         "Forecasts" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-forecasts-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-forecasts-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-forecasts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-forecasts-response 'make-list-forecasts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-forecasts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-forecasts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecasts))
      (common-lisp:list
       (common-lisp:cons "Forecasts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-forecasts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-monitor-evaluations-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-monitor-evaluations-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-monitor-evaluations-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitor-arn :initarg :monitor-arn :initform
                         (common-lisp:error ":monitor-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-monitor-evaluations-request-monitor-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-list-monitor-evaluations-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-monitor-evaluations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-monitor-evaluations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-monitor-evaluations-request
                    'make-list-monitor-evaluations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-monitor-evaluations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-monitor-evaluations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-monitor-evaluations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-monitor-evaluations-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-monitor-evaluations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (predictor-monitor-evaluations :initarg
                         :predictor-monitor-evaluations :initform
                         common-lisp:nil :type
                         (common-lisp:or predictor-monitor-evaluations
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-monitor-evaluations-response-predictor-monitor-evaluations
                         :shape "PredictorMonitorEvaluations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-monitor-evaluations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-monitor-evaluations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-monitor-evaluations-response
                    'make-list-monitor-evaluations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-monitor-evaluations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-monitor-evaluations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictor-monitor-evaluations))
      (common-lisp:list
       (common-lisp:cons "PredictorMonitorEvaluations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-monitor-evaluations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-monitors-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-monitors-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-monitors-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor struct-shape-list-monitors-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-monitors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-monitors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-monitors-request 'make-list-monitors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-monitors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-monitors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-monitors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-monitors-response common-lisp:nil
                       ((monitors :initarg :monitors :initform common-lisp:nil
                         :type (common-lisp:or monitors common-lisp:null)
                         :accessor struct-shape-list-monitors-response-monitors
                         :shape "Monitors" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-monitors-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-monitors-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-monitors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-monitors-response 'make-list-monitors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-monitors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-monitors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitors))
      (common-lisp:list
       (common-lisp:cons "Monitors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-monitors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-predictor-backtest-export-jobs-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-predictor-backtest-export-jobs-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-predictor-backtest-export-jobs-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-list-predictor-backtest-export-jobs-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-predictor-backtest-export-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-predictor-backtest-export-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-predictor-backtest-export-jobs-request
                    'make-list-predictor-backtest-export-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-predictor-backtest-export-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-predictor-backtest-export-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-predictor-backtest-export-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-predictor-backtest-export-jobs-response
                       common-lisp:nil
                       ((predictor-backtest-export-jobs :initarg
                         :predictor-backtest-export-jobs :initform
                         common-lisp:nil :type
                         (common-lisp:or predictor-backtest-export-jobs
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-predictor-backtest-export-jobs-response-predictor-backtest-export-jobs
                         :shape "PredictorBacktestExportJobs" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-predictor-backtest-export-jobs-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-predictor-backtest-export-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-predictor-backtest-export-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-predictor-backtest-export-jobs-response
                    'make-list-predictor-backtest-export-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-predictor-backtest-export-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-predictor-backtest-export-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictor-backtest-export-jobs))
      (common-lisp:list
       (common-lisp:cons "PredictorBacktestExportJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-predictor-backtest-export-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-predictors-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-predictors-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-predictors-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor struct-shape-list-predictors-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-predictors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-predictors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-predictors-request 'make-list-predictors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-predictors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-predictors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-predictors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-predictors-response common-lisp:nil
                       ((predictors :initarg :predictors :initform
                         common-lisp:nil :type
                         (common-lisp:or predictors common-lisp:null) :accessor
                         struct-shape-list-predictors-response-predictors
                         :shape "Predictors" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-predictors-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-predictors-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-predictors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-predictors-response 'make-list-predictors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-predictors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-predictors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictors))
      (common-lisp:list
       (common-lisp:cons "Predictors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-predictors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-what-if-analyses-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-what-if-analyses-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-what-if-analyses-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-list-what-if-analyses-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-what-if-analyses-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-what-if-analyses-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-what-if-analyses-request
                    'make-list-what-if-analyses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-analyses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-analyses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-analyses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-what-if-analyses-response common-lisp:nil
                       ((what-if-analyses :initarg :what-if-analyses :initform
                         common-lisp:nil :type
                         (common-lisp:or what-if-analyses common-lisp:null)
                         :accessor
                         struct-shape-list-what-if-analyses-response-what-if-analyses
                         :shape "WhatIfAnalyses" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-what-if-analyses-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-what-if-analyses-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-what-if-analyses-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-what-if-analyses-response
                    'make-list-what-if-analyses-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-analyses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-analyses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'what-if-analyses))
      (common-lisp:list
       (common-lisp:cons "WhatIfAnalyses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-analyses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-what-if-forecast-exports-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-what-if-forecast-exports-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-what-if-forecast-exports-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-list-what-if-forecast-exports-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-what-if-forecast-exports-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-what-if-forecast-exports-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-what-if-forecast-exports-request
                    'make-list-what-if-forecast-exports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-forecast-exports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-forecast-exports-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-forecast-exports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-what-if-forecast-exports-response common-lisp:nil
                       ((what-if-forecast-exports :initarg
                         :what-if-forecast-exports :initform common-lisp:nil
                         :type
                         (common-lisp:or what-if-forecast-exports
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-what-if-forecast-exports-response-what-if-forecast-exports
                         :shape "WhatIfForecastExports" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-what-if-forecast-exports-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-what-if-forecast-exports-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-what-if-forecast-exports-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-what-if-forecast-exports-response
                    'make-list-what-if-forecast-exports-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-forecast-exports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-forecast-exports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-exports))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-forecast-exports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-what-if-forecasts-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-what-if-forecasts-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-what-if-forecasts-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-list-what-if-forecasts-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-what-if-forecasts-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-what-if-forecasts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-what-if-forecasts-request
                    'make-list-what-if-forecasts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-forecasts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-forecasts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-forecasts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-what-if-forecasts-response common-lisp:nil
                       ((what-if-forecasts :initarg :what-if-forecasts
                         :initform common-lisp:nil :type
                         (common-lisp:or what-if-forecasts common-lisp:null)
                         :accessor
                         struct-shape-list-what-if-forecasts-response-what-if-forecasts
                         :shape "WhatIfForecasts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-what-if-forecasts-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-what-if-forecasts-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-what-if-forecasts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-what-if-forecasts-response
                    'make-list-what-if-forecasts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-forecasts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-forecasts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'what-if-forecasts))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecasts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-what-if-forecasts-response))
   common-lisp:nil))
(common-lisp:deftype local-date-time () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype long-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype long-arn-list () '(trivial-types:proper-list long-arn))
 (common-lisp:defun make-long-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list long-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metric-result common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor struct-shape-metric-result-metric-name
                         :shape "MetricName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-value :initarg :metric-value :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-metric-result-metric-value :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'metric-result 'make-metric-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-value))
      (common-lisp:list
       (common-lisp:cons "MetricValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-results ()
   '(trivial-types:proper-list metric-result))
 (common-lisp:defun make-metric-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass metrics common-lisp:nil
                       ((rmse :initarg :rmse :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-metrics-rmse :shape "Double" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (weighted-quantile-losses :initarg
                         :weighted-quantile-losses :initform common-lisp:nil
                         :type
                         (common-lisp:or weighted-quantile-losses
                                         common-lisp:null)
                         :accessor
                         struct-shape-metrics-weighted-quantile-losses :shape
                         "WeightedQuantileLosses" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-metrics :initarg :error-metrics :initform
                         common-lisp:nil :type
                         (common-lisp:or error-metrics common-lisp:null)
                         :accessor struct-shape-metrics-error-metrics :shape
                         "ErrorMetrics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (average-weighted-quantile-loss :initarg
                         :average-weighted-quantile-loss :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-metrics-average-weighted-quantile-loss
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'metrics 'make-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rmse))
      (common-lisp:list
       (common-lisp:cons "RMSE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weighted-quantile-losses))
      (common-lisp:list
       (common-lisp:cons "WeightedQuantileLosses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-metrics))
      (common-lisp:list
       (common-lisp:cons "ErrorMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'average-weighted-quantile-loss))
      (common-lisp:list
       (common-lisp:cons "AverageWeightedQuantileLoss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass monitor-config common-lisp:nil
                       ((monitor-name :initarg :monitor-name :initform
                         (common-lisp:error ":monitor-name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-monitor-config-monitor-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-monitor-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'monitor-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'monitor-config 'make-monitor-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monitor-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monitor-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-name))
      (common-lisp:list
       (common-lisp:cons "MonitorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monitor-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass monitor-data-source common-lisp:nil
                       ((dataset-import-job-arn :initarg
                         :dataset-import-job-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-monitor-data-source-dataset-import-job-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forecast-arn :initarg :forecast-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-monitor-data-source-forecast-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (predictor-arn :initarg :predictor-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-monitor-data-source-predictor-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-monitor-data-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'monitor-data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'monitor-data-source 'make-monitor-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monitor-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monitor-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataset-import-job-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetImportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-arn))
      (common-lisp:list
       (common-lisp:cons "ForecastArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monitor-data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass monitor-info common-lisp:nil
                       ((monitor-arn :initarg :monitor-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-monitor-info-monitor-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-monitor-info-status :shape
                         "Status" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-monitor-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'monitor-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'monitor-info 'make-monitor-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monitor-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monitor-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monitor-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass monitor-summary common-lisp:nil
                       ((monitor-arn :initarg :monitor-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-monitor-summary-monitor-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (monitor-name :initarg :monitor-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-monitor-summary-monitor-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-monitor-summary-resource-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-monitor-summary-status :shape
                         "Status" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-monitor-summary-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-monitor-summary-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-monitor-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'monitor-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'monitor-summary 'make-monitor-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monitor-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monitor-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-name))
      (common-lisp:list
       (common-lisp:cons "MonitorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monitor-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype monitors () '(trivial-types:proper-list monitor-summary))
 (common-lisp:defun make-monitors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list monitor-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype month () 'common-lisp:string)
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype operation () 'common-lisp:string)
(common-lisp:deftype optimization-metric () 'common-lisp:string)
(common-lisp:deftype parameter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass parameter-ranges common-lisp:nil
                       ((categorical-parameter-ranges :initarg
                         :categorical-parameter-ranges :initform
                         common-lisp:nil :type
                         (common-lisp:or categorical-parameter-ranges
                                         common-lisp:null)
                         :accessor
                         struct-shape-parameter-ranges-categorical-parameter-ranges
                         :shape "CategoricalParameterRanges" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (continuous-parameter-ranges :initarg
                         :continuous-parameter-ranges :initform common-lisp:nil
                         :type
                         (common-lisp:or continuous-parameter-ranges
                                         common-lisp:null)
                         :accessor
                         struct-shape-parameter-ranges-continuous-parameter-ranges
                         :shape "ContinuousParameterRanges" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (integer-parameter-ranges :initarg
                         :integer-parameter-ranges :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-parameter-ranges
                                         common-lisp:null)
                         :accessor
                         struct-shape-parameter-ranges-integer-parameter-ranges
                         :shape "IntegerParameterRanges" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-parameter-ranges
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-ranges
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'parameter-ranges 'make-parameter-ranges))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-ranges))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-ranges))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'categorical-parameter-ranges))
      (common-lisp:list
       (common-lisp:cons "CategoricalParameterRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continuous-parameter-ranges))
      (common-lisp:list
       (common-lisp:cons "ContinuousParameterRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integer-parameter-ranges))
      (common-lisp:list
       (common-lisp:cons "IntegerParameterRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-ranges))
   common-lisp:nil))
(common-lisp:deftype parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass predictor-backtest-export-job-summary common-lisp:nil
                       ((predictor-backtest-export-job-arn :initarg
                         :predictor-backtest-export-job-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-predictor-backtest-export-job-summary-predictor-backtest-export-job-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (predictor-backtest-export-job-name :initarg
                         :predictor-backtest-export-job-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-predictor-backtest-export-job-summary-predictor-backtest-export-job-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or data-destination common-lisp:null)
                         :accessor
                         struct-shape-predictor-backtest-export-job-summary-destination
                         :shape "DataDestination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-predictor-backtest-export-job-summary-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-predictor-backtest-export-job-summary-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-predictor-backtest-export-job-summary-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-predictor-backtest-export-job-summary-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-predictor-backtest-export-job-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'predictor-backtest-export-job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'predictor-backtest-export-job-summary
                    'make-predictor-backtest-export-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictor-backtest-export-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictor-backtest-export-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictor-backtest-export-job-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorBacktestExportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictor-backtest-export-job-name))
      (common-lisp:list
       (common-lisp:cons "PredictorBacktestExportJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictor-backtest-export-job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype predictor-backtest-export-jobs ()
   '(trivial-types:proper-list predictor-backtest-export-job-summary))
 (common-lisp:defun make-predictor-backtest-export-jobs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            predictor-backtest-export-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass predictor-baseline common-lisp:nil
                       ((baseline-metrics :initarg :baseline-metrics :initform
                         common-lisp:nil :type
                         (common-lisp:or baseline-metrics common-lisp:null)
                         :accessor
                         struct-shape-predictor-baseline-baseline-metrics
                         :shape "BaselineMetrics" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-predictor-baseline
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'predictor-baseline
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'predictor-baseline 'make-predictor-baseline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predictor-baseline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predictor-baseline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-metrics))
      (common-lisp:list
       (common-lisp:cons "BaselineMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predictor-baseline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype predictor-evaluation-results ()
   '(trivial-types:proper-list evaluation-result))
 (common-lisp:defun make-predictor-evaluation-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluation-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass predictor-event common-lisp:nil
                       ((detail :initarg :detail :initform common-lisp:nil
                         :type (common-lisp:or detail common-lisp:null)
                         :accessor struct-shape-predictor-event-detail :shape
                         "Detail" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (datetime :initarg :datetime :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-predictor-event-datetime :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-predictor-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'predictor-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'predictor-event 'make-predictor-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predictor-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predictor-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail))
      (common-lisp:list
       (common-lisp:cons "Detail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datetime))
      (common-lisp:list
       (common-lisp:cons "Datetime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predictor-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass predictor-execution common-lisp:nil
                       ((algorithm-arn :initarg :algorithm-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-predictor-execution-algorithm-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (test-windows :initarg :test-windows :initform
                         common-lisp:nil :type
                         (common-lisp:or test-window-details common-lisp:null)
                         :accessor
                         struct-shape-predictor-execution-test-windows :shape
                         "TestWindowDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-predictor-execution
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'predictor-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'predictor-execution 'make-predictor-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predictor-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predictor-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-arn))
      (common-lisp:list
       (common-lisp:cons "AlgorithmArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-windows))
      (common-lisp:list
       (common-lisp:cons "TestWindows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predictor-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass predictor-execution-details common-lisp:nil
                       ((predictor-executions :initarg :predictor-executions
                         :initform common-lisp:nil :type
                         (common-lisp:or predictor-executions common-lisp:null)
                         :accessor
                         struct-shape-predictor-execution-details-predictor-executions
                         :shape "PredictorExecutions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-predictor-execution-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'predictor-execution-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'predictor-execution-details
                    'make-predictor-execution-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictor-execution-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictor-execution-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictor-executions))
      (common-lisp:list
       (common-lisp:cons "PredictorExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictor-execution-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype predictor-executions ()
   '(trivial-types:proper-list predictor-execution))
 (common-lisp:defun make-predictor-executions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list predictor-execution))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass predictor-monitor-evaluation common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-predictor-monitor-evaluation-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (monitor-arn :initarg :monitor-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-predictor-monitor-evaluation-monitor-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (evaluation-time :initarg :evaluation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-predictor-monitor-evaluation-evaluation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-state :initarg :evaluation-state :initform
                         common-lisp:nil :type
                         (common-lisp:or evaluation-state common-lisp:null)
                         :accessor
                         struct-shape-predictor-monitor-evaluation-evaluation-state
                         :shape "EvaluationState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (window-start-datetime :initarg :window-start-datetime
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-predictor-monitor-evaluation-window-start-datetime
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (window-end-datetime :initarg :window-end-datetime
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-predictor-monitor-evaluation-window-end-datetime
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (predictor-event :initarg :predictor-event :initform
                         common-lisp:nil :type
                         (common-lisp:or predictor-event common-lisp:null)
                         :accessor
                         struct-shape-predictor-monitor-evaluation-predictor-event
                         :shape "PredictorEvent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitor-data-source :initarg :monitor-data-source
                         :initform common-lisp:nil :type
                         (common-lisp:or monitor-data-source common-lisp:null)
                         :accessor
                         struct-shape-predictor-monitor-evaluation-monitor-data-source
                         :shape "MonitorDataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-results :initarg :metric-results :initform
                         common-lisp:nil :type
                         (common-lisp:or metric-results common-lisp:null)
                         :accessor
                         struct-shape-predictor-monitor-evaluation-metric-results
                         :shape "MetricResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-items-evaluated :initarg :num-items-evaluated
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-predictor-monitor-evaluation-num-items-evaluated
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor
                         struct-shape-predictor-monitor-evaluation-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-predictor-monitor-evaluation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'predictor-monitor-evaluation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'predictor-monitor-evaluation
                    'make-predictor-monitor-evaluation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictor-monitor-evaluation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictor-monitor-evaluation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-time))
      (common-lisp:list
       (common-lisp:cons "EvaluationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-state))
      (common-lisp:list
       (common-lisp:cons "EvaluationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'window-start-datetime))
      (common-lisp:list
       (common-lisp:cons "WindowStartDatetime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-end-datetime))
      (common-lisp:list
       (common-lisp:cons "WindowEndDatetime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-event))
      (common-lisp:list
       (common-lisp:cons "PredictorEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-data-source))
      (common-lisp:list
       (common-lisp:cons "MonitorDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-results))
      (common-lisp:list
       (common-lisp:cons "MetricResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-items-evaluated))
      (common-lisp:list
       (common-lisp:cons "NumItemsEvaluated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictor-monitor-evaluation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype predictor-monitor-evaluations ()
   '(trivial-types:proper-list predictor-monitor-evaluation))
 (common-lisp:defun make-predictor-monitor-evaluations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            predictor-monitor-evaluation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass predictor-summary common-lisp:nil
                       ((predictor-arn :initarg :predictor-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-predictor-summary-predictor-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (predictor-name :initarg :predictor-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-predictor-summary-predictor-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-group-arn :initarg :dataset-group-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-predictor-summary-dataset-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-auto-predictor :initarg :is-auto-predictor
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-predictor-summary-is-auto-predictor
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reference-predictor-summary :initarg
                         :reference-predictor-summary :initform common-lisp:nil
                         :type
                         (common-lisp:or reference-predictor-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-predictor-summary-reference-predictor-summary
                         :shape "ReferencePredictorSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-predictor-summary-status :shape
                         "Status" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor struct-shape-predictor-summary-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-predictor-summary-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-predictor-summary-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-predictor-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'predictor-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'predictor-summary 'make-predictor-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predictor-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predictor-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-arn))
      (common-lisp:list
       (common-lisp:cons "PredictorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predictor-name))
      (common-lisp:list
       (common-lisp:cons "PredictorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-group-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-auto-predictor))
      (common-lisp:list
       (common-lisp:cons "IsAutoPredictor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-predictor-summary))
      (common-lisp:list
       (common-lisp:cons "ReferencePredictorSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predictor-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype predictors ()
   '(trivial-types:proper-list predictor-summary))
 (common-lisp:defun make-predictors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list predictor-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reference-predictor-summary common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-reference-predictor-summary-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or state common-lisp:null) :accessor
                         struct-shape-reference-predictor-summary-state :shape
                         "State" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reference-predictor-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reference-predictor-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reference-predictor-summary
                    'make-reference-predictor-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reference-predictor-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reference-predictor-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reference-predictor-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (forecast-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (forecast-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (forecast-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass resume-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-resume-resource-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resume-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resume-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resume-resource-request 'make-resume-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3config common-lisp:nil
                       ((path :initarg :path :initform
                         (common-lisp:error ":path is required") :type
                         (common-lisp:or s3path common-lisp:null) :accessor
                         struct-shape-s3config-path :shape "S3Path" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-s3config-role-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kmskey-arn :initarg :kmskey-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kmskey-arn common-lisp:null) :accessor
                         struct-shape-s3config-kmskey-arn :shape "KMSKeyArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3config 'make-s3config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-arn))
      (common-lisp:list
       (common-lisp:cons "KMSKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3config))
   common-lisp:nil))
(common-lisp:deftype s3path () 'common-lisp:string)
(common-lisp:deftype scaling-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass schema common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-attributes common-lisp:null)
                         :accessor struct-shape-schema-attributes :shape
                         "SchemaAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'schema 'make-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schema-attribute common-lisp:nil
                       ((attribute-name :initarg :attribute-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-schema-attribute-attribute-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attribute-type :initarg :attribute-type :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-type common-lisp:null)
                         :accessor struct-shape-schema-attribute-attribute-type
                         :shape "AttributeType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schema-attribute 'make-schema-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-type))
      (common-lisp:list
       (common-lisp:cons "AttributeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schema-attributes ()
   '(trivial-types:proper-list schema-attribute))
 (common-lisp:defun make-schema-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass statistics common-lisp:nil
                       ((count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-statistics-count :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (count-distinct :initarg :count-distinct :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-statistics-count-distinct :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (count-null :initarg :count-null :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-statistics-count-null :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (count-nan :initarg :count-nan :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-statistics-count-nan :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (min :initarg :min :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-statistics-min :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max :initarg :max :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-statistics-max :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (avg :initarg :avg :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-statistics-avg :shape "Double" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stddev :initarg :stddev :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor struct-shape-statistics-stddev :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (count-long :initarg :count-long :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-statistics-count-long :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (count-distinct-long :initarg :count-distinct-long
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-statistics-count-distinct-long :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (count-null-long :initarg :count-null-long :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-statistics-count-null-long :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (count-nan-long :initarg :count-nan-long :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-statistics-count-nan-long :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'statistics 'make-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count-distinct))
      (common-lisp:list
       (common-lisp:cons "CountDistinct"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count-null))
      (common-lisp:list
       (common-lisp:cons "CountNull"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count-nan))
      (common-lisp:list
       (common-lisp:cons "CountNan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avg))
      (common-lisp:list
       (common-lisp:cons "Avg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stddev))
      (common-lisp:list
       (common-lisp:cons "Stddev"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count-long))
      (common-lisp:list
       (common-lisp:cons "CountLong"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count-distinct-long))
      (common-lisp:list
       (common-lisp:cons "CountDistinctLong"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count-null-long))
      (common-lisp:list
       (common-lisp:cons "CountNullLong"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count-nan-long))
      (common-lisp:list
       (common-lisp:cons "CountNanLong"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input statistics))
   common-lisp:nil))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-stop-resource-request-resource-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-resource-request 'make-stop-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-resource-request))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass supplementary-feature common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-supplementary-feature-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or value common-lisp:null) :accessor
                         struct-shape-supplementary-feature-value :shape
                         "Value" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-supplementary-feature
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'supplementary-feature
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'supplementary-feature 'make-supplementary-feature))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          supplementary-feature))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          supplementary-feature))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          supplementary-feature))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype supplementary-features ()
   '(trivial-types:proper-list supplementary-feature))
 (common-lisp:defun make-supplementary-features
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list supplementary-feature))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tags
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype test-window-details ()
   '(trivial-types:proper-list test-window-summary))
 (common-lisp:defun make-test-window-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list test-window-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass test-window-summary common-lisp:nil
                       ((test-window-start :initarg :test-window-start
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-test-window-summary-test-window-start
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-window-end :initarg :test-window-end :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-test-window-summary-test-window-end
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-test-window-summary-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor struct-shape-test-window-summary-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-window-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-window-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-window-summary 'make-test-window-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-window-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-window-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-window-start))
      (common-lisp:list
       (common-lisp:cons "TestWindowStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-window-end))
      (common-lisp:list
       (common-lisp:cons "TestWindowEnd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-window-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype test-windows ()
   '(trivial-types:proper-list window-summary))
 (common-lisp:defun make-test-windows
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list window-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass time-alignment-boundary common-lisp:nil
                       ((month :initarg :month :initform common-lisp:nil :type
                         (common-lisp:or month common-lisp:null) :accessor
                         struct-shape-time-alignment-boundary-month :shape
                         "Month" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (day-of-month :initarg :day-of-month :initform
                         common-lisp:nil :type
                         (common-lisp:or day-of-month common-lisp:null)
                         :accessor
                         struct-shape-time-alignment-boundary-day-of-month
                         :shape "DayOfMonth" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (day-of-week :initarg :day-of-week :initform
                         common-lisp:nil :type
                         (common-lisp:or day-of-week common-lisp:null)
                         :accessor
                         struct-shape-time-alignment-boundary-day-of-week
                         :shape "DayOfWeek" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hour :initarg :hour :initform common-lisp:nil :type
                         (common-lisp:or hour common-lisp:null) :accessor
                         struct-shape-time-alignment-boundary-hour :shape
                         "Hour" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-time-alignment-boundary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'time-alignment-boundary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'time-alignment-boundary 'make-time-alignment-boundary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-alignment-boundary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-alignment-boundary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'month))
      (common-lisp:list
       (common-lisp:cons "Month"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-month))
      (common-lisp:list
       (common-lisp:cons "DayOfMonth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'day-of-week))
      (common-lisp:list
       (common-lisp:cons "DayOfWeek"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hour))
      (common-lisp:list
       (common-lisp:cons "Hour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-alignment-boundary))
   common-lisp:nil))
(common-lisp:deftype time-point-granularity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass time-series-condition common-lisp:nil
                       ((attribute-name :initarg :attribute-name :initform
                         (common-lisp:error ":attribute-name is required")
                         :type (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-time-series-condition-attribute-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attribute-value :initarg :attribute-value :initform
                         (common-lisp:error ":attribute-value is required")
                         :type
                         (common-lisp:or attribute-value common-lisp:null)
                         :accessor
                         struct-shape-time-series-condition-attribute-value
                         :shape "AttributeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (condition :initarg :condition :initform
                         (common-lisp:error ":condition is required") :type
                         (common-lisp:or condition common-lisp:null) :accessor
                         struct-shape-time-series-condition-condition :shape
                         "Condition" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-time-series-condition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'time-series-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'time-series-condition 'make-time-series-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-series-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-series-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-value))
      (common-lisp:list
       (common-lisp:cons "AttributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-series-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype time-series-conditions ()
   '(trivial-types:proper-list time-series-condition))
 (common-lisp:defun make-time-series-conditions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list time-series-condition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype time-series-granularity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass time-series-identifiers common-lisp:nil
                       ((data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-time-series-identifiers-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type (common-lisp:or schema common-lisp:null)
                         :accessor struct-shape-time-series-identifiers-schema
                         :shape "Schema" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform common-lisp:nil
                         :type (common-lisp:or format common-lisp:null)
                         :accessor struct-shape-time-series-identifiers-format
                         :shape "Format" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-time-series-identifiers
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'time-series-identifiers
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'time-series-identifiers 'make-time-series-identifiers))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-series-identifiers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-series-identifiers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-series-identifiers))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass time-series-replacements-data-source common-lisp:nil
                       ((s3config :initarg :s3config :initform
                         (common-lisp:error ":s3config is required") :type
                         (common-lisp:or s3config common-lisp:null) :accessor
                         struct-shape-time-series-replacements-data-source-s3config
                         :shape "S3Config" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema :initarg :schema :initform
                         (common-lisp:error ":schema is required") :type
                         (common-lisp:or schema common-lisp:null) :accessor
                         struct-shape-time-series-replacements-data-source-schema
                         :shape "Schema" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform common-lisp:nil
                         :type (common-lisp:or format common-lisp:null)
                         :accessor
                         struct-shape-time-series-replacements-data-source-format
                         :shape "Format" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp-format :initarg :timestamp-format :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-format common-lisp:null)
                         :accessor
                         struct-shape-time-series-replacements-data-source-timestamp-format
                         :shape "TimestampFormat" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-time-series-replacements-data-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'time-series-replacements-data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'time-series-replacements-data-source
                    'make-time-series-replacements-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-series-replacements-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-series-replacements-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3config))
      (common-lisp:list
       (common-lisp:cons "S3Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-format))
      (common-lisp:list
       (common-lisp:cons "TimestampFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-series-replacements-data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass time-series-selector common-lisp:nil
                       ((time-series-identifiers :initarg
                         :time-series-identifiers :initform common-lisp:nil
                         :type
                         (common-lisp:or time-series-identifiers
                                         common-lisp:null)
                         :accessor
                         struct-shape-time-series-selector-time-series-identifiers
                         :shape "TimeSeriesIdentifiers" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-time-series-selector
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'time-series-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'time-series-selector 'make-time-series-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-series-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-series-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-identifiers))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-series-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass time-series-transformation common-lisp:nil
                       ((action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or action common-lisp:null)
                         :accessor
                         struct-shape-time-series-transformation-action :shape
                         "Action" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (time-series-conditions :initarg
                         :time-series-conditions :initform common-lisp:nil
                         :type
                         (common-lisp:or time-series-conditions
                                         common-lisp:null)
                         :accessor
                         struct-shape-time-series-transformation-time-series-conditions
                         :shape "TimeSeriesConditions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-time-series-transformation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'time-series-transformation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'time-series-transformation
                    'make-time-series-transformation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-series-transformation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-series-transformation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-conditions))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-series-transformation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype time-series-transformations ()
   '(trivial-types:proper-list time-series-transformation))
 (common-lisp:defun make-time-series-transformations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            time-series-transformation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype time-zone () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype timestamp-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype training-parameters () 'common-lisp:hash-table)
 (common-lisp:defun make-training-parameters
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype transformations () 'common-lisp:hash-table)
 (common-lisp:defun make-transformations (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         struct-shape-untag-resource-request-tag-keys :shape
                         "TagKeys" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dataset-group-request common-lisp:nil
                       ((dataset-group-arn :initarg :dataset-group-arn
                         :initform
                         (common-lisp:error ":dataset-group-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-dataset-group-request-dataset-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-arns :initarg :dataset-arns :initform
                         (common-lisp:error ":dataset-arns is required") :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         struct-shape-update-dataset-group-request-dataset-arns
                         :shape "ArnList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-dataset-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-dataset-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-dataset-group-request
                    'make-update-dataset-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-group-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arns))
      (common-lisp:list
       (common-lisp:cons "DatasetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dataset-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-dataset-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-dataset-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-dataset-group-response
                    'make-update-dataset-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-group-response))
   common-lisp:nil))
(common-lisp:deftype use-geolocation-for-time-zone () 'common-lisp:boolean)
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype values () '(trivial-types:proper-list value))
 (common-lisp:defun make-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass weighted-quantile-loss common-lisp:nil
                       ((quantile :initarg :quantile :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor struct-shape-weighted-quantile-loss-quantile
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (loss-value :initarg :loss-value :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-weighted-quantile-loss-loss-value :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-weighted-quantile-loss
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'weighted-quantile-loss
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'weighted-quantile-loss 'make-weighted-quantile-loss))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          weighted-quantile-loss))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          weighted-quantile-loss))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantile))
      (common-lisp:list
       (common-lisp:cons "Quantile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loss-value))
      (common-lisp:list
       (common-lisp:cons "LossValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          weighted-quantile-loss))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype weighted-quantile-losses ()
   '(trivial-types:proper-list weighted-quantile-loss))
 (common-lisp:defun make-weighted-quantile-losses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list weighted-quantile-loss))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype what-if-analyses ()
   '(trivial-types:proper-list what-if-analysis-summary))
 (common-lisp:defun make-what-if-analyses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            what-if-analysis-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass what-if-analysis-summary common-lisp:nil
                       ((what-if-analysis-arn :initarg :what-if-analysis-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-what-if-analysis-summary-what-if-analysis-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (what-if-analysis-name :initarg :what-if-analysis-name
                         :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-what-if-analysis-summary-what-if-analysis-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forecast-arn :initarg :forecast-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-what-if-analysis-summary-forecast-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-what-if-analysis-summary-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-what-if-analysis-summary-message :shape
                         "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-what-if-analysis-summary-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-what-if-analysis-summary-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-what-if-analysis-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'what-if-analysis-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'what-if-analysis-summary 'make-what-if-analysis-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          what-if-analysis-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          what-if-analysis-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-analysis-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfAnalysisArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-analysis-name))
      (common-lisp:list
       (common-lisp:cons "WhatIfAnalysisName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-arn))
      (common-lisp:list
       (common-lisp:cons "ForecastArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          what-if-analysis-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype what-if-forecast-arn-list-for-export ()
   '(trivial-types:proper-list long-arn))
 (common-lisp:defun make-what-if-forecast-arn-list-for-export
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list long-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass what-if-forecast-export-summary common-lisp:nil
                       ((what-if-forecast-export-arn :initarg
                         :what-if-forecast-export-arn :initform common-lisp:nil
                         :type (common-lisp:or long-arn common-lisp:null)
                         :accessor
                         struct-shape-what-if-forecast-export-summary-what-if-forecast-export-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (what-if-forecast-arns :initarg :what-if-forecast-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or what-if-forecast-arn-list-for-export
                                         common-lisp:null)
                         :accessor
                         struct-shape-what-if-forecast-export-summary-what-if-forecast-arns
                         :shape "WhatIfForecastArnListForExport" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (what-if-forecast-export-name :initarg
                         :what-if-forecast-export-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-what-if-forecast-export-summary-what-if-forecast-export-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or data-destination common-lisp:null)
                         :accessor
                         struct-shape-what-if-forecast-export-summary-destination
                         :shape "DataDestination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-what-if-forecast-export-summary-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-what-if-forecast-export-summary-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-what-if-forecast-export-summary-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-what-if-forecast-export-summary-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-what-if-forecast-export-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'what-if-forecast-export-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'what-if-forecast-export-summary
                    'make-what-if-forecast-export-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          what-if-forecast-export-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          what-if-forecast-export-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-export-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastExportArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-arns))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-export-name))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastExportName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          what-if-forecast-export-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype what-if-forecast-exports ()
   '(trivial-types:proper-list what-if-forecast-export-summary))
 (common-lisp:defun make-what-if-forecast-exports
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            what-if-forecast-export-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass what-if-forecast-summary common-lisp:nil
                       ((what-if-forecast-arn :initarg :what-if-forecast-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or long-arn common-lisp:null) :accessor
                         struct-shape-what-if-forecast-summary-what-if-forecast-arn
                         :shape "LongArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (what-if-forecast-name :initarg :what-if-forecast-name
                         :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-what-if-forecast-summary-what-if-forecast-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (what-if-analysis-arn :initarg :what-if-analysis-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-what-if-forecast-summary-what-if-analysis-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor struct-shape-what-if-forecast-summary-status
                         :shape "Status" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-what-if-forecast-summary-message :shape
                         "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-what-if-forecast-summary-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-time :initarg
                         :last-modification-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-what-if-forecast-summary-last-modification-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-what-if-forecast-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'what-if-forecast-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'what-if-forecast-summary 'make-what-if-forecast-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          what-if-forecast-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          what-if-forecast-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-forecast-name))
      (common-lisp:list
       (common-lisp:cons "WhatIfForecastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'what-if-analysis-arn))
      (common-lisp:list
       (common-lisp:cons "WhatIfAnalysisArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-time))
      (common-lisp:list
       (common-lisp:cons "LastModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          what-if-forecast-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype what-if-forecasts ()
   '(trivial-types:proper-list what-if-forecast-summary))
 (common-lisp:defun make-what-if-forecasts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            what-if-forecast-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass window-summary common-lisp:nil
                       ((test-window-start :initarg :test-window-start
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-window-summary-test-window-start :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (test-window-end :initarg :test-window-end :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-window-summary-test-window-end :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (item-count :initarg :item-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-window-summary-item-count :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (evaluation-type :initarg :evaluation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or evaluation-type common-lisp:null)
                         :accessor struct-shape-window-summary-evaluation-type
                         :shape "EvaluationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metrics :initarg :metrics :initform common-lisp:nil
                         :type (common-lisp:or metrics common-lisp:null)
                         :accessor struct-shape-window-summary-metrics :shape
                         "Metrics" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-window-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'window-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'window-summary 'make-window-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input window-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input window-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-window-start))
      (common-lisp:list
       (common-lisp:cons "TestWindowStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-window-end))
      (common-lisp:list
       (common-lisp:cons "TestWindowEnd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-count))
      (common-lisp:list
       (common-lisp:cons "ItemCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-type))
      (common-lisp:list
       (common-lisp:cons "EvaluationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input window-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-auto-predictor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key predictor-name forecast-horizon
                     forecast-types forecast-dimensions forecast-frequency
                     data-config encryption-config reference-predictor-arn
                     optimization-metric explain-predictor tags monitor-config
                     time-alignment-boundary)
   (common-lisp:declare
    (common-lisp:ignorable predictor-name forecast-horizon forecast-types
     forecast-dimensions forecast-frequency data-config encryption-config
     reference-predictor-arn optimization-metric explain-predictor tags
     monitor-config time-alignment-boundary))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-auto-predictor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAutoPredictor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-auto-predictor))
(common-lisp:progn
 (common-lisp:defun create-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-name domain dataset-type
                     data-frequency schema encryption-config tags)
   (common-lisp:declare
    (common-lisp:ignorable dataset-name domain dataset-type data-frequency
     schema encryption-config tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDataset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-dataset))
(common-lisp:progn
 (common-lisp:defun create-dataset-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-group-name domain dataset-arns
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable dataset-group-name domain dataset-arns tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dataset-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDatasetGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-dataset-group))
(common-lisp:progn
 (common-lisp:defun create-dataset-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-import-job-name dataset-arn
                     data-source timestamp-format time-zone
                     use-geolocation-for-time-zone geolocation-format tags
                     format import-mode)
   (common-lisp:declare
    (common-lisp:ignorable dataset-import-job-name dataset-arn data-source
     timestamp-format time-zone use-geolocation-for-time-zone
     geolocation-format tags format import-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dataset-import-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDatasetImportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-dataset-import-job))
(common-lisp:progn
 (common-lisp:defun create-explainability
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key explainability-name resource-arn
                     explainability-config data-source schema
                     enable-visualization start-date-time end-date-time tags)
   (common-lisp:declare
    (common-lisp:ignorable explainability-name resource-arn
     explainability-config data-source schema enable-visualization
     start-date-time end-date-time tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-explainability-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateExplainability"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-explainability))
(common-lisp:progn
 (common-lisp:defun create-explainability-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key explainability-export-name
                     explainability-arn destination tags format)
   (common-lisp:declare
    (common-lisp:ignorable explainability-export-name explainability-arn
     destination tags format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-explainability-export-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateExplainabilityExport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-explainability-export))
(common-lisp:progn
 (common-lisp:defun create-forecast
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key forecast-name predictor-arn
                     forecast-types tags time-series-selector)
   (common-lisp:declare
    (common-lisp:ignorable forecast-name predictor-arn forecast-types tags
     time-series-selector))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-forecast-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateForecast"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-forecast))
(common-lisp:progn
 (common-lisp:defun create-forecast-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key forecast-export-job-name forecast-arn
                     destination tags format)
   (common-lisp:declare
    (common-lisp:ignorable forecast-export-job-name forecast-arn destination
     tags format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-forecast-export-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateForecastExportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-forecast-export-job))
(common-lisp:progn
 (common-lisp:defun create-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-name resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable monitor-name resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-monitor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateMonitor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-monitor))
(common-lisp:progn
 (common-lisp:defun create-predictor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key predictor-name algorithm-arn
                     forecast-horizon forecast-types perform-auto-ml
                     auto-mloverride-strategy perform-hpo training-parameters
                     evaluation-parameters hpoconfig input-data-config
                     featurization-config encryption-config tags
                     optimization-metric)
   (common-lisp:declare
    (common-lisp:ignorable predictor-name algorithm-arn forecast-horizon
     forecast-types perform-auto-ml auto-mloverride-strategy perform-hpo
     training-parameters evaluation-parameters hpoconfig input-data-config
     featurization-config encryption-config tags optimization-metric))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-predictor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePredictor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-predictor))
(common-lisp:progn
 (common-lisp:defun create-predictor-backtest-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key predictor-backtest-export-job-name
                     predictor-arn destination tags format)
   (common-lisp:declare
    (common-lisp:ignorable predictor-backtest-export-job-name predictor-arn
     destination tags format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-predictor-backtest-export-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePredictorBacktestExportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-predictor-backtest-export-job))
(common-lisp:progn
 (common-lisp:defun create-what-if-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key what-if-analysis-name forecast-arn
                     time-series-selector tags)
   (common-lisp:declare
    (common-lisp:ignorable what-if-analysis-name forecast-arn
     time-series-selector tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-what-if-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateWhatIfAnalysis"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-what-if-analysis))
(common-lisp:progn
 (common-lisp:defun create-what-if-forecast
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key what-if-forecast-name
                     what-if-analysis-arn time-series-transformations
                     time-series-replacements-data-source tags)
   (common-lisp:declare
    (common-lisp:ignorable what-if-forecast-name what-if-analysis-arn
     time-series-transformations time-series-replacements-data-source tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-what-if-forecast-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateWhatIfForecast"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-what-if-forecast))
(common-lisp:progn
 (common-lisp:defun create-what-if-forecast-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key what-if-forecast-export-name
                     what-if-forecast-arns destination tags format)
   (common-lisp:declare
    (common-lisp:ignorable what-if-forecast-export-name what-if-forecast-arns
     destination tags format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-what-if-forecast-export-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateWhatIfForecastExport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-what-if-forecast-export))
(common-lisp:progn
 (common-lisp:defun delete-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-arn)
   (common-lisp:declare (common-lisp:ignorable dataset-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDataset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-dataset))
(common-lisp:progn
 (common-lisp:defun delete-dataset-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-group-arn)
   (common-lisp:declare (common-lisp:ignorable dataset-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dataset-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDatasetGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-dataset-group))
(common-lisp:progn
 (common-lisp:defun delete-dataset-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-import-job-arn)
   (common-lisp:declare (common-lisp:ignorable dataset-import-job-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dataset-import-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDatasetImportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-dataset-import-job))
(common-lisp:progn
 (common-lisp:defun delete-explainability
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key explainability-arn)
   (common-lisp:declare (common-lisp:ignorable explainability-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-explainability-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteExplainability"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-explainability))
(common-lisp:progn
 (common-lisp:defun delete-explainability-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key explainability-export-arn)
   (common-lisp:declare (common-lisp:ignorable explainability-export-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-explainability-export-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteExplainabilityExport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-explainability-export))
(common-lisp:progn
 (common-lisp:defun delete-forecast
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key forecast-arn)
   (common-lisp:declare (common-lisp:ignorable forecast-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-forecast-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteForecast"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-forecast))
(common-lisp:progn
 (common-lisp:defun delete-forecast-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key forecast-export-job-arn)
   (common-lisp:declare (common-lisp:ignorable forecast-export-job-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-forecast-export-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteForecastExportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-forecast-export-job))
(common-lisp:progn
 (common-lisp:defun delete-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-arn)
   (common-lisp:declare (common-lisp:ignorable monitor-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-monitor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMonitor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-monitor))
(common-lisp:progn
 (common-lisp:defun delete-predictor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key predictor-arn)
   (common-lisp:declare (common-lisp:ignorable predictor-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-predictor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePredictor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-predictor))
(common-lisp:progn
 (common-lisp:defun delete-predictor-backtest-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key predictor-backtest-export-job-arn)
   (common-lisp:declare
    (common-lisp:ignorable predictor-backtest-export-job-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-predictor-backtest-export-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePredictorBacktestExportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-predictor-backtest-export-job))
(common-lisp:progn
 (common-lisp:defun delete-resource-tree
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-tree-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteResourceTree"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-resource-tree))
(common-lisp:progn
 (common-lisp:defun delete-what-if-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key what-if-analysis-arn)
   (common-lisp:declare (common-lisp:ignorable what-if-analysis-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-what-if-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteWhatIfAnalysis"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-what-if-analysis))
(common-lisp:progn
 (common-lisp:defun delete-what-if-forecast
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key what-if-forecast-arn)
   (common-lisp:declare (common-lisp:ignorable what-if-forecast-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-what-if-forecast-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteWhatIfForecast"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-what-if-forecast))
(common-lisp:progn
 (common-lisp:defun delete-what-if-forecast-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key what-if-forecast-export-arn)
   (common-lisp:declare (common-lisp:ignorable what-if-forecast-export-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-what-if-forecast-export-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteWhatIfForecastExport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-what-if-forecast-export))
(common-lisp:progn
 (common-lisp:defun describe-auto-predictor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key predictor-arn)
   (common-lisp:declare (common-lisp:ignorable predictor-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-auto-predictor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAutoPredictor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-auto-predictor))
(common-lisp:progn
 (common-lisp:defun describe-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-arn)
   (common-lisp:declare (common-lisp:ignorable dataset-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDataset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-dataset))
(common-lisp:progn
 (common-lisp:defun describe-dataset-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-group-arn)
   (common-lisp:declare (common-lisp:ignorable dataset-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dataset-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDatasetGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-dataset-group))
(common-lisp:progn
 (common-lisp:defun describe-dataset-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-import-job-arn)
   (common-lisp:declare (common-lisp:ignorable dataset-import-job-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dataset-import-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDatasetImportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-dataset-import-job))
(common-lisp:progn
 (common-lisp:defun describe-explainability
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key explainability-arn)
   (common-lisp:declare (common-lisp:ignorable explainability-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-explainability-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeExplainability"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-explainability))
(common-lisp:progn
 (common-lisp:defun describe-explainability-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key explainability-export-arn)
   (common-lisp:declare (common-lisp:ignorable explainability-export-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-explainability-export-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeExplainabilityExport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-explainability-export))
(common-lisp:progn
 (common-lisp:defun describe-forecast
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key forecast-arn)
   (common-lisp:declare (common-lisp:ignorable forecast-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-forecast-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeForecast"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-forecast))
(common-lisp:progn
 (common-lisp:defun describe-forecast-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key forecast-export-job-arn)
   (common-lisp:declare (common-lisp:ignorable forecast-export-job-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-forecast-export-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeForecastExportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-forecast-export-job))
(common-lisp:progn
 (common-lisp:defun describe-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-arn)
   (common-lisp:declare (common-lisp:ignorable monitor-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-monitor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeMonitor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-monitor))
(common-lisp:progn
 (common-lisp:defun describe-predictor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key predictor-arn)
   (common-lisp:declare (common-lisp:ignorable predictor-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-predictor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePredictor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-predictor))
(common-lisp:progn
 (common-lisp:defun describe-predictor-backtest-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key predictor-backtest-export-job-arn)
   (common-lisp:declare
    (common-lisp:ignorable predictor-backtest-export-job-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-predictor-backtest-export-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePredictorBacktestExportJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-predictor-backtest-export-job))
(common-lisp:progn
 (common-lisp:defun describe-what-if-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key what-if-analysis-arn)
   (common-lisp:declare (common-lisp:ignorable what-if-analysis-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-what-if-analysis-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeWhatIfAnalysis"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-what-if-analysis))
(common-lisp:progn
 (common-lisp:defun describe-what-if-forecast
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key what-if-forecast-arn)
   (common-lisp:declare (common-lisp:ignorable what-if-forecast-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-what-if-forecast-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeWhatIfForecast"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-what-if-forecast))
(common-lisp:progn
 (common-lisp:defun describe-what-if-forecast-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key what-if-forecast-export-arn)
   (common-lisp:declare (common-lisp:ignorable what-if-forecast-export-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-what-if-forecast-export-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeWhatIfForecastExport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-what-if-forecast-export))
(common-lisp:progn
 (common-lisp:defun get-accuracy-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key predictor-arn)
   (common-lisp:declare (common-lisp:ignorable predictor-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-accuracy-metrics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAccuracyMetrics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-accuracy-metrics))
(common-lisp:progn
 (common-lisp:defun list-dataset-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dataset-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDatasetGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-dataset-groups))
(common-lisp:progn
 (common-lisp:defun list-dataset-import-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dataset-import-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDatasetImportJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-dataset-import-jobs))
(common-lisp:progn
 (common-lisp:defun list-datasets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-datasets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDatasets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-datasets))
(common-lisp:progn
 (common-lisp:defun list-explainabilities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-explainabilities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListExplainabilities"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-explainabilities))
(common-lisp:progn
 (common-lisp:defun list-explainability-exports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-explainability-exports-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListExplainabilityExports"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-explainability-exports))
(common-lisp:progn
 (common-lisp:defun list-forecast-export-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-forecast-export-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListForecastExportJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-forecast-export-jobs))
(common-lisp:progn
 (common-lisp:defun list-forecasts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-forecasts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListForecasts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-forecasts))
(common-lisp:progn
 (common-lisp:defun list-monitor-evaluations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results monitor-arn
                     filters)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results monitor-arn filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-monitor-evaluations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMonitorEvaluations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-monitor-evaluations))
(common-lisp:progn
 (common-lisp:defun list-monitors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-monitors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMonitors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-monitors))
(common-lisp:progn
 (common-lisp:defun list-predictor-backtest-export-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-predictor-backtest-export-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPredictorBacktestExportJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-predictor-backtest-export-jobs))
(common-lisp:progn
 (common-lisp:defun list-predictors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-predictors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPredictors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-predictors))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-what-if-analyses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-what-if-analyses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListWhatIfAnalyses"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-what-if-analyses))
(common-lisp:progn
 (common-lisp:defun list-what-if-forecast-exports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-what-if-forecast-exports-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListWhatIfForecastExports"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-what-if-forecast-exports))
(common-lisp:progn
 (common-lisp:defun list-what-if-forecasts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-what-if-forecasts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListWhatIfForecasts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-what-if-forecasts))
(common-lisp:progn
 (common-lisp:defun resume-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resume-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResumeResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'resume-resource))
(common-lisp:progn
 (common-lisp:defun stop-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-resource))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-dataset-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-group-arn dataset-arns)
   (common-lisp:declare (common-lisp:ignorable dataset-group-arn dataset-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dataset-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'forecast-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDatasetGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-dataset-group))
