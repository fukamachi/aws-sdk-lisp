;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/serverlessrepo/api
  (:use)
  (:nicknames #:aws/serverlessrepo)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/serverlessrepo/api)
(common-lisp:progn
 (common-lisp:define-condition serverlessrepo-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'serverlessrepo-error))
(common-lisp:progn
 (common-lisp:defclass serverlessrepo-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "serverlessrepo"
                        :api-version "2017-09-08" :host-prefix "serverlessrepo"
                        :signing-name "serverlessrepo" :global-host
                        common-lisp:nil))
 (common-lisp:export 'serverlessrepo-request))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("ForbiddenException" . forbidden-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("NotFoundException" . not-found-exception)
    ("TooManyRequestsException" . too-many-requests-exception)))
(common-lisp:progn
 (common-lisp:defclass application common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-application-application-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "applicationId")
                        (author :initarg :author :initform
                         (common-lisp:error ":author is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-author :shape "__string"
                         :location common-lisp:nil :location-name "author")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-creation-time :shape
                         "__string" :location common-lisp:nil :location-name
                         "creationTime")
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-description :shape "__string"
                         :location common-lisp:nil :location-name
                         "description")
                        (home-page-url :initarg :home-page-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-home-page-url :shape
                         "__string" :location common-lisp:nil :location-name
                         "homePageUrl")
                        (is-verified-author :initarg :is-verified-author
                         :initform common-lisp:nil :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor struct-shape-application-is-verified-author
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "isVerifiedAuthor")
                        (labels :initarg :labels :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-application-labels :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "labels")
                        (license-url :initarg :license-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-license-url :shape "__string"
                         :location common-lisp:nil :location-name "licenseUrl")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (readme-url :initarg :readme-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-readme-url :shape "__string"
                         :location common-lisp:nil :location-name "readmeUrl")
                        (spdx-license-id :initarg :spdx-license-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-spdx-license-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "spdxLicenseId")
                        (verified-author-url :initarg :verified-author-url
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-verified-author-url :shape
                         "__string" :location common-lisp:nil :location-name
                         "verifiedAuthorUrl")
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor struct-shape-application-version :shape
                         "Version" :location common-lisp:nil :location-name
                         "version"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-application
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'application
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'application 'make-application))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "Author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-page-url))
      (common-lisp:list
       (common-lisp:cons "HomePageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-verified-author))
      (common-lisp:list
       (common-lisp:cons "IsVerifiedAuthor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-url))
      (common-lisp:list
       (common-lisp:cons "LicenseUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readme-url))
      (common-lisp:list
       (common-lisp:cons "ReadmeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spdx-license-id))
      (common-lisp:list
       (common-lisp:cons "SpdxLicenseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verified-author-url))
      (common-lisp:list
       (common-lisp:cons "VerifiedAuthorUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-dependency-page common-lisp:nil
                       ((dependencies :initarg :dependencies :initform
                         (common-lisp:error ":dependencies is required") :type
                         (common-lisp:or |__listOfApplicationDependencySummary|
                                         common-lisp:null)
                         :accessor
                         struct-shape-application-dependency-page-dependencies
                         :shape "__listOfApplicationDependencySummary"
                         :location common-lisp:nil :location-name
                         "dependencies")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-dependency-page-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-application-dependency-page
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'application-dependency-page
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'application-dependency-page
                    'make-application-dependency-page))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-dependency-page))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-dependency-page))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dependencies))
      (common-lisp:list
       (common-lisp:cons "Dependencies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-dependency-page))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-dependency-summary common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-application-dependency-summary-application-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "applicationId")
                        (semantic-version :initarg :semantic-version :initform
                         (common-lisp:error ":semantic-version is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-application-dependency-summary-semantic-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "semanticVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-application-dependency-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'application-dependency-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'application-dependency-summary
                    'make-application-dependency-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-dependency-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-dependency-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "SemanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-dependency-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-page common-lisp:nil
                       ((applications :initarg :applications :initform
                         (common-lisp:error ":applications is required") :type
                         (common-lisp:or |__listOfApplicationSummary|
                                         common-lisp:null)
                         :accessor struct-shape-application-page-applications
                         :shape "__listOfApplicationSummary" :location
                         common-lisp:nil :location-name "applications")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-page-next-token :shape
                         "__string" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-application-page
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'application-page
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'application-page 'make-application-page))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-page))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-page))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-page))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-policy common-lisp:nil
                       ((statements :initarg :statements :initform
                         (common-lisp:error ":statements is required") :type
                         (common-lisp:or |__listOfApplicationPolicyStatement|
                                         common-lisp:null)
                         :accessor struct-shape-application-policy-statements
                         :shape "__listOfApplicationPolicyStatement" :location
                         common-lisp:nil :location-name "statements"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-application-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'application-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'application-policy 'make-application-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statements))
      (common-lisp:list
       (common-lisp:cons "Statements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-policy-statement common-lisp:nil
                       ((actions :initarg :actions :initform
                         (common-lisp:error ":actions is required") :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-application-policy-statement-actions
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "actions")
                        (principal-org-ids :initarg :principal-org-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-application-policy-statement-principal-org-ids
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "principalOrgIDs")
                        (principals :initarg :principals :initform
                         (common-lisp:error ":principals is required") :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-application-policy-statement-principals
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "principals")
                        (statement-id :initarg :statement-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-policy-statement-statement-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "statementId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-application-policy-statement
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'application-policy-statement
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'application-policy-statement
                    'make-application-policy-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-policy-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-policy-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-org-ids))
      (common-lisp:list
       (common-lisp:cons "PrincipalOrgIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "Principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-id))
      (common-lisp:list
       (common-lisp:cons "StatementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-policy-statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-summary common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-application-summary-application-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "applicationId")
                        (author :initarg :author :initform
                         (common-lisp:error ":author is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-summary-author :shape
                         "__string" :location common-lisp:nil :location-name
                         "author")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-summary-creation-time :shape
                         "__string" :location common-lisp:nil :location-name
                         "creationTime")
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-summary-description :shape
                         "__string" :location common-lisp:nil :location-name
                         "description")
                        (home-page-url :initarg :home-page-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-summary-home-page-url :shape
                         "__string" :location common-lisp:nil :location-name
                         "homePageUrl")
                        (labels :initarg :labels :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-application-summary-labels
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "labels")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-summary-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (spdx-license-id :initarg :spdx-license-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-summary-spdx-license-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "spdxLicenseId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-application-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'application-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'application-summary 'make-application-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "Author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-page-url))
      (common-lisp:list
       (common-lisp:cons "HomePageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spdx-license-id))
      (common-lisp:list
       (common-lisp:cons "SpdxLicenseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-version-page common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-application-version-page-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken")
                        (versions :initarg :versions :initform
                         (common-lisp:error ":versions is required") :type
                         (common-lisp:or |__listOfVersionSummary|
                                         common-lisp:null)
                         :accessor
                         struct-shape-application-version-page-versions :shape
                         "__listOfVersionSummary" :location common-lisp:nil
                         :location-name "versions"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-application-version-page
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'application-version-page
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'application-version-page 'make-application-version-page))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-version-page))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-version-page))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "Versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-version-page))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (serverlessrepo-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       bad-request-exception-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-error-code
                    'bad-request-exception-message)))
(common-lisp:deftype capability () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass change-set-details common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-change-set-details-application-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "applicationId")
                        (change-set-id :initarg :change-set-id :initform
                         (common-lisp:error ":change-set-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-change-set-details-change-set-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "changeSetId")
                        (semantic-version :initarg :semantic-version :initform
                         (common-lisp:error ":semantic-version is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-change-set-details-semantic-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "semanticVersion")
                        (stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-change-set-details-stack-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "stackId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-change-set-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'change-set-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'change-set-details 'make-change-set-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "SemanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (serverlessrepo-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       conflict-exception-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-error-code
                    'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-application-input common-lisp:nil
                       ((author :initarg :author :initform
                         (common-lisp:error ":author is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-input-author :shape
                         "__string" :location common-lisp:nil :location-name
                         "author")
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-input-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (home-page-url :initarg :home-page-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-input-home-page-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "homePageUrl")
                        (labels :initarg :labels :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-create-application-input-labels
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "labels")
                        (license-body :initarg :license-body :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-input-license-body
                         :shape "__string" :location common-lisp:nil
                         :location-name "licenseBody")
                        (license-url :initarg :license-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-input-license-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "licenseUrl")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-input-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (readme-body :initarg :readme-body :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-input-readme-body
                         :shape "__string" :location common-lisp:nil
                         :location-name "readmeBody")
                        (readme-url :initarg :readme-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-input-readme-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "readmeUrl")
                        (semantic-version :initarg :semantic-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-input-semantic-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "semanticVersion")
                        (source-code-archive-url :initarg
                         :source-code-archive-url :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-application-input-source-code-archive-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceCodeArchiveUrl")
                        (source-code-url :initarg :source-code-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-input-source-code-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceCodeUrl")
                        (spdx-license-id :initarg :spdx-license-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-input-spdx-license-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "spdxLicenseId")
                        (template-body :initarg :template-body :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-input-template-body
                         :shape "__string" :location common-lisp:nil
                         :location-name "templateBody")
                        (template-url :initarg :template-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-input-template-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "templateUrl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-application-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-application-input 'make-create-application-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "Author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-page-url))
      (common-lisp:list
       (common-lisp:cons "HomePageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-body))
      (common-lisp:list
       (common-lisp:cons "LicenseBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-url))
      (common-lisp:list
       (common-lisp:cons "LicenseUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readme-body))
      (common-lisp:list
       (common-lisp:cons "ReadmeBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readme-url))
      (common-lisp:list
       (common-lisp:cons "ReadmeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "SemanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-code-archive-url))
      (common-lisp:list
       (common-lisp:cons "SourceCodeArchiveUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code-url))
      (common-lisp:list
       (common-lisp:cons "SourceCodeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spdx-license-id))
      (common-lisp:list
       (common-lisp:cons "SpdxLicenseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-application-request common-lisp:nil
                       ((author :initarg :author :initform
                         (common-lisp:error ":author is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-request-author :shape
                         "__string" :location common-lisp:nil :location-name
                         "author")
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-request-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (home-page-url :initarg :home-page-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-request-home-page-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "homePageUrl")
                        (labels :initarg :labels :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-application-request-labels :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "labels")
                        (license-body :initarg :license-body :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-request-license-body
                         :shape "__string" :location common-lisp:nil
                         :location-name "licenseBody")
                        (license-url :initarg :license-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-request-license-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "licenseUrl")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-request-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (readme-body :initarg :readme-body :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-request-readme-body
                         :shape "__string" :location common-lisp:nil
                         :location-name "readmeBody")
                        (readme-url :initarg :readme-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-request-readme-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "readmeUrl")
                        (semantic-version :initarg :semantic-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-request-semantic-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "semanticVersion")
                        (source-code-archive-url :initarg
                         :source-code-archive-url :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-application-request-source-code-archive-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceCodeArchiveUrl")
                        (source-code-url :initarg :source-code-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-request-source-code-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceCodeUrl")
                        (spdx-license-id :initarg :spdx-license-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-request-spdx-license-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "spdxLicenseId")
                        (template-body :initarg :template-body :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-request-template-body
                         :shape "__string" :location common-lisp:nil
                         :location-name "templateBody")
                        (template-url :initarg :template-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-request-template-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "templateUrl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-application-request
                    'make-create-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "Author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-page-url))
      (common-lisp:list
       (common-lisp:cons "HomePageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-body))
      (common-lisp:list
       (common-lisp:cons "LicenseBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-url))
      (common-lisp:list
       (common-lisp:cons "LicenseUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readme-body))
      (common-lisp:list
       (common-lisp:cons "ReadmeBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readme-url))
      (common-lisp:list
       (common-lisp:cons "ReadmeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "SemanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-code-archive-url))
      (common-lisp:list
       (common-lisp:cons "SourceCodeArchiveUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code-url))
      (common-lisp:list
       (common-lisp:cons "SourceCodeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spdx-license-id))
      (common-lisp:list
       (common-lisp:cons "SpdxLicenseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-application-response common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-response-application-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "applicationId")
                        (author :initarg :author :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-application-response-author :shape
                         "__string" :location common-lisp:nil :location-name
                         "author")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-response-creation-time
                         :shape "__string" :location common-lisp:nil
                         :location-name "creationTime")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-response-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (home-page-url :initarg :home-page-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-response-home-page-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "homePageUrl")
                        (is-verified-author :initarg :is-verified-author
                         :initform common-lisp:nil :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-create-application-response-is-verified-author
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "isVerifiedAuthor")
                        (labels :initarg :labels :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-application-response-labels :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "labels")
                        (license-url :initarg :license-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-response-license-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "licenseUrl")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-response-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (readme-url :initarg :readme-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-response-readme-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "readmeUrl")
                        (spdx-license-id :initarg :spdx-license-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-response-spdx-license-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "spdxLicenseId")
                        (verified-author-url :initarg :verified-author-url
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-response-verified-author-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "verifiedAuthorUrl")
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         struct-shape-create-application-response-version
                         :shape "Version" :location common-lisp:nil
                         :location-name "version"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-application-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-application-response
                    'make-create-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "Author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-page-url))
      (common-lisp:list
       (common-lisp:cons "HomePageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-verified-author))
      (common-lisp:list
       (common-lisp:cons "IsVerifiedAuthor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-url))
      (common-lisp:list
       (common-lisp:cons "LicenseUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readme-url))
      (common-lisp:list
       (common-lisp:cons "ReadmeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spdx-license-id))
      (common-lisp:list
       (common-lisp:cons "SpdxLicenseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verified-author-url))
      (common-lisp:list
       (common-lisp:cons "VerifiedAuthorUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-application-version-input common-lisp:nil
                       ((source-code-archive-url :initarg
                         :source-code-archive-url :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-application-version-input-source-code-archive-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceCodeArchiveUrl")
                        (source-code-url :initarg :source-code-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-version-input-source-code-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceCodeUrl")
                        (template-body :initarg :template-body :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-version-input-template-body
                         :shape "__string" :location common-lisp:nil
                         :location-name "templateBody")
                        (template-url :initarg :template-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-version-input-template-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "templateUrl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-application-version-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-application-version-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-application-version-input
                    'make-create-application-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-code-archive-url))
      (common-lisp:list
       (common-lisp:cons "SourceCodeArchiveUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code-url))
      (common-lisp:list
       (common-lisp:cons "SourceCodeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-application-version-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-application-version-request-application-id
                         :shape "__string" :location "uri" :location-name
                         "applicationId")
                        (semantic-version :initarg :semantic-version :initform
                         (common-lisp:error ":semantic-version is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-application-version-request-semantic-version
                         :shape "__string" :location "uri" :location-name
                         "semanticVersion")
                        (source-code-archive-url :initarg
                         :source-code-archive-url :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-application-version-request-source-code-archive-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceCodeArchiveUrl")
                        (source-code-url :initarg :source-code-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-version-request-source-code-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceCodeUrl")
                        (template-body :initarg :template-body :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-version-request-template-body
                         :shape "__string" :location common-lisp:nil
                         :location-name "templateBody")
                        (template-url :initarg :template-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-version-request-template-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "templateUrl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-application-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-application-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-application-version-request
                    'make-create-application-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-code-archive-url))
      (common-lisp:list
       (common-lisp:cons "SourceCodeArchiveUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code-url))
      (common-lisp:list
       (common-lisp:cons "SourceCodeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-application-version-response common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-version-response-application-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "applicationId")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-version-response-creation-time
                         :shape "__string" :location common-lisp:nil
                         :location-name "creationTime")
                        (parameter-definitions :initarg :parameter-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfParameterDefinition|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-application-version-response-parameter-definitions
                         :shape "__listOfParameterDefinition" :location
                         common-lisp:nil :location-name "parameterDefinitions")
                        (required-capabilities :initarg :required-capabilities
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfCapability| common-lisp:null)
                         :accessor
                         struct-shape-create-application-version-response-required-capabilities
                         :shape "__listOfCapability" :location common-lisp:nil
                         :location-name "requiredCapabilities")
                        (resources-supported :initarg :resources-supported
                         :initform common-lisp:nil :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-create-application-version-response-resources-supported
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "resourcesSupported")
                        (semantic-version :initarg :semantic-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-version-response-semantic-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "semanticVersion")
                        (source-code-archive-url :initarg
                         :source-code-archive-url :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-application-version-response-source-code-archive-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceCodeArchiveUrl")
                        (source-code-url :initarg :source-code-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-version-response-source-code-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceCodeUrl")
                        (template-url :initarg :template-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-application-version-response-template-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "templateUrl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-application-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-application-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-application-version-response
                    'make-create-application-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-definitions))
      (common-lisp:list
       (common-lisp:cons "ParameterDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'required-capabilities))
      (common-lisp:list
       (common-lisp:cons "RequiredCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources-supported))
      (common-lisp:list
       (common-lisp:cons "ResourcesSupported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "SemanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-code-archive-url))
      (common-lisp:list
       (common-lisp:cons "SourceCodeArchiveUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code-url))
      (common-lisp:list
       (common-lisp:cons "SourceCodeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cloud-formation-change-set-input common-lisp:nil
                       ((capabilities :initarg :capabilities :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-change-set-input-capabilities
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "capabilities")
                        (change-set-name :initarg :change-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-change-set-input-change-set-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "changeSetName")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-change-set-input-client-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "clientToken")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-change-set-input-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (notification-arns :initarg :notification-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-change-set-input-notification-arns
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "notificationArns")
                        (parameter-overrides :initarg :parameter-overrides
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfParameterValue|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-change-set-input-parameter-overrides
                         :shape "__listOfParameterValue" :location
                         common-lisp:nil :location-name "parameterOverrides")
                        (resource-types :initarg :resource-types :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-change-set-input-resource-types
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "resourceTypes")
                        (rollback-configuration :initarg
                         :rollback-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or rollback-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-change-set-input-rollback-configuration
                         :shape "RollbackConfiguration" :location
                         common-lisp:nil :location-name
                         "rollbackConfiguration")
                        (semantic-version :initarg :semantic-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-change-set-input-semantic-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "semanticVersion")
                        (stack-name :initarg :stack-name :initform
                         (common-lisp:error ":stack-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-change-set-input-stack-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "stackName")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |__listOfTag| common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-change-set-input-tags
                         :shape "__listOfTag" :location common-lisp:nil
                         :location-name "tags")
                        (template-id :initarg :template-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-change-set-input-template-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "templateId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cloud-formation-change-set-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cloud-formation-change-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cloud-formation-change-set-input
                    'make-create-cloud-formation-change-set-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-change-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-change-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arns))
      (common-lisp:list
       (common-lisp:cons "NotificationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-overrides))
      (common-lisp:list
       (common-lisp:cons "ParameterOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "RollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "SemanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-change-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cloud-formation-change-set-request
                       common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-change-set-request-application-id
                         :shape "__string" :location "uri" :location-name
                         "applicationId")
                        (capabilities :initarg :capabilities :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-change-set-request-capabilities
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "capabilities")
                        (change-set-name :initarg :change-set-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-change-set-request-change-set-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "changeSetName")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-change-set-request-client-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "clientToken")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-change-set-request-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (notification-arns :initarg :notification-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-change-set-request-notification-arns
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "notificationArns")
                        (parameter-overrides :initarg :parameter-overrides
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfParameterValue|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-change-set-request-parameter-overrides
                         :shape "__listOfParameterValue" :location
                         common-lisp:nil :location-name "parameterOverrides")
                        (resource-types :initarg :resource-types :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-change-set-request-resource-types
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "resourceTypes")
                        (rollback-configuration :initarg
                         :rollback-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or rollback-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-change-set-request-rollback-configuration
                         :shape "RollbackConfiguration" :location
                         common-lisp:nil :location-name
                         "rollbackConfiguration")
                        (semantic-version :initarg :semantic-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-change-set-request-semantic-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "semanticVersion")
                        (stack-name :initarg :stack-name :initform
                         (common-lisp:error ":stack-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-change-set-request-stack-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "stackName")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |__listOfTag| common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-change-set-request-tags
                         :shape "__listOfTag" :location common-lisp:nil
                         :location-name "tags")
                        (template-id :initarg :template-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-change-set-request-template-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "templateId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cloud-formation-change-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cloud-formation-change-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cloud-formation-change-set-request
                    'make-create-cloud-formation-change-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-change-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arns))
      (common-lisp:list
       (common-lisp:cons "NotificationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-overrides))
      (common-lisp:list
       (common-lisp:cons "ParameterOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "RollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "SemanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-change-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cloud-formation-change-set-response
                       common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-change-set-response-application-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "applicationId")
                        (change-set-id :initarg :change-set-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-change-set-response-change-set-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "changeSetId")
                        (semantic-version :initarg :semantic-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-change-set-response-semantic-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "semanticVersion")
                        (stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-change-set-response-stack-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "stackId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cloud-formation-change-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cloud-formation-change-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cloud-formation-change-set-response
                    'make-create-cloud-formation-change-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-change-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-change-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "SemanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-change-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cloud-formation-template-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-template-request-application-id
                         :shape "__string" :location "uri" :location-name
                         "applicationId")
                        (semantic-version :initarg :semantic-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-template-request-semantic-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "semanticVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cloud-formation-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cloud-formation-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cloud-formation-template-request
                    'make-create-cloud-formation-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "SemanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cloud-formation-template-response common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-template-response-application-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "applicationId")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-template-response-creation-time
                         :shape "__string" :location common-lisp:nil
                         :location-name "creationTime")
                        (expiration-time :initarg :expiration-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-template-response-expiration-time
                         :shape "__string" :location common-lisp:nil
                         :location-name "expirationTime")
                        (semantic-version :initarg :semantic-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-template-response-semantic-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "semanticVersion")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-create-cloud-formation-template-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name "status")
                        (template-id :initarg :template-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-template-response-template-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "templateId")
                        (template-url :initarg :template-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-cloud-formation-template-response-template-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "templateUrl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cloud-formation-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cloud-formation-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cloud-formation-template-response
                    'make-create-cloud-formation-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "SemanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-application-request-application-id
                         :shape "__string" :location "uri" :location-name
                         "applicationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-application-request
                    'make-delete-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (serverlessrepo-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       forbidden-exception-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-error-code
                    'forbidden-exception-message)))
(common-lisp:progn
 (common-lisp:defclass get-application-policy-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-application-policy-request-application-id
                         :shape "__string" :location "uri" :location-name
                         "applicationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-application-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-application-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-application-policy-request
                    'make-get-application-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-application-policy-response common-lisp:nil
                       ((statements :initarg :statements :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfApplicationPolicyStatement|
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-application-policy-response-statements
                         :shape "__listOfApplicationPolicyStatement" :location
                         common-lisp:nil :location-name "statements"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-application-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-application-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-application-policy-response
                    'make-get-application-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statements))
      (common-lisp:list
       (common-lisp:cons "Statements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-application-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-application-request-application-id
                         :shape "__string" :location "uri" :location-name
                         "applicationId")
                        (semantic-version :initarg :semantic-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-application-request-semantic-version
                         :shape "__string" :location "querystring"
                         :location-name "semanticVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-application-request 'make-get-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-application-response common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-application-response-application-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "applicationId")
                        (author :initarg :author :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-get-application-response-author
                         :shape "__string" :location common-lisp:nil
                         :location-name "author")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-application-response-creation-time
                         :shape "__string" :location common-lisp:nil
                         :location-name "creationTime")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-application-response-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (home-page-url :initarg :home-page-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-application-response-home-page-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "homePageUrl")
                        (is-verified-author :initarg :is-verified-author
                         :initform common-lisp:nil :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-get-application-response-is-verified-author
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "isVerifiedAuthor")
                        (labels :initarg :labels :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-get-application-response-labels
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "labels")
                        (license-url :initarg :license-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-application-response-license-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "licenseUrl")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-application-response-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (readme-url :initarg :readme-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-application-response-readme-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "readmeUrl")
                        (spdx-license-id :initarg :spdx-license-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-application-response-spdx-license-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "spdxLicenseId")
                        (verified-author-url :initarg :verified-author-url
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-application-response-verified-author-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "verifiedAuthorUrl")
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         struct-shape-get-application-response-version :shape
                         "Version" :location common-lisp:nil :location-name
                         "version"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-application-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-application-response 'make-get-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "Author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-page-url))
      (common-lisp:list
       (common-lisp:cons "HomePageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-verified-author))
      (common-lisp:list
       (common-lisp:cons "IsVerifiedAuthor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-url))
      (common-lisp:list
       (common-lisp:cons "LicenseUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readme-url))
      (common-lisp:list
       (common-lisp:cons "ReadmeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spdx-license-id))
      (common-lisp:list
       (common-lisp:cons "SpdxLicenseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verified-author-url))
      (common-lisp:list
       (common-lisp:cons "VerifiedAuthorUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cloud-formation-template-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-cloud-formation-template-request-application-id
                         :shape "__string" :location "uri" :location-name
                         "applicationId")
                        (template-id :initarg :template-id :initform
                         (common-lisp:error ":template-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-cloud-formation-template-request-template-id
                         :shape "__string" :location "uri" :location-name
                         "templateId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cloud-formation-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-cloud-formation-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cloud-formation-template-request
                    'make-get-cloud-formation-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cloud-formation-template-response common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-cloud-formation-template-response-application-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "applicationId")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-cloud-formation-template-response-creation-time
                         :shape "__string" :location common-lisp:nil
                         :location-name "creationTime")
                        (expiration-time :initarg :expiration-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-cloud-formation-template-response-expiration-time
                         :shape "__string" :location common-lisp:nil
                         :location-name "expirationTime")
                        (semantic-version :initarg :semantic-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-cloud-formation-template-response-semantic-version
                         :shape "__string" :location common-lisp:nil
                         :location-name "semanticVersion")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-get-cloud-formation-template-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name "status")
                        (template-id :initarg :template-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-cloud-formation-template-response-template-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "templateId")
                        (template-url :initarg :template-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-cloud-formation-template-response-template-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "templateUrl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cloud-formation-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-cloud-formation-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cloud-formation-template-response
                    'make-get-cloud-formation-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "SemanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (serverlessrepo-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       internal-server-error-exception-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-error-code
                    'internal-server-error-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-application-dependencies-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-list-application-dependencies-request-application-id
                         :shape "__string" :location "uri" :location-name
                         "applicationId")
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or max-items common-lisp:null) :accessor
                         struct-shape-list-application-dependencies-request-max-items
                         :shape "MaxItems" :location "querystring"
                         :location-name "maxItems")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-application-dependencies-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken")
                        (semantic-version :initarg :semantic-version :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-application-dependencies-request-semantic-version
                         :shape "__string" :location "querystring"
                         :location-name "semanticVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-application-dependencies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-dependencies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-application-dependencies-request
                    'make-list-application-dependencies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dependencies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dependencies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dependencies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-application-dependencies-response common-lisp:nil
                       ((dependencies :initarg :dependencies :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfApplicationDependencySummary|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-application-dependencies-response-dependencies
                         :shape "__listOfApplicationDependencySummary"
                         :location common-lisp:nil :location-name
                         "dependencies")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-application-dependencies-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-application-dependencies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-dependencies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-application-dependencies-response
                    'make-list-application-dependencies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dependencies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dependencies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dependencies))
      (common-lisp:list
       (common-lisp:cons "Dependencies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-dependencies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-application-versions-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-list-application-versions-request-application-id
                         :shape "__string" :location "uri" :location-name
                         "applicationId")
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or max-items common-lisp:null) :accessor
                         struct-shape-list-application-versions-request-max-items
                         :shape "MaxItems" :location "querystring"
                         :location-name "maxItems")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-application-versions-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-application-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-application-versions-request
                    'make-list-application-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-application-versions-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-application-versions-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken")
                        (versions :initarg :versions :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOfVersionSummary|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-application-versions-response-versions
                         :shape "__listOfVersionSummary" :location
                         common-lisp:nil :location-name "versions"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-application-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-application-versions-response
                    'make-list-application-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "Versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-applications-request common-lisp:nil
                       ((max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or max-items common-lisp:null) :accessor
                         struct-shape-list-applications-request-max-items
                         :shape "MaxItems" :location "querystring"
                         :location-name "maxItems")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-applications-request-next-token
                         :shape "__string" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-applications-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-applications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-applications-request
                    'make-list-applications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-applications-response common-lisp:nil
                       ((applications :initarg :applications :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfApplicationSummary|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-applications-response-applications
                         :shape "__listOfApplicationSummary" :location
                         common-lisp:nil :location-name "applications")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-applications-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-applications-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-applications-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-applications-response
                    'make-list-applications-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   common-lisp:nil))
(common-lisp:deftype max-items () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (serverlessrepo-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       not-found-exception-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-error-code
                    'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass parameter-definition common-lisp:nil
                       ((allowed-pattern :initarg :allowed-pattern :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-parameter-definition-allowed-pattern
                         :shape "__string" :location common-lisp:nil
                         :location-name "allowedPattern")
                        (allowed-values :initarg :allowed-values :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-parameter-definition-allowed-values
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "allowedValues")
                        (constraint-description :initarg
                         :constraint-description :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-parameter-definition-constraint-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "constraintDescription")
                        (default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-parameter-definition-default-value :shape
                         "__string" :location common-lisp:nil :location-name
                         "defaultValue")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-parameter-definition-description :shape
                         "__string" :location common-lisp:nil :location-name
                         "description")
                        (max-length :initarg :max-length :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-parameter-definition-max-length
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxLength")
                        (max-value :initarg :max-value :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-parameter-definition-max-value
                         :shape "__integer" :location common-lisp:nil
                         :location-name "maxValue")
                        (min-length :initarg :min-length :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-parameter-definition-min-length
                         :shape "__integer" :location common-lisp:nil
                         :location-name "minLength")
                        (min-value :initarg :min-value :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor struct-shape-parameter-definition-min-value
                         :shape "__integer" :location common-lisp:nil
                         :location-name "minValue")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-parameter-definition-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (no-echo :initarg :no-echo :initform common-lisp:nil
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor struct-shape-parameter-definition-no-echo
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "noEcho")
                        (referenced-by-resources :initarg
                         :referenced-by-resources :initform
                         (common-lisp:error
                          ":referenced-by-resources is required")
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-parameter-definition-referenced-by-resources
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "referencedByResources")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-parameter-definition-type :shape
                         "__string" :location common-lisp:nil :location-name
                         "type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-parameter-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'parameter-definition 'make-parameter-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-pattern))
      (common-lisp:list
       (common-lisp:cons "AllowedPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constraint-description))
      (common-lisp:list
       (common-lisp:cons "ConstraintDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-length))
      (common-lisp:list
       (common-lisp:cons "MaxLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-value))
      (common-lisp:list
       (common-lisp:cons "MaxValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-length))
      (common-lisp:list
       (common-lisp:cons "MinLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-value))
      (common-lisp:list
       (common-lisp:cons "MinValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-echo))
      (common-lisp:list
       (common-lisp:cons "NoEcho"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'referenced-by-resources))
      (common-lisp:list
       (common-lisp:cons "ReferencedByResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parameter-value common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-parameter-value-name :shape "__string"
                         :location common-lisp:nil :location-name "name")
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-parameter-value-value :shape "__string"
                         :location common-lisp:nil :location-name "value"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-parameter-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'parameter-value 'make-parameter-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-application-policy-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-put-application-policy-request-application-id
                         :shape "__string" :location "uri" :location-name
                         "applicationId")
                        (statements :initarg :statements :initform
                         (common-lisp:error ":statements is required") :type
                         (common-lisp:or |__listOfApplicationPolicyStatement|
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-application-policy-request-statements
                         :shape "__listOfApplicationPolicyStatement" :location
                         common-lisp:nil :location-name "statements"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-application-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-application-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-application-policy-request
                    'make-put-application-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-application-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-application-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statements))
      (common-lisp:list
       (common-lisp:cons "Statements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-application-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-application-policy-response common-lisp:nil
                       ((statements :initarg :statements :initform
                         common-lisp:nil :type
                         (common-lisp:or |__listOfApplicationPolicyStatement|
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-application-policy-response-statements
                         :shape "__listOfApplicationPolicyStatement" :location
                         common-lisp:nil :location-name "statements"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-application-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-application-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-application-policy-response
                    'make-put-application-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-application-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-application-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statements))
      (common-lisp:list
       (common-lisp:cons "Statements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-application-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rollback-configuration common-lisp:nil
                       ((monitoring-time-in-minutes :initarg
                         :monitoring-time-in-minutes :initform common-lisp:nil
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         struct-shape-rollback-configuration-monitoring-time-in-minutes
                         :shape "__integer" :location common-lisp:nil
                         :location-name "monitoringTimeInMinutes")
                        (rollback-triggers :initarg :rollback-triggers
                         :initform common-lisp:nil :type
                         (common-lisp:or |__listOfRollbackTrigger|
                                         common-lisp:null)
                         :accessor
                         struct-shape-rollback-configuration-rollback-triggers
                         :shape "__listOfRollbackTrigger" :location
                         common-lisp:nil :location-name "rollbackTriggers"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rollback-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rollback-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rollback-configuration 'make-rollback-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rollback-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rollback-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-time-in-minutes))
      (common-lisp:list
       (common-lisp:cons "MonitoringTimeInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-triggers))
      (common-lisp:list
       (common-lisp:cons "RollbackTriggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rollback-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rollback-trigger common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-rollback-trigger-arn :shape "__string"
                         :location common-lisp:nil :location-name "arn")
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-rollback-trigger-type :shape "__string"
                         :location common-lisp:nil :location-name "type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rollback-trigger
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rollback-trigger
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rollback-trigger 'make-rollback-trigger))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rollback-trigger))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rollback-trigger))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rollback-trigger))
   common-lisp:nil))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-tag-key :shape "__string" :location
                         common-lisp:nil :location-name "key")
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-tag-value :shape "__string" :location
                         common-lisp:nil :location-name "value"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass template-details common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-template-details-application-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "applicationId")
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-template-details-creation-time :shape
                         "__string" :location common-lisp:nil :location-name
                         "creationTime")
                        (expiration-time :initarg :expiration-time :initform
                         (common-lisp:error ":expiration-time is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-template-details-expiration-time :shape
                         "__string" :location common-lisp:nil :location-name
                         "expirationTime")
                        (semantic-version :initarg :semantic-version :initform
                         (common-lisp:error ":semantic-version is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-template-details-semantic-version :shape
                         "__string" :location common-lisp:nil :location-name
                         "semanticVersion")
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or status common-lisp:null) :accessor
                         struct-shape-template-details-status :shape "Status"
                         :location common-lisp:nil :location-name "status")
                        (template-id :initarg :template-id :initform
                         (common-lisp:error ":template-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-template-details-template-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "templateId")
                        (template-url :initarg :template-url :initform
                         (common-lisp:error ":template-url is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-template-details-template-url :shape
                         "__string" :location common-lisp:nil :location-name
                         "templateUrl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-template-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'template-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'template-details 'make-template-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "SemanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (serverlessrepo-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       too-many-requests-exception-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-error-code
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:defclass unshare-application-input common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-unshare-application-input-organization-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "organizationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unshare-application-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unshare-application-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unshare-application-input
                    'make-unshare-application-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unshare-application-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unshare-application-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unshare-application-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unshare-application-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-unshare-application-request-application-id
                         :shape "__string" :location "uri" :location-name
                         "applicationId")
                        (organization-id :initarg :organization-id :initform
                         (common-lisp:error ":organization-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-unshare-application-request-organization-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "organizationId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unshare-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unshare-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unshare-application-request
                    'make-unshare-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unshare-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unshare-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unshare-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-input common-lisp:nil
                       ((author :initarg :author :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-update-application-input-author
                         :shape "__string" :location common-lisp:nil
                         :location-name "author")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-application-input-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (home-page-url :initarg :home-page-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-application-input-home-page-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "homePageUrl")
                        (labels :initarg :labels :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor struct-shape-update-application-input-labels
                         :shape "__listOf__string" :location common-lisp:nil
                         :location-name "labels")
                        (readme-body :initarg :readme-body :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-application-input-readme-body
                         :shape "__string" :location common-lisp:nil
                         :location-name "readmeBody")
                        (readme-url :initarg :readme-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-application-input-readme-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "readmeUrl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-application-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-application-input 'make-update-application-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "Author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-page-url))
      (common-lisp:list
       (common-lisp:cons "HomePageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readme-body))
      (common-lisp:list
       (common-lisp:cons "ReadmeBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readme-url))
      (common-lisp:list
       (common-lisp:cons "ReadmeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-request common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-application-request-application-id
                         :shape "__string" :location "uri" :location-name
                         "applicationId")
                        (author :initarg :author :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-application-request-author :shape
                         "__string" :location common-lisp:nil :location-name
                         "author")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-application-request-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (home-page-url :initarg :home-page-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-application-request-home-page-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "homePageUrl")
                        (labels :initarg :labels :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-update-application-request-labels :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "labels")
                        (readme-body :initarg :readme-body :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-application-request-readme-body
                         :shape "__string" :location common-lisp:nil
                         :location-name "readmeBody")
                        (readme-url :initarg :readme-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-application-request-readme-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "readmeUrl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-application-request
                    'make-update-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "Author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-page-url))
      (common-lisp:list
       (common-lisp:cons "HomePageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readme-body))
      (common-lisp:list
       (common-lisp:cons "ReadmeBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readme-url))
      (common-lisp:list
       (common-lisp:cons "ReadmeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-response common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-application-response-application-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "applicationId")
                        (author :initarg :author :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-application-response-author :shape
                         "__string" :location common-lisp:nil :location-name
                         "author")
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-application-response-creation-time
                         :shape "__string" :location common-lisp:nil
                         :location-name "creationTime")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-application-response-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (home-page-url :initarg :home-page-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-application-response-home-page-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "homePageUrl")
                        (is-verified-author :initarg :is-verified-author
                         :initform common-lisp:nil :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-update-application-response-is-verified-author
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "isVerifiedAuthor")
                        (labels :initarg :labels :initform common-lisp:nil
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         struct-shape-update-application-response-labels :shape
                         "__listOf__string" :location common-lisp:nil
                         :location-name "labels")
                        (license-url :initarg :license-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-application-response-license-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "licenseUrl")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-application-response-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "name")
                        (readme-url :initarg :readme-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-application-response-readme-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "readmeUrl")
                        (spdx-license-id :initarg :spdx-license-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-application-response-spdx-license-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "spdxLicenseId")
                        (verified-author-url :initarg :verified-author-url
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-application-response-verified-author-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "verifiedAuthorUrl")
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         struct-shape-update-application-response-version
                         :shape "Version" :location common-lisp:nil
                         :location-name "version"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-application-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-application-response
                    'make-update-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "Author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-page-url))
      (common-lisp:list
       (common-lisp:cons "HomePageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-verified-author))
      (common-lisp:list
       (common-lisp:cons "IsVerifiedAuthor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-url))
      (common-lisp:list
       (common-lisp:cons "LicenseUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readme-url))
      (common-lisp:list
       (common-lisp:cons "ReadmeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spdx-license-id))
      (common-lisp:list
       (common-lisp:cons "SpdxLicenseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verified-author-url))
      (common-lisp:list
       (common-lisp:cons "VerifiedAuthorUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass version common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-version-application-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "applicationId")
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-version-creation-time :shape "__string"
                         :location common-lisp:nil :location-name
                         "creationTime")
                        (parameter-definitions :initarg :parameter-definitions
                         :initform
                         (common-lisp:error
                          ":parameter-definitions is required")
                         :type
                         (common-lisp:or |__listOfParameterDefinition|
                                         common-lisp:null)
                         :accessor struct-shape-version-parameter-definitions
                         :shape "__listOfParameterDefinition" :location
                         common-lisp:nil :location-name "parameterDefinitions")
                        (required-capabilities :initarg :required-capabilities
                         :initform
                         (common-lisp:error
                          ":required-capabilities is required")
                         :type
                         (common-lisp:or |__listOfCapability| common-lisp:null)
                         :accessor struct-shape-version-required-capabilities
                         :shape "__listOfCapability" :location common-lisp:nil
                         :location-name "requiredCapabilities")
                        (resources-supported :initarg :resources-supported
                         :initform
                         (common-lisp:error ":resources-supported is required")
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor struct-shape-version-resources-supported
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "resourcesSupported")
                        (semantic-version :initarg :semantic-version :initform
                         (common-lisp:error ":semantic-version is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-version-semantic-version :shape
                         "__string" :location common-lisp:nil :location-name
                         "semanticVersion")
                        (source-code-archive-url :initarg
                         :source-code-archive-url :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-version-source-code-archive-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "sourceCodeArchiveUrl")
                        (source-code-url :initarg :source-code-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-version-source-code-url :shape "__string"
                         :location common-lisp:nil :location-name
                         "sourceCodeUrl")
                        (template-url :initarg :template-url :initform
                         (common-lisp:error ":template-url is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-version-template-url :shape "__string"
                         :location common-lisp:nil :location-name
                         "templateUrl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'version
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'version 'make-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-definitions))
      (common-lisp:list
       (common-lisp:cons "ParameterDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'required-capabilities))
      (common-lisp:list
       (common-lisp:cons "RequiredCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources-supported))
      (common-lisp:list
       (common-lisp:cons "ResourcesSupported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "SemanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-code-archive-url))
      (common-lisp:list
       (common-lisp:cons "SourceCodeArchiveUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code-url))
      (common-lisp:list
       (common-lisp:cons "SourceCodeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass version-summary common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         (common-lisp:error ":application-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-version-summary-application-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "applicationId")
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creation-time is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-version-summary-creation-time :shape
                         "__string" :location common-lisp:nil :location-name
                         "creationTime")
                        (semantic-version :initarg :semantic-version :initform
                         (common-lisp:error ":semantic-version is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-version-summary-semantic-version :shape
                         "__string" :location common-lisp:nil :location-name
                         "semanticVersion")
                        (source-code-url :initarg :source-code-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-version-summary-source-code-url :shape
                         "__string" :location common-lisp:nil :location-name
                         "sourceCodeUrl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-version-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'version-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'version-summary 'make-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semantic-version))
      (common-lisp:list
       (common-lisp:cons "SemanticVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code-url))
      (common-lisp:list
       (common-lisp:cons "SourceCodeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input version-summary))
   common-lisp:nil))
(common-lisp:deftype |__boolean| () 'common-lisp:boolean)
(common-lisp:deftype |__double| () 'common-lisp:double-float)
(common-lisp:deftype |__integer| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |__listOfApplicationDependencySummary| ()
   '(trivial-types:proper-list application-dependency-summary))
 (common-lisp:defun make-__listofapplicationdependencysummary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            application-dependency-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfApplicationPolicyStatement| ()
   '(trivial-types:proper-list application-policy-statement))
 (common-lisp:defun make-__listofapplicationpolicystatement
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            application-policy-statement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfApplicationSummary| ()
   '(trivial-types:proper-list application-summary))
 (common-lisp:defun make-__listofapplicationsummary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCapability| ()
   '(trivial-types:proper-list capability))
 (common-lisp:defun make-__listofcapability
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list capability))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfParameterDefinition| ()
   '(trivial-types:proper-list parameter-definition))
 (common-lisp:defun make-__listofparameterdefinition
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfParameterValue| ()
   '(trivial-types:proper-list parameter-value))
 (common-lisp:defun make-__listofparametervalue
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfRollbackTrigger| ()
   '(trivial-types:proper-list rollback-trigger))
 (common-lisp:defun make-__listofrollbacktrigger
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rollback-trigger))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfTag| () '(trivial-types:proper-list tag))
 (common-lisp:defun make-__listoftag
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfVersionSummary| ()
   '(trivial-types:proper-list version-summary))
 (common-lisp:defun make-__listofversionsummary
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__string| ()
   '(trivial-types:proper-list |__string|))
 (common-lisp:defun make-__listof__string
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__string|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |__long| () 'common-lisp:integer)
(common-lisp:deftype |__string| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key author description home-page-url labels
                     license-body license-url name readme-body readme-url
                     semantic-version source-code-archive-url source-code-url
                     spdx-license-id template-body template-url)
   (common-lisp:declare
    (common-lisp:ignorable author description home-page-url labels license-body
     license-url name readme-body readme-url semantic-version
     source-code-archive-url source-code-url spdx-license-id template-body
     template-url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'serverlessrepo-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/applications"
                                                        "CreateApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun create-application-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id semantic-version
                     source-code-archive-url source-code-url template-body
                     template-url)
   (common-lisp:declare
    (common-lisp:ignorable application-id semantic-version
     source-code-archive-url source-code-url template-body template-url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-application-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'serverlessrepo-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'semantic-version))))
                                                        "CreateApplicationVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-application-version))
(common-lisp:progn
 (common-lisp:defun create-cloud-formation-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id capabilities
                     change-set-name client-token description notification-arns
                     parameter-overrides resource-types rollback-configuration
                     semantic-version stack-name tags template-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id capabilities change-set-name
     client-token description notification-arns parameter-overrides
     resource-types rollback-configuration semantic-version stack-name tags
     template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cloud-formation-change-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'serverlessrepo-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/changesets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateCloudFormationChangeSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-cloud-formation-change-set))
(common-lisp:progn
 (common-lisp:defun create-cloud-formation-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id semantic-version)
   (common-lisp:declare
    (common-lisp:ignorable application-id semantic-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cloud-formation-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'serverlessrepo-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/templates"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateCloudFormationTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-cloud-formation-template))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'serverlessrepo-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun get-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id semantic-version)
   (common-lisp:declare
    (common-lisp:ignorable application-id semantic-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'serverlessrepo-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-application))
(common-lisp:progn
 (common-lisp:defun get-application-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-application-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'serverlessrepo-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetApplicationPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-application-policy))
(common-lisp:progn
 (common-lisp:defun get-cloud-formation-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id template-id)
   (common-lisp:declare (common-lisp:ignorable application-id template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-cloud-formation-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'serverlessrepo-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/templates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-id))))
                                                        "GetCloudFormationTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-cloud-formation-template))
(common-lisp:progn
 (common-lisp:defun list-application-dependencies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-items next-token
                     semantic-version)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-items next-token
     semantic-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-application-dependencies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'serverlessrepo-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/dependencies"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListApplicationDependencies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-application-dependencies))
(common-lisp:progn
 (common-lisp:defun list-application-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id max-items next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-id max-items next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-application-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'serverlessrepo-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListApplicationVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-application-versions))
(common-lisp:progn
 (common-lisp:defun list-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-items next-token)
   (common-lisp:declare (common-lisp:ignorable max-items next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'serverlessrepo-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/applications"
                                                        "ListApplications"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-applications))
(common-lisp:progn
 (common-lisp:defun put-application-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id statements)
   (common-lisp:declare (common-lisp:ignorable application-id statements))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-application-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'serverlessrepo-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "PutApplicationPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-application-policy))
(common-lisp:progn
 (common-lisp:defun unshare-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id organization-id)
   (common-lisp:declare (common-lisp:ignorable application-id organization-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-unshare-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'serverlessrepo-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A/unshare"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UnshareApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'unshare-application))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id author description
                     home-page-url labels readme-body readme-url)
   (common-lisp:declare
    (common-lisp:ignorable application-id author description home-page-url
     labels readme-body readme-url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'serverlessrepo-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/applications/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-application))
