;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/iam/api (:use)
                             (:nicknames #:aws/iam)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/iam/api)
(common-lisp:progn
 (common-lisp:define-condition iam-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'iam-error))
(common-lisp:progn
 (common-lisp:defclass iam-request (aws-sdk/query-request:query-request)
                       common-lisp:nil
                       (:default-initargs :service "iam" :api-version
                        "2010-05-08" :host-prefix "iam" :signing-name
                        common-lisp:nil :global-host "iam.amazonaws.com"))
 (common-lisp:export 'iam-request))
(common-lisp:defvar *error-map*
  '(("ConcurrentModificationException" . concurrent-modification-exception)
    ("CredentialReportExpiredException" . credential-report-expired-exception)
    ("CredentialReportNotPresentException"
     . credential-report-not-present-exception)
    ("CredentialReportNotReadyException"
     . credential-report-not-ready-exception)
    ("DeleteConflictException" . delete-conflict-exception)
    ("DuplicateCertificateException" . duplicate-certificate-exception)
    ("DuplicateSSHPublicKeyException" . duplicate-sshpublic-key-exception)
    ("EntityAlreadyExistsException" . entity-already-exists-exception)
    ("EntityTemporarilyUnmodifiableException"
     . entity-temporarily-unmodifiable-exception)
    ("InvalidAuthenticationCodeException"
     . invalid-authentication-code-exception)
    ("InvalidCertificateException" . invalid-certificate-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("InvalidPublicKeyException" . invalid-public-key-exception)
    ("InvalidUserTypeException" . invalid-user-type-exception)
    ("KeyPairMismatchException" . key-pair-mismatch-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("MalformedCertificateException" . malformed-certificate-exception)
    ("MalformedPolicyDocumentException" . malformed-policy-document-exception)
    ("NoSuchEntityException" . no-such-entity-exception)
    ("PasswordPolicyViolationException" . password-policy-violation-exception)
    ("PolicyEvaluationException" . policy-evaluation-exception)
    ("PolicyNotAttachableException" . policy-not-attachable-exception)
    ("ReportGenerationLimitExceededException"
     . report-generation-limit-exceeded-exception)
    ("ServiceFailureException" . service-failure-exception)
    ("ServiceNotSupportedException" . service-not-supported-exception)
    ("UnmodifiableEntityException" . unmodifiable-entity-exception)
    ("UnrecognizedPublicKeyEncodingException"
     . unrecognized-public-key-encoding-exception)))
(common-lisp:deftype access-advisor-usage-granularity-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass access-detail common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         (common-lisp:error ":service-name is required") :type
                         (common-lisp:or |serviceNameType| common-lisp:null)
                         :accessor struct-shape-access-detail-service-name
                         :shape "serviceNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":service-namespace is required")
                         :type
                         (common-lisp:or |serviceNamespaceType|
                                         common-lisp:null)
                         :accessor struct-shape-access-detail-service-namespace
                         :shape "serviceNamespaceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or |stringType| common-lisp:null)
                         :accessor struct-shape-access-detail-region :shape
                         "stringType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-path :initarg :entity-path :initform
                         common-lisp:nil :type
                         (common-lisp:or |organizationsEntityPathType|
                                         common-lisp:null)
                         :accessor struct-shape-access-detail-entity-path
                         :shape "organizationsEntityPathType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-authenticated-time :initarg
                         :last-authenticated-time :initform common-lisp:nil
                         :type (common-lisp:or |dateType| common-lisp:null)
                         :accessor
                         struct-shape-access-detail-last-authenticated-time
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-authenticated-entities :initarg
                         :total-authenticated-entities :initform
                         common-lisp:nil :type
                         (common-lisp:or |integerType| common-lisp:null)
                         :accessor
                         struct-shape-access-detail-total-authenticated-entities
                         :shape "integerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'access-detail 'make-access-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-path))
      (common-lisp:list
       (common-lisp:cons "EntityPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-authenticated-time))
      (common-lisp:list
       (common-lisp:cons "LastAuthenticatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-authenticated-entities))
      (common-lisp:list
       (common-lisp:cons "TotalAuthenticatedEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-details ()
   '(trivial-types:proper-list access-detail))
 (common-lisp:defun make-access-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass access-key common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor struct-shape-access-key-user-name :shape
                         "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-key-id :initarg :access-key-id :initform
                         (common-lisp:error ":access-key-id is required") :type
                         (common-lisp:or |accessKeyIdType| common-lisp:null)
                         :accessor struct-shape-access-key-access-key-id :shape
                         "accessKeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or |statusType| common-lisp:null)
                         :accessor struct-shape-access-key-status :shape
                         "statusType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secret-access-key :initarg :secret-access-key
                         :initform
                         (common-lisp:error ":secret-access-key is required")
                         :type
                         (common-lisp:or |accessKeySecretType|
                                         common-lisp:null)
                         :accessor struct-shape-access-key-secret-access-key
                         :shape "accessKeySecretType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-access-key-create-date :shape "dateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'access-key 'make-access-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "SecretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass access-key-last-used common-lisp:nil
                       ((last-used-date :initarg :last-used-date :initform
                         (common-lisp:error ":last-used-date is required")
                         :type (common-lisp:or |dateType| common-lisp:null)
                         :accessor
                         struct-shape-access-key-last-used-last-used-date
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":service-name is required") :type
                         (common-lisp:or |stringType| common-lisp:null)
                         :accessor
                         struct-shape-access-key-last-used-service-name :shape
                         "stringType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region :initarg :region :initform
                         (common-lisp:error ":region is required") :type
                         (common-lisp:or |stringType| common-lisp:null)
                         :accessor struct-shape-access-key-last-used-region
                         :shape "stringType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-key-last-used
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-key-last-used
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-key-last-used 'make-access-key-last-used))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-key-last-used))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-key-last-used))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-used-date))
      (common-lisp:list
       (common-lisp:cons "LastUsedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-key-last-used))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass access-key-metadata common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor struct-shape-access-key-metadata-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-key-id :initarg :access-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |accessKeyIdType| common-lisp:null)
                         :accessor
                         struct-shape-access-key-metadata-access-key-id :shape
                         "accessKeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |statusType| common-lisp:null)
                         :accessor struct-shape-access-key-metadata-status
                         :shape "statusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-access-key-metadata-create-date :shape
                         "dateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-key-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-key-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-key-metadata 'make-access-key-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-key-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-key-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-key-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-name-list-type ()
   '(trivial-types:proper-list action-name-type))
 (common-lisp:defun make-action-name-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-name-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass add-client-idto-open-idconnect-provider-request
                       common-lisp:nil
                       ((open-idconnect-provider-arn :initarg
                         :open-idconnect-provider-arn :initform
                         (common-lisp:error
                          ":open-idconnect-provider-arn is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-add-client-idto-open-idconnect-provider-request-open-idconnect-provider-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or |clientIDType| common-lisp:null)
                         :accessor
                         struct-shape-add-client-idto-open-idconnect-provider-request-client-id
                         :shape "clientIDType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-client-idto-open-idconnect-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-client-idto-open-idconnect-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-client-idto-open-idconnect-provider-request
                    'make-add-client-idto-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-client-idto-open-idconnect-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-client-idto-open-idconnect-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-client-idto-open-idconnect-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-role-to-instance-profile-request common-lisp:nil
                       ((instance-profile-name :initarg :instance-profile-name
                         :initform
                         (common-lisp:error
                          ":instance-profile-name is required")
                         :type
                         (common-lisp:or |instanceProfileNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-role-to-instance-profile-request-instance-profile-name
                         :shape "instanceProfileNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor
                         struct-shape-add-role-to-instance-profile-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-role-to-instance-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-role-to-instance-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-role-to-instance-profile-request
                    'make-add-role-to-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-user-to-group-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor
                         struct-shape-add-user-to-group-request-group-name
                         :shape "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-user-to-group-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-user-to-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-user-to-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-user-to-group-request
                    'make-add-user-to-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-user-to-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-user-to-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-user-to-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype arn-list-type () '(trivial-types:proper-list |arnType|))
 (common-lisp:defun make-arn-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |arnType|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass attach-group-policy-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor
                         struct-shape-attach-group-policy-request-group-name
                         :shape "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-attach-group-policy-request-policy-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-group-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attach-group-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-group-policy-request
                    'make-attach-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-group-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-group-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-group-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-role-policy-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor
                         struct-shape-attach-role-policy-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-attach-role-policy-request-policy-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-role-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attach-role-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-role-policy-request
                    'make-attach-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-role-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-role-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-role-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-user-policy-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-attach-user-policy-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-attach-user-policy-request-policy-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-user-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attach-user-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-user-policy-request
                    'make-attach-user-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-user-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-user-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-user-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attached-permissions-boundary common-lisp:nil
                       ((permissions-boundary-type :initarg
                         :permissions-boundary-type :initform common-lisp:nil
                         :type
                         (common-lisp:or permissions-boundary-attachment-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-attached-permissions-boundary-permissions-boundary-type
                         :shape "PermissionsBoundaryAttachmentType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (permissions-boundary-arn :initarg
                         :permissions-boundary-arn :initform common-lisp:nil
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-attached-permissions-boundary-permissions-boundary-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attached-permissions-boundary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'attached-permissions-boundary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attached-permissions-boundary
                    'make-attached-permissions-boundary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attached-permissions-boundary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attached-permissions-boundary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-type))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-arn))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attached-permissions-boundary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attached-policy common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor struct-shape-attached-policy-policy-name
                         :shape "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-arn :initarg :policy-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-attached-policy-policy-arn :shape
                         "arnType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attached-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attached-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'attached-policy 'make-attached-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attached-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attached-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attached-policy))
   common-lisp:nil))
(common-lisp:deftype bootstrap-datum ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype certification-key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype certification-map-type () 'common-lisp:hash-table)
 (common-lisp:defun make-certification-map-type
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype certification-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass change-password-request common-lisp:nil
                       ((old-password :initarg :old-password :initform
                         (common-lisp:error ":old-password is required") :type
                         (common-lisp:or |passwordType| common-lisp:null)
                         :accessor
                         struct-shape-change-password-request-old-password
                         :shape "passwordType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-password :initarg :new-password :initform
                         (common-lisp:error ":new-password is required") :type
                         (common-lisp:or |passwordType| common-lisp:null)
                         :accessor
                         struct-shape-change-password-request-new-password
                         :shape "passwordType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-change-password-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'change-password-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'change-password-request 'make-change-password-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-password-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-password-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'old-password))
      (common-lisp:list
       (common-lisp:cons "OldPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-password))
      (common-lisp:list
       (common-lisp:cons "NewPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-password-request))
   common-lisp:nil))
(common-lisp:deftype column-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:deftype concurrent-modification-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass context-entry common-lisp:nil
                       ((context-key-name :initarg :context-key-name :initform
                         common-lisp:nil :type
                         (common-lisp:or context-key-name-type
                                         common-lisp:null)
                         :accessor struct-shape-context-entry-context-key-name
                         :shape "ContextKeyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (context-key-values :initarg :context-key-values
                         :initform common-lisp:nil :type
                         (common-lisp:or context-key-value-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-context-entry-context-key-values :shape
                         "ContextKeyValueListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (context-key-type :initarg :context-key-type :initform
                         common-lisp:nil :type
                         (common-lisp:or context-key-type-enum
                                         common-lisp:null)
                         :accessor struct-shape-context-entry-context-key-type
                         :shape "ContextKeyTypeEnum" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-context-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'context-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'context-entry 'make-context-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input context-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input context-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-key-name))
      (common-lisp:list
       (common-lisp:cons "ContextKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-key-values))
      (common-lisp:list
       (common-lisp:cons "ContextKeyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-key-type))
      (common-lisp:list
       (common-lisp:cons "ContextKeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input context-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype context-entry-list-type ()
   '(trivial-types:proper-list context-entry))
 (common-lisp:defun make-context-entry-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list context-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype context-key-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype context-key-names-result-list-type ()
   '(trivial-types:proper-list context-key-name-type))
 (common-lisp:defun make-context-key-names-result-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list context-key-name-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype context-key-type-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype context-key-value-list-type ()
   '(trivial-types:proper-list context-key-value-type))
 (common-lisp:defun make-context-key-value-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list context-key-value-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype context-key-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-access-key-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-access-key-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-access-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-access-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-access-key-request
                    'make-create-access-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-access-key-response common-lisp:nil
                       ((access-key :initarg :access-key :initform
                         (common-lisp:error ":access-key is required") :type
                         (common-lisp:or access-key common-lisp:null) :accessor
                         struct-shape-create-access-key-response-access-key
                         :shape "AccessKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-access-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-access-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-access-key-response
                    'make-create-access-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key))
      (common-lisp:list
       (common-lisp:cons "AccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-account-alias-request common-lisp:nil
                       ((account-alias :initarg :account-alias :initform
                         (common-lisp:error ":account-alias is required") :type
                         (common-lisp:or |accountAliasType| common-lisp:null)
                         :accessor
                         struct-shape-create-account-alias-request-account-alias
                         :shape "accountAliasType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-account-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-account-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-account-alias-request
                    'make-create-account-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-account-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-account-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-alias))
      (common-lisp:list
       (common-lisp:cons "AccountAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-account-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-group-request common-lisp:nil
                       ((path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or |pathType| common-lisp:null) :accessor
                         struct-shape-create-group-request-path :shape
                         "pathType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor struct-shape-create-group-request-group-name
                         :shape "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-group-request 'make-create-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-group-response common-lisp:nil
                       ((group :initarg :group :initform
                         (common-lisp:error ":group is required") :type
                         (common-lisp:or group common-lisp:null) :accessor
                         struct-shape-create-group-response-group :shape
                         "Group" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-group-response 'make-create-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-instance-profile-request common-lisp:nil
                       ((instance-profile-name :initarg :instance-profile-name
                         :initform
                         (common-lisp:error
                          ":instance-profile-name is required")
                         :type
                         (common-lisp:or |instanceProfileNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-instance-profile-request-instance-profile-name
                         :shape "instanceProfileNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or |pathType| common-lisp:null) :accessor
                         struct-shape-create-instance-profile-request-path
                         :shape "pathType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor
                         struct-shape-create-instance-profile-request-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-instance-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-instance-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-instance-profile-request
                    'make-create-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-instance-profile-response common-lisp:nil
                       ((instance-profile :initarg :instance-profile :initform
                         (common-lisp:error ":instance-profile is required")
                         :type
                         (common-lisp:or instance-profile common-lisp:null)
                         :accessor
                         struct-shape-create-instance-profile-response-instance-profile
                         :shape "InstanceProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-instance-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-instance-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-instance-profile-response
                    'make-create-instance-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profile))
      (common-lisp:list
       (common-lisp:cons "InstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-login-profile-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-create-login-profile-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform
                         (common-lisp:error ":password is required") :type
                         (common-lisp:or |passwordType| common-lisp:null)
                         :accessor
                         struct-shape-create-login-profile-request-password
                         :shape "passwordType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password-reset-required :initarg
                         :password-reset-required :initform common-lisp:nil
                         :type (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-create-login-profile-request-password-reset-required
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-login-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-login-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-login-profile-request
                    'make-create-login-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-login-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-login-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'password-reset-required))
      (common-lisp:list
       (common-lisp:cons "PasswordResetRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-login-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-login-profile-response common-lisp:nil
                       ((login-profile :initarg :login-profile :initform
                         (common-lisp:error ":login-profile is required") :type
                         (common-lisp:or login-profile common-lisp:null)
                         :accessor
                         struct-shape-create-login-profile-response-login-profile
                         :shape "LoginProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-login-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-login-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-login-profile-response
                    'make-create-login-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-login-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-login-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-profile))
      (common-lisp:list
       (common-lisp:cons "LoginProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-login-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-open-idconnect-provider-request common-lisp:nil
                       ((url :initarg :url :initform
                         (common-lisp:error ":url is required") :type
                         (common-lisp:or open-idconnect-provider-url-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-open-idconnect-provider-request-url
                         :shape "OpenIDConnectProviderUrlType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-idlist :initarg :client-idlist :initform
                         common-lisp:nil :type
                         (common-lisp:or |clientIDListType| common-lisp:null)
                         :accessor
                         struct-shape-create-open-idconnect-provider-request-client-idlist
                         :shape "clientIDListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thumbprint-list :initarg :thumbprint-list :initform
                         (common-lisp:error ":thumbprint-list is required")
                         :type
                         (common-lisp:or |thumbprintListType| common-lisp:null)
                         :accessor
                         struct-shape-create-open-idconnect-provider-request-thumbprint-list
                         :shape "thumbprintListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor
                         struct-shape-create-open-idconnect-provider-request-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-open-idconnect-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-open-idconnect-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-open-idconnect-provider-request
                    'make-create-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-open-idconnect-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-open-idconnect-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-idlist))
      (common-lisp:list
       (common-lisp:cons "ClientIDList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbprint-list))
      (common-lisp:list
       (common-lisp:cons "ThumbprintList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-open-idconnect-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-open-idconnect-provider-response common-lisp:nil
                       ((open-idconnect-provider-arn :initarg
                         :open-idconnect-provider-arn :initform common-lisp:nil
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-create-open-idconnect-provider-response-open-idconnect-provider-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor
                         struct-shape-create-open-idconnect-provider-response-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-open-idconnect-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-open-idconnect-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-open-idconnect-provider-response
                    'make-create-open-idconnect-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-open-idconnect-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-open-idconnect-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-open-idconnect-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-policy-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor
                         struct-shape-create-policy-request-policy-name :shape
                         "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or |policyPathType| common-lisp:null)
                         :accessor struct-shape-create-policy-request-path
                         :shape "policyPathType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policy-document is required")
                         :type
                         (common-lisp:or |policyDocumentType| common-lisp:null)
                         :accessor
                         struct-shape-create-policy-request-policy-document
                         :shape "policyDocumentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyDescriptionType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-policy-request-description :shape
                         "policyDescriptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-create-policy-request-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-policy-request 'make-create-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-policy-response common-lisp:nil
                       ((policy :initarg :policy :initform common-lisp:nil
                         :type (common-lisp:or policy common-lisp:null)
                         :accessor struct-shape-create-policy-response-policy
                         :shape "Policy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-policy-response 'make-create-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-policy-version-request common-lisp:nil
                       ((policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-create-policy-version-request-policy-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policy-document is required")
                         :type
                         (common-lisp:or |policyDocumentType| common-lisp:null)
                         :accessor
                         struct-shape-create-policy-version-request-policy-document
                         :shape "policyDocumentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (set-as-default :initarg :set-as-default :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-create-policy-version-request-set-as-default
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-policy-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-policy-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-policy-version-request
                    'make-create-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'set-as-default))
      (common-lisp:list
       (common-lisp:cons "SetAsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-policy-version-response common-lisp:nil
                       ((policy-version :initarg :policy-version :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-version common-lisp:null)
                         :accessor
                         struct-shape-create-policy-version-response-policy-version
                         :shape "PolicyVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-policy-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-policy-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-policy-version-response
                    'make-create-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version))
      (common-lisp:list
       (common-lisp:cons "PolicyVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-role-request common-lisp:nil
                       ((path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or |pathType| common-lisp:null) :accessor
                         struct-shape-create-role-request-path :shape
                         "pathType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor struct-shape-create-role-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assume-role-policy-document :initarg
                         :assume-role-policy-document :initform
                         (common-lisp:error
                          ":assume-role-policy-document is required")
                         :type
                         (common-lisp:or |policyDocumentType| common-lisp:null)
                         :accessor
                         struct-shape-create-role-request-assume-role-policy-document
                         :shape "policyDocumentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |roleDescriptionType|
                                         common-lisp:null)
                         :accessor struct-shape-create-role-request-description
                         :shape "roleDescriptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-session-duration :initarg :max-session-duration
                         :initform common-lisp:nil :type
                         (common-lisp:or |roleMaxSessionDurationType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-role-request-max-session-duration
                         :shape "roleMaxSessionDurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (permissions-boundary :initarg :permissions-boundary
                         :initform common-lisp:nil :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-create-role-request-permissions-boundary
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-create-role-request-tags :shape
                         "tagListType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-role-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-role-request 'make-create-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assume-role-policy-document))
      (common-lisp:list
       (common-lisp:cons "AssumeRolePolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-session-duration))
      (common-lisp:list
       (common-lisp:cons "MaxSessionDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-role-response common-lisp:nil
                       ((role :initarg :role :initform
                         (common-lisp:error ":role is required") :type
                         (common-lisp:or role common-lisp:null) :accessor
                         struct-shape-create-role-response-role :shape "Role"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-role-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-role-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-role-response 'make-create-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-samlprovider-request common-lisp:nil
                       ((samlmetadata-document :initarg :samlmetadata-document
                         :initform
                         (common-lisp:error
                          ":samlmetadata-document is required")
                         :type
                         (common-lisp:or samlmetadata-document-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-samlprovider-request-samlmetadata-document
                         :shape "SAMLMetadataDocumentType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or samlprovider-name-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-samlprovider-request-name :shape
                         "SAMLProviderNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor
                         struct-shape-create-samlprovider-request-tags :shape
                         "tagListType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-samlprovider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-samlprovider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-samlprovider-request
                    'make-create-samlprovider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-samlprovider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-samlprovider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'samlmetadata-document))
      (common-lisp:list
       (common-lisp:cons "SAMLMetadataDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-samlprovider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-samlprovider-response common-lisp:nil
                       ((samlprovider-arn :initarg :samlprovider-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-create-samlprovider-response-samlprovider-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor
                         struct-shape-create-samlprovider-response-tags :shape
                         "tagListType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-samlprovider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-samlprovider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-samlprovider-response
                    'make-create-samlprovider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-samlprovider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-samlprovider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-arn))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-samlprovider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-linked-role-request common-lisp:nil
                       ((awsservice-name :initarg :awsservice-name :initform
                         (common-lisp:error ":awsservice-name is required")
                         :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor
                         struct-shape-create-service-linked-role-request-awsservice-name
                         :shape "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |roleDescriptionType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-service-linked-role-request-description
                         :shape "roleDescriptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-suffix :initarg :custom-suffix :initform
                         common-lisp:nil :type
                         (common-lisp:or |customSuffixType| common-lisp:null)
                         :accessor
                         struct-shape-create-service-linked-role-request-custom-suffix
                         :shape "customSuffixType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-service-linked-role-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-service-linked-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-service-linked-role-request
                    'make-create-service-linked-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-linked-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-linked-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'awsservice-name))
      (common-lisp:list
       (common-lisp:cons "AWSServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-suffix))
      (common-lisp:list
       (common-lisp:cons "CustomSuffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-linked-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-linked-role-response common-lisp:nil
                       ((role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or role common-lisp:null) :accessor
                         struct-shape-create-service-linked-role-response-role
                         :shape "Role" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-service-linked-role-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-service-linked-role-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-service-linked-role-response
                    'make-create-service-linked-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-linked-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-linked-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-linked-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-specific-credential-request
                       common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-create-service-specific-credential-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":service-name is required") :type
                         (common-lisp:or |serviceName| common-lisp:null)
                         :accessor
                         struct-shape-create-service-specific-credential-request-service-name
                         :shape "serviceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-service-specific-credential-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-service-specific-credential-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-service-specific-credential-request
                    'make-create-service-specific-credential-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-specific-credential-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-specific-credential-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-specific-credential-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-specific-credential-response
                       common-lisp:nil
                       ((service-specific-credential :initarg
                         :service-specific-credential :initform common-lisp:nil
                         :type
                         (common-lisp:or service-specific-credential
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-service-specific-credential-response-service-specific-credential
                         :shape "ServiceSpecificCredential" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-service-specific-credential-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-service-specific-credential-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-service-specific-credential-response
                    'make-create-service-specific-credential-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-specific-credential-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-specific-credential-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specific-credential))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecificCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-specific-credential-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-request common-lisp:nil
                       ((path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or |pathType| common-lisp:null) :accessor
                         struct-shape-create-user-request-path :shape
                         "pathType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor struct-shape-create-user-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permissions-boundary :initarg :permissions-boundary
                         :initform common-lisp:nil :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-create-user-request-permissions-boundary
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-create-user-request-tags :shape
                         "tagListType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-response common-lisp:nil
                       ((user :initarg :user :initform common-lisp:nil :type
                         (common-lisp:or user common-lisp:null) :accessor
                         struct-shape-create-user-response-user :shape "User"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-virtual-mfadevice-request common-lisp:nil
                       ((path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or |pathType| common-lisp:null) :accessor
                         struct-shape-create-virtual-mfadevice-request-path
                         :shape "pathType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-mfadevice-name :initarg
                         :virtual-mfadevice-name :initform
                         (common-lisp:error
                          ":virtual-mfadevice-name is required")
                         :type
                         (common-lisp:or |virtualMFADeviceName|
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-mfadevice-request-virtual-mfadevice-name
                         :shape "virtualMFADeviceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-mfadevice-request-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-virtual-mfadevice-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-virtual-mfadevice-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-virtual-mfadevice-request
                    'make-create-virtual-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-mfadevice-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-mfadevice-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-mfadevice-name))
      (common-lisp:list
       (common-lisp:cons "VirtualMFADeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-mfadevice-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-virtual-mfadevice-response common-lisp:nil
                       ((virtual-mfadevice :initarg :virtual-mfadevice
                         :initform
                         (common-lisp:error ":virtual-mfadevice is required")
                         :type
                         (common-lisp:or virtual-mfadevice common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-mfadevice-response-virtual-mfadevice
                         :shape "VirtualMFADevice" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-virtual-mfadevice-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-virtual-mfadevice-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-virtual-mfadevice-response
                    'make-create-virtual-mfadevice-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-mfadevice-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-mfadevice-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-mfadevice))
      (common-lisp:list
       (common-lisp:cons "VirtualMFADevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-mfadevice-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition credential-report-expired-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       credential-report-expired-exception-message)))
 (common-lisp:export
  (common-lisp:list 'credential-report-expired-exception
                    'credential-report-expired-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition credential-report-not-present-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       credential-report-not-present-exception-message)))
 (common-lisp:export
  (common-lisp:list 'credential-report-not-present-exception
                    'credential-report-not-present-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition credential-report-not-ready-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       credential-report-not-ready-exception-message)))
 (common-lisp:export
  (common-lisp:list 'credential-report-not-ready-exception
                    'credential-report-not-ready-exception-message)))
(common-lisp:progn
 (common-lisp:defclass deactivate-mfadevice-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-deactivate-mfadevice-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (serial-number :initarg :serial-number :initform
                         (common-lisp:error ":serial-number is required") :type
                         (common-lisp:or |serialNumberType| common-lisp:null)
                         :accessor
                         struct-shape-deactivate-mfadevice-request-serial-number
                         :shape "serialNumberType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deactivate-mfadevice-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deactivate-mfadevice-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deactivate-mfadevice-request
                    'make-deactivate-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-mfadevice-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-mfadevice-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-mfadevice-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-access-key-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-access-key-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (access-key-id :initarg :access-key-id :initform
                         (common-lisp:error ":access-key-id is required") :type
                         (common-lisp:or |accessKeyIdType| common-lisp:null)
                         :accessor
                         struct-shape-delete-access-key-request-access-key-id
                         :shape "accessKeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-access-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-access-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-access-key-request
                    'make-delete-access-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-account-alias-request common-lisp:nil
                       ((account-alias :initarg :account-alias :initform
                         (common-lisp:error ":account-alias is required") :type
                         (common-lisp:or |accountAliasType| common-lisp:null)
                         :accessor
                         struct-shape-delete-account-alias-request-account-alias
                         :shape "accountAliasType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-account-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-account-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-account-alias-request
                    'make-delete-account-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-alias))
      (common-lisp:list
       (common-lisp:cons "AccountAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition delete-conflict-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       delete-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'delete-conflict-exception
                    'delete-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass delete-group-policy-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor
                         struct-shape-delete-group-policy-request-group-name
                         :shape "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor
                         struct-shape-delete-group-policy-request-policy-name
                         :shape "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-group-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-group-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-group-policy-request
                    'make-delete-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-group-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor struct-shape-delete-group-request-group-name
                         :shape "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-group-request 'make-delete-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-instance-profile-request common-lisp:nil
                       ((instance-profile-name :initarg :instance-profile-name
                         :initform
                         (common-lisp:error
                          ":instance-profile-name is required")
                         :type
                         (common-lisp:or |instanceProfileNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-instance-profile-request-instance-profile-name
                         :shape "instanceProfileNameType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-instance-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-instance-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-instance-profile-request
                    'make-delete-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-login-profile-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-delete-login-profile-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-login-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-login-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-login-profile-request
                    'make-delete-login-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-login-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-login-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-login-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-open-idconnect-provider-request common-lisp:nil
                       ((open-idconnect-provider-arn :initarg
                         :open-idconnect-provider-arn :initform
                         (common-lisp:error
                          ":open-idconnect-provider-arn is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-delete-open-idconnect-provider-request-open-idconnect-provider-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-open-idconnect-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-open-idconnect-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-open-idconnect-provider-request
                    'make-delete-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-open-idconnect-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-open-idconnect-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-open-idconnect-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-policy-request common-lisp:nil
                       ((policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-delete-policy-request-policy-arn :shape
                         "arnType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-policy-request 'make-delete-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-policy-version-request common-lisp:nil
                       ((policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-delete-policy-version-request-policy-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         (common-lisp:error ":version-id is required") :type
                         (common-lisp:or |policyVersionIdType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-policy-version-request-version-id
                         :shape "policyVersionIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-policy-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-policy-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-policy-version-request
                    'make-delete-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-role-permissions-boundary-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor
                         struct-shape-delete-role-permissions-boundary-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-role-permissions-boundary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-role-permissions-boundary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-role-permissions-boundary-request
                    'make-delete-role-permissions-boundary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-permissions-boundary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-permissions-boundary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-permissions-boundary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-role-policy-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor
                         struct-shape-delete-role-policy-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor
                         struct-shape-delete-role-policy-request-policy-name
                         :shape "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-role-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-role-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-role-policy-request
                    'make-delete-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-role-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor struct-shape-delete-role-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-role-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-role-request 'make-delete-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-samlprovider-request common-lisp:nil
                       ((samlprovider-arn :initarg :samlprovider-arn :initform
                         (common-lisp:error ":samlprovider-arn is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-delete-samlprovider-request-samlprovider-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-samlprovider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-samlprovider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-samlprovider-request
                    'make-delete-samlprovider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-samlprovider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-samlprovider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-arn))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-samlprovider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-sshpublic-key-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-delete-sshpublic-key-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sshpublic-key-id :initarg :sshpublic-key-id :initform
                         (common-lisp:error ":sshpublic-key-id is required")
                         :type
                         (common-lisp:or |publicKeyIdType| common-lisp:null)
                         :accessor
                         struct-shape-delete-sshpublic-key-request-sshpublic-key-id
                         :shape "publicKeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-sshpublic-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-sshpublic-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-sshpublic-key-request
                    'make-delete-sshpublic-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sshpublic-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sshpublic-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key-id))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sshpublic-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-server-certificate-request common-lisp:nil
                       ((server-certificate-name :initarg
                         :server-certificate-name :initform
                         (common-lisp:error
                          ":server-certificate-name is required")
                         :type
                         (common-lisp:or |serverCertificateNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-server-certificate-request-server-certificate-name
                         :shape "serverCertificateNameType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-server-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-server-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-server-certificate-request
                    'make-delete-server-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-linked-role-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor
                         struct-shape-delete-service-linked-role-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-service-linked-role-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-service-linked-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-service-linked-role-request
                    'make-delete-service-linked-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-linked-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-linked-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-linked-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-linked-role-response common-lisp:nil
                       ((deletion-task-id :initarg :deletion-task-id :initform
                         (common-lisp:error ":deletion-task-id is required")
                         :type
                         (common-lisp:or deletion-task-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-service-linked-role-response-deletion-task-id
                         :shape "DeletionTaskIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-service-linked-role-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-service-linked-role-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-service-linked-role-response
                    'make-delete-service-linked-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-linked-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-linked-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-task-id))
      (common-lisp:list
       (common-lisp:cons "DeletionTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-linked-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-specific-credential-request
                       common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-delete-service-specific-credential-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-specific-credential-id :initarg
                         :service-specific-credential-id :initform
                         (common-lisp:error
                          ":service-specific-credential-id is required")
                         :type
                         (common-lisp:or |serviceSpecificCredentialId|
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-service-specific-credential-request-service-specific-credential-id
                         :shape "serviceSpecificCredentialId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-service-specific-credential-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-service-specific-credential-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-service-specific-credential-request
                    'make-delete-service-specific-credential-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-specific-credential-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-specific-credential-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specific-credential-id))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecificCredentialId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-specific-credential-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-signing-certificate-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-signing-certificate-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (certificate-id :initarg :certificate-id :initform
                         (common-lisp:error ":certificate-id is required")
                         :type
                         (common-lisp:or |certificateIdType| common-lisp:null)
                         :accessor
                         struct-shape-delete-signing-certificate-request-certificate-id
                         :shape "certificateIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-signing-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-signing-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-signing-certificate-request
                    'make-delete-signing-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-signing-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-signing-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-signing-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-permissions-boundary-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-delete-user-permissions-boundary-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-permissions-boundary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-user-permissions-boundary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-permissions-boundary-request
                    'make-delete-user-permissions-boundary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-permissions-boundary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-permissions-boundary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-permissions-boundary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-policy-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-user-policy-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor
                         struct-shape-delete-user-policy-request-policy-name
                         :shape "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-policy-request
                    'make-delete-user-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor struct-shape-delete-user-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-mfadevice-request common-lisp:nil
                       ((serial-number :initarg :serial-number :initform
                         (common-lisp:error ":serial-number is required") :type
                         (common-lisp:or |serialNumberType| common-lisp:null)
                         :accessor
                         struct-shape-delete-virtual-mfadevice-request-serial-number
                         :shape "serialNumberType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-virtual-mfadevice-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-virtual-mfadevice-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-mfadevice-request
                    'make-delete-virtual-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-mfadevice-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-mfadevice-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-mfadevice-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deletion-task-failure-reason-type common-lisp:nil
                       ((reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or reason-type common-lisp:null)
                         :accessor
                         struct-shape-deletion-task-failure-reason-type-reason
                         :shape "ReasonType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-usage-list :initarg :role-usage-list :initform
                         common-lisp:nil :type
                         (common-lisp:or role-usage-list-type common-lisp:null)
                         :accessor
                         struct-shape-deletion-task-failure-reason-type-role-usage-list
                         :shape "RoleUsageListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deletion-task-failure-reason-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deletion-task-failure-reason-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deletion-task-failure-reason-type
                    'make-deletion-task-failure-reason-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deletion-task-failure-reason-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deletion-task-failure-reason-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-usage-list))
      (common-lisp:list
       (common-lisp:cons "RoleUsageList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deletion-task-failure-reason-type))
   common-lisp:nil))
(common-lisp:deftype deletion-task-id-type () 'common-lisp:string)
(common-lisp:deftype deletion-task-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass detach-group-policy-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor
                         struct-shape-detach-group-policy-request-group-name
                         :shape "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-detach-group-policy-request-policy-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-group-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detach-group-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-group-policy-request
                    'make-detach-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-group-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-group-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-group-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-role-policy-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor
                         struct-shape-detach-role-policy-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-detach-role-policy-request-policy-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-role-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detach-role-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-role-policy-request
                    'make-detach-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-role-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-role-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-role-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-user-policy-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-detach-user-policy-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-detach-user-policy-request-policy-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-user-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detach-user-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-user-policy-request
                    'make-detach-user-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-user-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-user-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-user-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition duplicate-certificate-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       duplicate-certificate-exception-message)))
 (common-lisp:export
  (common-lisp:list 'duplicate-certificate-exception
                    'duplicate-certificate-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-sshpublic-key-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       duplicate-sshpublic-key-exception-message)))
 (common-lisp:export
  (common-lisp:list 'duplicate-sshpublic-key-exception
                    'duplicate-sshpublic-key-exception-message)))
(common-lisp:progn
 (common-lisp:defclass enable-mfadevice-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-enable-mfadevice-request-user-name :shape
                         "existingUserNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serial-number :initarg :serial-number :initform
                         (common-lisp:error ":serial-number is required") :type
                         (common-lisp:or |serialNumberType| common-lisp:null)
                         :accessor
                         struct-shape-enable-mfadevice-request-serial-number
                         :shape "serialNumberType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authentication-code1 :initarg :authentication-code1
                         :initform
                         (common-lisp:error
                          ":authentication-code1 is required")
                         :type
                         (common-lisp:or |authenticationCodeType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-enable-mfadevice-request-authentication-code1
                         :shape "authenticationCodeType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authentication-code2 :initarg :authentication-code2
                         :initform
                         (common-lisp:error
                          ":authentication-code2 is required")
                         :type
                         (common-lisp:or |authenticationCodeType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-enable-mfadevice-request-authentication-code2
                         :shape "authenticationCodeType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-mfadevice-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-mfadevice-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-mfadevice-request 'make-enable-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-mfadevice-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-mfadevice-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-code1))
      (common-lisp:list
       (common-lisp:cons "AuthenticationCode1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-code2))
      (common-lisp:list
       (common-lisp:cons "AuthenticationCode2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-mfadevice-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition entity-already-exists-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entity-already-exists-exception
                    'entity-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:defclass entity-details common-lisp:nil
                       ((entity-info :initarg :entity-info :initform
                         (common-lisp:error ":entity-info is required") :type
                         (common-lisp:or entity-info common-lisp:null)
                         :accessor struct-shape-entity-details-entity-info
                         :shape "EntityInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-authenticated :initarg :last-authenticated
                         :initform common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-entity-details-last-authenticated :shape
                         "dateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-entity-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'entity-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'entity-details 'make-entity-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-info))
      (common-lisp:list
       (common-lisp:cons "EntityInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-authenticated))
      (common-lisp:list
       (common-lisp:cons "LastAuthenticated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass entity-info common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-entity-info-arn :shape "arnType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor struct-shape-entity-info-name :shape
                         "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or |policyOwnerEntityType|
                                         common-lisp:null)
                         :accessor struct-shape-entity-info-type :shape
                         "policyOwnerEntityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or |idType| common-lisp:null) :accessor
                         struct-shape-entity-info-id :shape "idType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or |pathType| common-lisp:null) :accessor
                         struct-shape-entity-info-path :shape "pathType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-entity-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'entity-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'entity-info 'make-entity-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition entity-temporarily-unmodifiable-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-temporarily-unmodifiable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entity-temporarily-unmodifiable-exception
                    'entity-temporarily-unmodifiable-exception-message)))
(common-lisp:deftype entity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-details common-lisp:nil
                       ((message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or |stringType| common-lisp:null)
                         :accessor struct-shape-error-details-message :shape
                         "stringType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or |stringType| common-lisp:null)
                         :accessor struct-shape-error-details-code :shape
                         "stringType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-details 'make-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype eval-decision-details-type () 'common-lisp:hash-table)
 (common-lisp:defun make-eval-decision-details-type
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype eval-decision-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass evaluation-result common-lisp:nil
                       ((eval-action-name :initarg :eval-action-name :initform
                         (common-lisp:error ":eval-action-name is required")
                         :type
                         (common-lisp:or action-name-type common-lisp:null)
                         :accessor
                         struct-shape-evaluation-result-eval-action-name :shape
                         "ActionNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (eval-resource-name :initarg :eval-resource-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name-type common-lisp:null)
                         :accessor
                         struct-shape-evaluation-result-eval-resource-name
                         :shape "ResourceNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (eval-decision :initarg :eval-decision :initform
                         (common-lisp:error ":eval-decision is required") :type
                         (common-lisp:or policy-evaluation-decision-type
                                         common-lisp:null)
                         :accessor struct-shape-evaluation-result-eval-decision
                         :shape "PolicyEvaluationDecisionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (matched-statements :initarg :matched-statements
                         :initform common-lisp:nil :type
                         (common-lisp:or statement-list-type common-lisp:null)
                         :accessor
                         struct-shape-evaluation-result-matched-statements
                         :shape "StatementListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (missing-context-values :initarg
                         :missing-context-values :initform common-lisp:nil
                         :type
                         (common-lisp:or context-key-names-result-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-evaluation-result-missing-context-values
                         :shape "ContextKeyNamesResultListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organizations-decision-detail :initarg
                         :organizations-decision-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or organizations-decision-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-evaluation-result-organizations-decision-detail
                         :shape "OrganizationsDecisionDetail" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (permissions-boundary-decision-detail :initarg
                         :permissions-boundary-decision-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or permissions-boundary-decision-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-evaluation-result-permissions-boundary-decision-detail
                         :shape "PermissionsBoundaryDecisionDetail" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (eval-decision-details :initarg :eval-decision-details
                         :initform common-lisp:nil :type
                         (common-lisp:or eval-decision-details-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-evaluation-result-eval-decision-details
                         :shape "EvalDecisionDetailsType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-specific-results :initarg
                         :resource-specific-results :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-specific-result-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-evaluation-result-resource-specific-results
                         :shape "ResourceSpecificResultListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluation-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evaluation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluation-result 'make-evaluation-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eval-action-name))
      (common-lisp:list
       (common-lisp:cons "EvalActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eval-resource-name))
      (common-lisp:list
       (common-lisp:cons "EvalResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eval-decision))
      (common-lisp:list
       (common-lisp:cons "EvalDecision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matched-statements))
      (common-lisp:list
       (common-lisp:cons "MatchedStatements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'missing-context-values))
      (common-lisp:list
       (common-lisp:cons "MissingContextValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizations-decision-detail))
      (common-lisp:list
       (common-lisp:cons "OrganizationsDecisionDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-decision-detail))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryDecisionDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'eval-decision-details))
      (common-lisp:list
       (common-lisp:cons "EvalDecisionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specific-results))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecificResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluation-results-list-type ()
   '(trivial-types:proper-list evaluation-result))
 (common-lisp:defun make-evaluation-results-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluation-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass generate-credential-report-response common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or report-state-type common-lisp:null)
                         :accessor
                         struct-shape-generate-credential-report-response-state
                         :shape "ReportStateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or report-state-description-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-generate-credential-report-response-description
                         :shape "ReportStateDescriptionType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-credential-report-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-credential-report-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-credential-report-response
                    'make-generate-credential-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-credential-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-credential-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-credential-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-organizations-access-report-request
                       common-lisp:nil
                       ((entity-path :initarg :entity-path :initform
                         (common-lisp:error ":entity-path is required") :type
                         (common-lisp:or |organizationsEntityPathType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-generate-organizations-access-report-request-entity-path
                         :shape "organizationsEntityPathType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organizations-policy-id :initarg
                         :organizations-policy-id :initform common-lisp:nil
                         :type
                         (common-lisp:or |organizationsPolicyIdType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-generate-organizations-access-report-request-organizations-policy-id
                         :shape "organizationsPolicyIdType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-organizations-access-report-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-organizations-access-report-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-organizations-access-report-request
                    'make-generate-organizations-access-report-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-organizations-access-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-organizations-access-report-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-path))
      (common-lisp:list
       (common-lisp:cons "EntityPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizations-policy-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationsPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-organizations-access-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-organizations-access-report-response
                       common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |jobIDType| common-lisp:null)
                         :accessor
                         struct-shape-generate-organizations-access-report-response-job-id
                         :shape "jobIDType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-organizations-access-report-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-organizations-access-report-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-organizations-access-report-response
                    'make-generate-organizations-access-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-organizations-access-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-organizations-access-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-organizations-access-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-service-last-accessed-details-request
                       common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-generate-service-last-accessed-details-request-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (granularity :initarg :granularity :initform
                         common-lisp:nil :type
                         (common-lisp:or access-advisor-usage-granularity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-generate-service-last-accessed-details-request-granularity
                         :shape "AccessAdvisorUsageGranularityType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-service-last-accessed-details-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-service-last-accessed-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-service-last-accessed-details-request
                    'make-generate-service-last-accessed-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-service-last-accessed-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-service-last-accessed-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-service-last-accessed-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-service-last-accessed-details-response
                       common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |jobIDType| common-lisp:null)
                         :accessor
                         struct-shape-generate-service-last-accessed-details-response-job-id
                         :shape "jobIDType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-service-last-accessed-details-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-service-last-accessed-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-service-last-accessed-details-response
                    'make-generate-service-last-accessed-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-service-last-accessed-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-service-last-accessed-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-service-last-accessed-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-key-last-used-request common-lisp:nil
                       ((access-key-id :initarg :access-key-id :initform
                         (common-lisp:error ":access-key-id is required") :type
                         (common-lisp:or |accessKeyIdType| common-lisp:null)
                         :accessor
                         struct-shape-get-access-key-last-used-request-access-key-id
                         :shape "accessKeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-access-key-last-used-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-access-key-last-used-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-access-key-last-used-request
                    'make-get-access-key-last-used-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-last-used-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-last-used-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-last-used-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-key-last-used-response common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-access-key-last-used-response-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (access-key-last-used :initarg :access-key-last-used
                         :initform common-lisp:nil :type
                         (common-lisp:or access-key-last-used common-lisp:null)
                         :accessor
                         struct-shape-get-access-key-last-used-response-access-key-last-used
                         :shape "AccessKeyLastUsed" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-access-key-last-used-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-access-key-last-used-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-access-key-last-used-response
                    'make-get-access-key-last-used-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-last-used-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-last-used-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-key-last-used))
      (common-lisp:list
       (common-lisp:cons "AccessKeyLastUsed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-last-used-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-account-authorization-details-request
                       common-lisp:nil
                       ((filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or |entityListType| common-lisp:null)
                         :accessor
                         struct-shape-get-account-authorization-details-request-filter
                         :shape "entityListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-get-account-authorization-details-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-get-account-authorization-details-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-account-authorization-details-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-account-authorization-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-account-authorization-details-request
                    'make-get-account-authorization-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-authorization-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-authorization-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-authorization-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-account-authorization-details-response
                       common-lisp:nil
                       ((user-detail-list :initarg :user-detail-list :initform
                         common-lisp:nil :type
                         (common-lisp:or |userDetailListType| common-lisp:null)
                         :accessor
                         struct-shape-get-account-authorization-details-response-user-detail-list
                         :shape "userDetailListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-detail-list :initarg :group-detail-list
                         :initform common-lisp:nil :type
                         (common-lisp:or |groupDetailListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-account-authorization-details-response-group-detail-list
                         :shape "groupDetailListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-detail-list :initarg :role-detail-list :initform
                         common-lisp:nil :type
                         (common-lisp:or |roleDetailListType| common-lisp:null)
                         :accessor
                         struct-shape-get-account-authorization-details-response-role-detail-list
                         :shape "roleDetailListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policies :initarg :policies :initform common-lisp:nil
                         :type
                         (common-lisp:or managed-policy-detail-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-account-authorization-details-response-policies
                         :shape "ManagedPolicyDetailListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-get-account-authorization-details-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-get-account-authorization-details-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-account-authorization-details-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-account-authorization-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-account-authorization-details-response
                    'make-get-account-authorization-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-authorization-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-authorization-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-detail-list))
      (common-lisp:list
       (common-lisp:cons "UserDetailList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-detail-list))
      (common-lisp:list
       (common-lisp:cons "GroupDetailList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-detail-list))
      (common-lisp:list
       (common-lisp:cons "RoleDetailList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-authorization-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-account-password-policy-response common-lisp:nil
                       ((password-policy :initarg :password-policy :initform
                         (common-lisp:error ":password-policy is required")
                         :type
                         (common-lisp:or password-policy common-lisp:null)
                         :accessor
                         struct-shape-get-account-password-policy-response-password-policy
                         :shape "PasswordPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-account-password-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-account-password-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-account-password-policy-response
                    'make-get-account-password-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-password-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-password-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-policy))
      (common-lisp:list
       (common-lisp:cons "PasswordPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-password-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-account-summary-response common-lisp:nil
                       ((summary-map :initarg :summary-map :initform
                         common-lisp:nil :type
                         (common-lisp:or |summaryMapType| common-lisp:null)
                         :accessor
                         struct-shape-get-account-summary-response-summary-map
                         :shape "summaryMapType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-account-summary-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-account-summary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-account-summary-response
                    'make-get-account-summary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-summary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-summary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary-map))
      (common-lisp:list
       (common-lisp:cons "SummaryMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-summary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-context-keys-for-custom-policy-request
                       common-lisp:nil
                       ((policy-input-list :initarg :policy-input-list
                         :initform
                         (common-lisp:error ":policy-input-list is required")
                         :type
                         (common-lisp:or simulation-policy-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-context-keys-for-custom-policy-request-policy-input-list
                         :shape "SimulationPolicyListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-context-keys-for-custom-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-context-keys-for-custom-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-context-keys-for-custom-policy-request
                    'make-get-context-keys-for-custom-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-custom-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-custom-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-input-list))
      (common-lisp:list
       (common-lisp:cons "PolicyInputList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-custom-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-context-keys-for-policy-response common-lisp:nil
                       ((context-key-names :initarg :context-key-names
                         :initform common-lisp:nil :type
                         (common-lisp:or context-key-names-result-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-context-keys-for-policy-response-context-key-names
                         :shape "ContextKeyNamesResultListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-context-keys-for-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-context-keys-for-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-context-keys-for-policy-response
                    'make-get-context-keys-for-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-key-names))
      (common-lisp:list
       (common-lisp:cons "ContextKeyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-context-keys-for-principal-policy-request
                       common-lisp:nil
                       ((policy-source-arn :initarg :policy-source-arn
                         :initform
                         (common-lisp:error ":policy-source-arn is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-get-context-keys-for-principal-policy-request-policy-source-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-input-list :initarg :policy-input-list
                         :initform common-lisp:nil :type
                         (common-lisp:or simulation-policy-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-context-keys-for-principal-policy-request-policy-input-list
                         :shape "SimulationPolicyListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-context-keys-for-principal-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-context-keys-for-principal-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-context-keys-for-principal-policy-request
                    'make-get-context-keys-for-principal-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-principal-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-principal-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-source-arn))
      (common-lisp:list
       (common-lisp:cons "PolicySourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-input-list))
      (common-lisp:list
       (common-lisp:cons "PolicyInputList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-principal-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-credential-report-response common-lisp:nil
                       ((content :initarg :content :initform common-lisp:nil
                         :type
                         (common-lisp:or report-content-type common-lisp:null)
                         :accessor
                         struct-shape-get-credential-report-response-content
                         :shape "ReportContentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (report-format :initarg :report-format :initform
                         common-lisp:nil :type
                         (common-lisp:or report-format-type common-lisp:null)
                         :accessor
                         struct-shape-get-credential-report-response-report-format
                         :shape "ReportFormatType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generated-time :initarg :generated-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-get-credential-report-response-generated-time
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-credential-report-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-credential-report-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-credential-report-response
                    'make-get-credential-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-credential-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-credential-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-format))
      (common-lisp:list
       (common-lisp:cons "ReportFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generated-time))
      (common-lisp:list
       (common-lisp:cons "GeneratedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-credential-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-group-policy-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor
                         struct-shape-get-group-policy-request-group-name
                         :shape "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor
                         struct-shape-get-group-policy-request-policy-name
                         :shape "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-group-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-group-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-group-policy-request 'make-get-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-group-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-group-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-group-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-group-policy-response common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor
                         struct-shape-get-group-policy-response-group-name
                         :shape "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor
                         struct-shape-get-group-policy-response-policy-name
                         :shape "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policy-document is required")
                         :type
                         (common-lisp:or |policyDocumentType| common-lisp:null)
                         :accessor
                         struct-shape-get-group-policy-response-policy-document
                         :shape "policyDocumentType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-group-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-group-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-group-policy-response
                    'make-get-group-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-group-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-group-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-group-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-group-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor struct-shape-get-group-request-group-name
                         :shape "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor struct-shape-get-group-request-marker :shape
                         "markerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor struct-shape-get-group-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-group-request 'make-get-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-group-response common-lisp:nil
                       ((group :initarg :group :initform
                         (common-lisp:error ":group is required") :type
                         (common-lisp:or group common-lisp:null) :accessor
                         struct-shape-get-group-response-group :shape "Group"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (users :initarg :users :initform
                         (common-lisp:error ":users is required") :type
                         (common-lisp:or |userListType| common-lisp:null)
                         :accessor struct-shape-get-group-response-users :shape
                         "userListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor struct-shape-get-group-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor struct-shape-get-group-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-group-response 'make-get-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-profile-request common-lisp:nil
                       ((instance-profile-name :initarg :instance-profile-name
                         :initform
                         (common-lisp:error
                          ":instance-profile-name is required")
                         :type
                         (common-lisp:or |instanceProfileNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-instance-profile-request-instance-profile-name
                         :shape "instanceProfileNameType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-instance-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-profile-request
                    'make-get-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-profile-response common-lisp:nil
                       ((instance-profile :initarg :instance-profile :initform
                         (common-lisp:error ":instance-profile is required")
                         :type
                         (common-lisp:or instance-profile common-lisp:null)
                         :accessor
                         struct-shape-get-instance-profile-response-instance-profile
                         :shape "InstanceProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-instance-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-profile-response
                    'make-get-instance-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profile))
      (common-lisp:list
       (common-lisp:cons "InstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-login-profile-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-get-login-profile-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-login-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-login-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-login-profile-request
                    'make-get-login-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-login-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-login-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-login-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-login-profile-response common-lisp:nil
                       ((login-profile :initarg :login-profile :initform
                         (common-lisp:error ":login-profile is required") :type
                         (common-lisp:or login-profile common-lisp:null)
                         :accessor
                         struct-shape-get-login-profile-response-login-profile
                         :shape "LoginProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-login-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-login-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-login-profile-response
                    'make-get-login-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-login-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-login-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-profile))
      (common-lisp:list
       (common-lisp:cons "LoginProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-login-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mfadevice-request common-lisp:nil
                       ((serial-number :initarg :serial-number :initform
                         (common-lisp:error ":serial-number is required") :type
                         (common-lisp:or |serialNumberType| common-lisp:null)
                         :accessor
                         struct-shape-get-mfadevice-request-serial-number
                         :shape "serialNumberType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor struct-shape-get-mfadevice-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mfadevice-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mfadevice-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mfadevice-request 'make-get-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mfadevice-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mfadevice-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mfadevice-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mfadevice-response common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-get-mfadevice-response-user-name :shape
                         "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serial-number :initarg :serial-number :initform
                         (common-lisp:error ":serial-number is required") :type
                         (common-lisp:or |serialNumberType| common-lisp:null)
                         :accessor
                         struct-shape-get-mfadevice-response-serial-number
                         :shape "serialNumberType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-date :initarg :enable-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-get-mfadevice-response-enable-date :shape
                         "dateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (certifications :initarg :certifications :initform
                         common-lisp:nil :type
                         (common-lisp:or certification-map-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-mfadevice-response-certifications
                         :shape "CertificationMapType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mfadevice-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mfadevice-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mfadevice-response 'make-get-mfadevice-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mfadevice-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mfadevice-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-date))
      (common-lisp:list
       (common-lisp:cons "EnableDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certifications))
      (common-lisp:list
       (common-lisp:cons "Certifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mfadevice-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-open-idconnect-provider-request common-lisp:nil
                       ((open-idconnect-provider-arn :initarg
                         :open-idconnect-provider-arn :initform
                         (common-lisp:error
                          ":open-idconnect-provider-arn is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-get-open-idconnect-provider-request-open-idconnect-provider-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-open-idconnect-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-open-idconnect-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-open-idconnect-provider-request
                    'make-get-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-open-idconnect-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-open-idconnect-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-open-idconnect-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-open-idconnect-provider-response common-lisp:nil
                       ((url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or open-idconnect-provider-url-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-open-idconnect-provider-response-url
                         :shape "OpenIDConnectProviderUrlType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-idlist :initarg :client-idlist :initform
                         common-lisp:nil :type
                         (common-lisp:or |clientIDListType| common-lisp:null)
                         :accessor
                         struct-shape-get-open-idconnect-provider-response-client-idlist
                         :shape "clientIDListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thumbprint-list :initarg :thumbprint-list :initform
                         common-lisp:nil :type
                         (common-lisp:or |thumbprintListType| common-lisp:null)
                         :accessor
                         struct-shape-get-open-idconnect-provider-response-thumbprint-list
                         :shape "thumbprintListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-get-open-idconnect-provider-response-create-date
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor
                         struct-shape-get-open-idconnect-provider-response-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-open-idconnect-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-open-idconnect-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-open-idconnect-provider-response
                    'make-get-open-idconnect-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-open-idconnect-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-open-idconnect-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-idlist))
      (common-lisp:list
       (common-lisp:cons "ClientIDList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbprint-list))
      (common-lisp:list
       (common-lisp:cons "ThumbprintList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-open-idconnect-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-organizations-access-report-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or |jobIDType| common-lisp:null)
                         :accessor
                         struct-shape-get-organizations-access-report-request-job-id
                         :shape "jobIDType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-get-organizations-access-report-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-get-organizations-access-report-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-key :initarg :sort-key :initform common-lisp:nil
                         :type (common-lisp:or |sortKeyType| common-lisp:null)
                         :accessor
                         struct-shape-get-organizations-access-report-request-sort-key
                         :shape "sortKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-organizations-access-report-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-organizations-access-report-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-organizations-access-report-request
                    'make-get-organizations-access-report-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-organizations-access-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-organizations-access-report-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-key))
      (common-lisp:list
       (common-lisp:cons "SortKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-organizations-access-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-organizations-access-report-response common-lisp:nil
                       ((job-status :initarg :job-status :initform
                         (common-lisp:error ":job-status is required") :type
                         (common-lisp:or |jobStatusType| common-lisp:null)
                         :accessor
                         struct-shape-get-organizations-access-report-response-job-status
                         :shape "jobStatusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-creation-date :initarg :job-creation-date
                         :initform
                         (common-lisp:error ":job-creation-date is required")
                         :type (common-lisp:or |dateType| common-lisp:null)
                         :accessor
                         struct-shape-get-organizations-access-report-response-job-creation-date
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-completion-date :initarg :job-completion-date
                         :initform common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-get-organizations-access-report-response-job-completion-date
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-services-accessible :initarg
                         :number-of-services-accessible :initform
                         common-lisp:nil :type
                         (common-lisp:or |integerType| common-lisp:null)
                         :accessor
                         struct-shape-get-organizations-access-report-response-number-of-services-accessible
                         :shape "integerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-services-not-accessed :initarg
                         :number-of-services-not-accessed :initform
                         common-lisp:nil :type
                         (common-lisp:or |integerType| common-lisp:null)
                         :accessor
                         struct-shape-get-organizations-access-report-response-number-of-services-not-accessed
                         :shape "integerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-details :initarg :access-details :initform
                         common-lisp:nil :type
                         (common-lisp:or access-details common-lisp:null)
                         :accessor
                         struct-shape-get-organizations-access-report-response-access-details
                         :shape "AccessDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-get-organizations-access-report-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-get-organizations-access-report-response-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-details :initarg :error-details :initform
                         common-lisp:nil :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor
                         struct-shape-get-organizations-access-report-response-error-details
                         :shape "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-organizations-access-report-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-organizations-access-report-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-organizations-access-report-response
                    'make-get-organizations-access-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-organizations-access-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-organizations-access-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-creation-date))
      (common-lisp:list
       (common-lisp:cons "JobCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-completion-date))
      (common-lisp:list
       (common-lisp:cons "JobCompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-services-accessible))
      (common-lisp:list
       (common-lisp:cons "NumberOfServicesAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-services-not-accessed))
      (common-lisp:list
       (common-lisp:cons "NumberOfServicesNotAccessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-details))
      (common-lisp:list
       (common-lisp:cons "AccessDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "ErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-organizations-access-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-request common-lisp:nil
                       ((policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-get-policy-request-policy-arn :shape
                         "arnType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-policy-request 'make-get-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-response common-lisp:nil
                       ((policy :initarg :policy :initform common-lisp:nil
                         :type (common-lisp:or policy common-lisp:null)
                         :accessor struct-shape-get-policy-response-policy
                         :shape "Policy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-policy-response 'make-get-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-version-request common-lisp:nil
                       ((policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-get-policy-version-request-policy-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         (common-lisp:error ":version-id is required") :type
                         (common-lisp:or |policyVersionIdType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-policy-version-request-version-id
                         :shape "policyVersionIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-policy-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-policy-version-request
                    'make-get-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-version-response common-lisp:nil
                       ((policy-version :initarg :policy-version :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-version common-lisp:null)
                         :accessor
                         struct-shape-get-policy-version-response-policy-version
                         :shape "PolicyVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-policy-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-policy-version-response
                    'make-get-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version))
      (common-lisp:list
       (common-lisp:cons "PolicyVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-role-policy-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor
                         struct-shape-get-role-policy-request-role-name :shape
                         "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor
                         struct-shape-get-role-policy-request-policy-name
                         :shape "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-role-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-role-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-role-policy-request 'make-get-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-role-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-role-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-role-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-role-policy-response common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor
                         struct-shape-get-role-policy-response-role-name :shape
                         "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor
                         struct-shape-get-role-policy-response-policy-name
                         :shape "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policy-document is required")
                         :type
                         (common-lisp:or |policyDocumentType| common-lisp:null)
                         :accessor
                         struct-shape-get-role-policy-response-policy-document
                         :shape "policyDocumentType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-role-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-role-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-role-policy-response 'make-get-role-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-role-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-role-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-role-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-role-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor struct-shape-get-role-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-role-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-role-request 'make-get-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-role-response common-lisp:nil
                       ((role :initarg :role :initform
                         (common-lisp:error ":role is required") :type
                         (common-lisp:or role common-lisp:null) :accessor
                         struct-shape-get-role-response-role :shape "Role"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-role-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-role-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-role-response 'make-get-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-samlprovider-request common-lisp:nil
                       ((samlprovider-arn :initarg :samlprovider-arn :initform
                         (common-lisp:error ":samlprovider-arn is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-get-samlprovider-request-samlprovider-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-samlprovider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-samlprovider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-samlprovider-request 'make-get-samlprovider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-samlprovider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-samlprovider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-arn))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-samlprovider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-samlprovider-response common-lisp:nil
                       ((samlmetadata-document :initarg :samlmetadata-document
                         :initform common-lisp:nil :type
                         (common-lisp:or samlmetadata-document-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-samlprovider-response-samlmetadata-document
                         :shape "SAMLMetadataDocumentType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-get-samlprovider-response-create-date
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (valid-until :initarg :valid-until :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-get-samlprovider-response-valid-until
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-get-samlprovider-response-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-samlprovider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-samlprovider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-samlprovider-response
                    'make-get-samlprovider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-samlprovider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-samlprovider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'samlmetadata-document))
      (common-lisp:list
       (common-lisp:cons "SAMLMetadataDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-until))
      (common-lisp:list
       (common-lisp:cons "ValidUntil"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-samlprovider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sshpublic-key-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-get-sshpublic-key-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sshpublic-key-id :initarg :sshpublic-key-id :initform
                         (common-lisp:error ":sshpublic-key-id is required")
                         :type
                         (common-lisp:or |publicKeyIdType| common-lisp:null)
                         :accessor
                         struct-shape-get-sshpublic-key-request-sshpublic-key-id
                         :shape "publicKeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encoding :initarg :encoding :initform
                         (common-lisp:error ":encoding is required") :type
                         (common-lisp:or |encodingType| common-lisp:null)
                         :accessor
                         struct-shape-get-sshpublic-key-request-encoding :shape
                         "encodingType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sshpublic-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-sshpublic-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sshpublic-key-request
                    'make-get-sshpublic-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sshpublic-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sshpublic-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key-id))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding))
      (common-lisp:list
       (common-lisp:cons "Encoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sshpublic-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sshpublic-key-response common-lisp:nil
                       ((sshpublic-key :initarg :sshpublic-key :initform
                         common-lisp:nil :type
                         (common-lisp:or sshpublic-key common-lisp:null)
                         :accessor
                         struct-shape-get-sshpublic-key-response-sshpublic-key
                         :shape "SSHPublicKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sshpublic-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-sshpublic-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sshpublic-key-response
                    'make-get-sshpublic-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sshpublic-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sshpublic-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sshpublic-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-server-certificate-request common-lisp:nil
                       ((server-certificate-name :initarg
                         :server-certificate-name :initform
                         (common-lisp:error
                          ":server-certificate-name is required")
                         :type
                         (common-lisp:or |serverCertificateNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-server-certificate-request-server-certificate-name
                         :shape "serverCertificateNameType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-server-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-server-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-server-certificate-request
                    'make-get-server-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-server-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-server-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-server-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-server-certificate-response common-lisp:nil
                       ((server-certificate :initarg :server-certificate
                         :initform
                         (common-lisp:error ":server-certificate is required")
                         :type
                         (common-lisp:or server-certificate common-lisp:null)
                         :accessor
                         struct-shape-get-server-certificate-response-server-certificate
                         :shape "ServerCertificate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-server-certificate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-server-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-server-certificate-response
                    'make-get-server-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-server-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-server-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-certificate))
      (common-lisp:list
       (common-lisp:cons "ServerCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-server-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-last-accessed-details-request
                       common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or |jobIDType| common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-request-job-id
                         :shape "jobIDType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-last-accessed-details-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-last-accessed-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-last-accessed-details-request
                    'make-get-service-last-accessed-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-last-accessed-details-response
                       common-lisp:nil
                       ((job-status :initarg :job-status :initform
                         (common-lisp:error ":job-status is required") :type
                         (common-lisp:or |jobStatusType| common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-response-job-status
                         :shape "jobStatusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-type :initarg :job-type :initform common-lisp:nil
                         :type
                         (common-lisp:or access-advisor-usage-granularity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-response-job-type
                         :shape "AccessAdvisorUsageGranularityType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-creation-date :initarg :job-creation-date
                         :initform
                         (common-lisp:error ":job-creation-date is required")
                         :type (common-lisp:or |dateType| common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-response-job-creation-date
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (services-last-accessed :initarg
                         :services-last-accessed :initform
                         (common-lisp:error
                          ":services-last-accessed is required")
                         :type
                         (common-lisp:or services-last-accessed
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-response-services-last-accessed
                         :shape "ServicesLastAccessed" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-completion-date :initarg :job-completion-date
                         :initform
                         (common-lisp:error ":job-completion-date is required")
                         :type (common-lisp:or |dateType| common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-response-job-completion-date
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-response-error
                         :shape "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-last-accessed-details-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-last-accessed-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-last-accessed-details-response
                    'make-get-service-last-accessed-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-creation-date))
      (common-lisp:list
       (common-lisp:cons "JobCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'services-last-accessed))
      (common-lisp:list
       (common-lisp:cons "ServicesLastAccessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-completion-date))
      (common-lisp:list
       (common-lisp:cons "JobCompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-last-accessed-details-with-entities-request
                       common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or |jobIDType| common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-with-entities-request-job-id
                         :shape "jobIDType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":service-namespace is required")
                         :type
                         (common-lisp:or |serviceNamespaceType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-with-entities-request-service-namespace
                         :shape "serviceNamespaceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-with-entities-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-with-entities-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-last-accessed-details-with-entities-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-last-accessed-details-with-entities-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-last-accessed-details-with-entities-request
                    'make-get-service-last-accessed-details-with-entities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-with-entities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-with-entities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-with-entities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-last-accessed-details-with-entities-response
                       common-lisp:nil
                       ((job-status :initarg :job-status :initform
                         (common-lisp:error ":job-status is required") :type
                         (common-lisp:or |jobStatusType| common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-with-entities-response-job-status
                         :shape "jobStatusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-creation-date :initarg :job-creation-date
                         :initform
                         (common-lisp:error ":job-creation-date is required")
                         :type (common-lisp:or |dateType| common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-with-entities-response-job-creation-date
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-completion-date :initarg :job-completion-date
                         :initform
                         (common-lisp:error ":job-completion-date is required")
                         :type (common-lisp:or |dateType| common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-with-entities-response-job-completion-date
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-details-list :initarg :entity-details-list
                         :initform
                         (common-lisp:error ":entity-details-list is required")
                         :type
                         (common-lisp:or |entityDetailsListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-with-entities-response-entity-details-list
                         :shape "entityDetailsListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-with-entities-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-with-entities-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor
                         struct-shape-get-service-last-accessed-details-with-entities-response-error
                         :shape "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-last-accessed-details-with-entities-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-last-accessed-details-with-entities-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-last-accessed-details-with-entities-response
                    'make-get-service-last-accessed-details-with-entities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-with-entities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-with-entities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-creation-date))
      (common-lisp:list
       (common-lisp:cons "JobCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-completion-date))
      (common-lisp:list
       (common-lisp:cons "JobCompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-details-list))
      (common-lisp:list
       (common-lisp:cons "EntityDetailsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-with-entities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-linked-role-deletion-status-request
                       common-lisp:nil
                       ((deletion-task-id :initarg :deletion-task-id :initform
                         (common-lisp:error ":deletion-task-id is required")
                         :type
                         (common-lisp:or deletion-task-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-service-linked-role-deletion-status-request-deletion-task-id
                         :shape "DeletionTaskIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-linked-role-deletion-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-linked-role-deletion-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-linked-role-deletion-status-request
                    'make-get-service-linked-role-deletion-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-linked-role-deletion-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-linked-role-deletion-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-task-id))
      (common-lisp:list
       (common-lisp:cons "DeletionTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-linked-role-deletion-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-linked-role-deletion-status-response
                       common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or deletion-task-status-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-service-linked-role-deletion-status-response-status
                         :shape "DeletionTaskStatusType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type
                         (common-lisp:or deletion-task-failure-reason-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-service-linked-role-deletion-status-response-reason
                         :shape "DeletionTaskFailureReasonType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-linked-role-deletion-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-linked-role-deletion-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-linked-role-deletion-status-response
                    'make-get-service-linked-role-deletion-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-linked-role-deletion-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-linked-role-deletion-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-linked-role-deletion-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-policy-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-user-policy-request-user-name :shape
                         "existingUserNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor
                         struct-shape-get-user-policy-request-policy-name
                         :shape "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-policy-request 'make-get-user-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-policy-response common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-user-policy-response-user-name :shape
                         "existingUserNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor
                         struct-shape-get-user-policy-response-policy-name
                         :shape "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policy-document is required")
                         :type
                         (common-lisp:or |policyDocumentType| common-lisp:null)
                         :accessor
                         struct-shape-get-user-policy-response-policy-document
                         :shape "policyDocumentType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-policy-response 'make-get-user-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor struct-shape-get-user-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-request 'make-get-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-response common-lisp:nil
                       ((user :initarg :user :initform
                         (common-lisp:error ":user is required") :type
                         (common-lisp:or user common-lisp:null) :accessor
                         struct-shape-get-user-response-user :shape "User"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-response 'make-get-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass group common-lisp:nil
                       ((path :initarg :path :initform
                         (common-lisp:error ":path is required") :type
                         (common-lisp:or |pathType| common-lisp:null) :accessor
                         struct-shape-group-path :shape "pathType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor struct-shape-group-group-name :shape
                         "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-id :initarg :group-id :initform
                         (common-lisp:error ":group-id is required") :type
                         (common-lisp:or |idType| common-lisp:null) :accessor
                         struct-shape-group-group-id :shape "idType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-group-arn :shape "arnType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         (common-lisp:error ":create-date is required") :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-group-create-date :shape "dateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'group 'make-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass group-detail common-lisp:nil
                       ((path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or |pathType| common-lisp:null) :accessor
                         struct-shape-group-detail-path :shape "pathType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor struct-shape-group-detail-group-name :shape
                         "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-id :initarg :group-id :initform common-lisp:nil
                         :type (common-lisp:or |idType| common-lisp:null)
                         :accessor struct-shape-group-detail-group-id :shape
                         "idType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-group-detail-arn :shape "arnType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-group-detail-create-date :shape
                         "dateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-policy-list :initarg :group-policy-list
                         :initform common-lisp:nil :type
                         (common-lisp:or |policyDetailListType|
                                         common-lisp:null)
                         :accessor struct-shape-group-detail-group-policy-list
                         :shape "policyDetailListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attached-managed-policies :initarg
                         :attached-managed-policies :initform common-lisp:nil
                         :type
                         (common-lisp:or |attachedPoliciesListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-group-detail-attached-managed-policies
                         :shape "attachedPoliciesListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-group-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'group-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'group-detail 'make-group-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-policy-list))
      (common-lisp:list
       (common-lisp:cons "GroupPolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-managed-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedManagedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-profile common-lisp:nil
                       ((path :initarg :path :initform
                         (common-lisp:error ":path is required") :type
                         (common-lisp:or |pathType| common-lisp:null) :accessor
                         struct-shape-instance-profile-path :shape "pathType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-profile-name :initarg :instance-profile-name
                         :initform
                         (common-lisp:error
                          ":instance-profile-name is required")
                         :type
                         (common-lisp:or |instanceProfileNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-profile-instance-profile-name
                         :shape "instanceProfileNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (instance-profile-id :initarg :instance-profile-id
                         :initform
                         (common-lisp:error ":instance-profile-id is required")
                         :type (common-lisp:or |idType| common-lisp:null)
                         :accessor
                         struct-shape-instance-profile-instance-profile-id
                         :shape "idType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-instance-profile-arn :shape "arnType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         (common-lisp:error ":create-date is required") :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-instance-profile-create-date :shape
                         "dateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (roles :initarg :roles :initform
                         (common-lisp:error ":roles is required") :type
                         (common-lisp:or |roleListType| common-lisp:null)
                         :accessor struct-shape-instance-profile-roles :shape
                         "roleListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-instance-profile-tags :shape
                         "tagListType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-profile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-profile 'make-instance-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profile-id))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "Roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-authentication-code-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-authentication-code-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-authentication-code-exception
                    'invalid-authentication-code-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-certificate-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-certificate-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-certificate-exception
                    'invalid-certificate-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-public-key-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-public-key-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-public-key-exception
                    'invalid-public-key-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-user-type-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-user-type-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-user-type-exception
                    'invalid-user-type-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition key-pair-mismatch-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       key-pair-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'key-pair-mismatch-exception
                    'key-pair-mismatch-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:deftype line-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-access-keys-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-access-keys-request-user-name :shape
                         "existingUserNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor struct-shape-list-access-keys-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-access-keys-request-max-items :shape
                         "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-access-keys-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-access-keys-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-access-keys-request 'make-list-access-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-keys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-access-keys-response common-lisp:nil
                       ((access-key-metadata :initarg :access-key-metadata
                         :initform
                         (common-lisp:error ":access-key-metadata is required")
                         :type
                         (common-lisp:or |accessKeyMetadataListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-access-keys-response-access-key-metadata
                         :shape "accessKeyMetadataListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-access-keys-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-access-keys-response-marker :shape
                         "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-access-keys-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-access-keys-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-access-keys-response
                    'make-list-access-keys-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-keys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-keys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-metadata))
      (common-lisp:list
       (common-lisp:cons "AccessKeyMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-keys-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-account-aliases-request common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-account-aliases-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-account-aliases-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-account-aliases-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-account-aliases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-account-aliases-request
                    'make-list-account-aliases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-account-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-account-aliases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-account-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-account-aliases-response common-lisp:nil
                       ((account-aliases :initarg :account-aliases :initform
                         (common-lisp:error ":account-aliases is required")
                         :type
                         (common-lisp:or |accountAliasListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-account-aliases-response-account-aliases
                         :shape "accountAliasListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-account-aliases-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-account-aliases-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-account-aliases-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-account-aliases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-account-aliases-response
                    'make-list-account-aliases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-account-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-account-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-aliases))
      (common-lisp:list
       (common-lisp:cons "AccountAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-account-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-attached-group-policies-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-group-policies-request-group-name
                         :shape "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path-prefix :initarg :path-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyPathType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-group-policies-request-path-prefix
                         :shape "policyPathType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-group-policies-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-group-policies-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-attached-group-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-attached-group-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-attached-group-policies-request
                    'make-list-attached-group-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-group-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-group-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-group-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-attached-group-policies-response common-lisp:nil
                       ((attached-policies :initarg :attached-policies
                         :initform common-lisp:nil :type
                         (common-lisp:or |attachedPoliciesListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-attached-group-policies-response-attached-policies
                         :shape "attachedPoliciesListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-group-policies-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-group-policies-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-attached-group-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-attached-group-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-attached-group-policies-response
                    'make-list-attached-group-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-group-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-group-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-group-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-attached-role-policies-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-role-policies-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path-prefix :initarg :path-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyPathType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-role-policies-request-path-prefix
                         :shape "policyPathType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-role-policies-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-role-policies-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-attached-role-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-attached-role-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-attached-role-policies-request
                    'make-list-attached-role-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-role-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-role-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-role-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-attached-role-policies-response common-lisp:nil
                       ((attached-policies :initarg :attached-policies
                         :initform common-lisp:nil :type
                         (common-lisp:or |attachedPoliciesListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-attached-role-policies-response-attached-policies
                         :shape "attachedPoliciesListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-role-policies-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-role-policies-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-attached-role-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-attached-role-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-attached-role-policies-response
                    'make-list-attached-role-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-role-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-role-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-role-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-attached-user-policies-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-user-policies-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path-prefix :initarg :path-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyPathType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-user-policies-request-path-prefix
                         :shape "policyPathType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-user-policies-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-user-policies-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-attached-user-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-attached-user-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-attached-user-policies-request
                    'make-list-attached-user-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-user-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-user-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-user-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-attached-user-policies-response common-lisp:nil
                       ((attached-policies :initarg :attached-policies
                         :initform common-lisp:nil :type
                         (common-lisp:or |attachedPoliciesListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-attached-user-policies-response-attached-policies
                         :shape "attachedPoliciesListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-user-policies-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-attached-user-policies-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-attached-user-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-attached-user-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-attached-user-policies-response
                    'make-list-attached-user-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-user-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-user-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-user-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-entities-for-policy-request common-lisp:nil
                       ((policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-list-entities-for-policy-request-policy-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-filter :initarg :entity-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or entity-type common-lisp:null)
                         :accessor
                         struct-shape-list-entities-for-policy-request-entity-filter
                         :shape "EntityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path-prefix :initarg :path-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or |pathType| common-lisp:null) :accessor
                         struct-shape-list-entities-for-policy-request-path-prefix
                         :shape "pathType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-usage-filter :initarg :policy-usage-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or policy-usage-type common-lisp:null)
                         :accessor
                         struct-shape-list-entities-for-policy-request-policy-usage-filter
                         :shape "PolicyUsageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-entities-for-policy-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-entities-for-policy-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-entities-for-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-entities-for-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-entities-for-policy-request
                    'make-list-entities-for-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-for-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-for-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-filter))
      (common-lisp:list
       (common-lisp:cons "EntityFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-usage-filter))
      (common-lisp:list
       (common-lisp:cons "PolicyUsageFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-for-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-entities-for-policy-response common-lisp:nil
                       ((policy-groups :initarg :policy-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-group-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-entities-for-policy-response-policy-groups
                         :shape "PolicyGroupListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-users :initarg :policy-users :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-user-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-entities-for-policy-response-policy-users
                         :shape "PolicyUserListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-roles :initarg :policy-roles :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-role-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-entities-for-policy-response-policy-roles
                         :shape "PolicyRoleListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-entities-for-policy-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-entities-for-policy-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-entities-for-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-entities-for-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-entities-for-policy-response
                    'make-list-entities-for-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-for-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-for-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-groups))
      (common-lisp:list
       (common-lisp:cons "PolicyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-users))
      (common-lisp:list
       (common-lisp:cons "PolicyUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-roles))
      (common-lisp:list
       (common-lisp:cons "PolicyRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-for-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-group-policies-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor
                         struct-shape-list-group-policies-request-group-name
                         :shape "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-group-policies-request-marker :shape
                         "markerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-group-policies-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-group-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-group-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-group-policies-request
                    'make-list-group-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-group-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-group-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-group-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-group-policies-response common-lisp:nil
                       ((policy-names :initarg :policy-names :initform
                         (common-lisp:error ":policy-names is required") :type
                         (common-lisp:or |policyNameListType| common-lisp:null)
                         :accessor
                         struct-shape-list-group-policies-response-policy-names
                         :shape "policyNameListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-group-policies-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-group-policies-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-group-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-group-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-group-policies-response
                    'make-list-group-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-group-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-group-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-group-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-groups-for-user-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-groups-for-user-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-groups-for-user-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-groups-for-user-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-groups-for-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-groups-for-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-groups-for-user-request
                    'make-list-groups-for-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-groups-for-user-response common-lisp:nil
                       ((groups :initarg :groups :initform
                         (common-lisp:error ":groups is required") :type
                         (common-lisp:or |groupListType| common-lisp:null)
                         :accessor
                         struct-shape-list-groups-for-user-response-groups
                         :shape "groupListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-groups-for-user-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-groups-for-user-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-groups-for-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-groups-for-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-groups-for-user-response
                    'make-list-groups-for-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-groups-request common-lisp:nil
                       ((path-prefix :initarg :path-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or |pathPrefixType| common-lisp:null)
                         :accessor struct-shape-list-groups-request-path-prefix
                         :shape "pathPrefixType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor struct-shape-list-groups-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor struct-shape-list-groups-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-groups-request 'make-list-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-groups-response common-lisp:nil
                       ((groups :initarg :groups :initform
                         (common-lisp:error ":groups is required") :type
                         (common-lisp:or |groupListType| common-lisp:null)
                         :accessor struct-shape-list-groups-response-groups
                         :shape "groupListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-groups-response-is-truncated :shape
                         "booleanType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor struct-shape-list-groups-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-groups-response 'make-list-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instance-profile-tags-request common-lisp:nil
                       ((instance-profile-name :initarg :instance-profile-name
                         :initform
                         (common-lisp:error
                          ":instance-profile-name is required")
                         :type
                         (common-lisp:or |instanceProfileNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profile-tags-request-instance-profile-name
                         :shape "instanceProfileNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profile-tags-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profile-tags-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-instance-profile-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-instance-profile-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-instance-profile-tags-request
                    'make-list-instance-profile-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profile-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profile-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profile-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instance-profile-tags-response common-lisp:nil
                       ((tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profile-tags-response-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profile-tags-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profile-tags-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-instance-profile-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-instance-profile-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-instance-profile-tags-response
                    'make-list-instance-profile-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profile-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profile-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profile-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instance-profiles-for-role-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profiles-for-role-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profiles-for-role-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profiles-for-role-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-instance-profiles-for-role-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-instance-profiles-for-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-instance-profiles-for-role-request
                    'make-list-instance-profiles-for-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-for-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-for-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-for-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instance-profiles-for-role-response common-lisp:nil
                       ((instance-profiles :initarg :instance-profiles
                         :initform
                         (common-lisp:error ":instance-profiles is required")
                         :type
                         (common-lisp:or |instanceProfileListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profiles-for-role-response-instance-profiles
                         :shape "instanceProfileListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profiles-for-role-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profiles-for-role-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-instance-profiles-for-role-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-instance-profiles-for-role-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-instance-profiles-for-role-response
                    'make-list-instance-profiles-for-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-for-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-for-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profiles))
      (common-lisp:list
       (common-lisp:cons "InstanceProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-for-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instance-profiles-request common-lisp:nil
                       ((path-prefix :initarg :path-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or |pathPrefixType| common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profiles-request-path-prefix
                         :shape "pathPrefixType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profiles-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profiles-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-instance-profiles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-instance-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-instance-profiles-request
                    'make-list-instance-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instance-profiles-response common-lisp:nil
                       ((instance-profiles :initarg :instance-profiles
                         :initform
                         (common-lisp:error ":instance-profiles is required")
                         :type
                         (common-lisp:or |instanceProfileListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profiles-response-instance-profiles
                         :shape "instanceProfileListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profiles-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-instance-profiles-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-instance-profiles-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-instance-profiles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-instance-profiles-response
                    'make-list-instance-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profiles))
      (common-lisp:list
       (common-lisp:cons "InstanceProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mfadevice-tags-request common-lisp:nil
                       ((serial-number :initarg :serial-number :initform
                         (common-lisp:error ":serial-number is required") :type
                         (common-lisp:or |serialNumberType| common-lisp:null)
                         :accessor
                         struct-shape-list-mfadevice-tags-request-serial-number
                         :shape "serialNumberType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-mfadevice-tags-request-marker :shape
                         "markerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-mfadevice-tags-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mfadevice-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-mfadevice-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mfadevice-tags-request
                    'make-list-mfadevice-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevice-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevice-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevice-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mfadevice-tags-response common-lisp:nil
                       ((tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor
                         struct-shape-list-mfadevice-tags-response-tags :shape
                         "tagListType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-mfadevice-tags-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-mfadevice-tags-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mfadevice-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-mfadevice-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mfadevice-tags-response
                    'make-list-mfadevice-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevice-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevice-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevice-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mfadevices-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-mfadevices-request-user-name :shape
                         "existingUserNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor struct-shape-list-mfadevices-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-mfadevices-request-max-items :shape
                         "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mfadevices-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-mfadevices-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mfadevices-request 'make-list-mfadevices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mfadevices-response common-lisp:nil
                       ((mfadevices :initarg :mfadevices :initform
                         (common-lisp:error ":mfadevices is required") :type
                         (common-lisp:or |mfaDeviceListType| common-lisp:null)
                         :accessor
                         struct-shape-list-mfadevices-response-mfadevices
                         :shape "mfaDeviceListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-mfadevices-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor struct-shape-list-mfadevices-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mfadevices-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-mfadevices-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mfadevices-response 'make-list-mfadevices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfadevices))
      (common-lisp:list
       (common-lisp:cons "MFADevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-open-idconnect-provider-tags-request
                       common-lisp:nil
                       ((open-idconnect-provider-arn :initarg
                         :open-idconnect-provider-arn :initform
                         (common-lisp:error
                          ":open-idconnect-provider-arn is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-list-open-idconnect-provider-tags-request-open-idconnect-provider-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-open-idconnect-provider-tags-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-open-idconnect-provider-tags-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-open-idconnect-provider-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-open-idconnect-provider-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-open-idconnect-provider-tags-request
                    'make-list-open-idconnect-provider-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-provider-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-provider-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-provider-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-open-idconnect-provider-tags-response
                       common-lisp:nil
                       ((tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor
                         struct-shape-list-open-idconnect-provider-tags-response-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-open-idconnect-provider-tags-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-open-idconnect-provider-tags-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-open-idconnect-provider-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-open-idconnect-provider-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-open-idconnect-provider-tags-response
                    'make-list-open-idconnect-provider-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-provider-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-provider-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-provider-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-open-idconnect-providers-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-open-idconnect-providers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-open-idconnect-providers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-open-idconnect-providers-request
                    'make-list-open-idconnect-providers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-providers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-open-idconnect-providers-response common-lisp:nil
                       ((open-idconnect-provider-list :initarg
                         :open-idconnect-provider-list :initform
                         common-lisp:nil :type
                         (common-lisp:or open-idconnect-provider-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-open-idconnect-providers-response-open-idconnect-provider-list
                         :shape "OpenIDConnectProviderListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-open-idconnect-providers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-open-idconnect-providers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-open-idconnect-providers-response
                    'make-list-open-idconnect-providers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-providers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-providers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-list))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-providers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policies-granting-service-access-entry
                       common-lisp:nil
                       ((service-namespace :initarg :service-namespace
                         :initform common-lisp:nil :type
                         (common-lisp:or |serviceNamespaceType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-policies-granting-service-access-entry-service-namespace
                         :shape "serviceNamespaceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (policies :initarg :policies :initform common-lisp:nil
                         :type
                         (common-lisp:or |policyGrantingServiceAccessListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-policies-granting-service-access-entry-policies
                         :shape "policyGrantingServiceAccessListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-policies-granting-service-access-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-policies-granting-service-access-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-policies-granting-service-access-entry
                    'make-list-policies-granting-service-access-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policies-granting-service-access-request
                       common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-policies-granting-service-access-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-list-policies-granting-service-access-request-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-namespaces :initarg :service-namespaces
                         :initform
                         (common-lisp:error ":service-namespaces is required")
                         :type
                         (common-lisp:or |serviceNamespaceListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-policies-granting-service-access-request-service-namespaces
                         :shape "serviceNamespaceListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-policies-granting-service-access-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-policies-granting-service-access-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-policies-granting-service-access-request
                    'make-list-policies-granting-service-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespaces))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policies-granting-service-access-response
                       common-lisp:nil
                       ((policies-granting-service-access :initarg
                         :policies-granting-service-access :initform
                         (common-lisp:error
                          ":policies-granting-service-access is required")
                         :type
                         (common-lisp:or
                          |listPolicyGrantingServiceAccessResponseListType|
                          common-lisp:null)
                         :accessor
                         struct-shape-list-policies-granting-service-access-response-policies-granting-service-access
                         :shape
                         "listPolicyGrantingServiceAccessResponseListType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-policies-granting-service-access-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-policies-granting-service-access-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-policies-granting-service-access-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-policies-granting-service-access-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-policies-granting-service-access-response
                    'make-list-policies-granting-service-access-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policies-granting-service-access))
      (common-lisp:list
       (common-lisp:cons "PoliciesGrantingServiceAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policies-request common-lisp:nil
                       ((scope :initarg :scope :initform common-lisp:nil :type
                         (common-lisp:or |policyScopeType| common-lisp:null)
                         :accessor struct-shape-list-policies-request-scope
                         :shape "policyScopeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (only-attached :initarg :only-attached :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-policies-request-only-attached
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path-prefix :initarg :path-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyPathType| common-lisp:null)
                         :accessor
                         struct-shape-list-policies-request-path-prefix :shape
                         "policyPathType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-usage-filter :initarg :policy-usage-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or policy-usage-type common-lisp:null)
                         :accessor
                         struct-shape-list-policies-request-policy-usage-filter
                         :shape "PolicyUsageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor struct-shape-list-policies-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor struct-shape-list-policies-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-policies-request 'make-list-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'only-attached))
      (common-lisp:list
       (common-lisp:cons "OnlyAttached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-usage-filter))
      (common-lisp:list
       (common-lisp:cons "PolicyUsageFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policies-response common-lisp:nil
                       ((policies :initarg :policies :initform common-lisp:nil
                         :type
                         (common-lisp:or |policyListType| common-lisp:null)
                         :accessor struct-shape-list-policies-response-policies
                         :shape "policyListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-policies-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor struct-shape-list-policies-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-policies-response 'make-list-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policy-tags-request common-lisp:nil
                       ((policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-list-policy-tags-request-policy-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor struct-shape-list-policy-tags-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-policy-tags-request-max-items :shape
                         "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-policy-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-policy-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-policy-tags-request 'make-list-policy-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policy-tags-response common-lisp:nil
                       ((tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-list-policy-tags-response-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-policy-tags-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-policy-tags-response-marker :shape
                         "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-policy-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-policy-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-policy-tags-response
                    'make-list-policy-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policy-versions-request common-lisp:nil
                       ((policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-list-policy-versions-request-policy-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-policy-versions-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-policy-versions-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-policy-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-policy-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-policy-versions-request
                    'make-list-policy-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policy-versions-response common-lisp:nil
                       ((versions :initarg :versions :initform common-lisp:nil
                         :type
                         (common-lisp:or |policyDocumentVersionListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-policy-versions-response-versions
                         :shape "policyDocumentVersionListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-policy-versions-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-policy-versions-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-policy-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-policy-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-policy-versions-response
                    'make-list-policy-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "Versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-role-policies-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor
                         struct-shape-list-role-policies-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-role-policies-request-marker :shape
                         "markerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-role-policies-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-role-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-role-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-role-policies-request
                    'make-list-role-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-role-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-role-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-role-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-role-policies-response common-lisp:nil
                       ((policy-names :initarg :policy-names :initform
                         (common-lisp:error ":policy-names is required") :type
                         (common-lisp:or |policyNameListType| common-lisp:null)
                         :accessor
                         struct-shape-list-role-policies-response-policy-names
                         :shape "policyNameListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-role-policies-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-role-policies-response-marker :shape
                         "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-role-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-role-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-role-policies-response
                    'make-list-role-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-role-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-role-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-role-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-role-tags-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor
                         struct-shape-list-role-tags-request-role-name :shape
                         "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor struct-shape-list-role-tags-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-role-tags-request-max-items :shape
                         "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-role-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-role-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-role-tags-request 'make-list-role-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-role-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-role-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-role-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-role-tags-response common-lisp:nil
                       ((tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-list-role-tags-response-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-role-tags-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor struct-shape-list-role-tags-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-role-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-role-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-role-tags-response 'make-list-role-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-role-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-role-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-role-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-roles-request common-lisp:nil
                       ((path-prefix :initarg :path-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or |pathPrefixType| common-lisp:null)
                         :accessor struct-shape-list-roles-request-path-prefix
                         :shape "pathPrefixType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor struct-shape-list-roles-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor struct-shape-list-roles-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-roles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-roles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-roles-request 'make-list-roles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-roles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-roles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-roles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-roles-response common-lisp:nil
                       ((roles :initarg :roles :initform
                         (common-lisp:error ":roles is required") :type
                         (common-lisp:or |roleListType| common-lisp:null)
                         :accessor struct-shape-list-roles-response-roles
                         :shape "roleListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-roles-response-is-truncated :shape
                         "booleanType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor struct-shape-list-roles-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-roles-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-roles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-roles-response 'make-list-roles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-roles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-roles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "Roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-roles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-samlprovider-tags-request common-lisp:nil
                       ((samlprovider-arn :initarg :samlprovider-arn :initform
                         (common-lisp:error ":samlprovider-arn is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-list-samlprovider-tags-request-samlprovider-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-samlprovider-tags-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-samlprovider-tags-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-samlprovider-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-samlprovider-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-samlprovider-tags-request
                    'make-list-samlprovider-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-samlprovider-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-samlprovider-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-arn))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-samlprovider-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-samlprovider-tags-response common-lisp:nil
                       ((tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor
                         struct-shape-list-samlprovider-tags-response-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-samlprovider-tags-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-samlprovider-tags-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-samlprovider-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-samlprovider-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-samlprovider-tags-response
                    'make-list-samlprovider-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-samlprovider-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-samlprovider-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-samlprovider-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-samlproviders-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-samlproviders-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-samlproviders-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-samlproviders-request
                    'make-list-samlproviders-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-samlproviders-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-samlproviders-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-samlproviders-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-samlproviders-response common-lisp:nil
                       ((samlprovider-list :initarg :samlprovider-list
                         :initform common-lisp:nil :type
                         (common-lisp:or samlprovider-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-samlproviders-response-samlprovider-list
                         :shape "SAMLProviderListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-samlproviders-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-samlproviders-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-samlproviders-response
                    'make-list-samlproviders-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-samlproviders-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-samlproviders-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-list))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-samlproviders-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sshpublic-keys-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-list-sshpublic-keys-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-sshpublic-keys-request-marker :shape
                         "markerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-sshpublic-keys-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sshpublic-keys-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-sshpublic-keys-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sshpublic-keys-request
                    'make-list-sshpublic-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sshpublic-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sshpublic-keys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sshpublic-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sshpublic-keys-response common-lisp:nil
                       ((sshpublic-keys :initarg :sshpublic-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or sshpublic-key-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sshpublic-keys-response-sshpublic-keys
                         :shape "SSHPublicKeyListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-sshpublic-keys-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-sshpublic-keys-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sshpublic-keys-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-sshpublic-keys-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sshpublic-keys-response
                    'make-list-sshpublic-keys-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sshpublic-keys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sshpublic-keys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-keys))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sshpublic-keys-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-server-certificate-tags-request common-lisp:nil
                       ((server-certificate-name :initarg
                         :server-certificate-name :initform
                         (common-lisp:error
                          ":server-certificate-name is required")
                         :type
                         (common-lisp:or |serverCertificateNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-server-certificate-tags-request-server-certificate-name
                         :shape "serverCertificateNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-server-certificate-tags-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-server-certificate-tags-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-server-certificate-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-server-certificate-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-server-certificate-tags-request
                    'make-list-server-certificate-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificate-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificate-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificate-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-server-certificate-tags-response common-lisp:nil
                       ((tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor
                         struct-shape-list-server-certificate-tags-response-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-server-certificate-tags-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-server-certificate-tags-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-server-certificate-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-server-certificate-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-server-certificate-tags-response
                    'make-list-server-certificate-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificate-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificate-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificate-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-server-certificates-request common-lisp:nil
                       ((path-prefix :initarg :path-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or |pathPrefixType| common-lisp:null)
                         :accessor
                         struct-shape-list-server-certificates-request-path-prefix
                         :shape "pathPrefixType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-server-certificates-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-server-certificates-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-server-certificates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-server-certificates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-server-certificates-request
                    'make-list-server-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-server-certificates-response common-lisp:nil
                       ((server-certificate-metadata-list :initarg
                         :server-certificate-metadata-list :initform
                         (common-lisp:error
                          ":server-certificate-metadata-list is required")
                         :type
                         (common-lisp:or |serverCertificateMetadataListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-server-certificates-response-server-certificate-metadata-list
                         :shape "serverCertificateMetadataListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-server-certificates-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-server-certificates-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-server-certificates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-server-certificates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-server-certificates-response
                    'make-list-server-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-metadata-list))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateMetadataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-specific-credentials-request
                       common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-list-service-specific-credentials-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |serviceName| common-lisp:null)
                         :accessor
                         struct-shape-list-service-specific-credentials-request-service-name
                         :shape "serviceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-specific-credentials-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-specific-credentials-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-specific-credentials-request
                    'make-list-service-specific-credentials-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-specific-credentials-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-specific-credentials-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-specific-credentials-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-specific-credentials-response
                       common-lisp:nil
                       ((service-specific-credentials :initarg
                         :service-specific-credentials :initform
                         common-lisp:nil :type
                         (common-lisp:or service-specific-credentials-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-service-specific-credentials-response-service-specific-credentials
                         :shape "ServiceSpecificCredentialsListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-specific-credentials-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-specific-credentials-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-specific-credentials-response
                    'make-list-service-specific-credentials-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-specific-credentials-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-specific-credentials-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specific-credentials))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecificCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-specific-credentials-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-signing-certificates-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-signing-certificates-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-signing-certificates-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-signing-certificates-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-signing-certificates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-signing-certificates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-signing-certificates-request
                    'make-list-signing-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-signing-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-signing-certificates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-signing-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-signing-certificates-response common-lisp:nil
                       ((certificates :initarg :certificates :initform
                         (common-lisp:error ":certificates is required") :type
                         (common-lisp:or |certificateListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-signing-certificates-response-certificates
                         :shape "certificateListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-signing-certificates-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-signing-certificates-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-signing-certificates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-signing-certificates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-signing-certificates-response
                    'make-list-signing-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-signing-certificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-signing-certificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-signing-certificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-policies-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-user-policies-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-user-policies-request-marker :shape
                         "markerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-user-policies-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-user-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-policies-request
                    'make-list-user-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-policies-response common-lisp:nil
                       ((policy-names :initarg :policy-names :initform
                         (common-lisp:error ":policy-names is required") :type
                         (common-lisp:or |policyNameListType| common-lisp:null)
                         :accessor
                         struct-shape-list-user-policies-response-policy-names
                         :shape "policyNameListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-user-policies-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-user-policies-response-marker :shape
                         "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-user-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-policies-response
                    'make-list-user-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-tags-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-user-tags-request-user-name :shape
                         "existingUserNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor struct-shape-list-user-tags-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-user-tags-request-max-items :shape
                         "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-user-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-tags-request 'make-list-user-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-tags-response common-lisp:nil
                       ((tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-list-user-tags-response-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-user-tags-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor struct-shape-list-user-tags-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-user-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-tags-response 'make-list-user-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-request common-lisp:nil
                       ((path-prefix :initarg :path-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or |pathPrefixType| common-lisp:null)
                         :accessor struct-shape-list-users-request-path-prefix
                         :shape "pathPrefixType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor struct-shape-list-users-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor struct-shape-list-users-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-users-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-users-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-users-request 'make-list-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-response common-lisp:nil
                       ((users :initarg :users :initform
                         (common-lisp:error ":users is required") :type
                         (common-lisp:or |userListType| common-lisp:null)
                         :accessor struct-shape-list-users-response-users
                         :shape "userListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-users-response-is-truncated :shape
                         "booleanType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor struct-shape-list-users-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-users-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-users-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-users-response 'make-list-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-virtual-mfadevices-request common-lisp:nil
                       ((assignment-status :initarg :assignment-status
                         :initform common-lisp:nil :type
                         (common-lisp:or |assignmentStatusType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-mfadevices-request-assignment-status
                         :shape "assignmentStatusType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-mfadevices-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-mfadevices-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-virtual-mfadevices-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-virtual-mfadevices-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-virtual-mfadevices-request
                    'make-list-virtual-mfadevices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-mfadevices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-mfadevices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-status))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-mfadevices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-virtual-mfadevices-response common-lisp:nil
                       ((virtual-mfadevices :initarg :virtual-mfadevices
                         :initform
                         (common-lisp:error ":virtual-mfadevices is required")
                         :type
                         (common-lisp:or |virtualMFADeviceListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-mfadevices-response-virtual-mfadevices
                         :shape "virtualMFADeviceListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-mfadevices-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-mfadevices-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-virtual-mfadevices-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-virtual-mfadevices-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-virtual-mfadevices-response
                    'make-list-virtual-mfadevices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-mfadevices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-mfadevices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-mfadevices))
      (common-lisp:list
       (common-lisp:cons "VirtualMFADevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-mfadevices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass login-profile common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor struct-shape-login-profile-user-name :shape
                         "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         (common-lisp:error ":create-date is required") :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-login-profile-create-date :shape
                         "dateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (password-reset-required :initarg
                         :password-reset-required :initform common-lisp:nil
                         :type (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-login-profile-password-reset-required
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-login-profile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'login-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'login-profile 'make-login-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input login-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input login-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'password-reset-required))
      (common-lisp:list
       (common-lisp:cons "PasswordResetRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input login-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mfadevice common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor struct-shape-mfadevice-user-name :shape
                         "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serial-number :initarg :serial-number :initform
                         (common-lisp:error ":serial-number is required") :type
                         (common-lisp:or |serialNumberType| common-lisp:null)
                         :accessor struct-shape-mfadevice-serial-number :shape
                         "serialNumberType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-date :initarg :enable-date :initform
                         (common-lisp:error ":enable-date is required") :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-mfadevice-enable-date :shape "dateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mfadevice
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mfadevice
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mfadevice 'make-mfadevice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mfadevice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mfadevice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-date))
      (common-lisp:list
       (common-lisp:cons "EnableDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mfadevice))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition malformed-certificate-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       malformed-certificate-exception-message)))
 (common-lisp:export
  (common-lisp:list 'malformed-certificate-exception
                    'malformed-certificate-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition malformed-policy-document-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       malformed-policy-document-exception-message)))
 (common-lisp:export
  (common-lisp:list 'malformed-policy-document-exception
                    'malformed-policy-document-exception-message)))
(common-lisp:progn
 (common-lisp:defclass managed-policy-detail common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor
                         struct-shape-managed-policy-detail-policy-name :shape
                         "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-id :initarg :policy-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |idType| common-lisp:null) :accessor
                         struct-shape-managed-policy-detail-policy-id :shape
                         "idType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-managed-policy-detail-arn :shape
                         "arnType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or |policyPathType| common-lisp:null)
                         :accessor struct-shape-managed-policy-detail-path
                         :shape "policyPathType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-version-id :initarg :default-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or |policyVersionIdType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-managed-policy-detail-default-version-id
                         :shape "policyVersionIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attachment-count :initarg :attachment-count :initform
                         common-lisp:nil :type
                         (common-lisp:or |attachmentCountType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-managed-policy-detail-attachment-count
                         :shape "attachmentCountType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permissions-boundary-usage-count :initarg
                         :permissions-boundary-usage-count :initform
                         common-lisp:nil :type
                         (common-lisp:or |attachmentCountType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-managed-policy-detail-permissions-boundary-usage-count
                         :shape "attachmentCountType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-attachable :initarg :is-attachable :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-managed-policy-detail-is-attachable
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyDescriptionType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-managed-policy-detail-description :shape
                         "policyDescriptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-managed-policy-detail-create-date :shape
                         "dateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-date :initarg :update-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-managed-policy-detail-update-date :shape
                         "dateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy-version-list :initarg :policy-version-list
                         :initform common-lisp:nil :type
                         (common-lisp:or |policyDocumentVersionListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-managed-policy-detail-policy-version-list
                         :shape "policyDocumentVersionListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-managed-policy-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'managed-policy-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'managed-policy-detail 'make-managed-policy-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-policy-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-policy-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version-id))
      (common-lisp:list
       (common-lisp:cons "DefaultVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-count))
      (common-lisp:list
       (common-lisp:cons "AttachmentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-usage-count))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryUsageCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-attachable))
      (common-lisp:list
       (common-lisp:cons "IsAttachable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "UpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version-list))
      (common-lisp:list
       (common-lisp:cons "PolicyVersionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-policy-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype managed-policy-detail-list-type ()
   '(trivial-types:proper-list managed-policy-detail))
 (common-lisp:defun make-managed-policy-detail-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list managed-policy-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition no-such-entity-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-entity-exception-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-entity-exception
                    'no-such-entity-exception-message)))
(common-lisp:progn
 (common-lisp:defclass open-idconnect-provider-list-entry common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-open-idconnect-provider-list-entry-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-open-idconnect-provider-list-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'open-idconnect-provider-list-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'open-idconnect-provider-list-entry
                    'make-open-idconnect-provider-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-idconnect-provider-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-idconnect-provider-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-idconnect-provider-list-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype open-idconnect-provider-list-type ()
   '(trivial-types:proper-list open-idconnect-provider-list-entry))
 (common-lisp:defun make-open-idconnect-provider-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            open-idconnect-provider-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype open-idconnect-provider-url-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass organizations-decision-detail common-lisp:nil
                       ((allowed-by-organizations :initarg
                         :allowed-by-organizations :initform common-lisp:nil
                         :type (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-organizations-decision-detail-allowed-by-organizations
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organizations-decision-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organizations-decision-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organizations-decision-detail
                    'make-organizations-decision-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organizations-decision-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organizations-decision-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-by-organizations))
      (common-lisp:list
       (common-lisp:cons "AllowedByOrganizations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organizations-decision-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass password-policy common-lisp:nil
                       ((minimum-password-length :initarg
                         :minimum-password-length :initform common-lisp:nil
                         :type
                         (common-lisp:or |minimumPasswordLengthType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-password-policy-minimum-password-length
                         :shape "minimumPasswordLengthType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (require-symbols :initarg :require-symbols :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor struct-shape-password-policy-require-symbols
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-numbers :initarg :require-numbers :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor struct-shape-password-policy-require-numbers
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-uppercase-characters :initarg
                         :require-uppercase-characters :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-password-policy-require-uppercase-characters
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-lowercase-characters :initarg
                         :require-lowercase-characters :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-password-policy-require-lowercase-characters
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-users-to-change-password :initarg
                         :allow-users-to-change-password :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-password-policy-allow-users-to-change-password
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expire-passwords :initarg :expire-passwords :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-password-policy-expire-passwords :shape
                         "booleanType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-password-age :initarg :max-password-age :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxPasswordAgeType| common-lisp:null)
                         :accessor
                         struct-shape-password-policy-max-password-age :shape
                         "maxPasswordAgeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password-reuse-prevention :initarg
                         :password-reuse-prevention :initform common-lisp:nil
                         :type
                         (common-lisp:or |passwordReusePreventionType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-password-policy-password-reuse-prevention
                         :shape "passwordReusePreventionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (hard-expiry :initarg :hard-expiry :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanObjectType| common-lisp:null)
                         :accessor struct-shape-password-policy-hard-expiry
                         :shape "booleanObjectType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-password-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'password-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'password-policy 'make-password-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input password-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input password-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-password-length))
      (common-lisp:list
       (common-lisp:cons "MinimumPasswordLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-symbols))
      (common-lisp:list
       (common-lisp:cons "RequireSymbols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-numbers))
      (common-lisp:list
       (common-lisp:cons "RequireNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-uppercase-characters))
      (common-lisp:list
       (common-lisp:cons "RequireUppercaseCharacters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-lowercase-characters))
      (common-lisp:list
       (common-lisp:cons "RequireLowercaseCharacters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-users-to-change-password))
      (common-lisp:list
       (common-lisp:cons "AllowUsersToChangePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expire-passwords))
      (common-lisp:list
       (common-lisp:cons "ExpirePasswords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-password-age))
      (common-lisp:list
       (common-lisp:cons "MaxPasswordAge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'password-reuse-prevention))
      (common-lisp:list
       (common-lisp:cons "PasswordReusePrevention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hard-expiry))
      (common-lisp:list
       (common-lisp:cons "HardExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input password-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition password-policy-violation-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       password-policy-violation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'password-policy-violation-exception
                    'password-policy-violation-exception-message)))
(common-lisp:deftype permissions-boundary-attachment-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass permissions-boundary-decision-detail common-lisp:nil
                       ((allowed-by-permissions-boundary :initarg
                         :allowed-by-permissions-boundary :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-permissions-boundary-decision-detail-allowed-by-permissions-boundary
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-permissions-boundary-decision-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'permissions-boundary-decision-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'permissions-boundary-decision-detail
                    'make-permissions-boundary-decision-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          permissions-boundary-decision-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          permissions-boundary-decision-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-by-permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "AllowedByPermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          permissions-boundary-decision-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass policy common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor struct-shape-policy-policy-name :shape
                         "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-id :initarg :policy-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |idType| common-lisp:null) :accessor
                         struct-shape-policy-policy-id :shape "idType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-policy-arn :shape "arnType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or |policyPathType| common-lisp:null)
                         :accessor struct-shape-policy-path :shape
                         "policyPathType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-version-id :initarg :default-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or |policyVersionIdType|
                                         common-lisp:null)
                         :accessor struct-shape-policy-default-version-id
                         :shape "policyVersionIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attachment-count :initarg :attachment-count :initform
                         common-lisp:nil :type
                         (common-lisp:or |attachmentCountType|
                                         common-lisp:null)
                         :accessor struct-shape-policy-attachment-count :shape
                         "attachmentCountType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permissions-boundary-usage-count :initarg
                         :permissions-boundary-usage-count :initform
                         common-lisp:nil :type
                         (common-lisp:or |attachmentCountType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-policy-permissions-boundary-usage-count
                         :shape "attachmentCountType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-attachable :initarg :is-attachable :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor struct-shape-policy-is-attachable :shape
                         "booleanType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyDescriptionType|
                                         common-lisp:null)
                         :accessor struct-shape-policy-description :shape
                         "policyDescriptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-policy-create-date :shape "dateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-date :initarg :update-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-policy-update-date :shape "dateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-policy-tags :shape
                         "tagListType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'policy 'make-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version-id))
      (common-lisp:list
       (common-lisp:cons "DefaultVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-count))
      (common-lisp:list
       (common-lisp:cons "AttachmentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-usage-count))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryUsageCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-attachable))
      (common-lisp:list
       (common-lisp:cons "IsAttachable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "UpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass policy-detail common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor struct-shape-policy-detail-policy-name
                         :shape "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyDocumentType| common-lisp:null)
                         :accessor struct-shape-policy-detail-policy-document
                         :shape "policyDocumentType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'policy-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'policy-detail 'make-policy-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-detail))
   common-lisp:nil))
(common-lisp:deftype policy-evaluation-decision-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition policy-evaluation-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       policy-evaluation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'policy-evaluation-exception
                    'policy-evaluation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass policy-granting-service-access common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor
                         struct-shape-policy-granting-service-access-policy-name
                         :shape "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-type :initarg :policy-type :initform
                         (common-lisp:error ":policy-type is required") :type
                         (common-lisp:or |policyType| common-lisp:null)
                         :accessor
                         struct-shape-policy-granting-service-access-policy-type
                         :shape "policyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-arn :initarg :policy-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-policy-granting-service-access-policy-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-type :initarg :entity-type :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyOwnerEntityType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-policy-granting-service-access-entity-type
                         :shape "policyOwnerEntityType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (entity-name :initarg :entity-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |entityNameType| common-lisp:null)
                         :accessor
                         struct-shape-policy-granting-service-access-entity-name
                         :shape "entityNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy-granting-service-access
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'policy-granting-service-access
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'policy-granting-service-access
                    'make-policy-granting-service-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-granting-service-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-granting-service-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "EntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-name))
      (common-lisp:list
       (common-lisp:cons "EntityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-granting-service-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass policy-group common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor struct-shape-policy-group-group-name :shape
                         "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-id :initarg :group-id :initform common-lisp:nil
                         :type (common-lisp:or |idType| common-lisp:null)
                         :accessor struct-shape-policy-group-group-id :shape
                         "idType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'policy-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'policy-group 'make-policy-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-group-list-type ()
   '(trivial-types:proper-list policy-group))
 (common-lisp:defun make-policy-group-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-identifier-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition policy-not-attachable-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       policy-not-attachable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'policy-not-attachable-exception
                    'policy-not-attachable-exception-message)))
(common-lisp:progn
 (common-lisp:defclass policy-role common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor struct-shape-policy-role-role-name :shape
                         "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-id :initarg :role-id :initform common-lisp:nil
                         :type (common-lisp:or |idType| common-lisp:null)
                         :accessor struct-shape-policy-role-role-id :shape
                         "idType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy-role
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'policy-role
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'policy-role 'make-policy-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-id))
      (common-lisp:list
       (common-lisp:cons "RoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-role-list-type ()
   '(trivial-types:proper-list policy-role))
 (common-lisp:defun make-policy-role-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-role))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-source-type () 'common-lisp:string)
(common-lisp:deftype policy-usage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass policy-user common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor struct-shape-policy-user-user-name :shape
                         "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or |idType| common-lisp:null)
                         :accessor struct-shape-policy-user-user-id :shape
                         "idType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy-user
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'policy-user
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'policy-user 'make-policy-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-user-list-type ()
   '(trivial-types:proper-list policy-user))
 (common-lisp:defun make-policy-user-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-user))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass policy-version common-lisp:nil
                       ((document :initarg :document :initform common-lisp:nil
                         :type
                         (common-lisp:or |policyDocumentType| common-lisp:null)
                         :accessor struct-shape-policy-version-document :shape
                         "policyDocumentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyVersionIdType|
                                         common-lisp:null)
                         :accessor struct-shape-policy-version-version-id
                         :shape "policyVersionIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-default-version :initarg :is-default-version
                         :initform common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-policy-version-is-default-version :shape
                         "booleanType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-policy-version-create-date :shape
                         "dateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'policy-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'policy-version 'make-policy-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "Document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "IsDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass position common-lisp:nil
                       ((line :initarg :line :initform common-lisp:nil :type
                         (common-lisp:or line-number common-lisp:null)
                         :accessor struct-shape-position-line :shape
                         "LineNumber" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (column :initarg :column :initform common-lisp:nil
                         :type (common-lisp:or column-number common-lisp:null)
                         :accessor struct-shape-position-column :shape
                         "ColumnNumber" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-position
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'position
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'position 'make-position))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input position))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input position))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line))
      (common-lisp:list
       (common-lisp:cons "Line"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input position))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-group-policy-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor
                         struct-shape-put-group-policy-request-group-name
                         :shape "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor
                         struct-shape-put-group-policy-request-policy-name
                         :shape "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policy-document is required")
                         :type
                         (common-lisp:or |policyDocumentType| common-lisp:null)
                         :accessor
                         struct-shape-put-group-policy-request-policy-document
                         :shape "policyDocumentType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-group-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-group-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-group-policy-request 'make-put-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-group-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-group-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-group-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-role-permissions-boundary-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor
                         struct-shape-put-role-permissions-boundary-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permissions-boundary :initarg :permissions-boundary
                         :initform
                         (common-lisp:error
                          ":permissions-boundary is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-put-role-permissions-boundary-request-permissions-boundary
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-role-permissions-boundary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-role-permissions-boundary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-role-permissions-boundary-request
                    'make-put-role-permissions-boundary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-role-permissions-boundary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-role-permissions-boundary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-role-permissions-boundary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-role-policy-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor
                         struct-shape-put-role-policy-request-role-name :shape
                         "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor
                         struct-shape-put-role-policy-request-policy-name
                         :shape "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policy-document is required")
                         :type
                         (common-lisp:or |policyDocumentType| common-lisp:null)
                         :accessor
                         struct-shape-put-role-policy-request-policy-document
                         :shape "policyDocumentType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-role-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-role-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-role-policy-request 'make-put-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-role-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-role-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-role-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-user-permissions-boundary-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-put-user-permissions-boundary-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permissions-boundary :initarg :permissions-boundary
                         :initform
                         (common-lisp:error
                          ":permissions-boundary is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-put-user-permissions-boundary-request-permissions-boundary
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-user-permissions-boundary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-user-permissions-boundary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-user-permissions-boundary-request
                    'make-put-user-permissions-boundary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-user-permissions-boundary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-user-permissions-boundary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-user-permissions-boundary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-user-policy-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-user-policy-request-user-name :shape
                         "existingUserNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or |policyNameType| common-lisp:null)
                         :accessor
                         struct-shape-put-user-policy-request-policy-name
                         :shape "policyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policy-document is required")
                         :type
                         (common-lisp:or |policyDocumentType| common-lisp:null)
                         :accessor
                         struct-shape-put-user-policy-request-policy-document
                         :shape "policyDocumentType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-user-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-user-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-user-policy-request 'make-put-user-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-user-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-user-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-user-policy-request))
   common-lisp:nil))
(common-lisp:deftype reason-type () 'common-lisp:string)
(common-lisp:deftype region-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass remove-client-idfrom-open-idconnect-provider-request
                       common-lisp:nil
                       ((open-idconnect-provider-arn :initarg
                         :open-idconnect-provider-arn :initform
                         (common-lisp:error
                          ":open-idconnect-provider-arn is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-remove-client-idfrom-open-idconnect-provider-request-open-idconnect-provider-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or |clientIDType| common-lisp:null)
                         :accessor
                         struct-shape-remove-client-idfrom-open-idconnect-provider-request-client-id
                         :shape "clientIDType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-client-idfrom-open-idconnect-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-client-idfrom-open-idconnect-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-client-idfrom-open-idconnect-provider-request
                    'make-remove-client-idfrom-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-client-idfrom-open-idconnect-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-client-idfrom-open-idconnect-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-client-idfrom-open-idconnect-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-role-from-instance-profile-request
                       common-lisp:nil
                       ((instance-profile-name :initarg :instance-profile-name
                         :initform
                         (common-lisp:error
                          ":instance-profile-name is required")
                         :type
                         (common-lisp:or |instanceProfileNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-remove-role-from-instance-profile-request-instance-profile-name
                         :shape "instanceProfileNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor
                         struct-shape-remove-role-from-instance-profile-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-role-from-instance-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-role-from-instance-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-role-from-instance-profile-request
                    'make-remove-role-from-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-user-from-group-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor
                         struct-shape-remove-user-from-group-request-group-name
                         :shape "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-remove-user-from-group-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-user-from-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-user-from-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-user-from-group-request
                    'make-remove-user-from-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-user-from-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-user-from-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-user-from-group-request))
   common-lisp:nil))
(common-lisp:deftype report-content-type ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype report-format-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition report-generation-limit-exceeded-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       report-generation-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'report-generation-limit-exceeded-exception
                    'report-generation-limit-exceeded-exception-message)))
(common-lisp:deftype report-state-description-type () 'common-lisp:string)
(common-lisp:deftype report-state-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reset-service-specific-credential-request
                       common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-reset-service-specific-credential-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-specific-credential-id :initarg
                         :service-specific-credential-id :initform
                         (common-lisp:error
                          ":service-specific-credential-id is required")
                         :type
                         (common-lisp:or |serviceSpecificCredentialId|
                                         common-lisp:null)
                         :accessor
                         struct-shape-reset-service-specific-credential-request-service-specific-credential-id
                         :shape "serviceSpecificCredentialId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-service-specific-credential-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reset-service-specific-credential-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-service-specific-credential-request
                    'make-reset-service-specific-credential-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-specific-credential-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-specific-credential-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specific-credential-id))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecificCredentialId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-specific-credential-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reset-service-specific-credential-response
                       common-lisp:nil
                       ((service-specific-credential :initarg
                         :service-specific-credential :initform common-lisp:nil
                         :type
                         (common-lisp:or service-specific-credential
                                         common-lisp:null)
                         :accessor
                         struct-shape-reset-service-specific-credential-response-service-specific-credential
                         :shape "ServiceSpecificCredential" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-service-specific-credential-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reset-service-specific-credential-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-service-specific-credential-response
                    'make-reset-service-specific-credential-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-specific-credential-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-specific-credential-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specific-credential))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecificCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-specific-credential-response))
   common-lisp:nil))
(common-lisp:deftype resource-handling-option-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-name-list-type ()
   '(trivial-types:proper-list resource-name-type))
 (common-lisp:defun make-resource-name-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-name-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-specific-result common-lisp:nil
                       ((eval-resource-name :initarg :eval-resource-name
                         :initform
                         (common-lisp:error ":eval-resource-name is required")
                         :type
                         (common-lisp:or resource-name-type common-lisp:null)
                         :accessor
                         struct-shape-resource-specific-result-eval-resource-name
                         :shape "ResourceNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (eval-resource-decision :initarg
                         :eval-resource-decision :initform
                         (common-lisp:error
                          ":eval-resource-decision is required")
                         :type
                         (common-lisp:or policy-evaluation-decision-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-specific-result-eval-resource-decision
                         :shape "PolicyEvaluationDecisionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (matched-statements :initarg :matched-statements
                         :initform common-lisp:nil :type
                         (common-lisp:or statement-list-type common-lisp:null)
                         :accessor
                         struct-shape-resource-specific-result-matched-statements
                         :shape "StatementListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (missing-context-values :initarg
                         :missing-context-values :initform common-lisp:nil
                         :type
                         (common-lisp:or context-key-names-result-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-specific-result-missing-context-values
                         :shape "ContextKeyNamesResultListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (eval-decision-details :initarg :eval-decision-details
                         :initform common-lisp:nil :type
                         (common-lisp:or eval-decision-details-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-specific-result-eval-decision-details
                         :shape "EvalDecisionDetailsType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (permissions-boundary-decision-detail :initarg
                         :permissions-boundary-decision-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or permissions-boundary-decision-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-specific-result-permissions-boundary-decision-detail
                         :shape "PermissionsBoundaryDecisionDetail" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-specific-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-specific-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-specific-result 'make-resource-specific-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-specific-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-specific-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eval-resource-name))
      (common-lisp:list
       (common-lisp:cons "EvalResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'eval-resource-decision))
      (common-lisp:list
       (common-lisp:cons "EvalResourceDecision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matched-statements))
      (common-lisp:list
       (common-lisp:cons "MatchedStatements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'missing-context-values))
      (common-lisp:list
       (common-lisp:cons "MissingContextValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'eval-decision-details))
      (common-lisp:list
       (common-lisp:cons "EvalDecisionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-decision-detail))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryDecisionDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-specific-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-specific-result-list-type ()
   '(trivial-types:proper-list resource-specific-result))
 (common-lisp:defun make-resource-specific-result-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-specific-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resync-mfadevice-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-resync-mfadevice-request-user-name :shape
                         "existingUserNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serial-number :initarg :serial-number :initform
                         (common-lisp:error ":serial-number is required") :type
                         (common-lisp:or |serialNumberType| common-lisp:null)
                         :accessor
                         struct-shape-resync-mfadevice-request-serial-number
                         :shape "serialNumberType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authentication-code1 :initarg :authentication-code1
                         :initform
                         (common-lisp:error
                          ":authentication-code1 is required")
                         :type
                         (common-lisp:or |authenticationCodeType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-resync-mfadevice-request-authentication-code1
                         :shape "authenticationCodeType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authentication-code2 :initarg :authentication-code2
                         :initform
                         (common-lisp:error
                          ":authentication-code2 is required")
                         :type
                         (common-lisp:or |authenticationCodeType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-resync-mfadevice-request-authentication-code2
                         :shape "authenticationCodeType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resync-mfadevice-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resync-mfadevice-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resync-mfadevice-request 'make-resync-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resync-mfadevice-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resync-mfadevice-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-code1))
      (common-lisp:list
       (common-lisp:cons "AuthenticationCode1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-code2))
      (common-lisp:list
       (common-lisp:cons "AuthenticationCode2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resync-mfadevice-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass role common-lisp:nil
                       ((path :initarg :path :initform
                         (common-lisp:error ":path is required") :type
                         (common-lisp:or |pathType| common-lisp:null) :accessor
                         struct-shape-role-path :shape "pathType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor struct-shape-role-role-name :shape
                         "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-id :initarg :role-id :initform
                         (common-lisp:error ":role-id is required") :type
                         (common-lisp:or |idType| common-lisp:null) :accessor
                         struct-shape-role-role-id :shape "idType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-role-arn :shape "arnType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         (common-lisp:error ":create-date is required") :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-role-create-date :shape "dateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assume-role-policy-document :initarg
                         :assume-role-policy-document :initform common-lisp:nil
                         :type
                         (common-lisp:or |policyDocumentType| common-lisp:null)
                         :accessor
                         struct-shape-role-assume-role-policy-document :shape
                         "policyDocumentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |roleDescriptionType|
                                         common-lisp:null)
                         :accessor struct-shape-role-description :shape
                         "roleDescriptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-session-duration :initarg :max-session-duration
                         :initform common-lisp:nil :type
                         (common-lisp:or |roleMaxSessionDurationType|
                                         common-lisp:null)
                         :accessor struct-shape-role-max-session-duration
                         :shape "roleMaxSessionDurationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (permissions-boundary :initarg :permissions-boundary
                         :initform common-lisp:nil :type
                         (common-lisp:or attached-permissions-boundary
                                         common-lisp:null)
                         :accessor struct-shape-role-permissions-boundary
                         :shape "AttachedPermissionsBoundary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-role-tags :shape "tagListType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-last-used :initarg :role-last-used :initform
                         common-lisp:nil :type
                         (common-lisp:or role-last-used common-lisp:null)
                         :accessor struct-shape-role-role-last-used :shape
                         "RoleLastUsed" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-role (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'role
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'role 'make-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-id))
      (common-lisp:list
       (common-lisp:cons "RoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assume-role-policy-document))
      (common-lisp:list
       (common-lisp:cons "AssumeRolePolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-session-duration))
      (common-lisp:list
       (common-lisp:cons "MaxSessionDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-last-used))
      (common-lisp:list
       (common-lisp:cons "RoleLastUsed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass role-detail common-lisp:nil
                       ((path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or |pathType| common-lisp:null) :accessor
                         struct-shape-role-detail-path :shape "pathType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-name :initarg :role-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor struct-shape-role-detail-role-name :shape
                         "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-id :initarg :role-id :initform common-lisp:nil
                         :type (common-lisp:or |idType| common-lisp:null)
                         :accessor struct-shape-role-detail-role-id :shape
                         "idType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-role-detail-arn :shape "arnType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-role-detail-create-date :shape "dateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (assume-role-policy-document :initarg
                         :assume-role-policy-document :initform common-lisp:nil
                         :type
                         (common-lisp:or |policyDocumentType| common-lisp:null)
                         :accessor
                         struct-shape-role-detail-assume-role-policy-document
                         :shape "policyDocumentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-profile-list :initarg :instance-profile-list
                         :initform common-lisp:nil :type
                         (common-lisp:or |instanceProfileListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-role-detail-instance-profile-list :shape
                         "instanceProfileListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-policy-list :initarg :role-policy-list :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyDetailListType|
                                         common-lisp:null)
                         :accessor struct-shape-role-detail-role-policy-list
                         :shape "policyDetailListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attached-managed-policies :initarg
                         :attached-managed-policies :initform common-lisp:nil
                         :type
                         (common-lisp:or |attachedPoliciesListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-role-detail-attached-managed-policies
                         :shape "attachedPoliciesListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (permissions-boundary :initarg :permissions-boundary
                         :initform common-lisp:nil :type
                         (common-lisp:or attached-permissions-boundary
                                         common-lisp:null)
                         :accessor
                         struct-shape-role-detail-permissions-boundary :shape
                         "AttachedPermissionsBoundary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-role-detail-tags :shape
                         "tagListType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-last-used :initarg :role-last-used :initform
                         common-lisp:nil :type
                         (common-lisp:or role-last-used common-lisp:null)
                         :accessor struct-shape-role-detail-role-last-used
                         :shape "RoleLastUsed" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-role-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'role-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'role-detail 'make-role-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input role-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input role-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-id))
      (common-lisp:list
       (common-lisp:cons "RoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assume-role-policy-document))
      (common-lisp:list
       (common-lisp:cons "AssumeRolePolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-list))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-policy-list))
      (common-lisp:list
       (common-lisp:cons "RolePolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-managed-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedManagedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-last-used))
      (common-lisp:list
       (common-lisp:cons "RoleLastUsed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input role-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass role-last-used common-lisp:nil
                       ((last-used-date :initarg :last-used-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-role-last-used-last-used-date :shape
                         "dateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or |stringType| common-lisp:null)
                         :accessor struct-shape-role-last-used-region :shape
                         "stringType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-role-last-used
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'role-last-used
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'role-last-used 'make-role-last-used))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input role-last-used))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input role-last-used))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-used-date))
      (common-lisp:list
       (common-lisp:cons "LastUsedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input role-last-used))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype role-usage-list-type ()
   '(trivial-types:proper-list role-usage-type))
 (common-lisp:defun make-role-usage-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list role-usage-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass role-usage-type common-lisp:nil
                       ((region :initarg :region :initform common-lisp:nil
                         :type
                         (common-lisp:or region-name-type common-lisp:null)
                         :accessor struct-shape-role-usage-type-region :shape
                         "RegionNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-list-type common-lisp:null)
                         :accessor struct-shape-role-usage-type-resources
                         :shape "ArnListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-role-usage-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'role-usage-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'role-usage-type 'make-role-usage-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input role-usage-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input role-usage-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input role-usage-type))
   common-lisp:nil))
(common-lisp:deftype samlmetadata-document-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass samlprovider-list-entry common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-samlprovider-list-entry-arn :shape
                         "arnType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (valid-until :initarg :valid-until :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-samlprovider-list-entry-valid-until
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-samlprovider-list-entry-create-date
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-samlprovider-list-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'samlprovider-list-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'samlprovider-list-entry 'make-samlprovider-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          samlprovider-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          samlprovider-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-until))
      (common-lisp:list
       (common-lisp:cons "ValidUntil"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          samlprovider-list-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype samlprovider-list-type ()
   '(trivial-types:proper-list samlprovider-list-entry))
 (common-lisp:defun make-samlprovider-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list samlprovider-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype samlprovider-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sshpublic-key common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor struct-shape-sshpublic-key-user-name :shape
                         "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sshpublic-key-id :initarg :sshpublic-key-id :initform
                         (common-lisp:error ":sshpublic-key-id is required")
                         :type
                         (common-lisp:or |publicKeyIdType| common-lisp:null)
                         :accessor struct-shape-sshpublic-key-sshpublic-key-id
                         :shape "publicKeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fingerprint :initarg :fingerprint :initform
                         (common-lisp:error ":fingerprint is required") :type
                         (common-lisp:or |publicKeyFingerprintType|
                                         common-lisp:null)
                         :accessor struct-shape-sshpublic-key-fingerprint
                         :shape "publicKeyFingerprintType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sshpublic-key-body :initarg :sshpublic-key-body
                         :initform
                         (common-lisp:error ":sshpublic-key-body is required")
                         :type
                         (common-lisp:or |publicKeyMaterialType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-sshpublic-key-sshpublic-key-body :shape
                         "publicKeyMaterialType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or |statusType| common-lisp:null)
                         :accessor struct-shape-sshpublic-key-status :shape
                         "statusType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (upload-date :initarg :upload-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-sshpublic-key-upload-date :shape
                         "dateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sshpublic-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sshpublic-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sshpublic-key 'make-sshpublic-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sshpublic-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sshpublic-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key-id))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fingerprint))
      (common-lisp:list
       (common-lisp:cons "Fingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key-body))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKeyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-date))
      (common-lisp:list
       (common-lisp:cons "UploadDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sshpublic-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sshpublic-key-list-type ()
   '(trivial-types:proper-list sshpublic-key-metadata))
 (common-lisp:defun make-sshpublic-key-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sshpublic-key-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sshpublic-key-metadata common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-sshpublic-key-metadata-user-name :shape
                         "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sshpublic-key-id :initarg :sshpublic-key-id :initform
                         (common-lisp:error ":sshpublic-key-id is required")
                         :type
                         (common-lisp:or |publicKeyIdType| common-lisp:null)
                         :accessor
                         struct-shape-sshpublic-key-metadata-sshpublic-key-id
                         :shape "publicKeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or |statusType| common-lisp:null)
                         :accessor struct-shape-sshpublic-key-metadata-status
                         :shape "statusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-date :initarg :upload-date :initform
                         (common-lisp:error ":upload-date is required") :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-sshpublic-key-metadata-upload-date :shape
                         "dateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sshpublic-key-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sshpublic-key-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sshpublic-key-metadata 'make-sshpublic-key-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sshpublic-key-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sshpublic-key-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key-id))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-date))
      (common-lisp:list
       (common-lisp:cons "UploadDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sshpublic-key-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass server-certificate common-lisp:nil
                       ((server-certificate-metadata :initarg
                         :server-certificate-metadata :initform
                         (common-lisp:error
                          ":server-certificate-metadata is required")
                         :type
                         (common-lisp:or server-certificate-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-server-certificate-server-certificate-metadata
                         :shape "ServerCertificateMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (certificate-body :initarg :certificate-body :initform
                         (common-lisp:error ":certificate-body is required")
                         :type
                         (common-lisp:or |certificateBodyType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-server-certificate-certificate-body
                         :shape "certificateBodyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-chain :initarg :certificate-chain
                         :initform common-lisp:nil :type
                         (common-lisp:or |certificateChainType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-server-certificate-certificate-chain
                         :shape "certificateChainType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-server-certificate-tags :shape
                         "tagListType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-server-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'server-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'server-certificate 'make-server-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input server-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input server-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-metadata))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-body))
      (common-lisp:list
       (common-lisp:cons "CertificateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "CertificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input server-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass server-certificate-metadata common-lisp:nil
                       ((path :initarg :path :initform
                         (common-lisp:error ":path is required") :type
                         (common-lisp:or |pathType| common-lisp:null) :accessor
                         struct-shape-server-certificate-metadata-path :shape
                         "pathType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (server-certificate-name :initarg
                         :server-certificate-name :initform
                         (common-lisp:error
                          ":server-certificate-name is required")
                         :type
                         (common-lisp:or |serverCertificateNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-server-certificate-metadata-server-certificate-name
                         :shape "serverCertificateNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (server-certificate-id :initarg :server-certificate-id
                         :initform
                         (common-lisp:error
                          ":server-certificate-id is required")
                         :type (common-lisp:or |idType| common-lisp:null)
                         :accessor
                         struct-shape-server-certificate-metadata-server-certificate-id
                         :shape "idType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-server-certificate-metadata-arn :shape
                         "arnType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (upload-date :initarg :upload-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-server-certificate-metadata-upload-date
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration :initarg :expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-server-certificate-metadata-expiration
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-server-certificate-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'server-certificate-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'server-certificate-metadata
                    'make-server-certificate-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-id))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-date))
      (common-lisp:list
       (common-lisp:cons "UploadDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-failure-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-failure-exception
                    'service-failure-exception-message)))
(common-lisp:progn
 (common-lisp:defclass service-last-accessed common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         (common-lisp:error ":service-name is required") :type
                         (common-lisp:or |serviceNameType| common-lisp:null)
                         :accessor
                         struct-shape-service-last-accessed-service-name :shape
                         "serviceNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-authenticated :initarg :last-authenticated
                         :initform common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-service-last-accessed-last-authenticated
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":service-namespace is required")
                         :type
                         (common-lisp:or |serviceNamespaceType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-last-accessed-service-namespace
                         :shape "serviceNamespaceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-authenticated-entity :initarg
                         :last-authenticated-entity :initform common-lisp:nil
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-service-last-accessed-last-authenticated-entity
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-authenticated-region :initarg
                         :last-authenticated-region :initform common-lisp:nil
                         :type (common-lisp:or |stringType| common-lisp:null)
                         :accessor
                         struct-shape-service-last-accessed-last-authenticated-region
                         :shape "stringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-authenticated-entities :initarg
                         :total-authenticated-entities :initform
                         common-lisp:nil :type
                         (common-lisp:or |integerType| common-lisp:null)
                         :accessor
                         struct-shape-service-last-accessed-total-authenticated-entities
                         :shape "integerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tracked-actions-last-accessed :initarg
                         :tracked-actions-last-accessed :initform
                         common-lisp:nil :type
                         (common-lisp:or tracked-actions-last-accessed
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-last-accessed-tracked-actions-last-accessed
                         :shape "TrackedActionsLastAccessed" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-last-accessed
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-last-accessed
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-last-accessed 'make-service-last-accessed))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-last-accessed))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-last-accessed))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-authenticated))
      (common-lisp:list
       (common-lisp:cons "LastAuthenticated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-authenticated-entity))
      (common-lisp:list
       (common-lisp:cons "LastAuthenticatedEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-authenticated-region))
      (common-lisp:list
       (common-lisp:cons "LastAuthenticatedRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-authenticated-entities))
      (common-lisp:list
       (common-lisp:cons "TotalAuthenticatedEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tracked-actions-last-accessed))
      (common-lisp:list
       (common-lisp:cons "TrackedActionsLastAccessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-last-accessed))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-not-supported-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-not-supported-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-not-supported-exception
                    'service-not-supported-exception-message)))
(common-lisp:progn
 (common-lisp:defclass service-specific-credential common-lisp:nil
                       ((create-date :initarg :create-date :initform
                         (common-lisp:error ":create-date is required") :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-service-specific-credential-create-date
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":service-name is required") :type
                         (common-lisp:or |serviceName| common-lisp:null)
                         :accessor
                         struct-shape-service-specific-credential-service-name
                         :shape "serviceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-user-name :initarg :service-user-name
                         :initform
                         (common-lisp:error ":service-user-name is required")
                         :type
                         (common-lisp:or |serviceUserName| common-lisp:null)
                         :accessor
                         struct-shape-service-specific-credential-service-user-name
                         :shape "serviceUserName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-password :initarg :service-password :initform
                         (common-lisp:error ":service-password is required")
                         :type
                         (common-lisp:or |servicePassword| common-lisp:null)
                         :accessor
                         struct-shape-service-specific-credential-service-password
                         :shape "servicePassword" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-specific-credential-id :initarg
                         :service-specific-credential-id :initform
                         (common-lisp:error
                          ":service-specific-credential-id is required")
                         :type
                         (common-lisp:or |serviceSpecificCredentialId|
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-specific-credential-service-specific-credential-id
                         :shape "serviceSpecificCredentialId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-service-specific-credential-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or |statusType| common-lisp:null)
                         :accessor
                         struct-shape-service-specific-credential-status :shape
                         "statusType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-specific-credential
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-specific-credential
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-specific-credential
                    'make-service-specific-credential))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-specific-credential))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-specific-credential))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-user-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-password))
      (common-lisp:list
       (common-lisp:cons "ServicePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specific-credential-id))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecificCredentialId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-specific-credential))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-specific-credential-metadata common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-service-specific-credential-metadata-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or |statusType| common-lisp:null)
                         :accessor
                         struct-shape-service-specific-credential-metadata-status
                         :shape "statusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-user-name :initarg :service-user-name
                         :initform
                         (common-lisp:error ":service-user-name is required")
                         :type
                         (common-lisp:or |serviceUserName| common-lisp:null)
                         :accessor
                         struct-shape-service-specific-credential-metadata-service-user-name
                         :shape "serviceUserName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         (common-lisp:error ":create-date is required") :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-service-specific-credential-metadata-create-date
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-specific-credential-id :initarg
                         :service-specific-credential-id :initform
                         (common-lisp:error
                          ":service-specific-credential-id is required")
                         :type
                         (common-lisp:or |serviceSpecificCredentialId|
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-specific-credential-metadata-service-specific-credential-id
                         :shape "serviceSpecificCredentialId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":service-name is required") :type
                         (common-lisp:or |serviceName| common-lisp:null)
                         :accessor
                         struct-shape-service-specific-credential-metadata-service-name
                         :shape "serviceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-specific-credential-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'service-specific-credential-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-specific-credential-metadata
                    'make-service-specific-credential-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-specific-credential-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-specific-credential-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-user-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specific-credential-id))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecificCredentialId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-specific-credential-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-specific-credentials-list-type ()
   '(trivial-types:proper-list service-specific-credential-metadata))
 (common-lisp:defun make-service-specific-credentials-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-specific-credential-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype services-last-accessed ()
   '(trivial-types:proper-list service-last-accessed))
 (common-lisp:defun make-services-last-accessed
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-last-accessed))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass set-default-policy-version-request common-lisp:nil
                       ((policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-set-default-policy-version-request-policy-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         (common-lisp:error ":version-id is required") :type
                         (common-lisp:or |policyVersionIdType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-default-policy-version-request-version-id
                         :shape "policyVersionIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-default-policy-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-default-policy-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-default-policy-version-request
                    'make-set-default-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-default-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-default-policy-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-default-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-security-token-service-preferences-request
                       common-lisp:nil
                       ((global-endpoint-token-version :initarg
                         :global-endpoint-token-version :initform
                         (common-lisp:error
                          ":global-endpoint-token-version is required")
                         :type
                         (common-lisp:or |globalEndpointTokenVersion|
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-security-token-service-preferences-request-global-endpoint-token-version
                         :shape "globalEndpointTokenVersion" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-security-token-service-preferences-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-security-token-service-preferences-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-security-token-service-preferences-request
                    'make-set-security-token-service-preferences-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-security-token-service-preferences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-security-token-service-preferences-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-endpoint-token-version))
      (common-lisp:list
       (common-lisp:cons "GlobalEndpointTokenVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-security-token-service-preferences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass signing-certificate common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor struct-shape-signing-certificate-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-id :initarg :certificate-id :initform
                         (common-lisp:error ":certificate-id is required")
                         :type
                         (common-lisp:or |certificateIdType| common-lisp:null)
                         :accessor
                         struct-shape-signing-certificate-certificate-id :shape
                         "certificateIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-body :initarg :certificate-body :initform
                         (common-lisp:error ":certificate-body is required")
                         :type
                         (common-lisp:or |certificateBodyType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-signing-certificate-certificate-body
                         :shape "certificateBodyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or |statusType| common-lisp:null)
                         :accessor struct-shape-signing-certificate-status
                         :shape "statusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-date :initarg :upload-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-signing-certificate-upload-date :shape
                         "dateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-signing-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'signing-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'signing-certificate 'make-signing-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input signing-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input signing-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-body))
      (common-lisp:list
       (common-lisp:cons "CertificateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-date))
      (common-lisp:list
       (common-lisp:cons "UploadDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input signing-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass simulate-custom-policy-request common-lisp:nil
                       ((policy-input-list :initarg :policy-input-list
                         :initform
                         (common-lisp:error ":policy-input-list is required")
                         :type
                         (common-lisp:or simulation-policy-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-simulate-custom-policy-request-policy-input-list
                         :shape "SimulationPolicyListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (permissions-boundary-policy-input-list :initarg
                         :permissions-boundary-policy-input-list :initform
                         common-lisp:nil :type
                         (common-lisp:or simulation-policy-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-simulate-custom-policy-request-permissions-boundary-policy-input-list
                         :shape "SimulationPolicyListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (action-names :initarg :action-names :initform
                         (common-lisp:error ":action-names is required") :type
                         (common-lisp:or action-name-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-simulate-custom-policy-request-action-names
                         :shape "ActionNameListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arns :initarg :resource-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-simulate-custom-policy-request-resource-arns
                         :shape "ResourceNameListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-policy :initarg :resource-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyDocumentType| common-lisp:null)
                         :accessor
                         struct-shape-simulate-custom-policy-request-resource-policy
                         :shape "policyDocumentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-owner :initarg :resource-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name-type common-lisp:null)
                         :accessor
                         struct-shape-simulate-custom-policy-request-resource-owner
                         :shape "ResourceNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (caller-arn :initarg :caller-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name-type common-lisp:null)
                         :accessor
                         struct-shape-simulate-custom-policy-request-caller-arn
                         :shape "ResourceNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (context-entries :initarg :context-entries :initform
                         common-lisp:nil :type
                         (common-lisp:or context-entry-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-simulate-custom-policy-request-context-entries
                         :shape "ContextEntryListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-handling-option :initarg
                         :resource-handling-option :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-handling-option-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-simulate-custom-policy-request-resource-handling-option
                         :shape "ResourceHandlingOptionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-simulate-custom-policy-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-simulate-custom-policy-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-simulate-custom-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'simulate-custom-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'simulate-custom-policy-request
                    'make-simulate-custom-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simulate-custom-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simulate-custom-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-input-list))
      (common-lisp:list
       (common-lisp:cons "PolicyInputList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-policy-input-list))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryPolicyInputList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-names))
      (common-lisp:list
       (common-lisp:cons "ActionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "ResourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "ResourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-arn))
      (common-lisp:list
       (common-lisp:cons "CallerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-entries))
      (common-lisp:list
       (common-lisp:cons "ContextEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-handling-option))
      (common-lisp:list
       (common-lisp:cons "ResourceHandlingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simulate-custom-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass simulate-policy-response common-lisp:nil
                       ((evaluation-results :initarg :evaluation-results
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-results-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-simulate-policy-response-evaluation-results
                         :shape "EvaluationResultsListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-simulate-policy-response-is-truncated
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type
                         (common-lisp:or |responseMarkerType| common-lisp:null)
                         :accessor struct-shape-simulate-policy-response-marker
                         :shape "responseMarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-simulate-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'simulate-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'simulate-policy-response 'make-simulate-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simulate-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simulate-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-results))
      (common-lisp:list
       (common-lisp:cons "EvaluationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simulate-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass simulate-principal-policy-request common-lisp:nil
                       ((policy-source-arn :initarg :policy-source-arn
                         :initform
                         (common-lisp:error ":policy-source-arn is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-simulate-principal-policy-request-policy-source-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-input-list :initarg :policy-input-list
                         :initform common-lisp:nil :type
                         (common-lisp:or simulation-policy-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-simulate-principal-policy-request-policy-input-list
                         :shape "SimulationPolicyListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (permissions-boundary-policy-input-list :initarg
                         :permissions-boundary-policy-input-list :initform
                         common-lisp:nil :type
                         (common-lisp:or simulation-policy-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-simulate-principal-policy-request-permissions-boundary-policy-input-list
                         :shape "SimulationPolicyListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (action-names :initarg :action-names :initform
                         (common-lisp:error ":action-names is required") :type
                         (common-lisp:or action-name-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-simulate-principal-policy-request-action-names
                         :shape "ActionNameListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arns :initarg :resource-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-simulate-principal-policy-request-resource-arns
                         :shape "ResourceNameListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-policy :initarg :resource-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyDocumentType| common-lisp:null)
                         :accessor
                         struct-shape-simulate-principal-policy-request-resource-policy
                         :shape "policyDocumentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-owner :initarg :resource-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name-type common-lisp:null)
                         :accessor
                         struct-shape-simulate-principal-policy-request-resource-owner
                         :shape "ResourceNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (caller-arn :initarg :caller-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name-type common-lisp:null)
                         :accessor
                         struct-shape-simulate-principal-policy-request-caller-arn
                         :shape "ResourceNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (context-entries :initarg :context-entries :initform
                         common-lisp:nil :type
                         (common-lisp:or context-entry-list-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-simulate-principal-policy-request-context-entries
                         :shape "ContextEntryListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-handling-option :initarg
                         :resource-handling-option :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-handling-option-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-simulate-principal-policy-request-resource-handling-option
                         :shape "ResourceHandlingOptionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-items :initarg :max-items :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxItemsType| common-lisp:null)
                         :accessor
                         struct-shape-simulate-principal-policy-request-max-items
                         :shape "maxItemsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or |markerType| common-lisp:null)
                         :accessor
                         struct-shape-simulate-principal-policy-request-marker
                         :shape "markerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-simulate-principal-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'simulate-principal-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'simulate-principal-policy-request
                    'make-simulate-principal-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simulate-principal-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simulate-principal-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-source-arn))
      (common-lisp:list
       (common-lisp:cons "PolicySourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-input-list))
      (common-lisp:list
       (common-lisp:cons "PolicyInputList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-policy-input-list))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryPolicyInputList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-names))
      (common-lisp:list
       (common-lisp:cons "ActionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "ResourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "ResourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-arn))
      (common-lisp:list
       (common-lisp:cons "CallerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-entries))
      (common-lisp:list
       (common-lisp:cons "ContextEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-handling-option))
      (common-lisp:list
       (common-lisp:cons "ResourceHandlingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simulate-principal-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype simulation-policy-list-type ()
   '(trivial-types:proper-list |policyDocumentType|))
 (common-lisp:defun make-simulation-policy-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |policyDocumentType|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass statement common-lisp:nil
                       ((source-policy-id :initarg :source-policy-id :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-identifier-type
                                         common-lisp:null)
                         :accessor struct-shape-statement-source-policy-id
                         :shape "PolicyIdentifierType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-policy-type :initarg :source-policy-type
                         :initform common-lisp:nil :type
                         (common-lisp:or policy-source-type common-lisp:null)
                         :accessor struct-shape-statement-source-policy-type
                         :shape "PolicySourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-position :initarg :start-position :initform
                         common-lisp:nil :type
                         (common-lisp:or position common-lisp:null) :accessor
                         struct-shape-statement-start-position :shape
                         "Position" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-position :initarg :end-position :initform
                         common-lisp:nil :type
                         (common-lisp:or position common-lisp:null) :accessor
                         struct-shape-statement-end-position :shape "Position"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-statement
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'statement
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'statement 'make-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-policy-id))
      (common-lisp:list
       (common-lisp:cons "SourcePolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-policy-type))
      (common-lisp:list
       (common-lisp:cons "SourcePolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-position))
      (common-lisp:list
       (common-lisp:cons "StartPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-position))
      (common-lisp:list
       (common-lisp:cons "EndPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype statement-list-type ()
   '(trivial-types:proper-list statement))
 (common-lisp:defun make-statement-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list statement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or |tagKeyType| common-lisp:null)
                         :accessor struct-shape-tag-key :shape "tagKeyType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or |tagValueType| common-lisp:null)
                         :accessor struct-shape-tag-value :shape "tagValueType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-instance-profile-request common-lisp:nil
                       ((instance-profile-name :initarg :instance-profile-name
                         :initform
                         (common-lisp:error
                          ":instance-profile-name is required")
                         :type
                         (common-lisp:or |instanceProfileNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-tag-instance-profile-request-instance-profile-name
                         :shape "instanceProfileNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor
                         struct-shape-tag-instance-profile-request-tags :shape
                         "tagListType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-instance-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-instance-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-instance-profile-request
                    'make-tag-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-mfadevice-request common-lisp:nil
                       ((serial-number :initarg :serial-number :initform
                         (common-lisp:error ":serial-number is required") :type
                         (common-lisp:or |serialNumberType| common-lisp:null)
                         :accessor
                         struct-shape-tag-mfadevice-request-serial-number
                         :shape "serialNumberType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-tag-mfadevice-request-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-mfadevice-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-mfadevice-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-mfadevice-request 'make-tag-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-mfadevice-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-mfadevice-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-mfadevice-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-open-idconnect-provider-request common-lisp:nil
                       ((open-idconnect-provider-arn :initarg
                         :open-idconnect-provider-arn :initform
                         (common-lisp:error
                          ":open-idconnect-provider-arn is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-tag-open-idconnect-provider-request-open-idconnect-provider-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor
                         struct-shape-tag-open-idconnect-provider-request-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-open-idconnect-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'tag-open-idconnect-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-open-idconnect-provider-request
                    'make-tag-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-open-idconnect-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-open-idconnect-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-open-idconnect-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-policy-request common-lisp:nil
                       ((policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-tag-policy-request-policy-arn :shape
                         "arnType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-tag-policy-request-tags :shape
                         "tagListType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-policy-request 'make-tag-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-role-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor struct-shape-tag-role-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-tag-role-request-tags :shape
                         "tagListType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-role-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-role-request 'make-tag-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-samlprovider-request common-lisp:nil
                       ((samlprovider-arn :initarg :samlprovider-arn :initform
                         (common-lisp:error ":samlprovider-arn is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-tag-samlprovider-request-samlprovider-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-tag-samlprovider-request-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-samlprovider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-samlprovider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-samlprovider-request 'make-tag-samlprovider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-samlprovider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-samlprovider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-arn))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-samlprovider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-server-certificate-request common-lisp:nil
                       ((server-certificate-name :initarg
                         :server-certificate-name :initform
                         (common-lisp:error
                          ":server-certificate-name is required")
                         :type
                         (common-lisp:or |serverCertificateNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-tag-server-certificate-request-server-certificate-name
                         :shape "serverCertificateNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor
                         struct-shape-tag-server-certificate-request-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-server-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'tag-server-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-server-certificate-request
                    'make-tag-server-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-server-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-server-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-server-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-user-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor struct-shape-tag-user-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-tag-user-request-tags :shape
                         "tagListType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-user-request 'make-tag-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tracked-action-last-accessed common-lisp:nil
                       ((action-name :initarg :action-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |stringType| common-lisp:null)
                         :accessor
                         struct-shape-tracked-action-last-accessed-action-name
                         :shape "stringType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-accessed-entity :initarg :last-accessed-entity
                         :initform common-lisp:nil :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-tracked-action-last-accessed-last-accessed-entity
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-accessed-time :initarg :last-accessed-time
                         :initform common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-tracked-action-last-accessed-last-accessed-time
                         :shape "dateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-accessed-region :initarg :last-accessed-region
                         :initform common-lisp:nil :type
                         (common-lisp:or |stringType| common-lisp:null)
                         :accessor
                         struct-shape-tracked-action-last-accessed-last-accessed-region
                         :shape "stringType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tracked-action-last-accessed
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tracked-action-last-accessed
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tracked-action-last-accessed
                    'make-tracked-action-last-accessed))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tracked-action-last-accessed))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tracked-action-last-accessed))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "ActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-accessed-entity))
      (common-lisp:list
       (common-lisp:cons "LastAccessedEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-accessed-time))
      (common-lisp:list
       (common-lisp:cons "LastAccessedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-accessed-region))
      (common-lisp:list
       (common-lisp:cons "LastAccessedRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tracked-action-last-accessed))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tracked-actions-last-accessed ()
   '(trivial-types:proper-list tracked-action-last-accessed))
 (common-lisp:defun make-tracked-actions-last-accessed
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            tracked-action-last-accessed))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition unmodifiable-entity-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unmodifiable-entity-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unmodifiable-entity-exception
                    'unmodifiable-entity-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unrecognized-public-key-encoding-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unrecognized-public-key-encoding-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unrecognized-public-key-encoding-exception
                    'unrecognized-public-key-encoding-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-instance-profile-request common-lisp:nil
                       ((instance-profile-name :initarg :instance-profile-name
                         :initform
                         (common-lisp:error
                          ":instance-profile-name is required")
                         :type
                         (common-lisp:or |instanceProfileNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-untag-instance-profile-request-instance-profile-name
                         :shape "instanceProfileNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or |tagKeyListType| common-lisp:null)
                         :accessor
                         struct-shape-untag-instance-profile-request-tag-keys
                         :shape "tagKeyListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-instance-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'untag-instance-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-instance-profile-request
                    'make-untag-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-mfadevice-request common-lisp:nil
                       ((serial-number :initarg :serial-number :initform
                         (common-lisp:error ":serial-number is required") :type
                         (common-lisp:or |serialNumberType| common-lisp:null)
                         :accessor
                         struct-shape-untag-mfadevice-request-serial-number
                         :shape "serialNumberType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or |tagKeyListType| common-lisp:null)
                         :accessor
                         struct-shape-untag-mfadevice-request-tag-keys :shape
                         "tagKeyListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-mfadevice-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-mfadevice-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-mfadevice-request 'make-untag-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-mfadevice-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-mfadevice-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-mfadevice-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-open-idconnect-provider-request common-lisp:nil
                       ((open-idconnect-provider-arn :initarg
                         :open-idconnect-provider-arn :initform
                         (common-lisp:error
                          ":open-idconnect-provider-arn is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-untag-open-idconnect-provider-request-open-idconnect-provider-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or |tagKeyListType| common-lisp:null)
                         :accessor
                         struct-shape-untag-open-idconnect-provider-request-tag-keys
                         :shape "tagKeyListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-open-idconnect-provider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'untag-open-idconnect-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-open-idconnect-provider-request
                    'make-untag-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-open-idconnect-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-open-idconnect-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-open-idconnect-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-policy-request common-lisp:nil
                       ((policy-arn :initarg :policy-arn :initform
                         (common-lisp:error ":policy-arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-untag-policy-request-policy-arn :shape
                         "arnType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or |tagKeyListType| common-lisp:null)
                         :accessor struct-shape-untag-policy-request-tag-keys
                         :shape "tagKeyListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-policy-request 'make-untag-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-role-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor struct-shape-untag-role-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or |tagKeyListType| common-lisp:null)
                         :accessor struct-shape-untag-role-request-tag-keys
                         :shape "tagKeyListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-role-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-role-request 'make-untag-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-samlprovider-request common-lisp:nil
                       ((samlprovider-arn :initarg :samlprovider-arn :initform
                         (common-lisp:error ":samlprovider-arn is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-untag-samlprovider-request-samlprovider-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or |tagKeyListType| common-lisp:null)
                         :accessor
                         struct-shape-untag-samlprovider-request-tag-keys
                         :shape "tagKeyListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-samlprovider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-samlprovider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-samlprovider-request
                    'make-untag-samlprovider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-samlprovider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-samlprovider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-arn))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-samlprovider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-server-certificate-request common-lisp:nil
                       ((server-certificate-name :initarg
                         :server-certificate-name :initform
                         (common-lisp:error
                          ":server-certificate-name is required")
                         :type
                         (common-lisp:or |serverCertificateNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-untag-server-certificate-request-server-certificate-name
                         :shape "serverCertificateNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or |tagKeyListType| common-lisp:null)
                         :accessor
                         struct-shape-untag-server-certificate-request-tag-keys
                         :shape "tagKeyListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-server-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'untag-server-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-server-certificate-request
                    'make-untag-server-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-server-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-server-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-server-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-user-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor struct-shape-untag-user-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or |tagKeyListType| common-lisp:null)
                         :accessor struct-shape-untag-user-request-tag-keys
                         :shape "tagKeyListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-user-request 'make-untag-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-access-key-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-access-key-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (access-key-id :initarg :access-key-id :initform
                         (common-lisp:error ":access-key-id is required") :type
                         (common-lisp:or |accessKeyIdType| common-lisp:null)
                         :accessor
                         struct-shape-update-access-key-request-access-key-id
                         :shape "accessKeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or |statusType| common-lisp:null)
                         :accessor
                         struct-shape-update-access-key-request-status :shape
                         "statusType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-access-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-access-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-access-key-request
                    'make-update-access-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-account-password-policy-request common-lisp:nil
                       ((minimum-password-length :initarg
                         :minimum-password-length :initform common-lisp:nil
                         :type
                         (common-lisp:or |minimumPasswordLengthType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-account-password-policy-request-minimum-password-length
                         :shape "minimumPasswordLengthType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (require-symbols :initarg :require-symbols :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-update-account-password-policy-request-require-symbols
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-numbers :initarg :require-numbers :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-update-account-password-policy-request-require-numbers
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-uppercase-characters :initarg
                         :require-uppercase-characters :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-update-account-password-policy-request-require-uppercase-characters
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (require-lowercase-characters :initarg
                         :require-lowercase-characters :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-update-account-password-policy-request-require-lowercase-characters
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-users-to-change-password :initarg
                         :allow-users-to-change-password :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanType| common-lisp:null)
                         :accessor
                         struct-shape-update-account-password-policy-request-allow-users-to-change-password
                         :shape "booleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-password-age :initarg :max-password-age :initform
                         common-lisp:nil :type
                         (common-lisp:or |maxPasswordAgeType| common-lisp:null)
                         :accessor
                         struct-shape-update-account-password-policy-request-max-password-age
                         :shape "maxPasswordAgeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password-reuse-prevention :initarg
                         :password-reuse-prevention :initform common-lisp:nil
                         :type
                         (common-lisp:or |passwordReusePreventionType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-account-password-policy-request-password-reuse-prevention
                         :shape "passwordReusePreventionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (hard-expiry :initarg :hard-expiry :initform
                         common-lisp:nil :type
                         (common-lisp:or |booleanObjectType| common-lisp:null)
                         :accessor
                         struct-shape-update-account-password-policy-request-hard-expiry
                         :shape "booleanObjectType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-account-password-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-account-password-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-account-password-policy-request
                    'make-update-account-password-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-password-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-password-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-password-length))
      (common-lisp:list
       (common-lisp:cons "MinimumPasswordLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-symbols))
      (common-lisp:list
       (common-lisp:cons "RequireSymbols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-numbers))
      (common-lisp:list
       (common-lisp:cons "RequireNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-uppercase-characters))
      (common-lisp:list
       (common-lisp:cons "RequireUppercaseCharacters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-lowercase-characters))
      (common-lisp:list
       (common-lisp:cons "RequireLowercaseCharacters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-users-to-change-password))
      (common-lisp:list
       (common-lisp:cons "AllowUsersToChangePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-password-age))
      (common-lisp:list
       (common-lisp:cons "MaxPasswordAge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'password-reuse-prevention))
      (common-lisp:list
       (common-lisp:cons "PasswordReusePrevention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hard-expiry))
      (common-lisp:list
       (common-lisp:cons "HardExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-password-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-assume-role-policy-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor
                         struct-shape-update-assume-role-policy-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policy-document is required")
                         :type
                         (common-lisp:or |policyDocumentType| common-lisp:null)
                         :accessor
                         struct-shape-update-assume-role-policy-request-policy-document
                         :shape "policyDocumentType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-assume-role-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-assume-role-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-assume-role-policy-request
                    'make-update-assume-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assume-role-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assume-role-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assume-role-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-group-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor struct-shape-update-group-request-group-name
                         :shape "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-path :initarg :new-path :initform common-lisp:nil
                         :type (common-lisp:or |pathType| common-lisp:null)
                         :accessor struct-shape-update-group-request-new-path
                         :shape "pathType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-group-name :initarg :new-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |groupNameType| common-lisp:null)
                         :accessor
                         struct-shape-update-group-request-new-group-name
                         :shape "groupNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-group-request 'make-update-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-path))
      (common-lisp:list
       (common-lisp:cons "NewPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-group-name))
      (common-lisp:list
       (common-lisp:cons "NewGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-login-profile-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-update-login-profile-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type (common-lisp:or |passwordType| common-lisp:null)
                         :accessor
                         struct-shape-update-login-profile-request-password
                         :shape "passwordType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password-reset-required :initarg
                         :password-reset-required :initform common-lisp:nil
                         :type
                         (common-lisp:or |booleanObjectType| common-lisp:null)
                         :accessor
                         struct-shape-update-login-profile-request-password-reset-required
                         :shape "booleanObjectType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-login-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-login-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-login-profile-request
                    'make-update-login-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-login-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-login-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'password-reset-required))
      (common-lisp:list
       (common-lisp:cons "PasswordResetRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-login-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-open-idconnect-provider-thumbprint-request
                       common-lisp:nil
                       ((open-idconnect-provider-arn :initarg
                         :open-idconnect-provider-arn :initform
                         (common-lisp:error
                          ":open-idconnect-provider-arn is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-update-open-idconnect-provider-thumbprint-request-open-idconnect-provider-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thumbprint-list :initarg :thumbprint-list :initform
                         (common-lisp:error ":thumbprint-list is required")
                         :type
                         (common-lisp:or |thumbprintListType| common-lisp:null)
                         :accessor
                         struct-shape-update-open-idconnect-provider-thumbprint-request-thumbprint-list
                         :shape "thumbprintListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-open-idconnect-provider-thumbprint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-open-idconnect-provider-thumbprint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-open-idconnect-provider-thumbprint-request
                    'make-update-open-idconnect-provider-thumbprint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-open-idconnect-provider-thumbprint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-open-idconnect-provider-thumbprint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbprint-list))
      (common-lisp:list
       (common-lisp:cons "ThumbprintList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-open-idconnect-provider-thumbprint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-role-description-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor
                         struct-shape-update-role-description-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or |roleDescriptionType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-role-description-request-description
                         :shape "roleDescriptionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-role-description-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-role-description-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-role-description-request
                    'make-update-role-description-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-role-description-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-role-description-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-role-description-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-role-description-response common-lisp:nil
                       ((role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or role common-lisp:null) :accessor
                         struct-shape-update-role-description-response-role
                         :shape "Role" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-role-description-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-role-description-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-role-description-response
                    'make-update-role-description-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-role-description-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-role-description-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-role-description-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-role-request common-lisp:nil
                       ((role-name :initarg :role-name :initform
                         (common-lisp:error ":role-name is required") :type
                         (common-lisp:or |roleNameType| common-lisp:null)
                         :accessor struct-shape-update-role-request-role-name
                         :shape "roleNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |roleDescriptionType|
                                         common-lisp:null)
                         :accessor struct-shape-update-role-request-description
                         :shape "roleDescriptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-session-duration :initarg :max-session-duration
                         :initform common-lisp:nil :type
                         (common-lisp:or |roleMaxSessionDurationType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-role-request-max-session-duration
                         :shape "roleMaxSessionDurationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-role-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-role-request 'make-update-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-session-duration))
      (common-lisp:list
       (common-lisp:cons "MaxSessionDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-role-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-role-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-role-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-role-response 'make-update-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-samlprovider-request common-lisp:nil
                       ((samlmetadata-document :initarg :samlmetadata-document
                         :initform
                         (common-lisp:error
                          ":samlmetadata-document is required")
                         :type
                         (common-lisp:or samlmetadata-document-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-samlprovider-request-samlmetadata-document
                         :shape "SAMLMetadataDocumentType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (samlprovider-arn :initarg :samlprovider-arn :initform
                         (common-lisp:error ":samlprovider-arn is required")
                         :type (common-lisp:or |arnType| common-lisp:null)
                         :accessor
                         struct-shape-update-samlprovider-request-samlprovider-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-samlprovider-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-samlprovider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-samlprovider-request
                    'make-update-samlprovider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-samlprovider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-samlprovider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'samlmetadata-document))
      (common-lisp:list
       (common-lisp:cons "SAMLMetadataDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-arn))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-samlprovider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-samlprovider-response common-lisp:nil
                       ((samlprovider-arn :initarg :samlprovider-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-update-samlprovider-response-samlprovider-arn
                         :shape "arnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-samlprovider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-samlprovider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-samlprovider-response
                    'make-update-samlprovider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-samlprovider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-samlprovider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-arn))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-samlprovider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-sshpublic-key-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-update-sshpublic-key-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sshpublic-key-id :initarg :sshpublic-key-id :initform
                         (common-lisp:error ":sshpublic-key-id is required")
                         :type
                         (common-lisp:or |publicKeyIdType| common-lisp:null)
                         :accessor
                         struct-shape-update-sshpublic-key-request-sshpublic-key-id
                         :shape "publicKeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or |statusType| common-lisp:null)
                         :accessor
                         struct-shape-update-sshpublic-key-request-status
                         :shape "statusType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-sshpublic-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-sshpublic-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-sshpublic-key-request
                    'make-update-sshpublic-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sshpublic-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sshpublic-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key-id))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sshpublic-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-server-certificate-request common-lisp:nil
                       ((server-certificate-name :initarg
                         :server-certificate-name :initform
                         (common-lisp:error
                          ":server-certificate-name is required")
                         :type
                         (common-lisp:or |serverCertificateNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-server-certificate-request-server-certificate-name
                         :shape "serverCertificateNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (new-path :initarg :new-path :initform common-lisp:nil
                         :type (common-lisp:or |pathType| common-lisp:null)
                         :accessor
                         struct-shape-update-server-certificate-request-new-path
                         :shape "pathType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-server-certificate-name :initarg
                         :new-server-certificate-name :initform common-lisp:nil
                         :type
                         (common-lisp:or |serverCertificateNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-server-certificate-request-new-server-certificate-name
                         :shape "serverCertificateNameType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-server-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-server-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-server-certificate-request
                    'make-update-server-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-server-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-server-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-path))
      (common-lisp:list
       (common-lisp:cons "NewPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "NewServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-server-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-specific-credential-request
                       common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-update-service-specific-credential-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-specific-credential-id :initarg
                         :service-specific-credential-id :initform
                         (common-lisp:error
                          ":service-specific-credential-id is required")
                         :type
                         (common-lisp:or |serviceSpecificCredentialId|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-specific-credential-request-service-specific-credential-id
                         :shape "serviceSpecificCredentialId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or |statusType| common-lisp:null)
                         :accessor
                         struct-shape-update-service-specific-credential-request-status
                         :shape "statusType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-specific-credential-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-specific-credential-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-specific-credential-request
                    'make-update-service-specific-credential-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-specific-credential-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-specific-credential-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specific-credential-id))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecificCredentialId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-specific-credential-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-signing-certificate-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-signing-certificate-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (certificate-id :initarg :certificate-id :initform
                         (common-lisp:error ":certificate-id is required")
                         :type
                         (common-lisp:or |certificateIdType| common-lisp:null)
                         :accessor
                         struct-shape-update-signing-certificate-request-certificate-id
                         :shape "certificateIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or |statusType| common-lisp:null)
                         :accessor
                         struct-shape-update-signing-certificate-request-status
                         :shape "statusType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-signing-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-signing-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-signing-certificate-request
                    'make-update-signing-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-signing-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-signing-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-signing-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor struct-shape-update-user-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (new-path :initarg :new-path :initform common-lisp:nil
                         :type (common-lisp:or |pathType| common-lisp:null)
                         :accessor struct-shape-update-user-request-new-path
                         :shape "pathType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-user-name :initarg :new-user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-update-user-request-new-user-name :shape
                         "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-request 'make-update-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-path))
      (common-lisp:list
       (common-lisp:cons "NewPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-user-name))
      (common-lisp:list
       (common-lisp:cons "NewUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upload-sshpublic-key-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor
                         struct-shape-upload-sshpublic-key-request-user-name
                         :shape "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sshpublic-key-body :initarg :sshpublic-key-body
                         :initform
                         (common-lisp:error ":sshpublic-key-body is required")
                         :type
                         (common-lisp:or |publicKeyMaterialType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-sshpublic-key-request-sshpublic-key-body
                         :shape "publicKeyMaterialType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upload-sshpublic-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'upload-sshpublic-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upload-sshpublic-key-request
                    'make-upload-sshpublic-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-sshpublic-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-sshpublic-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key-body))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKeyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-sshpublic-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upload-sshpublic-key-response common-lisp:nil
                       ((sshpublic-key :initarg :sshpublic-key :initform
                         common-lisp:nil :type
                         (common-lisp:or sshpublic-key common-lisp:null)
                         :accessor
                         struct-shape-upload-sshpublic-key-response-sshpublic-key
                         :shape "SSHPublicKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upload-sshpublic-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'upload-sshpublic-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upload-sshpublic-key-response
                    'make-upload-sshpublic-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-sshpublic-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-sshpublic-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-sshpublic-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upload-server-certificate-request common-lisp:nil
                       ((path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or |pathType| common-lisp:null) :accessor
                         struct-shape-upload-server-certificate-request-path
                         :shape "pathType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-certificate-name :initarg
                         :server-certificate-name :initform
                         (common-lisp:error
                          ":server-certificate-name is required")
                         :type
                         (common-lisp:or |serverCertificateNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-server-certificate-request-server-certificate-name
                         :shape "serverCertificateNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (certificate-body :initarg :certificate-body :initform
                         (common-lisp:error ":certificate-body is required")
                         :type
                         (common-lisp:or |certificateBodyType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-server-certificate-request-certificate-body
                         :shape "certificateBodyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-key :initarg :private-key :initform
                         (common-lisp:error ":private-key is required") :type
                         (common-lisp:or |privateKeyType| common-lisp:null)
                         :accessor
                         struct-shape-upload-server-certificate-request-private-key
                         :shape "privateKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-chain :initarg :certificate-chain
                         :initform common-lisp:nil :type
                         (common-lisp:or |certificateChainType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-server-certificate-request-certificate-chain
                         :shape "certificateChainType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor
                         struct-shape-upload-server-certificate-request-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upload-server-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'upload-server-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upload-server-certificate-request
                    'make-upload-server-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-server-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-server-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-body))
      (common-lisp:list
       (common-lisp:cons "CertificateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "PrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "CertificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-server-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upload-server-certificate-response common-lisp:nil
                       ((server-certificate-metadata :initarg
                         :server-certificate-metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or server-certificate-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-server-certificate-response-server-certificate-metadata
                         :shape "ServerCertificateMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor
                         struct-shape-upload-server-certificate-response-tags
                         :shape "tagListType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upload-server-certificate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'upload-server-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upload-server-certificate-response
                    'make-upload-server-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-server-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-server-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-metadata))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-server-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upload-signing-certificate-request common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |existingUserNameType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-signing-certificate-request-user-name
                         :shape "existingUserNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (certificate-body :initarg :certificate-body :initform
                         (common-lisp:error ":certificate-body is required")
                         :type
                         (common-lisp:or |certificateBodyType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-signing-certificate-request-certificate-body
                         :shape "certificateBodyType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upload-signing-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'upload-signing-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upload-signing-certificate-request
                    'make-upload-signing-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-signing-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-signing-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-body))
      (common-lisp:list
       (common-lisp:cons "CertificateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-signing-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upload-signing-certificate-response common-lisp:nil
                       ((certificate :initarg :certificate :initform
                         (common-lisp:error ":certificate is required") :type
                         (common-lisp:or signing-certificate common-lisp:null)
                         :accessor
                         struct-shape-upload-signing-certificate-response-certificate
                         :shape "SigningCertificate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upload-signing-certificate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'upload-signing-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upload-signing-certificate-response
                    'make-upload-signing-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-signing-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-signing-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-signing-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user common-lisp:nil
                       ((path :initarg :path :initform
                         (common-lisp:error ":path is required") :type
                         (common-lisp:or |pathType| common-lisp:null) :accessor
                         struct-shape-user-path :shape "pathType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-name :initarg :user-name :initform
                         (common-lisp:error ":user-name is required") :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor struct-shape-user-user-name :shape
                         "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":user-id is required") :type
                         (common-lisp:or |idType| common-lisp:null) :accessor
                         struct-shape-user-user-id :shape "idType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-user-arn :shape "arnType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         (common-lisp:error ":create-date is required") :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-user-create-date :shape "dateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (password-last-used :initarg :password-last-used
                         :initform common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-user-password-last-used :shape "dateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (permissions-boundary :initarg :permissions-boundary
                         :initform common-lisp:nil :type
                         (common-lisp:or attached-permissions-boundary
                                         common-lisp:null)
                         :accessor struct-shape-user-permissions-boundary
                         :shape "AttachedPermissionsBoundary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-user-tags :shape "tagListType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-last-used))
      (common-lisp:list
       (common-lisp:cons "PasswordLastUsed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-detail common-lisp:nil
                       ((path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or |pathType| common-lisp:null) :accessor
                         struct-shape-user-detail-path :shape "pathType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |userNameType| common-lisp:null)
                         :accessor struct-shape-user-detail-user-name :shape
                         "userNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or |idType| common-lisp:null)
                         :accessor struct-shape-user-detail-user-id :shape
                         "idType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or |arnType| common-lisp:null) :accessor
                         struct-shape-user-detail-arn :shape "arnType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-date :initarg :create-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-user-detail-create-date :shape "dateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-policy-list :initarg :user-policy-list :initform
                         common-lisp:nil :type
                         (common-lisp:or |policyDetailListType|
                                         common-lisp:null)
                         :accessor struct-shape-user-detail-user-policy-list
                         :shape "policyDetailListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (group-list :initarg :group-list :initform
                         common-lisp:nil :type
                         (common-lisp:or |groupNameListType| common-lisp:null)
                         :accessor struct-shape-user-detail-group-list :shape
                         "groupNameListType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attached-managed-policies :initarg
                         :attached-managed-policies :initform common-lisp:nil
                         :type
                         (common-lisp:or |attachedPoliciesListType|
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-detail-attached-managed-policies
                         :shape "attachedPoliciesListType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (permissions-boundary :initarg :permissions-boundary
                         :initform common-lisp:nil :type
                         (common-lisp:or attached-permissions-boundary
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-detail-permissions-boundary :shape
                         "AttachedPermissionsBoundary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-user-detail-tags :shape
                         "tagListType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user-detail 'make-user-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-policy-list))
      (common-lisp:list
       (common-lisp:cons "UserPolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-list))
      (common-lisp:list
       (common-lisp:cons "GroupList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-managed-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedManagedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-mfadevice common-lisp:nil
                       ((serial-number :initarg :serial-number :initform
                         (common-lisp:error ":serial-number is required") :type
                         (common-lisp:or |serialNumberType| common-lisp:null)
                         :accessor struct-shape-virtual-mfadevice-serial-number
                         :shape "serialNumberType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (base32string-seed :initarg :base32string-seed
                         :initform common-lisp:nil :type
                         (common-lisp:or bootstrap-datum common-lisp:null)
                         :accessor
                         struct-shape-virtual-mfadevice-base32string-seed
                         :shape "BootstrapDatum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (qrcode-png :initarg :qrcode-png :initform
                         common-lisp:nil :type
                         (common-lisp:or bootstrap-datum common-lisp:null)
                         :accessor struct-shape-virtual-mfadevice-qrcode-png
                         :shape "BootstrapDatum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user :initarg :user :initform common-lisp:nil :type
                         (common-lisp:or user common-lisp:null) :accessor
                         struct-shape-virtual-mfadevice-user :shape "User"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enable-date :initarg :enable-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |dateType| common-lisp:null) :accessor
                         struct-shape-virtual-mfadevice-enable-date :shape
                         "dateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or |tagListType| common-lisp:null)
                         :accessor struct-shape-virtual-mfadevice-tags :shape
                         "tagListType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-mfadevice
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-mfadevice
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-mfadevice 'make-virtual-mfadevice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-mfadevice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-mfadevice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base32string-seed))
      (common-lisp:list
       (common-lisp:cons "Base32StringSeed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qrcode-png))
      (common-lisp:list
       (common-lisp:cons "QRCodePNG"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-date))
      (common-lisp:list
       (common-lisp:cons "EnableDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-mfadevice))
   common-lisp:nil))
(common-lisp:deftype |accessKeyIdType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |accessKeyMetadataListType| ()
   '(trivial-types:proper-list access-key-metadata))
 (common-lisp:defun make-accesskeymetadatalisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-key-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |accessKeySecretType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |accountAliasListType| ()
   '(trivial-types:proper-list |accountAliasType|))
 (common-lisp:defun make-accountaliaslisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |accountAliasType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |accountAliasType| () 'common-lisp:string)
(common-lisp:deftype |arnType| () 'common-lisp:string)
(common-lisp:deftype |assignmentStatusType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |attachedPoliciesListType| ()
   '(trivial-types:proper-list attached-policy))
 (common-lisp:defun make-attachedpolicieslisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attached-policy))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |attachmentCountType| () 'common-lisp:integer)
(common-lisp:deftype |authenticationCodeType| () 'common-lisp:string)
(common-lisp:deftype |booleanObjectType| () 'common-lisp:boolean)
(common-lisp:deftype |booleanType| () 'common-lisp:boolean)
(common-lisp:deftype |certificateBodyType| () 'common-lisp:string)
(common-lisp:deftype |certificateChainType| () 'common-lisp:string)
(common-lisp:deftype |certificateIdType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |certificateListType| ()
   '(trivial-types:proper-list signing-certificate))
 (common-lisp:defun make-certificatelisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list signing-certificate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |clientIDListType| ()
   '(trivial-types:proper-list |clientIDType|))
 (common-lisp:defun make-clientidlisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |clientIDType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |clientIDType| () 'common-lisp:string)
(common-lisp:deftype |credentialReportExpiredExceptionMessage| ()
  'common-lisp:string)
(common-lisp:deftype |credentialReportNotPresentExceptionMessage| ()
  'common-lisp:string)
(common-lisp:deftype |credentialReportNotReadyExceptionMessage| ()
  'common-lisp:string)
(common-lisp:deftype |customSuffixType| () 'common-lisp:string)
(common-lisp:deftype |dateType| () 'common-lisp:string)
(common-lisp:deftype |deleteConflictMessage| () 'common-lisp:string)
(common-lisp:deftype |duplicateCertificateMessage| () 'common-lisp:string)
(common-lisp:deftype |duplicateSSHPublicKeyMessage| () 'common-lisp:string)
(common-lisp:deftype |encodingType| () 'common-lisp:string)
(common-lisp:deftype |entityAlreadyExistsMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |entityDetailsListType| ()
   '(trivial-types:proper-list entity-details))
 (common-lisp:defun make-entitydetailslisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |entityListType| ()
   '(trivial-types:proper-list entity-type))
 (common-lisp:defun make-entitylisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |entityNameType| () 'common-lisp:string)
(common-lisp:deftype |entityTemporarilyUnmodifiableMessage| ()
  'common-lisp:string)
(common-lisp:deftype |existingUserNameType| () 'common-lisp:string)
(common-lisp:deftype |globalEndpointTokenVersion| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |groupDetailListType| ()
   '(trivial-types:proper-list group-detail))
 (common-lisp:defun make-groupdetaillisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |groupListType| () '(trivial-types:proper-list group))
 (common-lisp:defun make-grouplisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |groupNameListType| ()
   '(trivial-types:proper-list |groupNameType|))
 (common-lisp:defun make-groupnamelisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |groupNameType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |groupNameType| () 'common-lisp:string)
(common-lisp:deftype |idType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |instanceProfileListType| ()
   '(trivial-types:proper-list instance-profile))
 (common-lisp:defun make-instanceprofilelisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-profile))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |instanceProfileNameType| () 'common-lisp:string)
(common-lisp:deftype |integerType| () 'common-lisp:integer)
(common-lisp:deftype |invalidAuthenticationCodeMessage| () 'common-lisp:string)
(common-lisp:deftype |invalidCertificateMessage| () 'common-lisp:string)
(common-lisp:deftype |invalidInputMessage| () 'common-lisp:string)
(common-lisp:deftype |invalidPublicKeyMessage| () 'common-lisp:string)
(common-lisp:deftype |invalidUserTypeMessage| () 'common-lisp:string)
(common-lisp:deftype |jobIDType| () 'common-lisp:string)
(common-lisp:deftype |jobStatusType| () 'common-lisp:string)
(common-lisp:deftype |keyPairMismatchMessage| () 'common-lisp:string)
(common-lisp:deftype |limitExceededMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |listPolicyGrantingServiceAccessResponseListType| ()
   '(trivial-types:proper-list list-policies-granting-service-access-entry))
 (common-lisp:defun make-listpolicygrantingserviceaccessresponselisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-policies-granting-service-access-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |malformedCertificateMessage| () 'common-lisp:string)
(common-lisp:deftype |malformedPolicyDocumentMessage| () 'common-lisp:string)
(common-lisp:deftype |markerType| () 'common-lisp:string)
(common-lisp:deftype |maxItemsType| () 'common-lisp:integer)
(common-lisp:deftype |maxPasswordAgeType| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |mfaDeviceListType| ()
   '(trivial-types:proper-list mfadevice))
 (common-lisp:defun make-mfadevicelisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mfadevice))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |minimumPasswordLengthType| () 'common-lisp:integer)
(common-lisp:deftype |noSuchEntityMessage| () 'common-lisp:string)
(common-lisp:deftype |organizationsEntityPathType| () 'common-lisp:string)
(common-lisp:deftype |organizationsPolicyIdType| () 'common-lisp:string)
(common-lisp:deftype |passwordPolicyViolationMessage| () 'common-lisp:string)
(common-lisp:deftype |passwordReusePreventionType| () 'common-lisp:integer)
(common-lisp:deftype |passwordType| () 'common-lisp:string)
(common-lisp:deftype |pathPrefixType| () 'common-lisp:string)
(common-lisp:deftype |pathType| () 'common-lisp:string)
(common-lisp:deftype |policyDescriptionType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |policyDetailListType| ()
   '(trivial-types:proper-list policy-detail))
 (common-lisp:defun make-policydetaillisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |policyDocumentType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |policyDocumentVersionListType| ()
   '(trivial-types:proper-list policy-version))
 (common-lisp:defun make-policydocumentversionlisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-version))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |policyEvaluationErrorMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |policyGrantingServiceAccessListType| ()
   '(trivial-types:proper-list policy-granting-service-access))
 (common-lisp:defun make-policygrantingserviceaccesslisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            policy-granting-service-access))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |policyListType| () '(trivial-types:proper-list policy))
 (common-lisp:defun make-policylisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |policyNameListType| ()
   '(trivial-types:proper-list |policyNameType|))
 (common-lisp:defun make-policynamelisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |policyNameType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |policyNameType| () 'common-lisp:string)
(common-lisp:deftype |policyNotAttachableMessage| () 'common-lisp:string)
(common-lisp:deftype |policyOwnerEntityType| () 'common-lisp:string)
(common-lisp:deftype |policyPathType| () 'common-lisp:string)
(common-lisp:deftype |policyScopeType| () 'common-lisp:string)
(common-lisp:deftype |policyType| () 'common-lisp:string)
(common-lisp:deftype |policyVersionIdType| () 'common-lisp:string)
(common-lisp:deftype |privateKeyType| () 'common-lisp:string)
(common-lisp:deftype |publicKeyFingerprintType| () 'common-lisp:string)
(common-lisp:deftype |publicKeyIdType| () 'common-lisp:string)
(common-lisp:deftype |publicKeyMaterialType| () 'common-lisp:string)
(common-lisp:deftype |reportGenerationLimitExceededMessage| ()
  'common-lisp:string)
(common-lisp:deftype |responseMarkerType| () 'common-lisp:string)
(common-lisp:deftype |roleDescriptionType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |roleDetailListType| ()
   '(trivial-types:proper-list role-detail))
 (common-lisp:defun make-roledetaillisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list role-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |roleListType| () '(trivial-types:proper-list role))
 (common-lisp:defun make-rolelisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list role))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |roleMaxSessionDurationType| () 'common-lisp:integer)
(common-lisp:deftype |roleNameType| () 'common-lisp:string)
(common-lisp:deftype |serialNumberType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |serverCertificateMetadataListType| ()
   '(trivial-types:proper-list server-certificate-metadata))
 (common-lisp:defun make-servercertificatemetadatalisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            server-certificate-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |serverCertificateNameType| () 'common-lisp:string)
(common-lisp:deftype |serviceFailureExceptionMessage| () 'common-lisp:string)
(common-lisp:deftype |serviceName| () 'common-lisp:string)
(common-lisp:deftype |serviceNameType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |serviceNamespaceListType| ()
   '(trivial-types:proper-list |serviceNamespaceType|))
 (common-lisp:defun make-servicenamespacelisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |serviceNamespaceType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |serviceNamespaceType| () 'common-lisp:string)
(common-lisp:deftype |serviceNotSupportedMessage| () 'common-lisp:string)
(common-lisp:deftype |servicePassword| () 'common-lisp:string)
(common-lisp:deftype |serviceSpecificCredentialId| () 'common-lisp:string)
(common-lisp:deftype |serviceUserName| () 'common-lisp:string)
(common-lisp:deftype |sortKeyType| () 'common-lisp:string)
(common-lisp:deftype |statusType| () 'common-lisp:string)
(common-lisp:deftype |stringType| () 'common-lisp:string)
(common-lisp:deftype |summaryKeyType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |summaryMapType| () 'common-lisp:hash-table)
 (common-lisp:defun make-summarymaptype (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |summaryValueType| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |tagKeyListType| ()
   '(trivial-types:proper-list |tagKeyType|))
 (common-lisp:defun make-tagkeylisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |tagKeyType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |tagKeyType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |tagListType| () '(trivial-types:proper-list tag))
 (common-lisp:defun make-taglisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |tagValueType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |thumbprintListType| ()
   '(trivial-types:proper-list |thumbprintType|))
 (common-lisp:defun make-thumbprintlisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |thumbprintType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |thumbprintType| () 'common-lisp:string)
(common-lisp:deftype |unmodifiableEntityMessage| () 'common-lisp:string)
(common-lisp:deftype |unrecognizedPublicKeyEncodingMessage| ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |userDetailListType| ()
   '(trivial-types:proper-list user-detail))
 (common-lisp:defun make-userdetaillisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |userListType| () '(trivial-types:proper-list user))
 (common-lisp:defun make-userlisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |userNameType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |virtualMFADeviceListType| ()
   '(trivial-types:proper-list virtual-mfadevice))
 (common-lisp:defun make-virtualmfadevicelisttype
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-mfadevice))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |virtualMFADeviceName| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-client-idto-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn client-id)
   (common-lisp:declare
    (common-lisp:ignorable open-idconnect-provider-arn client-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-client-idto-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddClientIDToOpenIDConnectProvider"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'add-client-idto-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun add-role-to-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name role-name)
   (common-lisp:declare
    (common-lisp:ignorable instance-profile-name role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-role-to-instance-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddRoleToInstanceProfile"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'add-role-to-instance-profile))
(common-lisp:progn
 (common-lisp:defun add-user-to-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name user-name)
   (common-lisp:declare (common-lisp:ignorable group-name user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-user-to-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddUserToGroup"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'add-user-to-group))
(common-lisp:progn
 (common-lisp:defun attach-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable group-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-group-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachGroupPolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'attach-group-policy))
(common-lisp:progn
 (common-lisp:defun attach-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable role-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-role-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachRolePolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'attach-role-policy))
(common-lisp:progn
 (common-lisp:defun attach-user-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable user-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-user-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachUserPolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'attach-user-policy))
(common-lisp:progn
 (common-lisp:defun change-password
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key old-password new-password)
   (common-lisp:declare (common-lisp:ignorable old-password new-password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-change-password-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ChangePassword"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'change-password))
(common-lisp:progn
 (common-lisp:defun create-access-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAccessKey"))
      common-lisp:nil "CreateAccessKeyResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-access-key))
(common-lisp:progn
 (common-lisp:defun create-account-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-alias)
   (common-lisp:declare (common-lisp:ignorable account-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-account-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAccountAlias"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'create-account-alias))
(common-lisp:progn
 (common-lisp:defun create-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path group-name)
   (common-lisp:declare (common-lisp:ignorable path group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateGroup"))
      common-lisp:nil "CreateGroupResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-group))
(common-lisp:progn
 (common-lisp:defun create-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name path tags)
   (common-lisp:declare
    (common-lisp:ignorable instance-profile-name path tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-instance-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateInstanceProfile"))
      common-lisp:nil "CreateInstanceProfileResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-instance-profile))
(common-lisp:progn
 (common-lisp:defun create-login-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name password
                     password-reset-required)
   (common-lisp:declare
    (common-lisp:ignorable user-name password password-reset-required))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-login-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLoginProfile"))
      common-lisp:nil "CreateLoginProfileResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-login-profile))
(common-lisp:progn
 (common-lisp:defun create-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key url client-idlist thumbprint-list tags)
   (common-lisp:declare
    (common-lisp:ignorable url client-idlist thumbprint-list tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateOpenIDConnectProvider"))
      common-lisp:nil "CreateOpenIDConnectProviderResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun create-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name path policy-document
                     description tags)
   (common-lisp:declare
    (common-lisp:ignorable policy-name path policy-document description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePolicy"))
      common-lisp:nil "CreatePolicyResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-policy))
(common-lisp:progn
 (common-lisp:defun create-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn policy-document
                     set-as-default)
   (common-lisp:declare
    (common-lisp:ignorable policy-arn policy-document set-as-default))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePolicyVersion"))
      common-lisp:nil "CreatePolicyVersionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-policy-version))
(common-lisp:progn
 (common-lisp:defun create-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path role-name
                     assume-role-policy-document description
                     max-session-duration permissions-boundary tags)
   (common-lisp:declare
    (common-lisp:ignorable path role-name assume-role-policy-document
     description max-session-duration permissions-boundary tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRole"))
      common-lisp:nil "CreateRoleResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-role))
(common-lisp:progn
 (common-lisp:defun create-samlprovider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlmetadata-document name tags)
   (common-lisp:declare
    (common-lisp:ignorable samlmetadata-document name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-samlprovider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSAMLProvider"))
      common-lisp:nil "CreateSAMLProviderResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-samlprovider))
(common-lisp:progn
 (common-lisp:defun create-service-linked-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key awsservice-name description
                     custom-suffix)
   (common-lisp:declare
    (common-lisp:ignorable awsservice-name description custom-suffix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-service-linked-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateServiceLinkedRole"))
      common-lisp:nil "CreateServiceLinkedRoleResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-service-linked-role))
(common-lisp:progn
 (common-lisp:defun create-service-specific-credential
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name service-name)
   (common-lisp:declare (common-lisp:ignorable user-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-service-specific-credential-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateServiceSpecificCredential"))
      common-lisp:nil "CreateServiceSpecificCredentialResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-service-specific-credential))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path user-name permissions-boundary tags)
   (common-lisp:declare
    (common-lisp:ignorable path user-name permissions-boundary tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateUser"))
      common-lisp:nil "CreateUserResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun create-virtual-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path virtual-mfadevice-name tags)
   (common-lisp:declare
    (common-lisp:ignorable path virtual-mfadevice-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-virtual-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateVirtualMFADevice"))
      common-lisp:nil "CreateVirtualMFADeviceResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'create-virtual-mfadevice))
(common-lisp:progn
 (common-lisp:defun deactivate-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name serial-number)
   (common-lisp:declare (common-lisp:ignorable user-name serial-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deactivate-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeactivateMFADevice"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'deactivate-mfadevice))
(common-lisp:progn
 (common-lisp:defun delete-access-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name access-key-id)
   (common-lisp:declare (common-lisp:ignorable user-name access-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-access-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAccessKey"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-access-key))
(common-lisp:progn
 (common-lisp:defun delete-account-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-alias)
   (common-lisp:declare (common-lisp:ignorable account-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-account-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAccountAlias"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-account-alias))
(common-lisp:progn
 (common-lisp:defun delete-account-password-policy ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iam-request :method "POST" :path "/"
                                :operation "DeleteAccountPasswordPolicy"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-account-password-policy))
(common-lisp:progn
 (common-lisp:defun delete-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name)
   (common-lisp:declare (common-lisp:ignorable group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteGroup"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-group))
(common-lisp:progn
 (common-lisp:defun delete-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name policy-name)
   (common-lisp:declare (common-lisp:ignorable group-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteGroupPolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-group-policy))
(common-lisp:progn
 (common-lisp:defun delete-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name)
   (common-lisp:declare (common-lisp:ignorable instance-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-instance-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteInstanceProfile"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-instance-profile))
(common-lisp:progn
 (common-lisp:defun delete-login-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-login-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLoginProfile"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-login-profile))
(common-lisp:progn
 (common-lisp:defun delete-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn)
   (common-lisp:declare (common-lisp:ignorable open-idconnect-provider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteOpenIDConnectProvider"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun delete-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn)
   (common-lisp:declare (common-lisp:ignorable policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-policy))
(common-lisp:progn
 (common-lisp:defun delete-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn version-id)
   (common-lisp:declare (common-lisp:ignorable policy-arn version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePolicyVersion"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-policy-version))
(common-lisp:progn
 (common-lisp:defun delete-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name)
   (common-lisp:declare (common-lisp:ignorable role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRole"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-role))
(common-lisp:progn
 (common-lisp:defun delete-role-permissions-boundary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name)
   (common-lisp:declare (common-lisp:ignorable role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-role-permissions-boundary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRolePermissionsBoundary"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-role-permissions-boundary))
(common-lisp:progn
 (common-lisp:defun delete-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-name)
   (common-lisp:declare (common-lisp:ignorable role-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-role-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRolePolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-role-policy))
(common-lisp:progn
 (common-lisp:defun delete-samlprovider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlprovider-arn)
   (common-lisp:declare (common-lisp:ignorable samlprovider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-samlprovider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSAMLProvider"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-samlprovider))
(common-lisp:progn
 (common-lisp:defun delete-sshpublic-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name sshpublic-key-id)
   (common-lisp:declare (common-lisp:ignorable user-name sshpublic-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-sshpublic-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSSHPublicKey"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-sshpublic-key))
(common-lisp:progn
 (common-lisp:defun delete-server-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-certificate-name)
   (common-lisp:declare (common-lisp:ignorable server-certificate-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-server-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteServerCertificate"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-server-certificate))
(common-lisp:progn
 (common-lisp:defun delete-service-linked-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name)
   (common-lisp:declare (common-lisp:ignorable role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-service-linked-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteServiceLinkedRole"))
      common-lisp:nil "DeleteServiceLinkedRoleResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'delete-service-linked-role))
(common-lisp:progn
 (common-lisp:defun delete-service-specific-credential
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name service-specific-credential-id)
   (common-lisp:declare
    (common-lisp:ignorable user-name service-specific-credential-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-service-specific-credential-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteServiceSpecificCredential"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-service-specific-credential))
(common-lisp:progn
 (common-lisp:defun delete-signing-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name certificate-id)
   (common-lisp:declare (common-lisp:ignorable user-name certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-signing-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSigningCertificate"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-signing-certificate))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUser"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun delete-user-permissions-boundary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-user-permissions-boundary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUserPermissionsBoundary"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-user-permissions-boundary))
(common-lisp:progn
 (common-lisp:defun delete-user-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name policy-name)
   (common-lisp:declare (common-lisp:ignorable user-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUserPolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-user-policy))
(common-lisp:progn
 (common-lisp:defun delete-virtual-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serial-number)
   (common-lisp:declare (common-lisp:ignorable serial-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVirtualMFADevice"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-virtual-mfadevice))
(common-lisp:progn
 (common-lisp:defun detach-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable group-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-group-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachGroupPolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'detach-group-policy))
(common-lisp:progn
 (common-lisp:defun detach-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable role-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-role-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachRolePolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'detach-role-policy))
(common-lisp:progn
 (common-lisp:defun detach-user-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable user-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-user-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachUserPolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'detach-user-policy))
(common-lisp:progn
 (common-lisp:defun enable-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name serial-number
                     authentication-code1 authentication-code2)
   (common-lisp:declare
    (common-lisp:ignorable user-name serial-number authentication-code1
     authentication-code2))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableMFADevice"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'enable-mfadevice))
(common-lisp:progn
 (common-lisp:defun generate-credential-report ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iam-request :method "POST" :path "/"
                                :operation "GenerateCredentialReport"))
    common-lisp:nil "GenerateCredentialReportResult" *error-map*))
 (common-lisp:export 'generate-credential-report))
(common-lisp:progn
 (common-lisp:defun generate-organizations-access-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entity-path organizations-policy-id)
   (common-lisp:declare
    (common-lisp:ignorable entity-path organizations-policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-generate-organizations-access-report-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GenerateOrganizationsAccessReport"))
      common-lisp:nil "GenerateOrganizationsAccessReportResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'generate-organizations-access-report))
(common-lisp:progn
 (common-lisp:defun generate-service-last-accessed-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn granularity)
   (common-lisp:declare (common-lisp:ignorable arn granularity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-generate-service-last-accessed-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GenerateServiceLastAccessedDetails"))
      common-lisp:nil "GenerateServiceLastAccessedDetailsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'generate-service-last-accessed-details))
(common-lisp:progn
 (common-lisp:defun get-access-key-last-used
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-key-id)
   (common-lisp:declare (common-lisp:ignorable access-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-access-key-last-used-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAccessKeyLastUsed"))
      common-lisp:nil "GetAccessKeyLastUsedResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-access-key-last-used))
(common-lisp:progn
 (common-lisp:defun get-account-authorization-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-items marker)
   (common-lisp:declare (common-lisp:ignorable filter max-items marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-account-authorization-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAccountAuthorizationDetails"))
      common-lisp:nil "GetAccountAuthorizationDetailsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-account-authorization-details))
(common-lisp:progn
 (common-lisp:defun get-account-password-policy ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iam-request :method "POST" :path "/"
                                :operation "GetAccountPasswordPolicy"))
    common-lisp:nil "GetAccountPasswordPolicyResult" *error-map*))
 (common-lisp:export 'get-account-password-policy))
(common-lisp:progn
 (common-lisp:defun get-account-summary ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iam-request :method "POST" :path "/"
                                :operation "GetAccountSummary"))
    common-lisp:nil "GetAccountSummaryResult" *error-map*))
 (common-lisp:export 'get-account-summary))
(common-lisp:progn
 (common-lisp:defun get-context-keys-for-custom-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-input-list)
   (common-lisp:declare (common-lisp:ignorable policy-input-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-context-keys-for-custom-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContextKeysForCustomPolicy"))
      common-lisp:nil "GetContextKeysForCustomPolicyResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-context-keys-for-custom-policy))
(common-lisp:progn
 (common-lisp:defun get-context-keys-for-principal-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-source-arn policy-input-list)
   (common-lisp:declare
    (common-lisp:ignorable policy-source-arn policy-input-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-context-keys-for-principal-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContextKeysForPrincipalPolicy"))
      common-lisp:nil "GetContextKeysForPrincipalPolicyResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-context-keys-for-principal-policy))
(common-lisp:progn
 (common-lisp:defun get-credential-report ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iam-request :method "POST" :path "/"
                                :operation "GetCredentialReport"))
    common-lisp:nil "GetCredentialReportResult" *error-map*))
 (common-lisp:export 'get-credential-report))
(common-lisp:progn
 (common-lisp:defun get-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable group-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetGroup"))
      common-lisp:nil "GetGroupResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'get-group))
(common-lisp:progn
 (common-lisp:defun get-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name policy-name)
   (common-lisp:declare (common-lisp:ignorable group-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-group-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetGroupPolicy"))
      common-lisp:nil "GetGroupPolicyResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'get-group-policy))
(common-lisp:progn
 (common-lisp:defun get-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name)
   (common-lisp:declare (common-lisp:ignorable instance-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstanceProfile"))
      common-lisp:nil "GetInstanceProfileResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'get-instance-profile))
(common-lisp:progn
 (common-lisp:defun get-login-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-login-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLoginProfile"))
      common-lisp:nil "GetLoginProfileResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'get-login-profile))
(common-lisp:progn
 (common-lisp:defun get-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serial-number user-name)
   (common-lisp:declare (common-lisp:ignorable serial-number user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMFADevice"))
      common-lisp:nil "GetMFADeviceResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'get-mfadevice))
(common-lisp:progn
 (common-lisp:defun get-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn)
   (common-lisp:declare (common-lisp:ignorable open-idconnect-provider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetOpenIDConnectProvider"))
      common-lisp:nil "GetOpenIDConnectProviderResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun get-organizations-access-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-items marker sort-key)
   (common-lisp:declare
    (common-lisp:ignorable job-id max-items marker sort-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-organizations-access-report-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetOrganizationsAccessReport"))
      common-lisp:nil "GetOrganizationsAccessReportResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-organizations-access-report))
(common-lisp:progn
 (common-lisp:defun get-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn)
   (common-lisp:declare (common-lisp:ignorable policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPolicy"))
      common-lisp:nil "GetPolicyResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'get-policy))
(common-lisp:progn
 (common-lisp:defun get-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn version-id)
   (common-lisp:declare (common-lisp:ignorable policy-arn version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPolicyVersion"))
      common-lisp:nil "GetPolicyVersionResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'get-policy-version))
(common-lisp:progn
 (common-lisp:defun get-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name)
   (common-lisp:declare (common-lisp:ignorable role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetRole"))
      common-lisp:nil "GetRoleResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'get-role))
(common-lisp:progn
 (common-lisp:defun get-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-name)
   (common-lisp:declare (common-lisp:ignorable role-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-role-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRolePolicy"))
      common-lisp:nil "GetRolePolicyResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'get-role-policy))
(common-lisp:progn
 (common-lisp:defun get-samlprovider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlprovider-arn)
   (common-lisp:declare (common-lisp:ignorable samlprovider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-samlprovider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSAMLProvider"))
      common-lisp:nil "GetSAMLProviderResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'get-samlprovider))
(common-lisp:progn
 (common-lisp:defun get-sshpublic-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name sshpublic-key-id encoding)
   (common-lisp:declare
    (common-lisp:ignorable user-name sshpublic-key-id encoding))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sshpublic-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSSHPublicKey"))
      common-lisp:nil "GetSSHPublicKeyResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'get-sshpublic-key))
(common-lisp:progn
 (common-lisp:defun get-server-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-certificate-name)
   (common-lisp:declare (common-lisp:ignorable server-certificate-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-server-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServerCertificate"))
      common-lisp:nil "GetServerCertificateResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-server-certificate))
(common-lisp:progn
 (common-lisp:defun get-service-last-accessed-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-items marker)
   (common-lisp:declare (common-lisp:ignorable job-id max-items marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-service-last-accessed-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceLastAccessedDetails"))
      common-lisp:nil "GetServiceLastAccessedDetailsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-service-last-accessed-details))
(common-lisp:progn
 (common-lisp:defun get-service-last-accessed-details-with-entities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id service-namespace max-items
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable job-id service-namespace max-items marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-service-last-accessed-details-with-entities-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceLastAccessedDetailsWithEntities"))
      common-lisp:nil "GetServiceLastAccessedDetailsWithEntitiesResult"
      *error-map* common-lisp:nil)))
 (common-lisp:export 'get-service-last-accessed-details-with-entities))
(common-lisp:progn
 (common-lisp:defun get-service-linked-role-deletion-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deletion-task-id)
   (common-lisp:declare (common-lisp:ignorable deletion-task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-service-linked-role-deletion-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceLinkedRoleDeletionStatus"))
      common-lisp:nil "GetServiceLinkedRoleDeletionStatusResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-service-linked-role-deletion-status))
(common-lisp:progn
 (common-lisp:defun get-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetUser"))
      common-lisp:nil "GetUserResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'get-user))
(common-lisp:progn
 (common-lisp:defun get-user-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name policy-name)
   (common-lisp:declare (common-lisp:ignorable user-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUserPolicy"))
      common-lisp:nil "GetUserPolicyResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'get-user-policy))
(common-lisp:progn
 (common-lisp:defun list-access-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-access-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAccessKeys"))
      common-lisp:nil "ListAccessKeysResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-access-keys))
(common-lisp:progn
 (common-lisp:defun list-account-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items)
   (common-lisp:declare (common-lisp:ignorable marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-account-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAccountAliases"))
      common-lisp:nil "ListAccountAliasesResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-account-aliases))
(common-lisp:progn
 (common-lisp:defun list-attached-group-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name path-prefix marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable group-name path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-attached-group-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAttachedGroupPolicies"))
      common-lisp:nil "ListAttachedGroupPoliciesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-attached-group-policies))
(common-lisp:progn
 (common-lisp:defun list-attached-role-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name path-prefix marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable role-name path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-attached-role-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAttachedRolePolicies"))
      common-lisp:nil "ListAttachedRolePoliciesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-attached-role-policies))
(common-lisp:progn
 (common-lisp:defun list-attached-user-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name path-prefix marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable user-name path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-attached-user-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAttachedUserPolicies"))
      common-lisp:nil "ListAttachedUserPoliciesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-attached-user-policies))
(common-lisp:progn
 (common-lisp:defun list-entities-for-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn entity-filter path-prefix
                     policy-usage-filter marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable policy-arn entity-filter path-prefix
     policy-usage-filter marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-entities-for-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEntitiesForPolicy"))
      common-lisp:nil "ListEntitiesForPolicyResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-entities-for-policy))
(common-lisp:progn
 (common-lisp:defun list-group-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable group-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-group-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListGroupPolicies"))
      common-lisp:nil "ListGroupPoliciesResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-group-policies))
(common-lisp:progn
 (common-lisp:defun list-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path-prefix marker max-items)
   (common-lisp:declare (common-lisp:ignorable path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListGroups"))
      common-lisp:nil "ListGroupsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-groups))
(common-lisp:progn
 (common-lisp:defun list-groups-for-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-groups-for-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListGroupsForUser"))
      common-lisp:nil "ListGroupsForUserResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-groups-for-user))
(common-lisp:progn
 (common-lisp:defun list-instance-profile-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable instance-profile-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-instance-profile-tags-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListInstanceProfileTags"))
      common-lisp:nil "ListInstanceProfileTagsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-instance-profile-tags))
(common-lisp:progn
 (common-lisp:defun list-instance-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path-prefix marker max-items)
   (common-lisp:declare (common-lisp:ignorable path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-instance-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListInstanceProfiles"))
      common-lisp:nil "ListInstanceProfilesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-instance-profiles))
(common-lisp:progn
 (common-lisp:defun list-instance-profiles-for-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable role-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-instance-profiles-for-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListInstanceProfilesForRole"))
      common-lisp:nil "ListInstanceProfilesForRoleResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-instance-profiles-for-role))
(common-lisp:progn
 (common-lisp:defun list-mfadevice-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serial-number marker max-items)
   (common-lisp:declare (common-lisp:ignorable serial-number marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mfadevice-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMFADeviceTags"))
      common-lisp:nil "ListMFADeviceTagsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-mfadevice-tags))
(common-lisp:progn
 (common-lisp:defun list-mfadevices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mfadevices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMFADevices"))
      common-lisp:nil "ListMFADevicesResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-mfadevices))
(common-lisp:progn
 (common-lisp:defun list-open-idconnect-provider-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn marker
                     max-items)
   (common-lisp:declare
    (common-lisp:ignorable open-idconnect-provider-arn marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-open-idconnect-provider-tags-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListOpenIDConnectProviderTags"))
      common-lisp:nil "ListOpenIDConnectProviderTagsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-open-idconnect-provider-tags))
(common-lisp:progn
 (common-lisp:defun list-open-idconnect-providers ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iam-request :method "POST" :path "/"
                                :operation "ListOpenIDConnectProviders"))
    common-lisp:nil "ListOpenIDConnectProvidersResult" *error-map*))
 (common-lisp:export 'list-open-idconnect-providers))
(common-lisp:progn
 (common-lisp:defun list-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scope only-attached path-prefix
                     policy-usage-filter marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable scope only-attached path-prefix policy-usage-filter
     marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPolicies"))
      common-lisp:nil "ListPoliciesResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-policies))
(common-lisp:progn
 (common-lisp:defun list-policies-granting-service-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker arn service-namespaces)
   (common-lisp:declare (common-lisp:ignorable marker arn service-namespaces))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-policies-granting-service-access-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPoliciesGrantingServiceAccess"))
      common-lisp:nil "ListPoliciesGrantingServiceAccessResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-policies-granting-service-access))
(common-lisp:progn
 (common-lisp:defun list-policy-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn marker max-items)
   (common-lisp:declare (common-lisp:ignorable policy-arn marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPolicyTags"))
      common-lisp:nil "ListPolicyTagsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-policy-tags))
(common-lisp:progn
 (common-lisp:defun list-policy-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn marker max-items)
   (common-lisp:declare (common-lisp:ignorable policy-arn marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPolicyVersions"))
      common-lisp:nil "ListPolicyVersionsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-policy-versions))
(common-lisp:progn
 (common-lisp:defun list-role-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable role-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-role-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRolePolicies"))
      common-lisp:nil "ListRolePoliciesResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-role-policies))
(common-lisp:progn
 (common-lisp:defun list-role-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable role-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-role-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRoleTags"))
      common-lisp:nil "ListRoleTagsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-role-tags))
(common-lisp:progn
 (common-lisp:defun list-roles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path-prefix marker max-items)
   (common-lisp:declare (common-lisp:ignorable path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-roles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRoles"))
      common-lisp:nil "ListRolesResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-roles))
(common-lisp:progn
 (common-lisp:defun list-samlprovider-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlprovider-arn marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable samlprovider-arn marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-samlprovider-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSAMLProviderTags"))
      common-lisp:nil "ListSAMLProviderTagsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-samlprovider-tags))
(common-lisp:progn
 (common-lisp:defun list-samlproviders ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iam-request :method "POST" :path "/"
                                :operation "ListSAMLProviders"))
    common-lisp:nil "ListSAMLProvidersResult" *error-map*))
 (common-lisp:export 'list-samlproviders))
(common-lisp:progn
 (common-lisp:defun list-sshpublic-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sshpublic-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSSHPublicKeys"))
      common-lisp:nil "ListSSHPublicKeysResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-sshpublic-keys))
(common-lisp:progn
 (common-lisp:defun list-server-certificate-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-certificate-name marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable server-certificate-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-server-certificate-tags-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServerCertificateTags"))
      common-lisp:nil "ListServerCertificateTagsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-server-certificate-tags))
(common-lisp:progn
 (common-lisp:defun list-server-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path-prefix marker max-items)
   (common-lisp:declare (common-lisp:ignorable path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-server-certificates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServerCertificates"))
      common-lisp:nil "ListServerCertificatesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-server-certificates))
(common-lisp:progn
 (common-lisp:defun list-service-specific-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name service-name)
   (common-lisp:declare (common-lisp:ignorable user-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-service-specific-credentials-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServiceSpecificCredentials"))
      common-lisp:nil "ListServiceSpecificCredentialsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-service-specific-credentials))
(common-lisp:progn
 (common-lisp:defun list-signing-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-signing-certificates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSigningCertificates"))
      common-lisp:nil "ListSigningCertificatesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-signing-certificates))
(common-lisp:progn
 (common-lisp:defun list-user-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-user-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListUserPolicies"))
      common-lisp:nil "ListUserPoliciesResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-user-policies))
(common-lisp:progn
 (common-lisp:defun list-user-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-user-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListUserTags"))
      common-lisp:nil "ListUserTagsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-user-tags))
(common-lisp:progn
 (common-lisp:defun list-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path-prefix marker max-items)
   (common-lisp:declare (common-lisp:ignorable path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListUsers"))
      common-lisp:nil "ListUsersResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'list-users))
(common-lisp:progn
 (common-lisp:defun list-virtual-mfadevices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assignment-status marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable assignment-status marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-virtual-mfadevices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListVirtualMFADevices"))
      common-lisp:nil "ListVirtualMFADevicesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'list-virtual-mfadevices))
(common-lisp:progn
 (common-lisp:defun put-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name policy-name policy-document)
   (common-lisp:declare
    (common-lisp:ignorable group-name policy-name policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-group-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutGroupPolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'put-group-policy))
(common-lisp:progn
 (common-lisp:defun put-role-permissions-boundary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name permissions-boundary)
   (common-lisp:declare (common-lisp:ignorable role-name permissions-boundary))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-role-permissions-boundary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRolePermissionsBoundary"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'put-role-permissions-boundary))
(common-lisp:progn
 (common-lisp:defun put-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-name policy-document)
   (common-lisp:declare
    (common-lisp:ignorable role-name policy-name policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-role-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRolePolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'put-role-policy))
(common-lisp:progn
 (common-lisp:defun put-user-permissions-boundary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name permissions-boundary)
   (common-lisp:declare (common-lisp:ignorable user-name permissions-boundary))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-user-permissions-boundary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutUserPermissionsBoundary"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'put-user-permissions-boundary))
(common-lisp:progn
 (common-lisp:defun put-user-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name policy-name policy-document)
   (common-lisp:declare
    (common-lisp:ignorable user-name policy-name policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-user-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutUserPolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'put-user-policy))
(common-lisp:progn
 (common-lisp:defun remove-client-idfrom-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn client-id)
   (common-lisp:declare
    (common-lisp:ignorable open-idconnect-provider-arn client-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-client-idfrom-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveClientIDFromOpenIDConnectProvider"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'remove-client-idfrom-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun remove-role-from-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name role-name)
   (common-lisp:declare
    (common-lisp:ignorable instance-profile-name role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-role-from-instance-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveRoleFromInstanceProfile"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'remove-role-from-instance-profile))
(common-lisp:progn
 (common-lisp:defun remove-user-from-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name user-name)
   (common-lisp:declare (common-lisp:ignorable group-name user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-user-from-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveUserFromGroup"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'remove-user-from-group))
(common-lisp:progn
 (common-lisp:defun reset-service-specific-credential
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name service-specific-credential-id)
   (common-lisp:declare
    (common-lisp:ignorable user-name service-specific-credential-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reset-service-specific-credential-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetServiceSpecificCredential"))
      common-lisp:nil "ResetServiceSpecificCredentialResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'reset-service-specific-credential))
(common-lisp:progn
 (common-lisp:defun resync-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name serial-number
                     authentication-code1 authentication-code2)
   (common-lisp:declare
    (common-lisp:ignorable user-name serial-number authentication-code1
     authentication-code2))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resync-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResyncMFADevice"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'resync-mfadevice))
(common-lisp:progn
 (common-lisp:defun set-default-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn version-id)
   (common-lisp:declare (common-lisp:ignorable policy-arn version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-default-policy-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetDefaultPolicyVersion"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'set-default-policy-version))
(common-lisp:progn
 (common-lisp:defun set-security-token-service-preferences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-endpoint-token-version)
   (common-lisp:declare (common-lisp:ignorable global-endpoint-token-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-security-token-service-preferences-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetSecurityTokenServicePreferences"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'set-security-token-service-preferences))
(common-lisp:progn
 (common-lisp:defun simulate-custom-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-input-list
                     permissions-boundary-policy-input-list action-names
                     resource-arns resource-policy resource-owner caller-arn
                     context-entries resource-handling-option max-items marker)
   (common-lisp:declare
    (common-lisp:ignorable policy-input-list
     permissions-boundary-policy-input-list action-names resource-arns
     resource-policy resource-owner caller-arn context-entries
     resource-handling-option max-items marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-simulate-custom-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SimulateCustomPolicy"))
      common-lisp:nil "SimulateCustomPolicyResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'simulate-custom-policy))
(common-lisp:progn
 (common-lisp:defun simulate-principal-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-source-arn policy-input-list
                     permissions-boundary-policy-input-list action-names
                     resource-arns resource-policy resource-owner caller-arn
                     context-entries resource-handling-option max-items marker)
   (common-lisp:declare
    (common-lisp:ignorable policy-source-arn policy-input-list
     permissions-boundary-policy-input-list action-names resource-arns
     resource-policy resource-owner caller-arn context-entries
     resource-handling-option max-items marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-simulate-principal-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SimulatePrincipalPolicy"))
      common-lisp:nil "SimulatePrincipalPolicyResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'simulate-principal-policy))
(common-lisp:progn
 (common-lisp:defun tag-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name tags)
   (common-lisp:declare (common-lisp:ignorable instance-profile-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-instance-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagInstanceProfile"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'tag-instance-profile))
(common-lisp:progn
 (common-lisp:defun tag-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serial-number tags)
   (common-lisp:declare (common-lisp:ignorable serial-number tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagMFADevice"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'tag-mfadevice))
(common-lisp:progn
 (common-lisp:defun tag-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable open-idconnect-provider-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-tag-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagOpenIDConnectProvider"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'tag-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun tag-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn tags)
   (common-lisp:declare (common-lisp:ignorable policy-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagPolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'tag-policy))
(common-lisp:progn
 (common-lisp:defun tag-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name tags)
   (common-lisp:declare (common-lisp:ignorable role-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "TagRole"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'tag-role))
(common-lisp:progn
 (common-lisp:defun tag-samlprovider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlprovider-arn tags)
   (common-lisp:declare (common-lisp:ignorable samlprovider-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-samlprovider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagSAMLProvider"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'tag-samlprovider))
(common-lisp:progn
 (common-lisp:defun tag-server-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-certificate-name tags)
   (common-lisp:declare (common-lisp:ignorable server-certificate-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-server-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagServerCertificate"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'tag-server-certificate))
(common-lisp:progn
 (common-lisp:defun tag-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name tags)
   (common-lisp:declare (common-lisp:ignorable user-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "TagUser"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'tag-user))
(common-lisp:progn
 (common-lisp:defun untag-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name tag-keys)
   (common-lisp:declare (common-lisp:ignorable instance-profile-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-instance-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagInstanceProfile"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'untag-instance-profile))
(common-lisp:progn
 (common-lisp:defun untag-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serial-number tag-keys)
   (common-lisp:declare (common-lisp:ignorable serial-number tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagMFADevice"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'untag-mfadevice))
(common-lisp:progn
 (common-lisp:defun untag-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn tag-keys)
   (common-lisp:declare
    (common-lisp:ignorable open-idconnect-provider-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-untag-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagOpenIDConnectProvider"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'untag-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun untag-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable policy-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagPolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'untag-policy))
(common-lisp:progn
 (common-lisp:defun untag-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name tag-keys)
   (common-lisp:declare (common-lisp:ignorable role-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagRole"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'untag-role))
(common-lisp:progn
 (common-lisp:defun untag-samlprovider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlprovider-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable samlprovider-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-samlprovider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagSAMLProvider"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'untag-samlprovider))
(common-lisp:progn
 (common-lisp:defun untag-server-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-certificate-name tag-keys)
   (common-lisp:declare
    (common-lisp:ignorable server-certificate-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-server-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagServerCertificate"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'untag-server-certificate))
(common-lisp:progn
 (common-lisp:defun untag-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name tag-keys)
   (common-lisp:declare (common-lisp:ignorable user-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagUser"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'untag-user))
(common-lisp:progn
 (common-lisp:defun update-access-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name access-key-id status)
   (common-lisp:declare (common-lisp:ignorable user-name access-key-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-access-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAccessKey"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'update-access-key))
(common-lisp:progn
 (common-lisp:defun update-account-password-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key minimum-password-length require-symbols
                     require-numbers require-uppercase-characters
                     require-lowercase-characters
                     allow-users-to-change-password max-password-age
                     password-reuse-prevention hard-expiry)
   (common-lisp:declare
    (common-lisp:ignorable minimum-password-length require-symbols
     require-numbers require-uppercase-characters require-lowercase-characters
     allow-users-to-change-password max-password-age password-reuse-prevention
     hard-expiry))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-account-password-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAccountPasswordPolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'update-account-password-policy))
(common-lisp:progn
 (common-lisp:defun update-assume-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-document)
   (common-lisp:declare (common-lisp:ignorable role-name policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-assume-role-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAssumeRolePolicy"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'update-assume-role-policy))
(common-lisp:progn
 (common-lisp:defun update-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name new-path new-group-name)
   (common-lisp:declare
    (common-lisp:ignorable group-name new-path new-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateGroup"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'update-group))
(common-lisp:progn
 (common-lisp:defun update-login-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name password
                     password-reset-required)
   (common-lisp:declare
    (common-lisp:ignorable user-name password password-reset-required))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-login-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateLoginProfile"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'update-login-profile))
(common-lisp:progn
 (common-lisp:defun update-open-idconnect-provider-thumbprint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn
                     thumbprint-list)
   (common-lisp:declare
    (common-lisp:ignorable open-idconnect-provider-arn thumbprint-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-open-idconnect-provider-thumbprint-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateOpenIDConnectProviderThumbprint"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'update-open-idconnect-provider-thumbprint))
(common-lisp:progn
 (common-lisp:defun update-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name description
                     max-session-duration)
   (common-lisp:declare
    (common-lisp:ignorable role-name description max-session-duration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRole"))
      common-lisp:nil "UpdateRoleResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'update-role))
(common-lisp:progn
 (common-lisp:defun update-role-description
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name description)
   (common-lisp:declare (common-lisp:ignorable role-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-role-description-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRoleDescription"))
      common-lisp:nil "UpdateRoleDescriptionResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'update-role-description))
(common-lisp:progn
 (common-lisp:defun update-samlprovider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlmetadata-document samlprovider-arn)
   (common-lisp:declare
    (common-lisp:ignorable samlmetadata-document samlprovider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-samlprovider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateSAMLProvider"))
      common-lisp:nil "UpdateSAMLProviderResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'update-samlprovider))
(common-lisp:progn
 (common-lisp:defun update-sshpublic-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name sshpublic-key-id status)
   (common-lisp:declare
    (common-lisp:ignorable user-name sshpublic-key-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-sshpublic-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateSSHPublicKey"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'update-sshpublic-key))
(common-lisp:progn
 (common-lisp:defun update-server-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-certificate-name new-path
                     new-server-certificate-name)
   (common-lisp:declare
    (common-lisp:ignorable server-certificate-name new-path
     new-server-certificate-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-server-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServerCertificate"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'update-server-certificate))
(common-lisp:progn
 (common-lisp:defun update-service-specific-credential
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name service-specific-credential-id
                     status)
   (common-lisp:declare
    (common-lisp:ignorable user-name service-specific-credential-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-service-specific-credential-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServiceSpecificCredential"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'update-service-specific-credential))
(common-lisp:progn
 (common-lisp:defun update-signing-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name certificate-id status)
   (common-lisp:declare
    (common-lisp:ignorable user-name certificate-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-signing-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateSigningCertificate"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'update-signing-certificate))
(common-lisp:progn
 (common-lisp:defun update-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name new-path new-user-name)
   (common-lisp:declare
    (common-lisp:ignorable user-name new-path new-user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateUser"))
      common-lisp:nil common-lisp:nil *error-map* common-lisp:nil)))
 (common-lisp:export 'update-user))
(common-lisp:progn
 (common-lisp:defun upload-sshpublic-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name sshpublic-key-body)
   (common-lisp:declare (common-lisp:ignorable user-name sshpublic-key-body))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upload-sshpublic-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UploadSSHPublicKey"))
      common-lisp:nil "UploadSSHPublicKeyResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'upload-sshpublic-key))
(common-lisp:progn
 (common-lisp:defun upload-server-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path server-certificate-name
                     certificate-body private-key certificate-chain tags)
   (common-lisp:declare
    (common-lisp:ignorable path server-certificate-name certificate-body
     private-key certificate-chain tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-upload-server-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UploadServerCertificate"))
      common-lisp:nil "UploadServerCertificateResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'upload-server-certificate))
(common-lisp:progn
 (common-lisp:defun upload-signing-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name certificate-body)
   (common-lisp:declare (common-lisp:ignorable user-name certificate-body))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-upload-signing-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UploadSigningCertificate"))
      common-lisp:nil "UploadSigningCertificateResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'upload-signing-certificate))
