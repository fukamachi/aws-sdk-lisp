;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/elasticloadbalancingv2/api
                             (:use) (:nicknames #:aws/elasticloadbalancingv2)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/elasticloadbalancingv2/api)
(common-lisp:progn
 (common-lisp:define-condition elasticloadbalancingv2-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'elasticloadbalancingv2-error))
(common-lisp:progn
 (common-lisp:defclass elasticloadbalancingv2-request
                       (aws-sdk/query-request:query-request) common-lisp:nil
                       (:default-initargs :service "elasticloadbalancingv2"
                        :api-version "2015-12-01" :host-prefix
                        "elasticloadbalancing" :signing-name common-lisp:nil
                        :global-host common-lisp:nil))
 (common-lisp:export 'elasticloadbalancingv2-request))
(common-lisp:defvar *error-map*
  '(("ALPNPolicyNotSupportedException" . alpnpolicy-not-supported-exception)
    ("AllocationIdNotFoundException" . allocation-id-not-found-exception)
    ("AvailabilityZoneNotSupportedException"
     . availability-zone-not-supported-exception)
    ("CaCertificatesBundleNotFoundException"
     . ca-certificates-bundle-not-found-exception)
    ("CertificateNotFoundException" . certificate-not-found-exception)
    ("DuplicateListenerException" . duplicate-listener-exception)
    ("DuplicateLoadBalancerNameException"
     . duplicate-load-balancer-name-exception)
    ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
    ("DuplicateTargetGroupNameException"
     . duplicate-target-group-name-exception)
    ("DuplicateTrustStoreNameException" . duplicate-trust-store-name-exception)
    ("HealthUnavailableException" . health-unavailable-exception)
    ("IncompatibleProtocolsException" . incompatible-protocols-exception)
    ("InvalidCaCertificatesBundleException"
     . invalid-ca-certificates-bundle-exception)
    ("InvalidConfigurationRequestException"
     . invalid-configuration-request-exception)
    ("InvalidLoadBalancerActionException"
     . invalid-load-balancer-action-exception)
    ("InvalidRevocationContentException"
     . invalid-revocation-content-exception)
    ("InvalidSchemeException" . invalid-scheme-exception)
    ("InvalidSecurityGroupException" . invalid-security-group-exception)
    ("InvalidSubnetException" . invalid-subnet-exception)
    ("InvalidTargetException" . invalid-target-exception)
    ("ListenerNotFoundException" . listener-not-found-exception)
    ("LoadBalancerNotFoundException" . load-balancer-not-found-exception)
    ("OperationNotPermittedException" . operation-not-permitted-exception)
    ("PriorityInUseException" . priority-in-use-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("RevocationContentNotFoundException"
     . revocation-content-not-found-exception)
    ("RevocationIdNotFoundException" . revocation-id-not-found-exception)
    ("RuleNotFoundException" . rule-not-found-exception)
    ("SSLPolicyNotFoundException" . sslpolicy-not-found-exception)
    ("SubnetNotFoundException" . subnet-not-found-exception)
    ("TargetGroupAssociationLimitException"
     . target-group-association-limit-exception)
    ("TargetGroupNotFoundException" . target-group-not-found-exception)
    ("TooManyActionsException" . too-many-actions-exception)
    ("TooManyCertificatesException" . too-many-certificates-exception)
    ("TooManyListenersException" . too-many-listeners-exception)
    ("TooManyLoadBalancersException" . too-many-load-balancers-exception)
    ("TooManyRegistrationsForTargetIdException"
     . too-many-registrations-for-target-id-exception)
    ("TooManyRulesException" . too-many-rules-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("TooManyTargetGroupsException" . too-many-target-groups-exception)
    ("TooManyTargetsException" . too-many-targets-exception)
    ("TooManyTrustStoreRevocationEntriesException"
     . too-many-trust-store-revocation-entries-exception)
    ("TooManyTrustStoresException" . too-many-trust-stores-exception)
    ("TooManyUniqueTargetGroupsPerLoadBalancerException"
     . too-many-unique-target-groups-per-load-balancer-exception)
    ("TrustStoreInUseException" . trust-store-in-use-exception)
    ("TrustStoreNotFoundException" . trust-store-not-found-exception)
    ("TrustStoreNotReadyException" . trust-store-not-ready-exception)
    ("UnsupportedProtocolException" . unsupported-protocol-exception)))
(common-lisp:progn
 (common-lisp:define-condition alpnpolicy-not-supported-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'alpnpolicy-not-supported-exception)))
(common-lisp:progn
 (common-lisp:defclass action common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or action-type-enum common-lisp:null)
                         :accessor struct-shape-action-type :shape
                         "ActionTypeEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-group-arn :initarg :target-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor struct-shape-action-target-group-arn :shape
                         "TargetGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authenticate-oidc-config :initarg
                         :authenticate-oidc-config :initform common-lisp:nil
                         :type
                         (common-lisp:or authenticate-oidc-action-config
                                         common-lisp:null)
                         :accessor struct-shape-action-authenticate-oidc-config
                         :shape "AuthenticateOidcActionConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authenticate-cognito-config :initarg
                         :authenticate-cognito-config :initform common-lisp:nil
                         :type
                         (common-lisp:or authenticate-cognito-action-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-action-authenticate-cognito-config :shape
                         "AuthenticateCognitoActionConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (order :initarg :order :initform common-lisp:nil :type
                         (common-lisp:or action-order common-lisp:null)
                         :accessor struct-shape-action-order :shape
                         "ActionOrder" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (redirect-config :initarg :redirect-config :initform
                         common-lisp:nil :type
                         (common-lisp:or redirect-action-config
                                         common-lisp:null)
                         :accessor struct-shape-action-redirect-config :shape
                         "RedirectActionConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fixed-response-config :initarg :fixed-response-config
                         :initform common-lisp:nil :type
                         (common-lisp:or fixed-response-action-config
                                         common-lisp:null)
                         :accessor struct-shape-action-fixed-response-config
                         :shape "FixedResponseActionConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (forward-config :initarg :forward-config :initform
                         common-lisp:nil :type
                         (common-lisp:or forward-action-config
                                         common-lisp:null)
                         :accessor struct-shape-action-forward-config :shape
                         "ForwardActionConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authenticate-oidc-config))
      (common-lisp:list
       (common-lisp:cons "AuthenticateOidcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authenticate-cognito-config))
      (common-lisp:list
       (common-lisp:cons "AuthenticateCognitoConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "Order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redirect-config))
      (common-lisp:list
       (common-lisp:cons "RedirectConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fixed-response-config))
      (common-lisp:list
       (common-lisp:cons "FixedResponseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forward-config))
      (common-lisp:list
       (common-lisp:cons "ForwardConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:deftype action-order () 'common-lisp:integer)
(common-lisp:deftype action-type-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype actions () '(trivial-types:proper-list action))
 (common-lisp:defun make-actions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass add-listener-certificates-input common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         (common-lisp:error ":listener-arn is required") :type
                         (common-lisp:or listener-arn common-lisp:null)
                         :accessor
                         struct-shape-add-listener-certificates-input-listener-arn
                         :shape "ListenerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificates :initarg :certificates :initform
                         (common-lisp:error ":certificates is required") :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor
                         struct-shape-add-listener-certificates-input-certificates
                         :shape "CertificateList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-listener-certificates-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-listener-certificates-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-listener-certificates-input
                    'make-add-listener-certificates-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-listener-certificates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-listener-certificates-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-listener-certificates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-listener-certificates-output common-lisp:nil
                       ((certificates :initarg :certificates :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor
                         struct-shape-add-listener-certificates-output-certificates
                         :shape "CertificateList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-listener-certificates-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-listener-certificates-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-listener-certificates-output
                    'make-add-listener-certificates-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-listener-certificates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-listener-certificates-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-listener-certificates-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-input common-lisp:nil
                       ((resource-arns :initarg :resource-arns :initform
                         (common-lisp:error ":resource-arns is required") :type
                         (common-lisp:or resource-arns common-lisp:null)
                         :accessor struct-shape-add-tags-input-resource-arns
                         :shape "ResourceArns" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-add-tags-input-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-tags-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'add-tags-input 'make-add-tags-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "ResourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-tags-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'add-tags-output 'make-add-tags-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-trust-store-revocations-input common-lisp:nil
                       ((trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":trust-store-arn is required")
                         :type
                         (common-lisp:or trust-store-arn common-lisp:null)
                         :accessor
                         struct-shape-add-trust-store-revocations-input-trust-store-arn
                         :shape "TrustStoreArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revocation-contents :initarg :revocation-contents
                         :initform common-lisp:nil :type
                         (common-lisp:or revocation-contents common-lisp:null)
                         :accessor
                         struct-shape-add-trust-store-revocations-input-revocation-contents
                         :shape "RevocationContents" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-trust-store-revocations-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-trust-store-revocations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-trust-store-revocations-input
                    'make-add-trust-store-revocations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-trust-store-revocations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-trust-store-revocations-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "TrustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-contents))
      (common-lisp:list
       (common-lisp:cons "RevocationContents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-trust-store-revocations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-trust-store-revocations-output common-lisp:nil
                       ((trust-store-revocations :initarg
                         :trust-store-revocations :initform common-lisp:nil
                         :type
                         (common-lisp:or trust-store-revocations
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-trust-store-revocations-output-trust-store-revocations
                         :shape "TrustStoreRevocations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-trust-store-revocations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-trust-store-revocations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-trust-store-revocations-output
                    'make-add-trust-store-revocations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-trust-store-revocations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-trust-store-revocations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trust-store-revocations))
      (common-lisp:list
       (common-lisp:cons "TrustStoreRevocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-trust-store-revocations-output))
   common-lisp:nil))
(common-lisp:deftype allocation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition allocation-id-not-found-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'allocation-id-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype alpn-policy-name ()
   '(trivial-types:proper-list alpn-policy-value))
 (common-lisp:defun make-alpn-policy-name
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alpn-policy-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype alpn-policy-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass anomaly-detection common-lisp:nil
                       ((result :initarg :result :initform common-lisp:nil
                         :type
                         (common-lisp:or anomaly-result-enum common-lisp:null)
                         :accessor struct-shape-anomaly-detection-result :shape
                         "AnomalyResultEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mitigation-in-effect :initarg :mitigation-in-effect
                         :initform common-lisp:nil :type
                         (common-lisp:or mitigation-in-effect-enum
                                         common-lisp:null)
                         :accessor
                         struct-shape-anomaly-detection-mitigation-in-effect
                         :shape "MitigationInEffectEnum" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-anomaly-detection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly-detection
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'anomaly-detection 'make-anomaly-detection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mitigation-in-effect))
      (common-lisp:list
       (common-lisp:cons "MitigationInEffect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly-detection))
   common-lisp:nil))
(common-lisp:deftype anomaly-result-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype authenticate-cognito-action-authentication-request-extra-params
                      ()
   'common-lisp:hash-table)
 (common-lisp:defun make-authenticate-cognito-action-authentication-request-extra-params
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype authenticate-cognito-action-authentication-request-param-name
                     ()
  'common-lisp:string)
(common-lisp:deftype authenticate-cognito-action-authentication-request-param-value
                     ()
  'common-lisp:string)
(common-lisp:deftype authenticate-cognito-action-conditional-behavior-enum ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass authenticate-cognito-action-config common-lisp:nil
                       ((user-pool-arn :initarg :user-pool-arn :initform
                         (common-lisp:error ":user-pool-arn is required") :type
                         (common-lisp:or
                          authenticate-cognito-action-user-pool-arn
                          common-lisp:null)
                         :accessor
                         struct-shape-authenticate-cognito-action-config-user-pool-arn
                         :shape "AuthenticateCognitoActionUserPoolArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-pool-client-id :initarg :user-pool-client-id
                         :initform
                         (common-lisp:error ":user-pool-client-id is required")
                         :type
                         (common-lisp:or
                          authenticate-cognito-action-user-pool-client-id
                          common-lisp:null)
                         :accessor
                         struct-shape-authenticate-cognito-action-config-user-pool-client-id
                         :shape "AuthenticateCognitoActionUserPoolClientId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-pool-domain :initarg :user-pool-domain :initform
                         (common-lisp:error ":user-pool-domain is required")
                         :type
                         (common-lisp:or
                          authenticate-cognito-action-user-pool-domain
                          common-lisp:null)
                         :accessor
                         struct-shape-authenticate-cognito-action-config-user-pool-domain
                         :shape "AuthenticateCognitoActionUserPoolDomain"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (session-cookie-name :initarg :session-cookie-name
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          authenticate-cognito-action-session-cookie-name
                          common-lisp:null)
                         :accessor
                         struct-shape-authenticate-cognito-action-config-session-cookie-name
                         :shape "AuthenticateCognitoActionSessionCookieName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scope :initarg :scope :initform common-lisp:nil :type
                         (common-lisp:or authenticate-cognito-action-scope
                                         common-lisp:null)
                         :accessor
                         struct-shape-authenticate-cognito-action-config-scope
                         :shape "AuthenticateCognitoActionScope" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-timeout :initarg :session-timeout :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          authenticate-cognito-action-session-timeout
                          common-lisp:null)
                         :accessor
                         struct-shape-authenticate-cognito-action-config-session-timeout
                         :shape "AuthenticateCognitoActionSessionTimeout"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (authentication-request-extra-params :initarg
                         :authentication-request-extra-params :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          authenticate-cognito-action-authentication-request-extra-params
                          common-lisp:null)
                         :accessor
                         struct-shape-authenticate-cognito-action-config-authentication-request-extra-params
                         :shape
                         "AuthenticateCognitoActionAuthenticationRequestExtraParams"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (on-unauthenticated-request :initarg
                         :on-unauthenticated-request :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          authenticate-cognito-action-conditional-behavior-enum
                          common-lisp:null)
                         :accessor
                         struct-shape-authenticate-cognito-action-config-on-unauthenticated-request
                         :shape
                         "AuthenticateCognitoActionConditionalBehaviorEnum"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authenticate-cognito-action-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'authenticate-cognito-action-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authenticate-cognito-action-config
                    'make-authenticate-cognito-action-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authenticate-cognito-action-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authenticate-cognito-action-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-arn))
      (common-lisp:list
       (common-lisp:cons "UserPoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-client-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-domain))
      (common-lisp:list
       (common-lisp:cons "UserPoolDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-cookie-name))
      (common-lisp:list
       (common-lisp:cons "SessionCookieName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-timeout))
      (common-lisp:list
       (common-lisp:cons "SessionTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-request-extra-params))
      (common-lisp:list
       (common-lisp:cons "AuthenticationRequestExtraParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-unauthenticated-request))
      (common-lisp:list
       (common-lisp:cons "OnUnauthenticatedRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authenticate-cognito-action-config))
   common-lisp:nil))
(common-lisp:deftype authenticate-cognito-action-scope () 'common-lisp:string)
(common-lisp:deftype authenticate-cognito-action-session-cookie-name ()
  'common-lisp:string)
(common-lisp:deftype authenticate-cognito-action-session-timeout ()
  'common-lisp:integer)
(common-lisp:deftype authenticate-cognito-action-user-pool-arn ()
  'common-lisp:string)
(common-lisp:deftype authenticate-cognito-action-user-pool-client-id ()
  'common-lisp:string)
(common-lisp:deftype authenticate-cognito-action-user-pool-domain ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype authenticate-oidc-action-authentication-request-extra-params
                      ()
   'common-lisp:hash-table)
 (common-lisp:defun make-authenticate-oidc-action-authentication-request-extra-params
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype authenticate-oidc-action-authentication-request-param-name
                     ()
  'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-authentication-request-param-value
                     ()
  'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-authorization-endpoint ()
  'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-client-id () 'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-client-secret ()
  'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-conditional-behavior-enum ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass authenticate-oidc-action-config common-lisp:nil
                       ((issuer :initarg :issuer :initform
                         (common-lisp:error ":issuer is required") :type
                         (common-lisp:or authenticate-oidc-action-issuer
                                         common-lisp:null)
                         :accessor
                         struct-shape-authenticate-oidc-action-config-issuer
                         :shape "AuthenticateOidcActionIssuer" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (authorization-endpoint :initarg
                         :authorization-endpoint :initform
                         (common-lisp:error
                          ":authorization-endpoint is required")
                         :type
                         (common-lisp:or
                          authenticate-oidc-action-authorization-endpoint
                          common-lisp:null)
                         :accessor
                         struct-shape-authenticate-oidc-action-config-authorization-endpoint
                         :shape "AuthenticateOidcActionAuthorizationEndpoint"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (token-endpoint :initarg :token-endpoint :initform
                         (common-lisp:error ":token-endpoint is required")
                         :type
                         (common-lisp:or
                          authenticate-oidc-action-token-endpoint
                          common-lisp:null)
                         :accessor
                         struct-shape-authenticate-oidc-action-config-token-endpoint
                         :shape "AuthenticateOidcActionTokenEndpoint" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (user-info-endpoint :initarg :user-info-endpoint
                         :initform
                         (common-lisp:error ":user-info-endpoint is required")
                         :type
                         (common-lisp:or
                          authenticate-oidc-action-user-info-endpoint
                          common-lisp:null)
                         :accessor
                         struct-shape-authenticate-oidc-action-config-user-info-endpoint
                         :shape "AuthenticateOidcActionUserInfoEndpoint"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or authenticate-oidc-action-client-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-authenticate-oidc-action-config-client-id
                         :shape "AuthenticateOidcActionClientId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-secret :initarg :client-secret :initform
                         common-lisp:nil :type
                         (common-lisp:or authenticate-oidc-action-client-secret
                                         common-lisp:null)
                         :accessor
                         struct-shape-authenticate-oidc-action-config-client-secret
                         :shape "AuthenticateOidcActionClientSecret" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-cookie-name :initarg :session-cookie-name
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          authenticate-oidc-action-session-cookie-name
                          common-lisp:null)
                         :accessor
                         struct-shape-authenticate-oidc-action-config-session-cookie-name
                         :shape "AuthenticateOidcActionSessionCookieName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scope :initarg :scope :initform common-lisp:nil :type
                         (common-lisp:or authenticate-oidc-action-scope
                                         common-lisp:null)
                         :accessor
                         struct-shape-authenticate-oidc-action-config-scope
                         :shape "AuthenticateOidcActionScope" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-timeout :initarg :session-timeout :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          authenticate-oidc-action-session-timeout
                          common-lisp:null)
                         :accessor
                         struct-shape-authenticate-oidc-action-config-session-timeout
                         :shape "AuthenticateOidcActionSessionTimeout"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (authentication-request-extra-params :initarg
                         :authentication-request-extra-params :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          authenticate-oidc-action-authentication-request-extra-params
                          common-lisp:null)
                         :accessor
                         struct-shape-authenticate-oidc-action-config-authentication-request-extra-params
                         :shape
                         "AuthenticateOidcActionAuthenticationRequestExtraParams"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (on-unauthenticated-request :initarg
                         :on-unauthenticated-request :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          authenticate-oidc-action-conditional-behavior-enum
                          common-lisp:null)
                         :accessor
                         struct-shape-authenticate-oidc-action-config-on-unauthenticated-request
                         :shape "AuthenticateOidcActionConditionalBehaviorEnum"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (use-existing-client-secret :initarg
                         :use-existing-client-secret :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          authenticate-oidc-action-use-existing-client-secret
                          common-lisp:null)
                         :accessor
                         struct-shape-authenticate-oidc-action-config-use-existing-client-secret
                         :shape "AuthenticateOidcActionUseExistingClientSecret"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authenticate-oidc-action-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'authenticate-oidc-action-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authenticate-oidc-action-config
                    'make-authenticate-oidc-action-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authenticate-oidc-action-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authenticate-oidc-action-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-endpoint))
      (common-lisp:list
       (common-lisp:cons "AuthorizationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-endpoint))
      (common-lisp:list
       (common-lisp:cons "TokenEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-info-endpoint))
      (common-lisp:list
       (common-lisp:cons "UserInfoEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "ClientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-cookie-name))
      (common-lisp:list
       (common-lisp:cons "SessionCookieName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-timeout))
      (common-lisp:list
       (common-lisp:cons "SessionTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-request-extra-params))
      (common-lisp:list
       (common-lisp:cons "AuthenticationRequestExtraParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-unauthenticated-request))
      (common-lisp:list
       (common-lisp:cons "OnUnauthenticatedRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-existing-client-secret))
      (common-lisp:list
       (common-lisp:cons "UseExistingClientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authenticate-oidc-action-config))
   common-lisp:nil))
(common-lisp:deftype authenticate-oidc-action-issuer () 'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-scope () 'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-session-cookie-name ()
  'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-session-timeout ()
  'common-lisp:integer)
(common-lisp:deftype authenticate-oidc-action-token-endpoint ()
  'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-use-existing-client-secret ()
  'common-lisp:boolean)
(common-lisp:deftype authenticate-oidc-action-user-info-endpoint ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass availability-zone common-lisp:nil
                       ((zone-name :initarg :zone-name :initform
                         common-lisp:nil :type
                         (common-lisp:or zone-name common-lisp:null) :accessor
                         struct-shape-availability-zone-zone-name :shape
                         "ZoneName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-id :initarg :subnet-id :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-id common-lisp:null) :accessor
                         struct-shape-availability-zone-subnet-id :shape
                         "SubnetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (outpost-id :initarg :outpost-id :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-id common-lisp:null) :accessor
                         struct-shape-availability-zone-outpost-id :shape
                         "OutpostId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (load-balancer-addresses :initarg
                         :load-balancer-addresses :initform common-lisp:nil
                         :type
                         (common-lisp:or load-balancer-addresses
                                         common-lisp:null)
                         :accessor
                         struct-shape-availability-zone-load-balancer-addresses
                         :shape "LoadBalancerAddresses" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-availability-zone
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'availability-zone
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'availability-zone 'make-availability-zone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zone-name))
      (common-lisp:list
       (common-lisp:cons "ZoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-id))
      (common-lisp:list
       (common-lisp:cons "OutpostId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-addresses))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition availability-zone-not-supported-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'availability-zone-not-supported-exception)))
(common-lisp:progn
 (common-lisp:deftype availability-zones ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun make-availability-zones
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition ca-certificates-bundle-not-found-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'ca-certificates-bundle-not-found-exception)))
(common-lisp:deftype canonical-hosted-zone-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass certificate common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor struct-shape-certificate-certificate-arn
                         :shape "CertificateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-default :initarg :is-default :initform
                         common-lisp:nil :type
                         (common-lisp:or default common-lisp:null) :accessor
                         struct-shape-certificate-is-default :shape "Default"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:deftype certificate-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype certificate-list ()
   '(trivial-types:proper-list certificate))
 (common-lisp:defun make-certificate-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition certificate-not-found-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'certificate-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass cipher common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or cipher-name common-lisp:null)
                         :accessor struct-shape-cipher-name :shape "CipherName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (priority :initarg :priority :initform common-lisp:nil
                         :type
                         (common-lisp:or cipher-priority common-lisp:null)
                         :accessor struct-shape-cipher-priority :shape
                         "CipherPriority" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cipher
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cipher
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cipher 'make-cipher))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cipher))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cipher))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cipher))
   common-lisp:nil))
(common-lisp:deftype cipher-name () 'common-lisp:string)
(common-lisp:deftype cipher-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype ciphers () '(trivial-types:proper-list cipher))
 (common-lisp:defun make-ciphers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cipher))
   aws-sdk/generator/shape::members))
(common-lisp:deftype condition-field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-listener-input common-lisp:nil
                       ((load-balancer-arn :initarg :load-balancer-arn
                         :initform
                         (common-lisp:error ":load-balancer-arn is required")
                         :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor
                         struct-shape-create-listener-input-load-balancer-arn
                         :shape "LoadBalancerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or protocol-enum common-lisp:null)
                         :accessor struct-shape-create-listener-input-protocol
                         :shape "ProtocolEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-create-listener-input-port :shape "Port"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ssl-policy :initarg :ssl-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or ssl-policy-name common-lisp:null)
                         :accessor
                         struct-shape-create-listener-input-ssl-policy :shape
                         "SslPolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificates :initarg :certificates :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor
                         struct-shape-create-listener-input-certificates :shape
                         "CertificateList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-actions :initarg :default-actions :initform
                         (common-lisp:error ":default-actions is required")
                         :type (common-lisp:or actions common-lisp:null)
                         :accessor
                         struct-shape-create-listener-input-default-actions
                         :shape "Actions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alpn-policy :initarg :alpn-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or alpn-policy-name common-lisp:null)
                         :accessor
                         struct-shape-create-listener-input-alpn-policy :shape
                         "AlpnPolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-listener-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mutual-authentication :initarg :mutual-authentication
                         :initform common-lisp:nil :type
                         (common-lisp:or mutual-authentication-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-listener-input-mutual-authentication
                         :shape "MutualAuthenticationAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-listener-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-listener-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-listener-input 'make-create-listener-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-policy))
      (common-lisp:list
       (common-lisp:cons "SslPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-actions))
      (common-lisp:list
       (common-lisp:cons "DefaultActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alpn-policy))
      (common-lisp:list
       (common-lisp:cons "AlpnPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mutual-authentication))
      (common-lisp:list
       (common-lisp:cons "MutualAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-listener-output common-lisp:nil
                       ((listeners :initarg :listeners :initform
                         common-lisp:nil :type
                         (common-lisp:or listeners common-lisp:null) :accessor
                         struct-shape-create-listener-output-listeners :shape
                         "Listeners" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-listener-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-listener-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-listener-output 'make-create-listener-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "Listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-load-balancer-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or load-balancer-name common-lisp:null)
                         :accessor struct-shape-create-load-balancer-input-name
                         :shape "LoadBalancerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnets :initarg :subnets :initform common-lisp:nil
                         :type (common-lisp:or subnets common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-input-subnets :shape
                         "Subnets" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-mappings :initarg :subnet-mappings :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-mappings common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-input-subnet-mappings
                         :shape "SubnetMappings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-groups :initarg :security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-input-security-groups
                         :shape "SecurityGroups" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scheme :initarg :scheme :initform common-lisp:nil
                         :type
                         (common-lisp:or load-balancer-scheme-enum
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-input-scheme :shape
                         "LoadBalancerSchemeEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-load-balancer-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or load-balancer-type-enum
                                         common-lisp:null)
                         :accessor struct-shape-create-load-balancer-input-type
                         :shape "LoadBalancerTypeEnum" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-input-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-owned-ipv4pool :initarg
                         :customer-owned-ipv4pool :initform common-lisp:nil
                         :type
                         (common-lisp:or customer-owned-ipv4pool
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-input-customer-owned-ipv4pool
                         :shape "CustomerOwnedIpv4Pool" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-load-balancer-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-load-balancer-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-input
                    'make-create-load-balancer-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-mappings))
      (common-lisp:list
       (common-lisp:cons "SubnetMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheme))
      (common-lisp:list
       (common-lisp:cons "Scheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-owned-ipv4pool))
      (common-lisp:list
       (common-lisp:cons "CustomerOwnedIpv4Pool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-load-balancer-output common-lisp:nil
                       ((load-balancers :initarg :load-balancers :initform
                         common-lisp:nil :type
                         (common-lisp:or load-balancers common-lisp:null)
                         :accessor
                         struct-shape-create-load-balancer-output-load-balancers
                         :shape "LoadBalancers" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-load-balancer-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-load-balancer-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-output
                    'make-create-load-balancer-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "LoadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-rule-input common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         (common-lisp:error ":listener-arn is required") :type
                         (common-lisp:or listener-arn common-lisp:null)
                         :accessor struct-shape-create-rule-input-listener-arn
                         :shape "ListenerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conditions :initarg :conditions :initform
                         (common-lisp:error ":conditions is required") :type
                         (common-lisp:or rule-condition-list common-lisp:null)
                         :accessor struct-shape-create-rule-input-conditions
                         :shape "RuleConditionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (priority :initarg :priority :initform
                         (common-lisp:error ":priority is required") :type
                         (common-lisp:or rule-priority common-lisp:null)
                         :accessor struct-shape-create-rule-input-priority
                         :shape "RulePriority" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform
                         (common-lisp:error ":actions is required") :type
                         (common-lisp:or actions common-lisp:null) :accessor
                         struct-shape-create-rule-input-actions :shape
                         "Actions" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-rule-input-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-rule-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-rule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-rule-input 'make-create-rule-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-rule-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditions))
      (common-lisp:list
       (common-lisp:cons "Conditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-rule-output common-lisp:nil
                       ((rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or rules common-lisp:null) :accessor
                         struct-shape-create-rule-output-rules :shape "Rules"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-rule-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-rule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-rule-output 'make-create-rule-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-rule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-target-group-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or target-group-name common-lisp:null)
                         :accessor struct-shape-create-target-group-input-name
                         :shape "TargetGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or protocol-enum common-lisp:null)
                         :accessor
                         struct-shape-create-target-group-input-protocol :shape
                         "ProtocolEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol-version :initarg :protocol-version :initform
                         common-lisp:nil :type
                         (common-lisp:or protocol-version common-lisp:null)
                         :accessor
                         struct-shape-create-target-group-input-protocol-version
                         :shape "ProtocolVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-create-target-group-input-port :shape
                         "Port" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or vpc-id common-lisp:null)
                         :accessor
                         struct-shape-create-target-group-input-vpc-id :shape
                         "VpcId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (health-check-protocol :initarg :health-check-protocol
                         :initform common-lisp:nil :type
                         (common-lisp:or protocol-enum common-lisp:null)
                         :accessor
                         struct-shape-create-target-group-input-health-check-protocol
                         :shape "ProtocolEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-port :initarg :health-check-port
                         :initform common-lisp:nil :type
                         (common-lisp:or health-check-port common-lisp:null)
                         :accessor
                         struct-shape-create-target-group-input-health-check-port
                         :shape "HealthCheckPort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-enabled :initarg :health-check-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or health-check-enabled common-lisp:null)
                         :accessor
                         struct-shape-create-target-group-input-health-check-enabled
                         :shape "HealthCheckEnabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-path :initarg :health-check-path
                         :initform common-lisp:nil :type
                         (common-lisp:or path common-lisp:null) :accessor
                         struct-shape-create-target-group-input-health-check-path
                         :shape "Path" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (health-check-interval-seconds :initarg
                         :health-check-interval-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or health-check-interval-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-target-group-input-health-check-interval-seconds
                         :shape "HealthCheckIntervalSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (health-check-timeout-seconds :initarg
                         :health-check-timeout-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or health-check-timeout-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-target-group-input-health-check-timeout-seconds
                         :shape "HealthCheckTimeoutSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (healthy-threshold-count :initarg
                         :healthy-threshold-count :initform common-lisp:nil
                         :type
                         (common-lisp:or health-check-threshold-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-target-group-input-healthy-threshold-count
                         :shape "HealthCheckThresholdCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unhealthy-threshold-count :initarg
                         :unhealthy-threshold-count :initform common-lisp:nil
                         :type
                         (common-lisp:or health-check-threshold-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-target-group-input-unhealthy-threshold-count
                         :shape "HealthCheckThresholdCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (matcher :initarg :matcher :initform common-lisp:nil
                         :type (common-lisp:or matcher common-lisp:null)
                         :accessor
                         struct-shape-create-target-group-input-matcher :shape
                         "Matcher" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-type :initarg :target-type :initform
                         common-lisp:nil :type
                         (common-lisp:or target-type-enum common-lisp:null)
                         :accessor
                         struct-shape-create-target-group-input-target-type
                         :shape "TargetTypeEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-target-group-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or target-group-ip-address-type-enum
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-target-group-input-ip-address-type
                         :shape "TargetGroupIpAddressTypeEnum" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-target-group-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-target-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-target-group-input
                    'make-create-target-group-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-target-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-target-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-version))
      (common-lisp:list
       (common-lisp:cons "ProtocolVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-protocol))
      (common-lisp:list
       (common-lisp:cons "HealthCheckProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-port))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-enabled))
      (common-lisp:list
       (common-lisp:cons "HealthCheckEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-path))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-interval-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckIntervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'healthy-threshold-count))
      (common-lisp:list
       (common-lisp:cons "HealthyThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unhealthy-threshold-count))
      (common-lisp:list
       (common-lisp:cons "UnhealthyThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matcher))
      (common-lisp:list
       (common-lisp:cons "Matcher"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "TargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-target-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-target-group-output common-lisp:nil
                       ((target-groups :initarg :target-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or target-groups common-lisp:null)
                         :accessor
                         struct-shape-create-target-group-output-target-groups
                         :shape "TargetGroups" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-target-group-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-target-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-target-group-output
                    'make-create-target-group-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-target-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-target-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-groups))
      (common-lisp:list
       (common-lisp:cons "TargetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-target-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-trust-store-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or trust-store-name common-lisp:null)
                         :accessor struct-shape-create-trust-store-input-name
                         :shape "TrustStoreName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ca-certificates-bundle-s3bucket :initarg
                         :ca-certificates-bundle-s3bucket :initform
                         (common-lisp:error
                          ":ca-certificates-bundle-s3bucket is required")
                         :type (common-lisp:or s3bucket common-lisp:null)
                         :accessor
                         struct-shape-create-trust-store-input-ca-certificates-bundle-s3bucket
                         :shape "S3Bucket" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ca-certificates-bundle-s3key :initarg
                         :ca-certificates-bundle-s3key :initform
                         (common-lisp:error
                          ":ca-certificates-bundle-s3key is required")
                         :type (common-lisp:or s3key common-lisp:null)
                         :accessor
                         struct-shape-create-trust-store-input-ca-certificates-bundle-s3key
                         :shape "S3Key" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ca-certificates-bundle-s3object-version :initarg
                         :ca-certificates-bundle-s3object-version :initform
                         common-lisp:nil :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor
                         struct-shape-create-trust-store-input-ca-certificates-bundle-s3object-version
                         :shape "S3ObjectVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-trust-store-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-trust-store-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-trust-store-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-trust-store-input 'make-create-trust-store-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ca-certificates-bundle-s3bucket))
      (common-lisp:list
       (common-lisp:cons "CaCertificatesBundleS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ca-certificates-bundle-s3key))
      (common-lisp:list
       (common-lisp:cons "CaCertificatesBundleS3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ca-certificates-bundle-s3object-version))
      (common-lisp:list
       (common-lisp:cons "CaCertificatesBundleS3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-trust-store-output common-lisp:nil
                       ((trust-stores :initarg :trust-stores :initform
                         common-lisp:nil :type
                         (common-lisp:or trust-stores common-lisp:null)
                         :accessor
                         struct-shape-create-trust-store-output-trust-stores
                         :shape "TrustStores" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-trust-store-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-trust-store-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-trust-store-output
                    'make-create-trust-store-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-stores))
      (common-lisp:list
       (common-lisp:cons "TrustStores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-trust-store-output))
   common-lisp:nil))
(common-lisp:deftype created-time () 'common-lisp:string)
(common-lisp:deftype customer-owned-ipv4pool () 'common-lisp:string)
(common-lisp:deftype dnsname () 'common-lisp:string)
(common-lisp:deftype default () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass delete-listener-input common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         (common-lisp:error ":listener-arn is required") :type
                         (common-lisp:or listener-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-listener-input-listener-arn :shape
                         "ListenerArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-listener-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-listener-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-listener-input 'make-delete-listener-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-listener-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-listener-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-listener-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-listener-output 'make-delete-listener-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-load-balancer-input common-lisp:nil
                       ((load-balancer-arn :initarg :load-balancer-arn
                         :initform
                         (common-lisp:error ":load-balancer-arn is required")
                         :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-load-balancer-input-load-balancer-arn
                         :shape "LoadBalancerArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-load-balancer-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-load-balancer-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-input
                    'make-delete-load-balancer-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-load-balancer-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-load-balancer-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-load-balancer-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-output
                    'make-delete-load-balancer-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-rule-input common-lisp:nil
                       ((rule-arn :initarg :rule-arn :initform
                         (common-lisp:error ":rule-arn is required") :type
                         (common-lisp:or rule-arn common-lisp:null) :accessor
                         struct-shape-delete-rule-input-rule-arn :shape
                         "RuleArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-rule-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-rule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-rule-input 'make-delete-rule-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-rule-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "RuleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-rule-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-rule-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-rule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-rule-output 'make-delete-rule-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-target-group-input common-lisp:nil
                       ((target-group-arn :initarg :target-group-arn :initform
                         (common-lisp:error ":target-group-arn is required")
                         :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-target-group-input-target-group-arn
                         :shape "TargetGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-target-group-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-target-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-target-group-input
                    'make-delete-target-group-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-target-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-target-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-target-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-target-group-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-target-group-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-target-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-target-group-output
                    'make-delete-target-group-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-target-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-target-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-target-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-trust-store-input common-lisp:nil
                       ((trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":trust-store-arn is required")
                         :type
                         (common-lisp:or trust-store-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-trust-store-input-trust-store-arn
                         :shape "TrustStoreArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-trust-store-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-trust-store-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-trust-store-input 'make-delete-trust-store-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "TrustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-trust-store-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-trust-store-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-trust-store-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-trust-store-output
                    'make-delete-trust-store-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-trust-store-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-targets-input common-lisp:nil
                       ((target-group-arn :initarg :target-group-arn :initform
                         (common-lisp:error ":target-group-arn is required")
                         :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor
                         struct-shape-deregister-targets-input-target-group-arn
                         :shape "TargetGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (targets :initarg :targets :initform
                         (common-lisp:error ":targets is required") :type
                         (common-lisp:or target-descriptions common-lisp:null)
                         :accessor
                         struct-shape-deregister-targets-input-targets :shape
                         "TargetDescriptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-targets-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-targets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-targets-input 'make-deregister-targets-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-targets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-targets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-targets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-targets-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-targets-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-targets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-targets-output
                    'make-deregister-targets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-targets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-targets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-targets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-limits-input common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-describe-account-limits-input-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-describe-account-limits-input-page-size
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-account-limits-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-limits-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-input
                    'make-describe-account-limits-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-limits-output common-lisp:nil
                       ((limits :initarg :limits :initform common-lisp:nil
                         :type (common-lisp:or limits common-lisp:null)
                         :accessor
                         struct-shape-describe-account-limits-output-limits
                         :shape "Limits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-describe-account-limits-output-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-account-limits-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-limits-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-output
                    'make-describe-account-limits-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limits))
      (common-lisp:list
       (common-lisp:cons "Limits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-listener-certificates-input common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         (common-lisp:error ":listener-arn is required") :type
                         (common-lisp:or listener-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-listener-certificates-input-listener-arn
                         :shape "ListenerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-describe-listener-certificates-input-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-describe-listener-certificates-input-page-size
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-listener-certificates-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-listener-certificates-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-listener-certificates-input
                    'make-describe-listener-certificates-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-certificates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-certificates-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-certificates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-listener-certificates-output common-lisp:nil
                       ((certificates :initarg :certificates :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor
                         struct-shape-describe-listener-certificates-output-certificates
                         :shape "CertificateList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-describe-listener-certificates-output-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-listener-certificates-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-listener-certificates-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-listener-certificates-output
                    'make-describe-listener-certificates-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-certificates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-certificates-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-certificates-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-listeners-input common-lisp:nil
                       ((load-balancer-arn :initarg :load-balancer-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-listeners-input-load-balancer-arn
                         :shape "LoadBalancerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (listener-arns :initarg :listener-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or listener-arns common-lisp:null)
                         :accessor
                         struct-shape-describe-listeners-input-listener-arns
                         :shape "ListenerArns" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor struct-shape-describe-listeners-input-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-describe-listeners-input-page-size :shape
                         "PageSize" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-listeners-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-listeners-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-listeners-input 'make-describe-listeners-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-listeners-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-listeners-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arns))
      (common-lisp:list
       (common-lisp:cons "ListenerArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-listeners-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-listeners-output common-lisp:nil
                       ((listeners :initarg :listeners :initform
                         common-lisp:nil :type
                         (common-lisp:or listeners common-lisp:null) :accessor
                         struct-shape-describe-listeners-output-listeners
                         :shape "Listeners" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-describe-listeners-output-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-listeners-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-listeners-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-listeners-output
                    'make-describe-listeners-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-listeners-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-listeners-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "Listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-listeners-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancer-attributes-input common-lisp:nil
                       ((load-balancer-arn :initarg :load-balancer-arn
                         :initform
                         (common-lisp:error ":load-balancer-arn is required")
                         :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-load-balancer-attributes-input-load-balancer-arn
                         :shape "LoadBalancerArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-load-balancer-attributes-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancer-attributes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-attributes-input
                    'make-describe-load-balancer-attributes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancer-attributes-output common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or load-balancer-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-load-balancer-attributes-output-attributes
                         :shape "LoadBalancerAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-load-balancer-attributes-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancer-attributes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-attributes-output
                    'make-describe-load-balancer-attributes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancers-input common-lisp:nil
                       ((load-balancer-arns :initarg :load-balancer-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or load-balancer-arns common-lisp:null)
                         :accessor
                         struct-shape-describe-load-balancers-input-load-balancer-arns
                         :shape "LoadBalancerArns" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (names :initarg :names :initform common-lisp:nil :type
                         (common-lisp:or load-balancer-names common-lisp:null)
                         :accessor
                         struct-shape-describe-load-balancers-input-names
                         :shape "LoadBalancerNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-describe-load-balancers-input-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-describe-load-balancers-input-page-size
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-load-balancers-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancers-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancers-input
                    'make-describe-load-balancers-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arns))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancers-output common-lisp:nil
                       ((load-balancers :initarg :load-balancers :initform
                         common-lisp:nil :type
                         (common-lisp:or load-balancers common-lisp:null)
                         :accessor
                         struct-shape-describe-load-balancers-output-load-balancers
                         :shape "LoadBalancers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-describe-load-balancers-output-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-load-balancers-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancers-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancers-output
                    'make-describe-load-balancers-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "LoadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-rules-input common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or listener-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-rules-input-listener-arn :shape
                         "ListenerArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rule-arns :initarg :rule-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or rule-arns common-lisp:null) :accessor
                         struct-shape-describe-rules-input-rule-arns :shape
                         "RuleArns" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor struct-shape-describe-rules-input-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-describe-rules-input-page-size :shape
                         "PageSize" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-rules-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-rules-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-rules-input 'make-describe-rules-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-rules-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-rules-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arns))
      (common-lisp:list
       (common-lisp:cons "RuleArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-rules-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-rules-output common-lisp:nil
                       ((rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or rules common-lisp:null) :accessor
                         struct-shape-describe-rules-output-rules :shape
                         "Rules" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-describe-rules-output-next-marker :shape
                         "Marker" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-rules-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-rules-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-rules-output 'make-describe-rules-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-sslpolicies-input common-lisp:nil
                       ((names :initarg :names :initform common-lisp:nil :type
                         (common-lisp:or ssl-policy-names common-lisp:null)
                         :accessor
                         struct-shape-describe-sslpolicies-input-names :shape
                         "SslPolicyNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-describe-sslpolicies-input-marker :shape
                         "Marker" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-describe-sslpolicies-input-page-size
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (load-balancer-type :initarg :load-balancer-type
                         :initform common-lisp:nil :type
                         (common-lisp:or load-balancer-type-enum
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-sslpolicies-input-load-balancer-type
                         :shape "LoadBalancerTypeEnum" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-sslpolicies-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-sslpolicies-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-sslpolicies-input
                    'make-describe-sslpolicies-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-sslpolicies-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-sslpolicies-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-type))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-sslpolicies-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-sslpolicies-output common-lisp:nil
                       ((ssl-policies :initarg :ssl-policies :initform
                         common-lisp:nil :type
                         (common-lisp:or ssl-policies common-lisp:null)
                         :accessor
                         struct-shape-describe-sslpolicies-output-ssl-policies
                         :shape "SslPolicies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-describe-sslpolicies-output-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-sslpolicies-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-sslpolicies-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-sslpolicies-output
                    'make-describe-sslpolicies-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-sslpolicies-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-sslpolicies-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-policies))
      (common-lisp:list
       (common-lisp:cons "SslPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-sslpolicies-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-input common-lisp:nil
                       ((resource-arns :initarg :resource-arns :initform
                         (common-lisp:error ":resource-arns is required") :type
                         (common-lisp:or resource-arns common-lisp:null)
                         :accessor
                         struct-shape-describe-tags-input-resource-arns :shape
                         "ResourceArns" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-tags-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-tags-input 'make-describe-tags-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "ResourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-output common-lisp:nil
                       ((tag-descriptions :initarg :tag-descriptions :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-descriptions common-lisp:null)
                         :accessor
                         struct-shape-describe-tags-output-tag-descriptions
                         :shape "TagDescriptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-tags-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-tags-output 'make-describe-tags-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-tags-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-descriptions))
      (common-lisp:list
       (common-lisp:cons "TagDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-tags-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-target-group-attributes-input common-lisp:nil
                       ((target-group-arn :initarg :target-group-arn :initform
                         (common-lisp:error ":target-group-arn is required")
                         :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-target-group-attributes-input-target-group-arn
                         :shape "TargetGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-target-group-attributes-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-target-group-attributes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-target-group-attributes-input
                    'make-describe-target-group-attributes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-group-attributes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-group-attributes-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-group-attributes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-target-group-attributes-output common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or target-group-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-target-group-attributes-output-attributes
                         :shape "TargetGroupAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-target-group-attributes-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-target-group-attributes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-target-group-attributes-output
                    'make-describe-target-group-attributes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-group-attributes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-group-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-group-attributes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-target-groups-input common-lisp:nil
                       ((load-balancer-arn :initarg :load-balancer-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-target-groups-input-load-balancer-arn
                         :shape "LoadBalancerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-group-arns :initarg :target-group-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or target-group-arns common-lisp:null)
                         :accessor
                         struct-shape-describe-target-groups-input-target-group-arns
                         :shape "TargetGroupArns" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (names :initarg :names :initform common-lisp:nil :type
                         (common-lisp:or target-group-names common-lisp:null)
                         :accessor
                         struct-shape-describe-target-groups-input-names :shape
                         "TargetGroupNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-describe-target-groups-input-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-describe-target-groups-input-page-size
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-target-groups-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-target-groups-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-target-groups-input
                    'make-describe-target-groups-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-groups-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-groups-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arns))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-groups-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-target-groups-output common-lisp:nil
                       ((target-groups :initarg :target-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or target-groups common-lisp:null)
                         :accessor
                         struct-shape-describe-target-groups-output-target-groups
                         :shape "TargetGroups" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-describe-target-groups-output-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-target-groups-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-target-groups-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-target-groups-output
                    'make-describe-target-groups-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-groups-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-groups-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-groups))
      (common-lisp:list
       (common-lisp:cons "TargetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-groups-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-target-health-input common-lisp:nil
                       ((target-group-arn :initarg :target-group-arn :initform
                         (common-lisp:error ":target-group-arn is required")
                         :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-target-health-input-target-group-arn
                         :shape "TargetGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (targets :initarg :targets :initform common-lisp:nil
                         :type
                         (common-lisp:or target-descriptions common-lisp:null)
                         :accessor
                         struct-shape-describe-target-health-input-targets
                         :shape "TargetDescriptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include :initarg :include :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          list-of-describe-target-health-include-options
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-target-health-input-include
                         :shape "ListOfDescribeTargetHealthIncludeOptions"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-target-health-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-target-health-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-target-health-input
                    'make-describe-target-health-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-health-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-health-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "Include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-health-input))
   common-lisp:nil))
(common-lisp:deftype describe-target-health-input-include-enum ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass describe-target-health-output common-lisp:nil
                       ((target-health-descriptions :initarg
                         :target-health-descriptions :initform common-lisp:nil
                         :type
                         (common-lisp:or target-health-descriptions
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-target-health-output-target-health-descriptions
                         :shape "TargetHealthDescriptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-target-health-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-target-health-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-target-health-output
                    'make-describe-target-health-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-health-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-health-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-health-descriptions))
      (common-lisp:list
       (common-lisp:cons "TargetHealthDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-health-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-trust-store-associations-input common-lisp:nil
                       ((trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":trust-store-arn is required")
                         :type
                         (common-lisp:or trust-store-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-trust-store-associations-input-trust-store-arn
                         :shape "TrustStoreArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-describe-trust-store-associations-input-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-describe-trust-store-associations-input-page-size
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-trust-store-associations-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-trust-store-associations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-trust-store-associations-input
                    'make-describe-trust-store-associations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-store-associations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-store-associations-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "TrustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-store-associations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-trust-store-associations-output common-lisp:nil
                       ((trust-store-associations :initarg
                         :trust-store-associations :initform common-lisp:nil
                         :type
                         (common-lisp:or trust-store-associations
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-trust-store-associations-output-trust-store-associations
                         :shape "TrustStoreAssociations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-describe-trust-store-associations-output-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-trust-store-associations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-trust-store-associations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-trust-store-associations-output
                    'make-describe-trust-store-associations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-store-associations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-store-associations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trust-store-associations))
      (common-lisp:list
       (common-lisp:cons "TrustStoreAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-store-associations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-trust-store-revocation common-lisp:nil
                       ((trust-store-arn :initarg :trust-store-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or trust-store-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-trust-store-revocation-trust-store-arn
                         :shape "TrustStoreArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revocation-id :initarg :revocation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or revocation-id common-lisp:null)
                         :accessor
                         struct-shape-describe-trust-store-revocation-revocation-id
                         :shape "RevocationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revocation-type :initarg :revocation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or revocation-type common-lisp:null)
                         :accessor
                         struct-shape-describe-trust-store-revocation-revocation-type
                         :shape "RevocationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-revoked-entries :initarg
                         :number-of-revoked-entries :initform common-lisp:nil
                         :type
                         (common-lisp:or number-of-revoked-entries
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-trust-store-revocation-number-of-revoked-entries
                         :shape "NumberOfRevokedEntries" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-trust-store-revocation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-trust-store-revocation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-trust-store-revocation
                    'make-describe-trust-store-revocation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-store-revocation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-store-revocation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "TrustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-id))
      (common-lisp:list
       (common-lisp:cons "RevocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-type))
      (common-lisp:list
       (common-lisp:cons "RevocationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-revoked-entries))
      (common-lisp:list
       (common-lisp:cons "NumberOfRevokedEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-store-revocation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype describe-trust-store-revocation-response ()
   '(trivial-types:proper-list describe-trust-store-revocation))
 (common-lisp:defun make-describe-trust-store-revocation-response
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            describe-trust-store-revocation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass describe-trust-store-revocations-input common-lisp:nil
                       ((trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":trust-store-arn is required")
                         :type
                         (common-lisp:or trust-store-arn common-lisp:null)
                         :accessor
                         struct-shape-describe-trust-store-revocations-input-trust-store-arn
                         :shape "TrustStoreArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revocation-ids :initarg :revocation-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or revocation-ids common-lisp:null)
                         :accessor
                         struct-shape-describe-trust-store-revocations-input-revocation-ids
                         :shape "RevocationIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-describe-trust-store-revocations-input-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-describe-trust-store-revocations-input-page-size
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-trust-store-revocations-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-trust-store-revocations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-trust-store-revocations-input
                    'make-describe-trust-store-revocations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-store-revocations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-store-revocations-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "TrustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-ids))
      (common-lisp:list
       (common-lisp:cons "RevocationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-store-revocations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-trust-store-revocations-output common-lisp:nil
                       ((trust-store-revocations :initarg
                         :trust-store-revocations :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          describe-trust-store-revocation-response
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-trust-store-revocations-output-trust-store-revocations
                         :shape "DescribeTrustStoreRevocationResponse"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-describe-trust-store-revocations-output-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-trust-store-revocations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-trust-store-revocations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-trust-store-revocations-output
                    'make-describe-trust-store-revocations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-store-revocations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-store-revocations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trust-store-revocations))
      (common-lisp:list
       (common-lisp:cons "TrustStoreRevocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-store-revocations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-trust-stores-input common-lisp:nil
                       ((trust-store-arns :initarg :trust-store-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or trust-store-arns common-lisp:null)
                         :accessor
                         struct-shape-describe-trust-stores-input-trust-store-arns
                         :shape "TrustStoreArns" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (names :initarg :names :initform common-lisp:nil :type
                         (common-lisp:or trust-store-names common-lisp:null)
                         :accessor
                         struct-shape-describe-trust-stores-input-names :shape
                         "TrustStoreNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor
                         struct-shape-describe-trust-stores-input-marker :shape
                         "Marker" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-describe-trust-stores-input-page-size
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-trust-stores-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-trust-stores-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-trust-stores-input
                    'make-describe-trust-stores-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-stores-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-stores-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arns))
      (common-lisp:list
       (common-lisp:cons "TrustStoreArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-stores-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-trust-stores-output common-lisp:nil
                       ((trust-stores :initarg :trust-stores :initform
                         common-lisp:nil :type
                         (common-lisp:or trust-stores common-lisp:null)
                         :accessor
                         struct-shape-describe-trust-stores-output-trust-stores
                         :shape "TrustStores" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         struct-shape-describe-trust-stores-output-next-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-trust-stores-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-trust-stores-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-trust-stores-output
                    'make-describe-trust-stores-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-stores-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-stores-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-stores))
      (common-lisp:list
       (common-lisp:cons "TrustStores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trust-stores-output))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition duplicate-listener-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-listener-exception)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-load-balancer-name-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'duplicate-load-balancer-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-tag-keys-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-tag-keys-exception)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-target-group-name-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-target-group-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-trust-store-name-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-trust-store-name-exception)))
(common-lisp:deftype enforce-security-group-inbound-rules-on-private-link-traffic
                     ()
  'common-lisp:string)
(common-lisp:deftype enforce-security-group-inbound-rules-on-private-link-traffic-enum
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fixed-response-action-config common-lisp:nil
                       ((message-body :initarg :message-body :initform
                         common-lisp:nil :type
                         (common-lisp:or fixed-response-action-message
                                         common-lisp:null)
                         :accessor
                         struct-shape-fixed-response-action-config-message-body
                         :shape "FixedResponseActionMessage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         (common-lisp:error ":status-code is required") :type
                         (common-lisp:or fixed-response-action-status-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-fixed-response-action-config-status-code
                         :shape "FixedResponseActionStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or fixed-response-action-content-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-fixed-response-action-config-content-type
                         :shape "FixedResponseActionContentType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fixed-response-action-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fixed-response-action-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fixed-response-action-config
                    'make-fixed-response-action-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fixed-response-action-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fixed-response-action-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fixed-response-action-config))
   common-lisp:nil))
(common-lisp:deftype fixed-response-action-content-type () 'common-lisp:string)
(common-lisp:deftype fixed-response-action-message () 'common-lisp:string)
(common-lisp:deftype fixed-response-action-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass forward-action-config common-lisp:nil
                       ((target-groups :initarg :target-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or target-group-list common-lisp:null)
                         :accessor
                         struct-shape-forward-action-config-target-groups
                         :shape "TargetGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-group-stickiness-config :initarg
                         :target-group-stickiness-config :initform
                         common-lisp:nil :type
                         (common-lisp:or target-group-stickiness-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-forward-action-config-target-group-stickiness-config
                         :shape "TargetGroupStickinessConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-forward-action-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'forward-action-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'forward-action-config 'make-forward-action-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          forward-action-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          forward-action-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-groups))
      (common-lisp:list
       (common-lisp:cons "TargetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-group-stickiness-config))
      (common-lisp:list
       (common-lisp:cons "TargetGroupStickinessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          forward-action-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trust-store-ca-certificates-bundle-input
                       common-lisp:nil
                       ((trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":trust-store-arn is required")
                         :type
                         (common-lisp:or trust-store-arn common-lisp:null)
                         :accessor
                         struct-shape-get-trust-store-ca-certificates-bundle-input-trust-store-arn
                         :shape "TrustStoreArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-trust-store-ca-certificates-bundle-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-trust-store-ca-certificates-bundle-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-trust-store-ca-certificates-bundle-input
                    'make-get-trust-store-ca-certificates-bundle-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-ca-certificates-bundle-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-ca-certificates-bundle-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "TrustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-ca-certificates-bundle-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trust-store-ca-certificates-bundle-output
                       common-lisp:nil
                       ((location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location common-lisp:null)
                         :accessor
                         struct-shape-get-trust-store-ca-certificates-bundle-output-location
                         :shape "Location" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-trust-store-ca-certificates-bundle-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-trust-store-ca-certificates-bundle-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-trust-store-ca-certificates-bundle-output
                    'make-get-trust-store-ca-certificates-bundle-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-ca-certificates-bundle-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-ca-certificates-bundle-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-ca-certificates-bundle-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trust-store-revocation-content-input common-lisp:nil
                       ((trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":trust-store-arn is required")
                         :type
                         (common-lisp:or trust-store-arn common-lisp:null)
                         :accessor
                         struct-shape-get-trust-store-revocation-content-input-trust-store-arn
                         :shape "TrustStoreArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revocation-id :initarg :revocation-id :initform
                         (common-lisp:error ":revocation-id is required") :type
                         (common-lisp:or revocation-id common-lisp:null)
                         :accessor
                         struct-shape-get-trust-store-revocation-content-input-revocation-id
                         :shape "RevocationId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-trust-store-revocation-content-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-trust-store-revocation-content-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-trust-store-revocation-content-input
                    'make-get-trust-store-revocation-content-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-revocation-content-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-revocation-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "TrustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-id))
      (common-lisp:list
       (common-lisp:cons "RevocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-revocation-content-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trust-store-revocation-content-output
                       common-lisp:nil
                       ((location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location common-lisp:null)
                         :accessor
                         struct-shape-get-trust-store-revocation-content-output-location
                         :shape "Location" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-trust-store-revocation-content-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-trust-store-revocation-content-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-trust-store-revocation-content-output
                    'make-get-trust-store-revocation-content-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-revocation-content-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-revocation-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trust-store-revocation-content-output))
   common-lisp:nil))
(common-lisp:deftype grpc-code () 'common-lisp:string)
(common-lisp:deftype health-check-enabled () 'common-lisp:boolean)
(common-lisp:deftype health-check-interval-seconds () 'common-lisp:integer)
(common-lisp:deftype health-check-port () 'common-lisp:string)
(common-lisp:deftype health-check-threshold-count () 'common-lisp:integer)
(common-lisp:deftype health-check-timeout-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition health-unavailable-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'health-unavailable-exception)))
(common-lisp:progn
 (common-lisp:defclass host-header-condition-config common-lisp:nil
                       ((values :initarg :values :initform common-lisp:nil
                         :type (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         struct-shape-host-header-condition-config-values
                         :shape "ListOfString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-host-header-condition-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'host-header-condition-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'host-header-condition-config
                    'make-host-header-condition-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          host-header-condition-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          host-header-condition-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          host-header-condition-config))
   common-lisp:nil))
(common-lisp:deftype http-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-header-condition-config common-lisp:nil
                       ((http-header-name :initarg :http-header-name :initform
                         common-lisp:nil :type
                         (common-lisp:or http-header-condition-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-http-header-condition-config-http-header-name
                         :shape "HttpHeaderConditionName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         struct-shape-http-header-condition-config-values
                         :shape "ListOfString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-header-condition-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-header-condition-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-header-condition-config
                    'make-http-header-condition-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-header-condition-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-header-condition-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-header-name))
      (common-lisp:list
       (common-lisp:cons "HttpHeaderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-header-condition-config))
   common-lisp:nil))
(common-lisp:deftype http-header-condition-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-request-method-condition-config common-lisp:nil
                       ((values :initarg :values :initform common-lisp:nil
                         :type (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         struct-shape-http-request-method-condition-config-values
                         :shape "ListOfString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-request-method-condition-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'http-request-method-condition-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-request-method-condition-config
                    'make-http-request-method-condition-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-request-method-condition-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-request-method-condition-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-request-method-condition-config))
   common-lisp:nil))
(common-lisp:deftype ipv6address () 'common-lisp:string)
(common-lisp:deftype ignore-client-certificate-expiry () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition incompatible-protocols-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'incompatible-protocols-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-ca-certificates-bundle-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-ca-certificates-bundle-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-configuration-request-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-configuration-request-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-load-balancer-action-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-load-balancer-action-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-revocation-content-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-revocation-content-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-scheme-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-scheme-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-security-group-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-security-group-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-subnet-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-target-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-target-exception)))
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:deftype ip-address-type () 'common-lisp:string)
(common-lisp:deftype is-default () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass limit common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-limit-name :shape "Name" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max :initarg :max :initform common-lisp:nil :type
                         (common-lisp:or max common-lisp:null) :accessor
                         struct-shape-limit-max :shape "Max" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-limit
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'limit
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'limit 'make-limit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype limits () '(trivial-types:proper-list limit))
 (common-lisp:defun make-limits
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list limit))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-describe-target-health-include-options ()
   '(trivial-types:proper-list describe-target-health-input-include-enum))
 (common-lisp:defun make-list-of-describe-target-health-include-options
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            describe-target-health-input-include-enum))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-string ()
   '(trivial-types:proper-list string-value))
 (common-lisp:defun make-list-of-string
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass listener common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or listener-arn common-lisp:null)
                         :accessor struct-shape-listener-listener-arn :shape
                         "ListenerArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (load-balancer-arn :initarg :load-balancer-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor struct-shape-listener-load-balancer-arn
                         :shape "LoadBalancerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-listener-port :shape "Port" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or protocol-enum common-lisp:null)
                         :accessor struct-shape-listener-protocol :shape
                         "ProtocolEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificates :initarg :certificates :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor struct-shape-listener-certificates :shape
                         "CertificateList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssl-policy :initarg :ssl-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or ssl-policy-name common-lisp:null)
                         :accessor struct-shape-listener-ssl-policy :shape
                         "SslPolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-actions :initarg :default-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or actions common-lisp:null) :accessor
                         struct-shape-listener-default-actions :shape "Actions"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (alpn-policy :initarg :alpn-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or alpn-policy-name common-lisp:null)
                         :accessor struct-shape-listener-alpn-policy :shape
                         "AlpnPolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mutual-authentication :initarg :mutual-authentication
                         :initform common-lisp:nil :type
                         (common-lisp:or mutual-authentication-attributes
                                         common-lisp:null)
                         :accessor struct-shape-listener-mutual-authentication
                         :shape "MutualAuthenticationAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listener
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'listener
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'listener 'make-listener))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-policy))
      (common-lisp:list
       (common-lisp:cons "SslPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-actions))
      (common-lisp:list
       (common-lisp:cons "DefaultActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alpn-policy))
      (common-lisp:list
       (common-lisp:cons "AlpnPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mutual-authentication))
      (common-lisp:list
       (common-lisp:cons "MutualAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener))
   common-lisp:nil))
(common-lisp:deftype listener-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype listener-arns ()
   '(trivial-types:proper-list listener-arn))
 (common-lisp:defun make-listener-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listener-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition listener-not-found-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'listener-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype listeners () '(trivial-types:proper-list listener))
 (common-lisp:defun make-listeners
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listener))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass load-balancer common-lisp:nil
                       ((load-balancer-arn :initarg :load-balancer-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor struct-shape-load-balancer-load-balancer-arn
                         :shape "LoadBalancerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dnsname :initarg :dnsname :initform common-lisp:nil
                         :type (common-lisp:or dnsname common-lisp:null)
                         :accessor struct-shape-load-balancer-dnsname :shape
                         "DNSName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (canonical-hosted-zone-id :initarg
                         :canonical-hosted-zone-id :initform common-lisp:nil
                         :type
                         (common-lisp:or canonical-hosted-zone-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-canonical-hosted-zone-id
                         :shape "CanonicalHostedZoneId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or created-time common-lisp:null)
                         :accessor struct-shape-load-balancer-created-time
                         :shape "CreatedTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (load-balancer-name :initarg :load-balancer-name
                         :initform common-lisp:nil :type
                         (common-lisp:or load-balancer-name common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-load-balancer-name :shape
                         "LoadBalancerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scheme :initarg :scheme :initform common-lisp:nil
                         :type
                         (common-lisp:or load-balancer-scheme-enum
                                         common-lisp:null)
                         :accessor struct-shape-load-balancer-scheme :shape
                         "LoadBalancerSchemeEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or vpc-id common-lisp:null)
                         :accessor struct-shape-load-balancer-vpc-id :shape
                         "VpcId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or load-balancer-state common-lisp:null)
                         :accessor struct-shape-load-balancer-state :shape
                         "LoadBalancerState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or load-balancer-type-enum
                                         common-lisp:null)
                         :accessor struct-shape-load-balancer-type :shape
                         "LoadBalancerTypeEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-availability-zones :shape
                         "AvailabilityZones" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-groups :initarg :security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor struct-shape-load-balancer-security-groups
                         :shape "SecurityGroups" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor struct-shape-load-balancer-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-owned-ipv4pool :initarg
                         :customer-owned-ipv4pool :initform common-lisp:nil
                         :type
                         (common-lisp:or customer-owned-ipv4pool
                                         common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-customer-owned-ipv4pool
                         :shape "CustomerOwnedIpv4Pool" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enforce-security-group-inbound-rules-on-private-link-traffic
                         :initarg
                         :enforce-security-group-inbound-rules-on-private-link-traffic
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          enforce-security-group-inbound-rules-on-private-link-traffic
                          common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-enforce-security-group-inbound-rules-on-private-link-traffic
                         :shape
                         "EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-load-balancer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'load-balancer 'make-load-balancer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-balancer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-balancer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnsname))
      (common-lisp:list
       (common-lisp:cons "DNSName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canonical-hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "CanonicalHostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheme))
      (common-lisp:list
       (common-lisp:cons "Scheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-owned-ipv4pool))
      (common-lisp:list
       (common-lisp:cons "CustomerOwnedIpv4Pool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enforce-security-group-inbound-rules-on-private-link-traffic))
      (common-lisp:list
       (common-lisp:cons "EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-balancer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass load-balancer-address common-lisp:nil
                       ((ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         struct-shape-load-balancer-address-ip-address :shape
                         "IpAddress" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allocation-id :initarg :allocation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or allocation-id common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-address-allocation-id
                         :shape "AllocationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-ipv4address :initarg :private-ipv4address
                         :initform common-lisp:nil :type
                         (common-lisp:or private-ipv4address common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-address-private-ipv4address
                         :shape "PrivateIPv4Address" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ipv6address :initarg :ipv6address :initform
                         common-lisp:nil :type
                         (common-lisp:or ipv6address common-lisp:null)
                         :accessor
                         struct-shape-load-balancer-address-ipv6address :shape
                         "IPv6Address" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-load-balancer-address
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer-address
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'load-balancer-address 'make-load-balancer-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-id))
      (common-lisp:list
       (common-lisp:cons "AllocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ipv4address))
      (common-lisp:list
       (common-lisp:cons "PrivateIPv4Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address))
      (common-lisp:list
       (common-lisp:cons "IPv6Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-addresses ()
   '(trivial-types:proper-list load-balancer-address))
 (common-lisp:defun make-load-balancer-addresses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer-address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype load-balancer-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype load-balancer-arns ()
   '(trivial-types:proper-list load-balancer-arn))
 (common-lisp:defun make-load-balancer-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass load-balancer-attribute common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or load-balancer-attribute-key
                                         common-lisp:null)
                         :accessor struct-shape-load-balancer-attribute-key
                         :shape "LoadBalancerAttributeKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or load-balancer-attribute-value
                                         common-lisp:null)
                         :accessor struct-shape-load-balancer-attribute-value
                         :shape "LoadBalancerAttributeValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-load-balancer-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'load-balancer-attribute 'make-load-balancer-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-attribute))
   common-lisp:nil))
(common-lisp:deftype load-balancer-attribute-key () 'common-lisp:string)
(common-lisp:deftype load-balancer-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype load-balancer-attributes ()
   '(trivial-types:proper-list load-balancer-attribute))
 (common-lisp:defun make-load-balancer-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype load-balancer-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype load-balancer-names ()
   '(trivial-types:proper-list load-balancer-name))
 (common-lisp:defun make-load-balancer-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition load-balancer-not-found-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'load-balancer-not-found-exception)))
(common-lisp:deftype load-balancer-scheme-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass load-balancer-state common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or load-balancer-state-enum
                                         common-lisp:null)
                         :accessor struct-shape-load-balancer-state-code :shape
                         "LoadBalancerStateEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or state-reason common-lisp:null)
                         :accessor struct-shape-load-balancer-state-reason
                         :shape "StateReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-load-balancer-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'load-balancer-state 'make-load-balancer-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-balancer-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-balancer-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-balancer-state))
   common-lisp:nil))
(common-lisp:deftype load-balancer-state-enum () 'common-lisp:string)
(common-lisp:deftype load-balancer-type-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype load-balancers ()
   '(trivial-types:proper-list load-balancer))
 (common-lisp:defun make-load-balancers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype location () 'common-lisp:string)
(common-lisp:deftype marker () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass matcher common-lisp:nil
                       ((http-code :initarg :http-code :initform
                         common-lisp:nil :type
                         (common-lisp:or http-code common-lisp:null) :accessor
                         struct-shape-matcher-http-code :shape "HttpCode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (grpc-code :initarg :grpc-code :initform
                         common-lisp:nil :type
                         (common-lisp:or grpc-code common-lisp:null) :accessor
                         struct-shape-matcher-grpc-code :shape "GrpcCode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-matcher
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'matcher
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'matcher 'make-matcher))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input matcher))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input matcher))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-code))
      (common-lisp:list
       (common-lisp:cons "HttpCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc-code))
      (common-lisp:list
       (common-lisp:cons "GrpcCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input matcher))
   common-lisp:nil))
(common-lisp:deftype max () 'common-lisp:string)
(common-lisp:deftype mitigation-in-effect-enum () 'common-lisp:string)
(common-lisp:deftype mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass modify-listener-input common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         (common-lisp:error ":listener-arn is required") :type
                         (common-lisp:or listener-arn common-lisp:null)
                         :accessor
                         struct-shape-modify-listener-input-listener-arn :shape
                         "ListenerArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-modify-listener-input-port :shape "Port"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or protocol-enum common-lisp:null)
                         :accessor struct-shape-modify-listener-input-protocol
                         :shape "ProtocolEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssl-policy :initarg :ssl-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or ssl-policy-name common-lisp:null)
                         :accessor
                         struct-shape-modify-listener-input-ssl-policy :shape
                         "SslPolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificates :initarg :certificates :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor
                         struct-shape-modify-listener-input-certificates :shape
                         "CertificateList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-actions :initarg :default-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or actions common-lisp:null) :accessor
                         struct-shape-modify-listener-input-default-actions
                         :shape "Actions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alpn-policy :initarg :alpn-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or alpn-policy-name common-lisp:null)
                         :accessor
                         struct-shape-modify-listener-input-alpn-policy :shape
                         "AlpnPolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mutual-authentication :initarg :mutual-authentication
                         :initform common-lisp:nil :type
                         (common-lisp:or mutual-authentication-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-listener-input-mutual-authentication
                         :shape "MutualAuthenticationAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-listener-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-listener-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-listener-input 'make-modify-listener-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-listener-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-listener-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-policy))
      (common-lisp:list
       (common-lisp:cons "SslPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-actions))
      (common-lisp:list
       (common-lisp:cons "DefaultActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alpn-policy))
      (common-lisp:list
       (common-lisp:cons "AlpnPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mutual-authentication))
      (common-lisp:list
       (common-lisp:cons "MutualAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-listener-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-listener-output common-lisp:nil
                       ((listeners :initarg :listeners :initform
                         common-lisp:nil :type
                         (common-lisp:or listeners common-lisp:null) :accessor
                         struct-shape-modify-listener-output-listeners :shape
                         "Listeners" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-listener-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-listener-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-listener-output 'make-modify-listener-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-listener-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "Listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-listener-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-load-balancer-attributes-input common-lisp:nil
                       ((load-balancer-arn :initarg :load-balancer-arn
                         :initform
                         (common-lisp:error ":load-balancer-arn is required")
                         :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor
                         struct-shape-modify-load-balancer-attributes-input-load-balancer-arn
                         :shape "LoadBalancerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         (common-lisp:error ":attributes is required") :type
                         (common-lisp:or load-balancer-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-load-balancer-attributes-input-attributes
                         :shape "LoadBalancerAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-load-balancer-attributes-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-load-balancer-attributes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-load-balancer-attributes-input
                    'make-modify-load-balancer-attributes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-load-balancer-attributes-output common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or load-balancer-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-load-balancer-attributes-output-attributes
                         :shape "LoadBalancerAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-load-balancer-attributes-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-load-balancer-attributes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-load-balancer-attributes-output
                    'make-modify-load-balancer-attributes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-rule-input common-lisp:nil
                       ((rule-arn :initarg :rule-arn :initform
                         (common-lisp:error ":rule-arn is required") :type
                         (common-lisp:or rule-arn common-lisp:null) :accessor
                         struct-shape-modify-rule-input-rule-arn :shape
                         "RuleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (conditions :initarg :conditions :initform
                         common-lisp:nil :type
                         (common-lisp:or rule-condition-list common-lisp:null)
                         :accessor struct-shape-modify-rule-input-conditions
                         :shape "RuleConditionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform common-lisp:nil
                         :type (common-lisp:or actions common-lisp:null)
                         :accessor struct-shape-modify-rule-input-actions
                         :shape "Actions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-rule-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-rule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-rule-input 'make-modify-rule-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input modify-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input modify-rule-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "RuleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditions))
      (common-lisp:list
       (common-lisp:cons "Conditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input modify-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-rule-output common-lisp:nil
                       ((rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or rules common-lisp:null) :accessor
                         struct-shape-modify-rule-output-rules :shape "Rules"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-rule-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-rule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-rule-output 'make-modify-rule-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input modify-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input modify-rule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input modify-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-target-group-attributes-input common-lisp:nil
                       ((target-group-arn :initarg :target-group-arn :initform
                         (common-lisp:error ":target-group-arn is required")
                         :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor
                         struct-shape-modify-target-group-attributes-input-target-group-arn
                         :shape "TargetGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         (common-lisp:error ":attributes is required") :type
                         (common-lisp:or target-group-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-target-group-attributes-input-attributes
                         :shape "TargetGroupAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-target-group-attributes-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-target-group-attributes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-target-group-attributes-input
                    'make-modify-target-group-attributes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-attributes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-attributes-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-attributes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-target-group-attributes-output common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or target-group-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-target-group-attributes-output-attributes
                         :shape "TargetGroupAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-target-group-attributes-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-target-group-attributes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-target-group-attributes-output
                    'make-modify-target-group-attributes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-attributes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-attributes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-target-group-input common-lisp:nil
                       ((target-group-arn :initarg :target-group-arn :initform
                         (common-lisp:error ":target-group-arn is required")
                         :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor
                         struct-shape-modify-target-group-input-target-group-arn
                         :shape "TargetGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-protocol :initarg :health-check-protocol
                         :initform common-lisp:nil :type
                         (common-lisp:or protocol-enum common-lisp:null)
                         :accessor
                         struct-shape-modify-target-group-input-health-check-protocol
                         :shape "ProtocolEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-port :initarg :health-check-port
                         :initform common-lisp:nil :type
                         (common-lisp:or health-check-port common-lisp:null)
                         :accessor
                         struct-shape-modify-target-group-input-health-check-port
                         :shape "HealthCheckPort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-path :initarg :health-check-path
                         :initform common-lisp:nil :type
                         (common-lisp:or path common-lisp:null) :accessor
                         struct-shape-modify-target-group-input-health-check-path
                         :shape "Path" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (health-check-enabled :initarg :health-check-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or health-check-enabled common-lisp:null)
                         :accessor
                         struct-shape-modify-target-group-input-health-check-enabled
                         :shape "HealthCheckEnabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-interval-seconds :initarg
                         :health-check-interval-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or health-check-interval-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-target-group-input-health-check-interval-seconds
                         :shape "HealthCheckIntervalSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (health-check-timeout-seconds :initarg
                         :health-check-timeout-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or health-check-timeout-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-target-group-input-health-check-timeout-seconds
                         :shape "HealthCheckTimeoutSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (healthy-threshold-count :initarg
                         :healthy-threshold-count :initform common-lisp:nil
                         :type
                         (common-lisp:or health-check-threshold-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-target-group-input-healthy-threshold-count
                         :shape "HealthCheckThresholdCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unhealthy-threshold-count :initarg
                         :unhealthy-threshold-count :initform common-lisp:nil
                         :type
                         (common-lisp:or health-check-threshold-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-target-group-input-unhealthy-threshold-count
                         :shape "HealthCheckThresholdCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (matcher :initarg :matcher :initform common-lisp:nil
                         :type (common-lisp:or matcher common-lisp:null)
                         :accessor
                         struct-shape-modify-target-group-input-matcher :shape
                         "Matcher" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-target-group-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-target-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-target-group-input
                    'make-modify-target-group-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-protocol))
      (common-lisp:list
       (common-lisp:cons "HealthCheckProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-port))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-path))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-enabled))
      (common-lisp:list
       (common-lisp:cons "HealthCheckEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-interval-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckIntervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'healthy-threshold-count))
      (common-lisp:list
       (common-lisp:cons "HealthyThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unhealthy-threshold-count))
      (common-lisp:list
       (common-lisp:cons "UnhealthyThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matcher))
      (common-lisp:list
       (common-lisp:cons "Matcher"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-target-group-output common-lisp:nil
                       ((target-groups :initarg :target-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or target-groups common-lisp:null)
                         :accessor
                         struct-shape-modify-target-group-output-target-groups
                         :shape "TargetGroups" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-target-group-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-target-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-target-group-output
                    'make-modify-target-group-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-groups))
      (common-lisp:list
       (common-lisp:cons "TargetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-trust-store-input common-lisp:nil
                       ((trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":trust-store-arn is required")
                         :type
                         (common-lisp:or trust-store-arn common-lisp:null)
                         :accessor
                         struct-shape-modify-trust-store-input-trust-store-arn
                         :shape "TrustStoreArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ca-certificates-bundle-s3bucket :initarg
                         :ca-certificates-bundle-s3bucket :initform
                         (common-lisp:error
                          ":ca-certificates-bundle-s3bucket is required")
                         :type (common-lisp:or s3bucket common-lisp:null)
                         :accessor
                         struct-shape-modify-trust-store-input-ca-certificates-bundle-s3bucket
                         :shape "S3Bucket" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ca-certificates-bundle-s3key :initarg
                         :ca-certificates-bundle-s3key :initform
                         (common-lisp:error
                          ":ca-certificates-bundle-s3key is required")
                         :type (common-lisp:or s3key common-lisp:null)
                         :accessor
                         struct-shape-modify-trust-store-input-ca-certificates-bundle-s3key
                         :shape "S3Key" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ca-certificates-bundle-s3object-version :initarg
                         :ca-certificates-bundle-s3object-version :initform
                         common-lisp:nil :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor
                         struct-shape-modify-trust-store-input-ca-certificates-bundle-s3object-version
                         :shape "S3ObjectVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-trust-store-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-trust-store-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-trust-store-input 'make-modify-trust-store-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-trust-store-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-trust-store-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "TrustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ca-certificates-bundle-s3bucket))
      (common-lisp:list
       (common-lisp:cons "CaCertificatesBundleS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ca-certificates-bundle-s3key))
      (common-lisp:list
       (common-lisp:cons "CaCertificatesBundleS3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ca-certificates-bundle-s3object-version))
      (common-lisp:list
       (common-lisp:cons "CaCertificatesBundleS3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-trust-store-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-trust-store-output common-lisp:nil
                       ((trust-stores :initarg :trust-stores :initform
                         common-lisp:nil :type
                         (common-lisp:or trust-stores common-lisp:null)
                         :accessor
                         struct-shape-modify-trust-store-output-trust-stores
                         :shape "TrustStores" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-trust-store-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-trust-store-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-trust-store-output
                    'make-modify-trust-store-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-trust-store-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-trust-store-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-stores))
      (common-lisp:list
       (common-lisp:cons "TrustStores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-trust-store-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mutual-authentication-attributes common-lisp:nil
                       ((mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or mode common-lisp:null) :accessor
                         struct-shape-mutual-authentication-attributes-mode
                         :shape "Mode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (trust-store-arn :initarg :trust-store-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or trust-store-arn common-lisp:null)
                         :accessor
                         struct-shape-mutual-authentication-attributes-trust-store-arn
                         :shape "TrustStoreArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ignore-client-certificate-expiry :initarg
                         :ignore-client-certificate-expiry :initform
                         common-lisp:nil :type
                         (common-lisp:or ignore-client-certificate-expiry
                                         common-lisp:null)
                         :accessor
                         struct-shape-mutual-authentication-attributes-ignore-client-certificate-expiry
                         :shape "IgnoreClientCertificateExpiry" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mutual-authentication-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'mutual-authentication-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'mutual-authentication-attributes
                    'make-mutual-authentication-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mutual-authentication-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mutual-authentication-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "TrustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ignore-client-certificate-expiry))
      (common-lisp:list
       (common-lisp:cons "IgnoreClientCertificateExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mutual-authentication-attributes))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype number-of-ca-certificates () 'common-lisp:integer)
(common-lisp:deftype number-of-revoked-entries () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition operation-not-permitted-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-not-permitted-exception)))
(common-lisp:deftype outpost-id () 'common-lisp:string)
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass path-pattern-condition-config common-lisp:nil
                       ((values :initarg :values :initform common-lisp:nil
                         :type (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         struct-shape-path-pattern-condition-config-values
                         :shape "ListOfString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-path-pattern-condition-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'path-pattern-condition-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'path-pattern-condition-config
                    'make-path-pattern-condition-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          path-pattern-condition-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          path-pattern-condition-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          path-pattern-condition-config))
   common-lisp:nil))
(common-lisp:deftype port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition priority-in-use-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'priority-in-use-exception)))
(common-lisp:deftype private-ipv4address () 'common-lisp:string)
(common-lisp:deftype protocol-enum () 'common-lisp:string)
(common-lisp:deftype protocol-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass query-string-condition-config common-lisp:nil
                       ((values :initarg :values :initform common-lisp:nil
                         :type
                         (common-lisp:or query-string-key-value-pair-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-query-string-condition-config-values
                         :shape "QueryStringKeyValuePairList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-string-condition-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'query-string-condition-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-string-condition-config
                    'make-query-string-condition-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-string-condition-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-string-condition-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-string-condition-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-string-key-value-pair common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or string-value common-lisp:null)
                         :accessor struct-shape-query-string-key-value-pair-key
                         :shape "StringValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string-value common-lisp:null)
                         :accessor
                         struct-shape-query-string-key-value-pair-value :shape
                         "StringValue" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-string-key-value-pair
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-string-key-value-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-string-key-value-pair
                    'make-query-string-key-value-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-string-key-value-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-string-key-value-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-string-key-value-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-string-key-value-pair-list ()
   '(trivial-types:proper-list query-string-key-value-pair))
 (common-lisp:defun make-query-string-key-value-pair-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            query-string-key-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass redirect-action-config common-lisp:nil
                       ((protocol :initarg :protocol :initform common-lisp:nil
                         :type
                         (common-lisp:or redirect-action-protocol
                                         common-lisp:null)
                         :accessor struct-shape-redirect-action-config-protocol
                         :shape "RedirectActionProtocol" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or redirect-action-port common-lisp:null)
                         :accessor struct-shape-redirect-action-config-port
                         :shape "RedirectActionPort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (host :initarg :host :initform common-lisp:nil :type
                         (common-lisp:or redirect-action-host common-lisp:null)
                         :accessor struct-shape-redirect-action-config-host
                         :shape "RedirectActionHost" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or redirect-action-path common-lisp:null)
                         :accessor struct-shape-redirect-action-config-path
                         :shape "RedirectActionPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query :initarg :query :initform common-lisp:nil :type
                         (common-lisp:or redirect-action-query
                                         common-lisp:null)
                         :accessor struct-shape-redirect-action-config-query
                         :shape "RedirectActionQuery" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         (common-lisp:error ":status-code is required") :type
                         (common-lisp:or redirect-action-status-code-enum
                                         common-lisp:null)
                         :accessor
                         struct-shape-redirect-action-config-status-code :shape
                         "RedirectActionStatusCodeEnum" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redirect-action-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'redirect-action-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'redirect-action-config 'make-redirect-action-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redirect-action-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redirect-action-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query))
      (common-lisp:list
       (common-lisp:cons "Query"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redirect-action-config))
   common-lisp:nil))
(common-lisp:deftype redirect-action-host () 'common-lisp:string)
(common-lisp:deftype redirect-action-path () 'common-lisp:string)
(common-lisp:deftype redirect-action-port () 'common-lisp:string)
(common-lisp:deftype redirect-action-protocol () 'common-lisp:string)
(common-lisp:deftype redirect-action-query () 'common-lisp:string)
(common-lisp:deftype redirect-action-status-code-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-targets-input common-lisp:nil
                       ((target-group-arn :initarg :target-group-arn :initform
                         (common-lisp:error ":target-group-arn is required")
                         :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor
                         struct-shape-register-targets-input-target-group-arn
                         :shape "TargetGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (targets :initarg :targets :initform
                         (common-lisp:error ":targets is required") :type
                         (common-lisp:or target-descriptions common-lisp:null)
                         :accessor struct-shape-register-targets-input-targets
                         :shape "TargetDescriptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-targets-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-targets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-targets-input 'make-register-targets-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-targets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-targets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-targets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-targets-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-targets-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-targets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-targets-output 'make-register-targets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-targets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-targets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-targets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-listener-certificates-input common-lisp:nil
                       ((listener-arn :initarg :listener-arn :initform
                         (common-lisp:error ":listener-arn is required") :type
                         (common-lisp:or listener-arn common-lisp:null)
                         :accessor
                         struct-shape-remove-listener-certificates-input-listener-arn
                         :shape "ListenerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificates :initarg :certificates :initform
                         (common-lisp:error ":certificates is required") :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor
                         struct-shape-remove-listener-certificates-input-certificates
                         :shape "CertificateList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-listener-certificates-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-listener-certificates-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-listener-certificates-input
                    'make-remove-listener-certificates-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-listener-certificates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-listener-certificates-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-listener-certificates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-listener-certificates-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-listener-certificates-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-listener-certificates-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-listener-certificates-output
                    'make-remove-listener-certificates-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-listener-certificates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-listener-certificates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-listener-certificates-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-input common-lisp:nil
                       ((resource-arns :initarg :resource-arns :initform
                         (common-lisp:error ":resource-arns is required") :type
                         (common-lisp:or resource-arns common-lisp:null)
                         :accessor struct-shape-remove-tags-input-resource-arns
                         :shape "ResourceArns" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         struct-shape-remove-tags-input-tag-keys :shape
                         "TagKeys" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-tags-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-tags-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-tags-input 'make-remove-tags-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "ResourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-tags-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-tags-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-tags-output 'make-remove-tags-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-tags-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-trust-store-revocations-input common-lisp:nil
                       ((trust-store-arn :initarg :trust-store-arn :initform
                         (common-lisp:error ":trust-store-arn is required")
                         :type
                         (common-lisp:or trust-store-arn common-lisp:null)
                         :accessor
                         struct-shape-remove-trust-store-revocations-input-trust-store-arn
                         :shape "TrustStoreArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revocation-ids :initarg :revocation-ids :initform
                         (common-lisp:error ":revocation-ids is required")
                         :type (common-lisp:or revocation-ids common-lisp:null)
                         :accessor
                         struct-shape-remove-trust-store-revocations-input-revocation-ids
                         :shape "RevocationIds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-trust-store-revocations-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-trust-store-revocations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-trust-store-revocations-input
                    'make-remove-trust-store-revocations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-trust-store-revocations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-trust-store-revocations-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "TrustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-ids))
      (common-lisp:list
       (common-lisp:cons "RevocationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-trust-store-revocations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-trust-store-revocations-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-trust-store-revocations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-trust-store-revocations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-trust-store-revocations-output
                    'make-remove-trust-store-revocations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-trust-store-revocations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-trust-store-revocations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-trust-store-revocations-output))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-arns ()
   '(trivial-types:proper-list resource-arn))
 (common-lisp:defun make-resource-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-in-use-exception)))
(common-lisp:progn
 (common-lisp:defclass revocation-content common-lisp:nil
                       ((s3bucket :initarg :s3bucket :initform common-lisp:nil
                         :type (common-lisp:or s3bucket common-lisp:null)
                         :accessor struct-shape-revocation-content-s3bucket
                         :shape "S3Bucket" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3key :initarg :s3key :initform common-lisp:nil :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-revocation-content-s3key :shape "S3Key"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3object-version :initarg :s3object-version :initform
                         common-lisp:nil :type
                         (common-lisp:or s3object-version common-lisp:null)
                         :accessor
                         struct-shape-revocation-content-s3object-version
                         :shape "S3ObjectVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revocation-type :initarg :revocation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or revocation-type common-lisp:null)
                         :accessor
                         struct-shape-revocation-content-revocation-type :shape
                         "RevocationType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revocation-content
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'revocation-content
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revocation-content 'make-revocation-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input revocation-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input revocation-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object-version))
      (common-lisp:list
       (common-lisp:cons "S3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-type))
      (common-lisp:list
       (common-lisp:cons "RevocationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input revocation-content))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition revocation-content-not-found-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'revocation-content-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype revocation-contents ()
   '(trivial-types:proper-list revocation-content))
 (common-lisp:defun make-revocation-contents
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list revocation-content))
   aws-sdk/generator/shape::members))
(common-lisp:deftype revocation-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition revocation-id-not-found-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'revocation-id-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype revocation-ids ()
   '(trivial-types:proper-list revocation-id))
 (common-lisp:defun make-revocation-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list revocation-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype revocation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rule common-lisp:nil
                       ((rule-arn :initarg :rule-arn :initform common-lisp:nil
                         :type (common-lisp:or rule-arn common-lisp:null)
                         :accessor struct-shape-rule-rule-arn :shape "RuleArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (priority :initarg :priority :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-rule-priority :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (conditions :initarg :conditions :initform
                         common-lisp:nil :type
                         (common-lisp:or rule-condition-list common-lisp:null)
                         :accessor struct-shape-rule-conditions :shape
                         "RuleConditionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform common-lisp:nil
                         :type (common-lisp:or actions common-lisp:null)
                         :accessor struct-shape-rule-actions :shape "Actions"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-default :initarg :is-default :initform
                         common-lisp:nil :type
                         (common-lisp:or is-default common-lisp:null) :accessor
                         struct-shape-rule-is-default :shape "IsDefault"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rule (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "RuleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditions))
      (common-lisp:list
       (common-lisp:cons "Conditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:deftype rule-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rule-arns () '(trivial-types:proper-list rule-arn))
 (common-lisp:defun make-rule-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rule-condition common-lisp:nil
                       ((field :initarg :field :initform common-lisp:nil :type
                         (common-lisp:or condition-field-name common-lisp:null)
                         :accessor struct-shape-rule-condition-field :shape
                         "ConditionFieldName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type (common-lisp:or list-of-string common-lisp:null)
                         :accessor struct-shape-rule-condition-values :shape
                         "ListOfString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (host-header-config :initarg :host-header-config
                         :initform common-lisp:nil :type
                         (common-lisp:or host-header-condition-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-condition-host-header-config :shape
                         "HostHeaderConditionConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path-pattern-config :initarg :path-pattern-config
                         :initform common-lisp:nil :type
                         (common-lisp:or path-pattern-condition-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-condition-path-pattern-config :shape
                         "PathPatternConditionConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-header-config :initarg :http-header-config
                         :initform common-lisp:nil :type
                         (common-lisp:or http-header-condition-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-condition-http-header-config :shape
                         "HttpHeaderConditionConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-string-config :initarg :query-string-config
                         :initform common-lisp:nil :type
                         (common-lisp:or query-string-condition-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-condition-query-string-config :shape
                         "QueryStringConditionConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-request-method-config :initarg
                         :http-request-method-config :initform common-lisp:nil
                         :type
                         (common-lisp:or http-request-method-condition-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-condition-http-request-method-config
                         :shape "HttpRequestMethodConditionConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-ip-config :initarg :source-ip-config :initform
                         common-lisp:nil :type
                         (common-lisp:or source-ip-condition-config
                                         common-lisp:null)
                         :accessor struct-shape-rule-condition-source-ip-config
                         :shape "SourceIpConditionConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rule-condition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rule-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'rule-condition 'make-rule-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "Field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-header-config))
      (common-lisp:list
       (common-lisp:cons "HostHeaderConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-pattern-config))
      (common-lisp:list
       (common-lisp:cons "PathPatternConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-header-config))
      (common-lisp:list
       (common-lisp:cons "HttpHeaderConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string-config))
      (common-lisp:list
       (common-lisp:cons "QueryStringConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-request-method-config))
      (common-lisp:list
       (common-lisp:cons "HttpRequestMethodConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ip-config))
      (common-lisp:list
       (common-lisp:cons "SourceIpConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-condition-list ()
   '(trivial-types:proper-list rule-condition))
 (common-lisp:defun make-rule-condition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition rule-not-found-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'rule-not-found-exception)))
(common-lisp:deftype rule-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype rule-priority-list ()
   '(trivial-types:proper-list rule-priority-pair))
 (common-lisp:defun make-rule-priority-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-priority-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rule-priority-pair common-lisp:nil
                       ((rule-arn :initarg :rule-arn :initform common-lisp:nil
                         :type (common-lisp:or rule-arn common-lisp:null)
                         :accessor struct-shape-rule-priority-pair-rule-arn
                         :shape "RuleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (priority :initarg :priority :initform common-lisp:nil
                         :type (common-lisp:or rule-priority common-lisp:null)
                         :accessor struct-shape-rule-priority-pair-priority
                         :shape "RulePriority" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rule-priority-pair
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rule-priority-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rule-priority-pair 'make-rule-priority-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-priority-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-priority-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "RuleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-priority-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rules () '(trivial-types:proper-list rule))
 (common-lisp:defun make-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:deftype s3object-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition sslpolicy-not-found-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'sslpolicy-not-found-exception)))
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-groups ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-security-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass set-ip-address-type-input common-lisp:nil
                       ((load-balancer-arn :initarg :load-balancer-arn
                         :initform
                         (common-lisp:error ":load-balancer-arn is required")
                         :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor
                         struct-shape-set-ip-address-type-input-load-balancer-arn
                         :shape "LoadBalancerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         (common-lisp:error ":ip-address-type is required")
                         :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor
                         struct-shape-set-ip-address-type-input-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-ip-address-type-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-ip-address-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-ip-address-type-input
                    'make-set-ip-address-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-ip-address-type-output common-lisp:nil
                       ((ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor
                         struct-shape-set-ip-address-type-output-ip-address-type
                         :shape "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-ip-address-type-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-ip-address-type-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-ip-address-type-output
                    'make-set-ip-address-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-rule-priorities-input common-lisp:nil
                       ((rule-priorities :initarg :rule-priorities :initform
                         (common-lisp:error ":rule-priorities is required")
                         :type
                         (common-lisp:or rule-priority-list common-lisp:null)
                         :accessor
                         struct-shape-set-rule-priorities-input-rule-priorities
                         :shape "RulePriorityList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-rule-priorities-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-rule-priorities-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-rule-priorities-input
                    'make-set-rule-priorities-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-rule-priorities-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-rule-priorities-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-priorities))
      (common-lisp:list
       (common-lisp:cons "RulePriorities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-rule-priorities-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-rule-priorities-output common-lisp:nil
                       ((rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or rules common-lisp:null) :accessor
                         struct-shape-set-rule-priorities-output-rules :shape
                         "Rules" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-rule-priorities-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-rule-priorities-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-rule-priorities-output
                    'make-set-rule-priorities-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-rule-priorities-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-rule-priorities-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-rule-priorities-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-security-groups-input common-lisp:nil
                       ((load-balancer-arn :initarg :load-balancer-arn
                         :initform
                         (common-lisp:error ":load-balancer-arn is required")
                         :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor
                         struct-shape-set-security-groups-input-load-balancer-arn
                         :shape "LoadBalancerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-groups :initarg :security-groups :initform
                         (common-lisp:error ":security-groups is required")
                         :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor
                         struct-shape-set-security-groups-input-security-groups
                         :shape "SecurityGroups" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enforce-security-group-inbound-rules-on-private-link-traffic
                         :initarg
                         :enforce-security-group-inbound-rules-on-private-link-traffic
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          enforce-security-group-inbound-rules-on-private-link-traffic-enum
                          common-lisp:null)
                         :accessor
                         struct-shape-set-security-groups-input-enforce-security-group-inbound-rules-on-private-link-traffic
                         :shape
                         "EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-security-groups-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-security-groups-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-security-groups-input
                    'make-set-security-groups-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-security-groups-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-security-groups-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enforce-security-group-inbound-rules-on-private-link-traffic))
      (common-lisp:list
       (common-lisp:cons "EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-security-groups-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-security-groups-output common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor
                         struct-shape-set-security-groups-output-security-group-ids
                         :shape "SecurityGroups" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enforce-security-group-inbound-rules-on-private-link-traffic
                         :initarg
                         :enforce-security-group-inbound-rules-on-private-link-traffic
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          enforce-security-group-inbound-rules-on-private-link-traffic-enum
                          common-lisp:null)
                         :accessor
                         struct-shape-set-security-groups-output-enforce-security-group-inbound-rules-on-private-link-traffic
                         :shape
                         "EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-security-groups-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-security-groups-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-security-groups-output
                    'make-set-security-groups-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-security-groups-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-security-groups-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enforce-security-group-inbound-rules-on-private-link-traffic))
      (common-lisp:list
       (common-lisp:cons "EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-security-groups-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-subnets-input common-lisp:nil
                       ((load-balancer-arn :initarg :load-balancer-arn
                         :initform
                         (common-lisp:error ":load-balancer-arn is required")
                         :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor
                         struct-shape-set-subnets-input-load-balancer-arn
                         :shape "LoadBalancerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnets :initarg :subnets :initform common-lisp:nil
                         :type (common-lisp:or subnets common-lisp:null)
                         :accessor struct-shape-set-subnets-input-subnets
                         :shape "Subnets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-mappings :initarg :subnet-mappings :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-mappings common-lisp:null)
                         :accessor
                         struct-shape-set-subnets-input-subnet-mappings :shape
                         "SubnetMappings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor
                         struct-shape-set-subnets-input-ip-address-type :shape
                         "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-subnets-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-subnets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-subnets-input 'make-set-subnets-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input set-subnets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input set-subnets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-mappings))
      (common-lisp:list
       (common-lisp:cons "SubnetMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input set-subnets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-subnets-output common-lisp:nil
                       ((availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         struct-shape-set-subnets-output-availability-zones
                         :shape "AvailabilityZones" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor
                         struct-shape-set-subnets-output-ip-address-type :shape
                         "IpAddressType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-subnets-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-subnets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-subnets-output 'make-set-subnets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input set-subnets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input set-subnets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input set-subnets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source-ip-condition-config common-lisp:nil
                       ((values :initarg :values :initform common-lisp:nil
                         :type (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         struct-shape-source-ip-condition-config-values :shape
                         "ListOfString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-ip-condition-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-ip-condition-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-ip-condition-config
                    'make-source-ip-condition-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-ip-condition-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-ip-condition-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-ip-condition-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ssl-policies () '(trivial-types:proper-list ssl-policy))
 (common-lisp:defun make-ssl-policies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ssl-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ssl-policy common-lisp:nil
                       ((ssl-protocols :initarg :ssl-protocols :initform
                         common-lisp:nil :type
                         (common-lisp:or ssl-protocols common-lisp:null)
                         :accessor struct-shape-ssl-policy-ssl-protocols :shape
                         "SslProtocols" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ciphers :initarg :ciphers :initform common-lisp:nil
                         :type (common-lisp:or ciphers common-lisp:null)
                         :accessor struct-shape-ssl-policy-ciphers :shape
                         "Ciphers" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or ssl-policy-name common-lisp:null)
                         :accessor struct-shape-ssl-policy-name :shape
                         "SslPolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-load-balancer-types :initarg
                         :supported-load-balancer-types :initform
                         common-lisp:nil :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         struct-shape-ssl-policy-supported-load-balancer-types
                         :shape "ListOfString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ssl-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ssl-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ssl-policy 'make-ssl-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssl-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssl-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-protocols))
      (common-lisp:list
       (common-lisp:cons "SslProtocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphers))
      (common-lisp:list
       (common-lisp:cons "Ciphers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-load-balancer-types))
      (common-lisp:list
       (common-lisp:cons "SupportedLoadBalancerTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssl-policy))
   common-lisp:nil))
(common-lisp:deftype ssl-policy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ssl-policy-names ()
   '(trivial-types:proper-list ssl-policy-name))
 (common-lisp:defun make-ssl-policy-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ssl-policy-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ssl-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ssl-protocols ()
   '(trivial-types:proper-list ssl-protocol))
 (common-lisp:defun make-ssl-protocols
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ssl-protocol))
   aws-sdk/generator/shape::members))
(common-lisp:deftype state-reason () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-value () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass subnet-mapping common-lisp:nil
                       ((subnet-id :initarg :subnet-id :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-id common-lisp:null) :accessor
                         struct-shape-subnet-mapping-subnet-id :shape
                         "SubnetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allocation-id :initarg :allocation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or allocation-id common-lisp:null)
                         :accessor struct-shape-subnet-mapping-allocation-id
                         :shape "AllocationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-ipv4address :initarg :private-ipv4address
                         :initform common-lisp:nil :type
                         (common-lisp:or private-ipv4address common-lisp:null)
                         :accessor
                         struct-shape-subnet-mapping-private-ipv4address :shape
                         "PrivateIPv4Address" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ipv6address :initarg :ipv6address :initform
                         common-lisp:nil :type
                         (common-lisp:or ipv6address common-lisp:null)
                         :accessor struct-shape-subnet-mapping-ipv6address
                         :shape "IPv6Address" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subnet-mapping
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subnet-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'subnet-mapping 'make-subnet-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-id))
      (common-lisp:list
       (common-lisp:cons "AllocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ipv4address))
      (common-lisp:list
       (common-lisp:cons "PrivateIPv4Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address))
      (common-lisp:list
       (common-lisp:cons "IPv6Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subnet-mappings ()
   '(trivial-types:proper-list subnet-mapping))
 (common-lisp:defun make-subnet-mappings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subnet-not-found-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype subnets () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun make-subnets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-description common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor struct-shape-tag-description-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-description-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag-description 'make-tag-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-descriptions ()
   '(trivial-types:proper-list tag-description))
 (common-lisp:defun make-tag-descriptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-description common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or target-id common-lisp:null) :accessor
                         struct-shape-target-description-id :shape "TargetId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-target-description-port :shape "Port"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or zone-name common-lisp:null) :accessor
                         struct-shape-target-description-availability-zone
                         :shape "ZoneName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'target-description 'make-target-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-descriptions ()
   '(trivial-types:proper-list target-description))
 (common-lisp:defun make-target-descriptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass target-group common-lisp:nil
                       ((target-group-arn :initarg :target-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor struct-shape-target-group-target-group-arn
                         :shape "TargetGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-group-name :initarg :target-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or target-group-name common-lisp:null)
                         :accessor struct-shape-target-group-target-group-name
                         :shape "TargetGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or protocol-enum common-lisp:null)
                         :accessor struct-shape-target-group-protocol :shape
                         "ProtocolEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or port common-lisp:null) :accessor
                         struct-shape-target-group-port :shape "Port" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or vpc-id common-lisp:null)
                         :accessor struct-shape-target-group-vpc-id :shape
                         "VpcId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (health-check-protocol :initarg :health-check-protocol
                         :initform common-lisp:nil :type
                         (common-lisp:or protocol-enum common-lisp:null)
                         :accessor
                         struct-shape-target-group-health-check-protocol :shape
                         "ProtocolEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-port :initarg :health-check-port
                         :initform common-lisp:nil :type
                         (common-lisp:or health-check-port common-lisp:null)
                         :accessor struct-shape-target-group-health-check-port
                         :shape "HealthCheckPort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-enabled :initarg :health-check-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or health-check-enabled common-lisp:null)
                         :accessor
                         struct-shape-target-group-health-check-enabled :shape
                         "HealthCheckEnabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-interval-seconds :initarg
                         :health-check-interval-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or health-check-interval-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-target-group-health-check-interval-seconds
                         :shape "HealthCheckIntervalSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (health-check-timeout-seconds :initarg
                         :health-check-timeout-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or health-check-timeout-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-target-group-health-check-timeout-seconds
                         :shape "HealthCheckTimeoutSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (healthy-threshold-count :initarg
                         :healthy-threshold-count :initform common-lisp:nil
                         :type
                         (common-lisp:or health-check-threshold-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-target-group-healthy-threshold-count
                         :shape "HealthCheckThresholdCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unhealthy-threshold-count :initarg
                         :unhealthy-threshold-count :initform common-lisp:nil
                         :type
                         (common-lisp:or health-check-threshold-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-target-group-unhealthy-threshold-count
                         :shape "HealthCheckThresholdCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (health-check-path :initarg :health-check-path
                         :initform common-lisp:nil :type
                         (common-lisp:or path common-lisp:null) :accessor
                         struct-shape-target-group-health-check-path :shape
                         "Path" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (matcher :initarg :matcher :initform common-lisp:nil
                         :type (common-lisp:or matcher common-lisp:null)
                         :accessor struct-shape-target-group-matcher :shape
                         "Matcher" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (load-balancer-arns :initarg :load-balancer-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or load-balancer-arns common-lisp:null)
                         :accessor struct-shape-target-group-load-balancer-arns
                         :shape "LoadBalancerArns" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-type :initarg :target-type :initform
                         common-lisp:nil :type
                         (common-lisp:or target-type-enum common-lisp:null)
                         :accessor struct-shape-target-group-target-type :shape
                         "TargetTypeEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol-version :initarg :protocol-version :initform
                         common-lisp:nil :type
                         (common-lisp:or protocol-version common-lisp:null)
                         :accessor struct-shape-target-group-protocol-version
                         :shape "ProtocolVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or target-group-ip-address-type-enum
                                         common-lisp:null)
                         :accessor struct-shape-target-group-ip-address-type
                         :shape "TargetGroupIpAddressTypeEnum" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'target-group 'make-target-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-protocol))
      (common-lisp:list
       (common-lisp:cons "HealthCheckProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-port))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-enabled))
      (common-lisp:list
       (common-lisp:cons "HealthCheckEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-interval-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckIntervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'healthy-threshold-count))
      (common-lisp:list
       (common-lisp:cons "HealthyThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unhealthy-threshold-count))
      (common-lisp:list
       (common-lisp:cons "UnhealthyThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-path))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matcher))
      (common-lisp:list
       (common-lisp:cons "Matcher"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arns))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "TargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-version))
      (common-lisp:list
       (common-lisp:cons "ProtocolVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-group))
   common-lisp:nil))
(common-lisp:deftype target-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-group-arns ()
   '(trivial-types:proper-list target-group-arn))
 (common-lisp:defun make-target-group-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-group-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition target-group-association-limit-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'target-group-association-limit-exception)))
(common-lisp:progn
 (common-lisp:defclass target-group-attribute common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or target-group-attribute-key
                                         common-lisp:null)
                         :accessor struct-shape-target-group-attribute-key
                         :shape "TargetGroupAttributeKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or target-group-attribute-value
                                         common-lisp:null)
                         :accessor struct-shape-target-group-attribute-value
                         :shape "TargetGroupAttributeValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-group-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target-group-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'target-group-attribute 'make-target-group-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-group-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-group-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-group-attribute))
   common-lisp:nil))
(common-lisp:deftype target-group-attribute-key () 'common-lisp:string)
(common-lisp:deftype target-group-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-group-attributes ()
   '(trivial-types:proper-list target-group-attribute))
 (common-lisp:defun make-target-group-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-group-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-group-ip-address-type-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-group-list ()
   '(trivial-types:proper-list target-group-tuple))
 (common-lisp:defun make-target-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-group-tuple))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-group-names ()
   '(trivial-types:proper-list target-group-name))
 (common-lisp:defun make-target-group-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-group-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition target-group-not-found-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'target-group-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass target-group-stickiness-config common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or target-group-stickiness-enabled
                                         common-lisp:null)
                         :accessor
                         struct-shape-target-group-stickiness-config-enabled
                         :shape "TargetGroupStickinessEnabled" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (duration-seconds :initarg :duration-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          target-group-stickiness-duration-seconds
                          common-lisp:null)
                         :accessor
                         struct-shape-target-group-stickiness-config-duration-seconds
                         :shape "TargetGroupStickinessDurationSeconds"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-group-stickiness-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'target-group-stickiness-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'target-group-stickiness-config
                    'make-target-group-stickiness-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-group-stickiness-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-group-stickiness-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-group-stickiness-config))
   common-lisp:nil))
(common-lisp:deftype target-group-stickiness-duration-seconds ()
  'common-lisp:integer)
(common-lisp:deftype target-group-stickiness-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass target-group-tuple common-lisp:nil
                       ((target-group-arn :initarg :target-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor
                         struct-shape-target-group-tuple-target-group-arn
                         :shape "TargetGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (weight :initarg :weight :initform common-lisp:nil
                         :type
                         (common-lisp:or target-group-weight common-lisp:null)
                         :accessor struct-shape-target-group-tuple-weight
                         :shape "TargetGroupWeight" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-group-tuple
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target-group-tuple
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'target-group-tuple 'make-target-group-tuple))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-group-tuple))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-group-tuple))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-group-tuple))
   common-lisp:nil))
(common-lisp:deftype target-group-weight () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype target-groups ()
   '(trivial-types:proper-list target-group))
 (common-lisp:defun make-target-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass target-health common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or target-health-state-enum
                                         common-lisp:null)
                         :accessor struct-shape-target-health-state :shape
                         "TargetHealthStateEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type
                         (common-lisp:or target-health-reason-enum
                                         common-lisp:null)
                         :accessor struct-shape-target-health-reason :shape
                         "TargetHealthReasonEnum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-target-health-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-health
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target-health
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'target-health 'make-target-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass target-health-description common-lisp:nil
                       ((target :initarg :target :initform common-lisp:nil
                         :type
                         (common-lisp:or target-description common-lisp:null)
                         :accessor
                         struct-shape-target-health-description-target :shape
                         "TargetDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check-port :initarg :health-check-port
                         :initform common-lisp:nil :type
                         (common-lisp:or health-check-port common-lisp:null)
                         :accessor
                         struct-shape-target-health-description-health-check-port
                         :shape "HealthCheckPort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-health :initarg :target-health :initform
                         common-lisp:nil :type
                         (common-lisp:or target-health common-lisp:null)
                         :accessor
                         struct-shape-target-health-description-target-health
                         :shape "TargetHealth" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (anomaly-detection :initarg :anomaly-detection
                         :initform common-lisp:nil :type
                         (common-lisp:or anomaly-detection common-lisp:null)
                         :accessor
                         struct-shape-target-health-description-anomaly-detection
                         :shape "AnomalyDetection" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-health-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target-health-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'target-health-description
                    'make-target-health-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-health-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-health-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-port))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-health))
      (common-lisp:list
       (common-lisp:cons "TargetHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-detection))
      (common-lisp:list
       (common-lisp:cons "AnomalyDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-health-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-health-descriptions ()
   '(trivial-types:proper-list target-health-description))
 (common-lisp:defun make-target-health-descriptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            target-health-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-health-reason-enum () 'common-lisp:string)
(common-lisp:deftype target-health-state-enum () 'common-lisp:string)
(common-lisp:deftype target-id () 'common-lisp:string)
(common-lisp:deftype target-type-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-actions-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-actions-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-certificates-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-certificates-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-listeners-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-listeners-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-load-balancers-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-load-balancers-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-registrations-for-target-id-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'too-many-registrations-for-target-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-rules-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-rules-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-tags-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-target-groups-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-target-groups-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-targets-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-targets-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-trust-store-revocation-entries-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'too-many-trust-store-revocation-entries-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-trust-stores-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-trust-stores-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-unique-target-groups-per-load-balancer-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list
   'too-many-unique-target-groups-per-load-balancer-exception)))
(common-lisp:deftype total-revoked-entries () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass trust-store common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or trust-store-name common-lisp:null)
                         :accessor struct-shape-trust-store-name :shape
                         "TrustStoreName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trust-store-arn :initarg :trust-store-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or trust-store-arn common-lisp:null)
                         :accessor struct-shape-trust-store-trust-store-arn
                         :shape "TrustStoreArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or trust-store-status common-lisp:null)
                         :accessor struct-shape-trust-store-status :shape
                         "TrustStoreStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-ca-certificates :initarg
                         :number-of-ca-certificates :initform common-lisp:nil
                         :type
                         (common-lisp:or number-of-ca-certificates
                                         common-lisp:null)
                         :accessor
                         struct-shape-trust-store-number-of-ca-certificates
                         :shape "NumberOfCaCertificates" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (total-revoked-entries :initarg :total-revoked-entries
                         :initform common-lisp:nil :type
                         (common-lisp:or total-revoked-entries
                                         common-lisp:null)
                         :accessor
                         struct-shape-trust-store-total-revoked-entries :shape
                         "TotalRevokedEntries" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trust-store
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trust-store
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'trust-store 'make-trust-store))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trust-store))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trust-store))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "TrustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-ca-certificates))
      (common-lisp:list
       (common-lisp:cons "NumberOfCaCertificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-revoked-entries))
      (common-lisp:list
       (common-lisp:cons "TotalRevokedEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trust-store))
   common-lisp:nil))
(common-lisp:deftype trust-store-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trust-store-arns ()
   '(trivial-types:proper-list trust-store-arn))
 (common-lisp:defun make-trust-store-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trust-store-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass trust-store-association common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or trust-store-association-resource-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-trust-store-association-resource-arn
                         :shape "TrustStoreAssociationResourceArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trust-store-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trust-store-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'trust-store-association 'make-trust-store-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trust-store-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trust-store-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trust-store-association))
   common-lisp:nil))
(common-lisp:deftype trust-store-association-resource-arn ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trust-store-associations ()
   '(trivial-types:proper-list trust-store-association))
 (common-lisp:defun make-trust-store-associations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trust-store-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition trust-store-in-use-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'trust-store-in-use-exception)))
(common-lisp:deftype trust-store-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trust-store-names ()
   '(trivial-types:proper-list trust-store-name))
 (common-lisp:defun make-trust-store-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trust-store-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition trust-store-not-found-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'trust-store-not-found-exception)))
(common-lisp:progn
 (common-lisp:define-condition trust-store-not-ready-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'trust-store-not-ready-exception)))
(common-lisp:progn
 (common-lisp:defclass trust-store-revocation common-lisp:nil
                       ((trust-store-arn :initarg :trust-store-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or trust-store-arn common-lisp:null)
                         :accessor
                         struct-shape-trust-store-revocation-trust-store-arn
                         :shape "TrustStoreArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revocation-id :initarg :revocation-id :initform
                         common-lisp:nil :type
                         (common-lisp:or revocation-id common-lisp:null)
                         :accessor
                         struct-shape-trust-store-revocation-revocation-id
                         :shape "RevocationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revocation-type :initarg :revocation-type :initform
                         common-lisp:nil :type
                         (common-lisp:or revocation-type common-lisp:null)
                         :accessor
                         struct-shape-trust-store-revocation-revocation-type
                         :shape "RevocationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-revoked-entries :initarg
                         :number-of-revoked-entries :initform common-lisp:nil
                         :type
                         (common-lisp:or number-of-revoked-entries
                                         common-lisp:null)
                         :accessor
                         struct-shape-trust-store-revocation-number-of-revoked-entries
                         :shape "NumberOfRevokedEntries" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trust-store-revocation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trust-store-revocation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'trust-store-revocation 'make-trust-store-revocation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trust-store-revocation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trust-store-revocation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-store-arn))
      (common-lisp:list
       (common-lisp:cons "TrustStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-id))
      (common-lisp:list
       (common-lisp:cons "RevocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-type))
      (common-lisp:list
       (common-lisp:cons "RevocationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-revoked-entries))
      (common-lisp:list
       (common-lisp:cons "NumberOfRevokedEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trust-store-revocation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trust-store-revocations ()
   '(trivial-types:proper-list trust-store-revocation))
 (common-lisp:defun make-trust-store-revocations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trust-store-revocation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype trust-store-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trust-stores () '(trivial-types:proper-list trust-store))
 (common-lisp:defun make-trust-stores
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trust-store))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition unsupported-protocol-exception
     (elasticloadbalancingv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unsupported-protocol-exception)))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:deftype zone-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-listener-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn certificates)
   (common-lisp:declare (common-lisp:ignorable listener-arn certificates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-listener-certificates-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "AddListenerCertificates"))
      common-lisp:nil "AddListenerCertificatesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'add-listener-certificates))
(common-lisp:progn
 (common-lisp:defun add-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arns tags)
   (common-lisp:declare (common-lisp:ignorable resource-arns tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "AddTags"))
      common-lisp:nil "AddTagsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'add-tags))
(common-lisp:progn
 (common-lisp:defun add-trust-store-revocations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-store-arn revocation-contents)
   (common-lisp:declare
    (common-lisp:ignorable trust-store-arn revocation-contents))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-trust-store-revocations-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "AddTrustStoreRevocations"))
      common-lisp:nil "AddTrustStoreRevocationsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'add-trust-store-revocations))
(common-lisp:progn
 (common-lisp:defun create-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn protocol port
                     ssl-policy certificates default-actions alpn-policy tags
                     mutual-authentication)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-arn protocol port ssl-policy
     certificates default-actions alpn-policy tags mutual-authentication))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-listener-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "CreateListener"))
      common-lisp:nil "CreateListenerResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-listener))
(common-lisp:progn
 (common-lisp:defun create-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name subnets subnet-mappings
                     security-groups scheme tags type ip-address-type
                     customer-owned-ipv4pool)
   (common-lisp:declare
    (common-lisp:ignorable name subnets subnet-mappings security-groups scheme
     tags type ip-address-type customer-owned-ipv4pool))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-load-balancer-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "CreateLoadBalancer"))
      common-lisp:nil "CreateLoadBalancerResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-load-balancer))
(common-lisp:progn
 (common-lisp:defun create-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn conditions priority actions
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable listener-arn conditions priority actions tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-rule-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "CreateRule"))
      common-lisp:nil "CreateRuleResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-rule))
(common-lisp:progn
 (common-lisp:defun create-target-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name protocol protocol-version port
                     vpc-id health-check-protocol health-check-port
                     health-check-enabled health-check-path
                     health-check-interval-seconds health-check-timeout-seconds
                     healthy-threshold-count unhealthy-threshold-count matcher
                     target-type tags ip-address-type)
   (common-lisp:declare
    (common-lisp:ignorable name protocol protocol-version port vpc-id
     health-check-protocol health-check-port health-check-enabled
     health-check-path health-check-interval-seconds
     health-check-timeout-seconds healthy-threshold-count
     unhealthy-threshold-count matcher target-type tags ip-address-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-target-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "CreateTargetGroup"))
      common-lisp:nil "CreateTargetGroupResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-target-group))
(common-lisp:progn
 (common-lisp:defun create-trust-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name ca-certificates-bundle-s3bucket
                     ca-certificates-bundle-s3key
                     ca-certificates-bundle-s3object-version tags)
   (common-lisp:declare
    (common-lisp:ignorable name ca-certificates-bundle-s3bucket
     ca-certificates-bundle-s3key ca-certificates-bundle-s3object-version
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-trust-store-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "CreateTrustStore"))
      common-lisp:nil "CreateTrustStoreResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'create-trust-store))
(common-lisp:progn
 (common-lisp:defun delete-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn)
   (common-lisp:declare (common-lisp:ignorable listener-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-listener-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteListener"))
      common-lisp:nil "DeleteListenerResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-listener))
(common-lisp:progn
 (common-lisp:defun delete-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn)
   (common-lisp:declare (common-lisp:ignorable load-balancer-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-load-balancer-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteLoadBalancer"))
      common-lisp:nil "DeleteLoadBalancerResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-load-balancer))
(common-lisp:progn
 (common-lisp:defun delete-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-arn)
   (common-lisp:declare (common-lisp:ignorable rule-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-rule-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteRule"))
      common-lisp:nil "DeleteRuleResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-rule))
(common-lisp:progn
 (common-lisp:defun delete-target-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-group-arn)
   (common-lisp:declare (common-lisp:ignorable target-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-target-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteTargetGroup"))
      common-lisp:nil "DeleteTargetGroupResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-target-group))
(common-lisp:progn
 (common-lisp:defun delete-trust-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-store-arn)
   (common-lisp:declare (common-lisp:ignorable trust-store-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-trust-store-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DeleteTrustStore"))
      common-lisp:nil "DeleteTrustStoreResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'delete-trust-store))
(common-lisp:progn
 (common-lisp:defun deregister-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-group-arn targets)
   (common-lisp:declare (common-lisp:ignorable target-group-arn targets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-targets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DeregisterTargets"))
      common-lisp:nil "DeregisterTargetsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'deregister-targets))
(common-lisp:progn
 (common-lisp:defun describe-account-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker page-size)
   (common-lisp:declare (common-lisp:ignorable marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-account-limits-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeAccountLimits"))
      common-lisp:nil "DescribeAccountLimitsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-account-limits))
(common-lisp:progn
 (common-lisp:defun describe-listener-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn marker page-size)
   (common-lisp:declare (common-lisp:ignorable listener-arn marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-listener-certificates-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeListenerCertificates"))
      common-lisp:nil "DescribeListenerCertificatesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-listener-certificates))
(common-lisp:progn
 (common-lisp:defun describe-listeners
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn listener-arns marker
                     page-size)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-arn listener-arns marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-listeners-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeListeners"))
      common-lisp:nil "DescribeListenersResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-listeners))
(common-lisp:progn
 (common-lisp:defun describe-load-balancer-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn)
   (common-lisp:declare (common-lisp:ignorable load-balancer-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-load-balancer-attributes-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeLoadBalancerAttributes"))
      common-lisp:nil "DescribeLoadBalancerAttributesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-load-balancer-attributes))
(common-lisp:progn
 (common-lisp:defun describe-load-balancers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arns names marker
                     page-size)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-arns names marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-load-balancers-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeLoadBalancers"))
      common-lisp:nil "DescribeLoadBalancersResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-load-balancers))
(common-lisp:progn
 (common-lisp:defun describe-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn rule-arns marker page-size)
   (common-lisp:declare
    (common-lisp:ignorable listener-arn rule-arns marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-rules-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeRules"))
      common-lisp:nil "DescribeRulesResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-rules))
(common-lisp:progn
 (common-lisp:defun describe-sslpolicies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names marker page-size
                     load-balancer-type)
   (common-lisp:declare
    (common-lisp:ignorable names marker page-size load-balancer-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-sslpolicies-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeSSLPolicies"))
      common-lisp:nil "DescribeSSLPoliciesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-sslpolicies))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arns)
   (common-lisp:declare (common-lisp:ignorable resource-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeTags"))
      common-lisp:nil "DescribeTagsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun describe-target-group-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-group-arn)
   (common-lisp:declare (common-lisp:ignorable target-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-target-group-attributes-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeTargetGroupAttributes"))
      common-lisp:nil "DescribeTargetGroupAttributesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-target-group-attributes))
(common-lisp:progn
 (common-lisp:defun describe-target-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn target-group-arns names
                     marker page-size)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-arn target-group-arns names marker
     page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-target-groups-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeTargetGroups"))
      common-lisp:nil "DescribeTargetGroupsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-target-groups))
(common-lisp:progn
 (common-lisp:defun describe-target-health
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-group-arn targets include)
   (common-lisp:declare
    (common-lisp:ignorable target-group-arn targets include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-target-health-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeTargetHealth"))
      common-lisp:nil "DescribeTargetHealthResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-target-health))
(common-lisp:progn
 (common-lisp:defun describe-trust-store-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-store-arn marker page-size)
   (common-lisp:declare
    (common-lisp:ignorable trust-store-arn marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-trust-store-associations-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeTrustStoreAssociations"))
      common-lisp:nil "DescribeTrustStoreAssociationsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-trust-store-associations))
(common-lisp:progn
 (common-lisp:defun describe-trust-store-revocations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-store-arn revocation-ids marker
                     page-size)
   (common-lisp:declare
    (common-lisp:ignorable trust-store-arn revocation-ids marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-trust-store-revocations-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeTrustStoreRevocations"))
      common-lisp:nil "DescribeTrustStoreRevocationsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-trust-store-revocations))
(common-lisp:progn
 (common-lisp:defun describe-trust-stores
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-store-arns names marker page-size)
   (common-lisp:declare
    (common-lisp:ignorable trust-store-arns names marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-trust-stores-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "DescribeTrustStores"))
      common-lisp:nil "DescribeTrustStoresResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'describe-trust-stores))
(common-lisp:progn
 (common-lisp:defun get-trust-store-ca-certificates-bundle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-store-arn)
   (common-lisp:declare (common-lisp:ignorable trust-store-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-trust-store-ca-certificates-bundle-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "GetTrustStoreCaCertificatesBundle"))
      common-lisp:nil "GetTrustStoreCaCertificatesBundleResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-trust-store-ca-certificates-bundle))
(common-lisp:progn
 (common-lisp:defun get-trust-store-revocation-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-store-arn revocation-id)
   (common-lisp:declare (common-lisp:ignorable trust-store-arn revocation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-trust-store-revocation-content-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "GetTrustStoreRevocationContent"))
      common-lisp:nil "GetTrustStoreRevocationContentResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'get-trust-store-revocation-content))
(common-lisp:progn
 (common-lisp:defun modify-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn port protocol ssl-policy
                     certificates default-actions alpn-policy
                     mutual-authentication)
   (common-lisp:declare
    (common-lisp:ignorable listener-arn port protocol ssl-policy certificates
     default-actions alpn-policy mutual-authentication))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-listener-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "ModifyListener"))
      common-lisp:nil "ModifyListenerResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-listener))
(common-lisp:progn
 (common-lisp:defun modify-load-balancer-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn attributes)
   (common-lisp:declare (common-lisp:ignorable load-balancer-arn attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-load-balancer-attributes-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "ModifyLoadBalancerAttributes"))
      common-lisp:nil "ModifyLoadBalancerAttributesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-load-balancer-attributes))
(common-lisp:progn
 (common-lisp:defun modify-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-arn conditions actions)
   (common-lisp:declare (common-lisp:ignorable rule-arn conditions actions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-rule-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "ModifyRule"))
      common-lisp:nil "ModifyRuleResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-rule))
(common-lisp:progn
 (common-lisp:defun modify-target-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-group-arn health-check-protocol
                     health-check-port health-check-path health-check-enabled
                     health-check-interval-seconds health-check-timeout-seconds
                     healthy-threshold-count unhealthy-threshold-count matcher)
   (common-lisp:declare
    (common-lisp:ignorable target-group-arn health-check-protocol
     health-check-port health-check-path health-check-enabled
     health-check-interval-seconds health-check-timeout-seconds
     healthy-threshold-count unhealthy-threshold-count matcher))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-target-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "ModifyTargetGroup"))
      common-lisp:nil "ModifyTargetGroupResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-target-group))
(common-lisp:progn
 (common-lisp:defun modify-target-group-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-group-arn attributes)
   (common-lisp:declare (common-lisp:ignorable target-group-arn attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-target-group-attributes-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "ModifyTargetGroupAttributes"))
      common-lisp:nil "ModifyTargetGroupAttributesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'modify-target-group-attributes))
(common-lisp:progn
 (common-lisp:defun modify-trust-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-store-arn
                     ca-certificates-bundle-s3bucket
                     ca-certificates-bundle-s3key
                     ca-certificates-bundle-s3object-version)
   (common-lisp:declare
    (common-lisp:ignorable trust-store-arn ca-certificates-bundle-s3bucket
     ca-certificates-bundle-s3key ca-certificates-bundle-s3object-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-trust-store-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "ModifyTrustStore"))
      common-lisp:nil "ModifyTrustStoreResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'modify-trust-store))
(common-lisp:progn
 (common-lisp:defun register-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-group-arn targets)
   (common-lisp:declare (common-lisp:ignorable target-group-arn targets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-targets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "RegisterTargets"))
      common-lisp:nil "RegisterTargetsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'register-targets))
(common-lisp:progn
 (common-lisp:defun remove-listener-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn certificates)
   (common-lisp:declare (common-lisp:ignorable listener-arn certificates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-listener-certificates-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "RemoveListenerCertificates"))
      common-lisp:nil "RemoveListenerCertificatesResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'remove-listener-certificates))
(common-lisp:progn
 (common-lisp:defun remove-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arns tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arns tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "RemoveTags"))
      common-lisp:nil "RemoveTagsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'remove-tags))
(common-lisp:progn
 (common-lisp:defun remove-trust-store-revocations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trust-store-arn revocation-ids)
   (common-lisp:declare (common-lisp:ignorable trust-store-arn revocation-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-trust-store-revocations-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "RemoveTrustStoreRevocations"))
      common-lisp:nil "RemoveTrustStoreRevocationsResult" *error-map*
      common-lisp:nil)))
 (common-lisp:export 'remove-trust-store-revocations))
(common-lisp:progn
 (common-lisp:defun set-ip-address-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn ip-address-type)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-arn ip-address-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-ip-address-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "SetIpAddressType"))
      common-lisp:nil "SetIpAddressTypeResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'set-ip-address-type))
(common-lisp:progn
 (common-lisp:defun set-rule-priorities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-priorities)
   (common-lisp:declare (common-lisp:ignorable rule-priorities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-rule-priorities-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "SetRulePriorities"))
      common-lisp:nil "SetRulePrioritiesResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'set-rule-priorities))
(common-lisp:progn
 (common-lisp:defun set-security-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn security-groups
                     enforce-security-group-inbound-rules-on-private-link-traffic)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-arn security-groups
     enforce-security-group-inbound-rules-on-private-link-traffic))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-security-groups-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "SetSecurityGroups"))
      common-lisp:nil "SetSecurityGroupsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'set-security-groups))
(common-lisp:progn
 (common-lisp:defun set-subnets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn subnets subnet-mappings
                     ip-address-type)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-arn subnets subnet-mappings
     ip-address-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-subnets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'elasticloadbalancingv2-request aws-sdk/generator/operation::input
        "POST" "/" "SetSubnets"))
      common-lisp:nil "SetSubnetsResult" *error-map* common-lisp:nil)))
 (common-lisp:export 'set-subnets))
