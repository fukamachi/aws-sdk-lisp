;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/scheduler/api (:use)
                             (:nicknames #:aws/scheduler)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/scheduler/api)
(common-lisp:progn
 (common-lisp:define-condition scheduler-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'scheduler-error))
(common-lisp:progn
 (common-lisp:defclass scheduler-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "scheduler" :api-version
                        "2021-06-30" :host-prefix "scheduler" :signing-name
                        "scheduler" :global-host common-lisp:nil))
 (common-lisp:export 'scheduler-request))
(common-lisp:defvar *error-map*
  '(("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype action-after-completion () 'common-lisp:string)
(common-lisp:deftype assign-public-ip () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-vpc-configuration common-lisp:nil
                       ((assign-public-ip :initarg :assign-public-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or assign-public-ip common-lisp:null)
                         :accessor
                         struct-shape-aws-vpc-configuration-assign-public-ip
                         :shape "AssignPublicIp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-groups :initarg :security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor
                         struct-shape-aws-vpc-configuration-security-groups
                         :shape "SecurityGroups" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnets :initarg :subnets :initform
                         (common-lisp:error ":subnets is required") :type
                         (common-lisp:or subnets common-lisp:null) :accessor
                         struct-shape-aws-vpc-configuration-subnets :shape
                         "Subnets" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-vpc-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aws-vpc-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aws-vpc-configuration 'make-aws-vpc-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assign-public-ip))
      (common-lisp:list
       (common-lisp:cons "AssignPublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpc-configuration))
   common-lisp:nil))
(common-lisp:deftype capacity-provider () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype capacity-provider-strategy ()
   '(trivial-types:proper-list capacity-provider-strategy-item))
 (common-lisp:defun make-capacity-provider-strategy
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            capacity-provider-strategy-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass capacity-provider-strategy-item common-lisp:nil
                       ((base :initarg :base :initform common-lisp:nil :type
                         (common-lisp:or capacity-provider-strategy-item-base
                                         common-lisp:null)
                         :accessor
                         struct-shape-capacity-provider-strategy-item-base
                         :shape "CapacityProviderStrategyItemBase" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (capacity-provider :initarg :capacity-provider
                         :initform
                         (common-lisp:error ":capacityprovider is required")
                         :type
                         (common-lisp:or capacity-provider common-lisp:null)
                         :accessor
                         struct-shape-capacity-provider-strategy-item-capacity-provider
                         :shape "CapacityProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (weight :initarg :weight :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-provider-strategy-item-weight
                                         common-lisp:null)
                         :accessor
                         struct-shape-capacity-provider-strategy-item-weight
                         :shape "CapacityProviderStrategyItemWeight" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-capacity-provider-strategy-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'capacity-provider-strategy-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'capacity-provider-strategy-item
                    'make-capacity-provider-strategy-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          capacity-provider-strategy-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          capacity-provider-strategy-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base))
      (common-lisp:list
       (common-lisp:cons "base"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-provider))
      (common-lisp:list
       (common-lisp:cons "capacityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          capacity-provider-strategy-item))
   common-lisp:nil))
(common-lisp:deftype capacity-provider-strategy-item-base ()
  'common-lisp:integer)
(common-lisp:deftype capacity-provider-strategy-item-weight ()
  'common-lisp:integer)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (scheduler-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-schedule-group-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-schedule-group-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or schedule-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-schedule-group-input-name :shape
                         "ScheduleGroupName" :location "uri" :location-name
                         "Name")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-schedule-group-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-schedule-group-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-schedule-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-schedule-group-input
                    'make-create-schedule-group-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-schedule-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-schedule-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-schedule-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-schedule-group-output common-lisp:nil
                       ((schedule-group-arn :initarg :schedule-group-arn
                         :initform
                         (common-lisp:error ":schedule-group-arn is required")
                         :type
                         (common-lisp:or schedule-group-arn common-lisp:null)
                         :accessor
                         struct-shape-create-schedule-group-output-schedule-group-arn
                         :shape "ScheduleGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-schedule-group-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-schedule-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-schedule-group-output
                    'make-create-schedule-group-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-schedule-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-schedule-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-group-arn))
      (common-lisp:list
       (common-lisp:cons "ScheduleGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-schedule-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-schedule-input common-lisp:nil
                       ((action-after-completion :initarg
                         :action-after-completion :initform common-lisp:nil
                         :type
                         (common-lisp:or action-after-completion
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-schedule-input-action-after-completion
                         :shape "ActionAfterCompletion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-schedule-input-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-schedule-input-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-date :initarg :end-date :initform common-lisp:nil
                         :type (common-lisp:or end-date common-lisp:null)
                         :accessor struct-shape-create-schedule-input-end-date
                         :shape "EndDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (flexible-time-window :initarg :flexible-time-window
                         :initform
                         (common-lisp:error
                          ":flexible-time-window is required")
                         :type
                         (common-lisp:or flexible-time-window common-lisp:null)
                         :accessor
                         struct-shape-create-schedule-input-flexible-time-window
                         :shape "FlexibleTimeWindow" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schedule-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-schedule-input-group-name :shape
                         "ScheduleGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-create-schedule-input-kms-key-arn :shape
                         "KmsKeyArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-schedule-input-name :shape "Name"
                         :location "uri" :location-name "Name")
                        (schedule-expression :initarg :schedule-expression
                         :initform
                         (common-lisp:error ":schedule-expression is required")
                         :type
                         (common-lisp:or schedule-expression common-lisp:null)
                         :accessor
                         struct-shape-create-schedule-input-schedule-expression
                         :shape "ScheduleExpression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule-expression-timezone :initarg
                         :schedule-expression-timezone :initform
                         common-lisp:nil :type
                         (common-lisp:or schedule-expression-timezone
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-schedule-input-schedule-expression-timezone
                         :shape "ScheduleExpressionTimezone" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-date :initarg :start-date :initform
                         common-lisp:nil :type
                         (common-lisp:or start-date common-lisp:null) :accessor
                         struct-shape-create-schedule-input-start-date :shape
                         "StartDate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or schedule-state common-lisp:null)
                         :accessor struct-shape-create-schedule-input-state
                         :shape "ScheduleState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or target common-lisp:null) :accessor
                         struct-shape-create-schedule-input-target :shape
                         "Target" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-schedule-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-schedule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-schedule-input 'make-create-schedule-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-schedule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-schedule-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-after-completion))
      (common-lisp:list
       (common-lisp:cons "ActionAfterCompletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "EndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flexible-time-window))
      (common-lisp:list
       (common-lisp:cons "FlexibleTimeWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-expression-timezone))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpressionTimezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-schedule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-schedule-output common-lisp:nil
                       ((schedule-arn :initarg :schedule-arn :initform
                         (common-lisp:error ":schedule-arn is required") :type
                         (common-lisp:or schedule-arn common-lisp:null)
                         :accessor
                         struct-shape-create-schedule-output-schedule-arn
                         :shape "ScheduleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-schedule-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-schedule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-schedule-output 'make-create-schedule-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-schedule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-schedule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-arn))
      (common-lisp:list
       (common-lisp:cons "ScheduleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-schedule-output))
   common-lisp:nil))
(common-lisp:deftype creation-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dead-letter-config common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or dead-letter-config-arn-string
                                         common-lisp:null)
                         :accessor struct-shape-dead-letter-config-arn :shape
                         "DeadLetterConfigArnString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dead-letter-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dead-letter-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dead-letter-config 'make-dead-letter-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dead-letter-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dead-letter-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dead-letter-config))
   common-lisp:nil))
(common-lisp:deftype dead-letter-config-arn-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-schedule-group-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-schedule-group-input-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or schedule-group-name common-lisp:null)
                         :accessor
                         struct-shape-delete-schedule-group-input-name :shape
                         "ScheduleGroupName" :location "uri" :location-name
                         "Name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-schedule-group-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-schedule-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-schedule-group-input
                    'make-delete-schedule-group-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-schedule-group-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-schedule-group-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-schedule-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-schedule-group-output
                    'make-delete-schedule-group-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-schedule-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-schedule-input-client-token :shape
                         "ClientToken" :location "querystring" :location-name
                         "clientToken")
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schedule-group-name common-lisp:null)
                         :accessor
                         struct-shape-delete-schedule-input-group-name :shape
                         "ScheduleGroupName" :location "querystring"
                         :location-name "groupName")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-delete-schedule-input-name :shape "Name"
                         :location "uri" :location-name "Name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-schedule-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-schedule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-schedule-input 'make-delete-schedule-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-schedule-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-schedule-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-schedule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-schedule-output 'make-delete-schedule-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-output))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype detail-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ecs-parameters common-lisp:nil
                       ((capacity-provider-strategy :initarg
                         :capacity-provider-strategy :initform common-lisp:nil
                         :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-ecs-parameters-capacity-provider-strategy
                         :shape "CapacityProviderStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enable-ecsmanaged-tags :initarg
                         :enable-ecsmanaged-tags :initform common-lisp:nil
                         :type
                         (common-lisp:or enable-ecsmanaged-tags
                                         common-lisp:null)
                         :accessor
                         struct-shape-ecs-parameters-enable-ecsmanaged-tags
                         :shape "EnableECSManagedTags" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enable-execute-command :initarg
                         :enable-execute-command :initform common-lisp:nil
                         :type
                         (common-lisp:or enable-execute-command
                                         common-lisp:null)
                         :accessor
                         struct-shape-ecs-parameters-enable-execute-command
                         :shape "EnableExecuteCommand" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (group :initarg :group :initform common-lisp:nil :type
                         (common-lisp:or group common-lisp:null) :accessor
                         struct-shape-ecs-parameters-group :shape "Group"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (launch-type :initarg :launch-type :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor struct-shape-ecs-parameters-launch-type
                         :shape "LaunchType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-configuration :initarg :network-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-ecs-parameters-network-configuration
                         :shape "NetworkConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (placement-constraints :initarg :placement-constraints
                         :initform common-lisp:nil :type
                         (common-lisp:or placement-constraints
                                         common-lisp:null)
                         :accessor
                         struct-shape-ecs-parameters-placement-constraints
                         :shape "PlacementConstraints" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (placement-strategy :initarg :placement-strategy
                         :initform common-lisp:nil :type
                         (common-lisp:or placement-strategies common-lisp:null)
                         :accessor
                         struct-shape-ecs-parameters-placement-strategy :shape
                         "PlacementStrategies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform-version :initarg :platform-version :initform
                         common-lisp:nil :type
                         (common-lisp:or platform-version common-lisp:null)
                         :accessor struct-shape-ecs-parameters-platform-version
                         :shape "PlatformVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (propagate-tags :initarg :propagate-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or propagate-tags common-lisp:null)
                         :accessor struct-shape-ecs-parameters-propagate-tags
                         :shape "PropagateTags" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reference-id :initarg :reference-id :initform
                         common-lisp:nil :type
                         (common-lisp:or reference-id common-lisp:null)
                         :accessor struct-shape-ecs-parameters-reference-id
                         :shape "ReferenceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-ecs-parameters-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-count :initarg :task-count :initform
                         common-lisp:nil :type
                         (common-lisp:or task-count common-lisp:null) :accessor
                         struct-shape-ecs-parameters-task-count :shape
                         "TaskCount" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-definition-arn :initarg :task-definition-arn
                         :initform
                         (common-lisp:error ":task-definition-arn is required")
                         :type
                         (common-lisp:or task-definition-arn common-lisp:null)
                         :accessor
                         struct-shape-ecs-parameters-task-definition-arn :shape
                         "TaskDefinitionArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ecs-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ecs-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ecs-parameters 'make-ecs-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecs-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecs-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "CapacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-ecsmanaged-tags))
      (common-lisp:list
       (common-lisp:cons "EnableECSManagedTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-execute-command))
      (common-lisp:list
       (common-lisp:cons "EnableExecuteCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "LaunchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "PlacementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-strategy))
      (common-lisp:list
       (common-lisp:cons "PlacementStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "PlatformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-tags))
      (common-lisp:list
       (common-lisp:cons "PropagateTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-count))
      (common-lisp:list
       (common-lisp:cons "TaskCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition-arn))
      (common-lisp:list
       (common-lisp:cons "TaskDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecs-parameters))
   common-lisp:nil))
(common-lisp:deftype enable-ecsmanaged-tags () 'common-lisp:boolean)
(common-lisp:deftype enable-execute-command () 'common-lisp:boolean)
(common-lisp:deftype end-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-bridge-parameters common-lisp:nil
                       ((detail-type :initarg :detail-type :initform
                         (common-lisp:error ":detail-type is required") :type
                         (common-lisp:or detail-type common-lisp:null)
                         :accessor
                         struct-shape-event-bridge-parameters-detail-type
                         :shape "DetailType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or source common-lisp:null) :accessor
                         struct-shape-event-bridge-parameters-source :shape
                         "Source" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-bridge-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-bridge-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-bridge-parameters 'make-event-bridge-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail-type))
      (common-lisp:list
       (common-lisp:cons "DetailType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass flexible-time-window common-lisp:nil
                       ((maximum-window-in-minutes :initarg
                         :maximum-window-in-minutes :initform common-lisp:nil
                         :type
                         (common-lisp:or maximum-window-in-minutes
                                         common-lisp:null)
                         :accessor
                         struct-shape-flexible-time-window-maximum-window-in-minutes
                         :shape "MaximumWindowInMinutes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (mode :initarg :mode :initform
                         (common-lisp:error ":mode is required") :type
                         (common-lisp:or flexible-time-window-mode
                                         common-lisp:null)
                         :accessor struct-shape-flexible-time-window-mode
                         :shape "FlexibleTimeWindowMode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-flexible-time-window
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'flexible-time-window
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'flexible-time-window 'make-flexible-time-window))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input flexible-time-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input flexible-time-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-window-in-minutes))
      (common-lisp:list
       (common-lisp:cons "MaximumWindowInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input flexible-time-window))
   common-lisp:nil))
(common-lisp:deftype flexible-time-window-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-schedule-group-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or schedule-group-name common-lisp:null)
                         :accessor struct-shape-get-schedule-group-input-name
                         :shape "ScheduleGroupName" :location "uri"
                         :location-name "Name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schedule-group-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-schedule-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schedule-group-input 'make-get-schedule-group-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schedule-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schedule-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schedule-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schedule-group-output common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or schedule-group-arn common-lisp:null)
                         :accessor struct-shape-get-schedule-group-output-arn
                         :shape "ScheduleGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor
                         struct-shape-get-schedule-group-output-creation-date
                         :shape "CreationDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-date :initarg
                         :last-modification-date :initform common-lisp:nil
                         :type
                         (common-lisp:or last-modification-date
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schedule-group-output-last-modification-date
                         :shape "LastModificationDate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or schedule-group-name common-lisp:null)
                         :accessor struct-shape-get-schedule-group-output-name
                         :shape "ScheduleGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or schedule-group-state common-lisp:null)
                         :accessor struct-shape-get-schedule-group-output-state
                         :shape "ScheduleGroupState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schedule-group-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-schedule-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schedule-group-output
                    'make-get-schedule-group-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schedule-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schedule-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-date))
      (common-lisp:list
       (common-lisp:cons "LastModificationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schedule-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schedule-input common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schedule-group-name common-lisp:null)
                         :accessor struct-shape-get-schedule-input-group-name
                         :shape "ScheduleGroupName" :location "querystring"
                         :location-name "groupName")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-get-schedule-input-name :shape "Name"
                         :location "uri" :location-name "Name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schedule-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-schedule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schedule-input 'make-get-schedule-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-schedule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-schedule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-schedule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schedule-output common-lisp:nil
                       ((action-after-completion :initarg
                         :action-after-completion :initform common-lisp:nil
                         :type
                         (common-lisp:or action-after-completion
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schedule-output-action-after-completion
                         :shape "ActionAfterCompletion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or schedule-arn common-lisp:null)
                         :accessor struct-shape-get-schedule-output-arn :shape
                         "ScheduleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor
                         struct-shape-get-schedule-output-creation-date :shape
                         "CreationDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-get-schedule-output-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-date :initarg :end-date :initform common-lisp:nil
                         :type (common-lisp:or end-date common-lisp:null)
                         :accessor struct-shape-get-schedule-output-end-date
                         :shape "EndDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (flexible-time-window :initarg :flexible-time-window
                         :initform common-lisp:nil :type
                         (common-lisp:or flexible-time-window common-lisp:null)
                         :accessor
                         struct-shape-get-schedule-output-flexible-time-window
                         :shape "FlexibleTimeWindow" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schedule-group-name common-lisp:null)
                         :accessor struct-shape-get-schedule-output-group-name
                         :shape "ScheduleGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor struct-shape-get-schedule-output-kms-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-date :initarg
                         :last-modification-date :initform common-lisp:nil
                         :type
                         (common-lisp:or last-modification-date
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schedule-output-last-modification-date
                         :shape "LastModificationDate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-get-schedule-output-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schedule-expression :initarg :schedule-expression
                         :initform common-lisp:nil :type
                         (common-lisp:or schedule-expression common-lisp:null)
                         :accessor
                         struct-shape-get-schedule-output-schedule-expression
                         :shape "ScheduleExpression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule-expression-timezone :initarg
                         :schedule-expression-timezone :initform
                         common-lisp:nil :type
                         (common-lisp:or schedule-expression-timezone
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schedule-output-schedule-expression-timezone
                         :shape "ScheduleExpressionTimezone" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-date :initarg :start-date :initform
                         common-lisp:nil :type
                         (common-lisp:or start-date common-lisp:null) :accessor
                         struct-shape-get-schedule-output-start-date :shape
                         "StartDate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or schedule-state common-lisp:null)
                         :accessor struct-shape-get-schedule-output-state
                         :shape "ScheduleState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target :initarg :target :initform common-lisp:nil
                         :type (common-lisp:or target common-lisp:null)
                         :accessor struct-shape-get-schedule-output-target
                         :shape "Target" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schedule-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-schedule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schedule-output 'make-get-schedule-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-schedule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-schedule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-after-completion))
      (common-lisp:list
       (common-lisp:cons "ActionAfterCompletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "EndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flexible-time-window))
      (common-lisp:list
       (common-lisp:cons "FlexibleTimeWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-date))
      (common-lisp:list
       (common-lisp:cons "LastModificationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-expression-timezone))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpressionTimezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-schedule-output))
   common-lisp:nil))
(common-lisp:deftype group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (scheduler-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass kinesis-parameters common-lisp:nil
                       ((partition-key :initarg :partition-key :initform
                         (common-lisp:error ":partition-key is required") :type
                         (common-lisp:or target-partition-key common-lisp:null)
                         :accessor
                         struct-shape-kinesis-parameters-partition-key :shape
                         "TargetPartitionKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kinesis-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kinesis-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kinesis-parameters 'make-kinesis-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kinesis-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kinesis-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-key))
      (common-lisp:list
       (common-lisp:cons "PartitionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kinesis-parameters))
   common-lisp:nil))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:deftype last-modification-date () 'common-lisp:string)
(common-lisp:deftype launch-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-schedule-groups-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-schedule-groups-input-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "MaxResults")
                        (name-prefix :initarg :name-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or schedule-group-name-prefix
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-schedule-groups-input-name-prefix
                         :shape "ScheduleGroupNamePrefix" :location
                         "querystring" :location-name "NamePrefix")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-schedule-groups-input-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "NextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-schedule-groups-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-schedule-groups-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-schedule-groups-input
                    'make-list-schedule-groups-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-schedule-groups-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-schedule-groups-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-schedule-groups-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-schedule-groups-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-schedule-groups-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule-groups :initarg :schedule-groups :initform
                         (common-lisp:error ":schedule-groups is required")
                         :type
                         (common-lisp:or schedule-group-list common-lisp:null)
                         :accessor
                         struct-shape-list-schedule-groups-output-schedule-groups
                         :shape "ScheduleGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-schedule-groups-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-schedule-groups-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-schedule-groups-output
                    'make-list-schedule-groups-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-schedule-groups-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-schedule-groups-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-groups))
      (common-lisp:list
       (common-lisp:cons "ScheduleGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-schedule-groups-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-schedules-input common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schedule-group-name common-lisp:null)
                         :accessor struct-shape-list-schedules-input-group-name
                         :shape "ScheduleGroupName" :location "querystring"
                         :location-name "ScheduleGroup")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-schedules-input-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "MaxResults")
                        (name-prefix :initarg :name-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or name-prefix common-lisp:null)
                         :accessor
                         struct-shape-list-schedules-input-name-prefix :shape
                         "NamePrefix" :location "querystring" :location-name
                         "NamePrefix")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-schedules-input-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "NextToken")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or schedule-state common-lisp:null)
                         :accessor struct-shape-list-schedules-input-state
                         :shape "ScheduleState" :location "querystring"
                         :location-name "State"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-schedules-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-schedules-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-schedules-input 'make-list-schedules-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-schedules-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-schedules-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-schedules-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-schedules-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-schedules-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schedules :initarg :schedules :initform
                         (common-lisp:error ":schedules is required") :type
                         (common-lisp:or schedule-list common-lisp:null)
                         :accessor struct-shape-list-schedules-output-schedules
                         :shape "ScheduleList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-schedules-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-schedules-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-schedules-output 'make-list-schedules-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-schedules-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-schedules-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedules))
      (common-lisp:list
       (common-lisp:cons "Schedules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-schedules-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or tag-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-input-resource-arn
                         :shape "TagResourceArn" :location "uri" :location-name
                         "ResourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-output-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype maximum-event-age-in-seconds () 'common-lisp:integer)
(common-lisp:deftype maximum-retry-attempts () 'common-lisp:integer)
(common-lisp:deftype maximum-window-in-minutes () 'common-lisp:integer)
(common-lisp:deftype message-group-id () 'common-lisp:string)
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype name-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-configuration common-lisp:nil
                       ((awsvpc-configuration :initarg :awsvpc-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-vpc-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-network-configuration-awsvpc-configuration
                         :shape "AwsVpcConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-configuration 'make-network-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'awsvpc-configuration))
      (common-lisp:list
       (common-lisp:cons "awsvpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass placement-constraint common-lisp:nil
                       ((expression :initarg :expression :initform
                         common-lisp:nil :type
                         (common-lisp:or placement-constraint-expression
                                         common-lisp:null)
                         :accessor struct-shape-placement-constraint-expression
                         :shape "PlacementConstraintExpression" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or placement-constraint-type
                                         common-lisp:null)
                         :accessor struct-shape-placement-constraint-type
                         :shape "PlacementConstraintType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-placement-constraint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'placement-constraint
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'placement-constraint 'make-placement-constraint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input placement-constraint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input placement-constraint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input placement-constraint))
   common-lisp:nil))
(common-lisp:deftype placement-constraint-expression () 'common-lisp:string)
(common-lisp:deftype placement-constraint-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype placement-constraints ()
   '(trivial-types:proper-list placement-constraint))
 (common-lisp:defun make-placement-constraints
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list placement-constraint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype placement-strategies ()
   '(trivial-types:proper-list placement-strategy))
 (common-lisp:defun make-placement-strategies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list placement-strategy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass placement-strategy common-lisp:nil
                       ((field :initarg :field :initform common-lisp:nil :type
                         (common-lisp:or placement-strategy-field
                                         common-lisp:null)
                         :accessor struct-shape-placement-strategy-field :shape
                         "PlacementStrategyField" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or placement-strategy-type
                                         common-lisp:null)
                         :accessor struct-shape-placement-strategy-type :shape
                         "PlacementStrategyType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-placement-strategy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'placement-strategy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'placement-strategy 'make-placement-strategy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input placement-strategy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input placement-strategy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input placement-strategy))
   common-lisp:nil))
(common-lisp:deftype placement-strategy-field () 'common-lisp:string)
(common-lisp:deftype placement-strategy-type () 'common-lisp:string)
(common-lisp:deftype platform-version () 'common-lisp:string)
(common-lisp:deftype propagate-tags () 'common-lisp:string)
(common-lisp:deftype reference-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (scheduler-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass retry-policy common-lisp:nil
                       ((maximum-event-age-in-seconds :initarg
                         :maximum-event-age-in-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or maximum-event-age-in-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-retry-policy-maximum-event-age-in-seconds
                         :shape "MaximumEventAgeInSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-retry-attempts :initarg
                         :maximum-retry-attempts :initform common-lisp:nil
                         :type
                         (common-lisp:or maximum-retry-attempts
                                         common-lisp:null)
                         :accessor
                         struct-shape-retry-policy-maximum-retry-attempts
                         :shape "MaximumRetryAttempts" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retry-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retry-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'retry-policy 'make-retry-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retry-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retry-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-event-age-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumEventAgeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-retry-attempts))
      (common-lisp:list
       (common-lisp:cons "MaximumRetryAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retry-policy))
   common-lisp:nil))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sage-maker-pipeline-parameter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or sage-maker-pipeline-parameter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-sage-maker-pipeline-parameter-name :shape
                         "SageMakerPipelineParameterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or sage-maker-pipeline-parameter-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-sage-maker-pipeline-parameter-value
                         :shape "SageMakerPipelineParameterValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sage-maker-pipeline-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'sage-maker-pipeline-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sage-maker-pipeline-parameter
                    'make-sage-maker-pipeline-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-pipeline-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-pipeline-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-pipeline-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sage-maker-pipeline-parameter-list ()
   '(trivial-types:proper-list sage-maker-pipeline-parameter))
 (common-lisp:defun make-sage-maker-pipeline-parameter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sage-maker-pipeline-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sage-maker-pipeline-parameter-name () 'common-lisp:string)
(common-lisp:deftype sage-maker-pipeline-parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sage-maker-pipeline-parameters common-lisp:nil
                       ((pipeline-parameter-list :initarg
                         :pipeline-parameter-list :initform common-lisp:nil
                         :type
                         (common-lisp:or sage-maker-pipeline-parameter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-sage-maker-pipeline-parameters-pipeline-parameter-list
                         :shape "SageMakerPipelineParameterList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sage-maker-pipeline-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'sage-maker-pipeline-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sage-maker-pipeline-parameters
                    'make-sage-maker-pipeline-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-pipeline-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-pipeline-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-parameter-list))
      (common-lisp:list
       (common-lisp:cons "PipelineParameterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-pipeline-parameters))
   common-lisp:nil))
(common-lisp:deftype schedule-arn () 'common-lisp:string)
(common-lisp:deftype schedule-expression () 'common-lisp:string)
(common-lisp:deftype schedule-expression-timezone () 'common-lisp:string)
(common-lisp:deftype schedule-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype schedule-group-list ()
   '(trivial-types:proper-list schedule-group-summary))
 (common-lisp:defun make-schedule-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schedule-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype schedule-group-name () 'common-lisp:string)
(common-lisp:deftype schedule-group-name-prefix () 'common-lisp:string)
(common-lisp:deftype schedule-group-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass schedule-group-summary common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or schedule-group-arn common-lisp:null)
                         :accessor struct-shape-schedule-group-summary-arn
                         :shape "ScheduleGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor
                         struct-shape-schedule-group-summary-creation-date
                         :shape "CreationDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-date :initarg
                         :last-modification-date :initform common-lisp:nil
                         :type
                         (common-lisp:or last-modification-date
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-group-summary-last-modification-date
                         :shape "LastModificationDate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or schedule-group-name common-lisp:null)
                         :accessor struct-shape-schedule-group-summary-name
                         :shape "ScheduleGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or schedule-group-state common-lisp:null)
                         :accessor struct-shape-schedule-group-summary-state
                         :shape "ScheduleGroupState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule-group-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schedule-group-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schedule-group-summary 'make-schedule-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-date))
      (common-lisp:list
       (common-lisp:cons "LastModificationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schedule-list ()
   '(trivial-types:proper-list schedule-summary))
 (common-lisp:defun make-schedule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schedule-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype schedule-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass schedule-summary common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or schedule-arn common-lisp:null)
                         :accessor struct-shape-schedule-summary-arn :shape
                         "ScheduleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor struct-shape-schedule-summary-creation-date
                         :shape "CreationDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schedule-group-name common-lisp:null)
                         :accessor struct-shape-schedule-summary-group-name
                         :shape "ScheduleGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modification-date :initarg
                         :last-modification-date :initform common-lisp:nil
                         :type
                         (common-lisp:or last-modification-date
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-summary-last-modification-date
                         :shape "LastModificationDate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-schedule-summary-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or schedule-state common-lisp:null)
                         :accessor struct-shape-schedule-summary-state :shape
                         "ScheduleState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target :initarg :target :initform common-lisp:nil
                         :type (common-lisp:or target-summary common-lisp:null)
                         :accessor struct-shape-schedule-summary-target :shape
                         "TargetSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schedule-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schedule-summary 'make-schedule-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modification-date))
      (common-lisp:list
       (common-lisp:cons "LastModificationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule-summary))
   common-lisp:nil))
(common-lisp:deftype security-group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-groups ()
   '(trivial-types:proper-list security-group))
 (common-lisp:defun make-security-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (scheduler-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sqs-parameters common-lisp:nil
                       ((message-group-id :initarg :message-group-id :initform
                         common-lisp:nil :type
                         (common-lisp:or message-group-id common-lisp:null)
                         :accessor struct-shape-sqs-parameters-message-group-id
                         :shape "MessageGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sqs-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sqs-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sqs-parameters 'make-sqs-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sqs-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sqs-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-group-id))
      (common-lisp:list
       (common-lisp:cons "MessageGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sqs-parameters))
   common-lisp:nil))
(common-lisp:deftype start-date () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype subnet () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnets () '(trivial-types:proper-list subnet))
 (common-lisp:defun make-subnets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype tag-resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or tag-resource-arn common-lisp:null)
                         :accessor struct-shape-tag-resource-input-resource-arn
                         :shape "TagResourceArn" :location "uri" :location-name
                         "ResourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-input-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag-map))
 (common-lisp:defun make-tags
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass target common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or target-arn common-lisp:null) :accessor
                         struct-shape-target-arn :shape "TargetArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dead-letter-config :initarg :dead-letter-config
                         :initform common-lisp:nil :type
                         (common-lisp:or dead-letter-config common-lisp:null)
                         :accessor struct-shape-target-dead-letter-config
                         :shape "DeadLetterConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ecs-parameters :initarg :ecs-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or ecs-parameters common-lisp:null)
                         :accessor struct-shape-target-ecs-parameters :shape
                         "EcsParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-bridge-parameters :initarg
                         :event-bridge-parameters :initform common-lisp:nil
                         :type
                         (common-lisp:or event-bridge-parameters
                                         common-lisp:null)
                         :accessor struct-shape-target-event-bridge-parameters
                         :shape "EventBridgeParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input :initarg :input :initform common-lisp:nil :type
                         (common-lisp:or target-input common-lisp:null)
                         :accessor struct-shape-target-input :shape
                         "TargetInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kinesis-parameters :initarg :kinesis-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or kinesis-parameters common-lisp:null)
                         :accessor struct-shape-target-kinesis-parameters
                         :shape "KinesisParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retry-policy :initarg :retry-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or retry-policy common-lisp:null)
                         :accessor struct-shape-target-retry-policy :shape
                         "RetryPolicy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-target-role-arn :shape "RoleArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sage-maker-pipeline-parameters :initarg
                         :sage-maker-pipeline-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or sage-maker-pipeline-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-target-sage-maker-pipeline-parameters
                         :shape "SageMakerPipelineParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sqs-parameters :initarg :sqs-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or sqs-parameters common-lisp:null)
                         :accessor struct-shape-target-sqs-parameters :shape
                         "SqsParameters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'target 'make-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dead-letter-config))
      (common-lisp:list
       (common-lisp:cons "DeadLetterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-parameters))
      (common-lisp:list
       (common-lisp:cons "EcsParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-bridge-parameters))
      (common-lisp:list
       (common-lisp:cons "EventBridgeParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-parameters))
      (common-lisp:list
       (common-lisp:cons "KinesisParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-policy))
      (common-lisp:list
       (common-lisp:cons "RetryPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sage-maker-pipeline-parameters))
      (common-lisp:list
       (common-lisp:cons "SageMakerPipelineParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sqs-parameters))
      (common-lisp:list
       (common-lisp:cons "SqsParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target))
   common-lisp:nil))
(common-lisp:deftype target-arn () 'common-lisp:string)
(common-lisp:deftype target-input () 'common-lisp:string)
(common-lisp:deftype target-partition-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or target-arn common-lisp:null) :accessor
                         struct-shape-target-summary-arn :shape "TargetArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'target-summary 'make-target-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-summary))
   common-lisp:nil))
(common-lisp:deftype task-count () 'common-lisp:integer)
(common-lisp:deftype task-definition-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (scheduler-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or tag-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-input-resource-arn :shape
                         "TagResourceArn" :location "uri" :location-name
                         "ResourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-input-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "TagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-schedule-input common-lisp:nil
                       ((action-after-completion :initarg
                         :action-after-completion :initform common-lisp:nil
                         :type
                         (common-lisp:or action-after-completion
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-schedule-input-action-after-completion
                         :shape "ActionAfterCompletion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-schedule-input-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-schedule-input-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-date :initarg :end-date :initform common-lisp:nil
                         :type (common-lisp:or end-date common-lisp:null)
                         :accessor struct-shape-update-schedule-input-end-date
                         :shape "EndDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (flexible-time-window :initarg :flexible-time-window
                         :initform
                         (common-lisp:error
                          ":flexible-time-window is required")
                         :type
                         (common-lisp:or flexible-time-window common-lisp:null)
                         :accessor
                         struct-shape-update-schedule-input-flexible-time-window
                         :shape "FlexibleTimeWindow" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schedule-group-name common-lisp:null)
                         :accessor
                         struct-shape-update-schedule-input-group-name :shape
                         "ScheduleGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-update-schedule-input-kms-key-arn :shape
                         "KmsKeyArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-schedule-input-name :shape "Name"
                         :location "uri" :location-name "Name")
                        (schedule-expression :initarg :schedule-expression
                         :initform
                         (common-lisp:error ":schedule-expression is required")
                         :type
                         (common-lisp:or schedule-expression common-lisp:null)
                         :accessor
                         struct-shape-update-schedule-input-schedule-expression
                         :shape "ScheduleExpression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule-expression-timezone :initarg
                         :schedule-expression-timezone :initform
                         common-lisp:nil :type
                         (common-lisp:or schedule-expression-timezone
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-schedule-input-schedule-expression-timezone
                         :shape "ScheduleExpressionTimezone" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-date :initarg :start-date :initform
                         common-lisp:nil :type
                         (common-lisp:or start-date common-lisp:null) :accessor
                         struct-shape-update-schedule-input-start-date :shape
                         "StartDate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or schedule-state common-lisp:null)
                         :accessor struct-shape-update-schedule-input-state
                         :shape "ScheduleState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or target common-lisp:null) :accessor
                         struct-shape-update-schedule-input-target :shape
                         "Target" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-schedule-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-schedule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-schedule-input 'make-update-schedule-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-schedule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-schedule-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'action-after-completion))
      (common-lisp:list
       (common-lisp:cons "ActionAfterCompletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "EndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flexible-time-window))
      (common-lisp:list
       (common-lisp:cons "FlexibleTimeWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-expression-timezone))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpressionTimezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-schedule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-schedule-output common-lisp:nil
                       ((schedule-arn :initarg :schedule-arn :initform
                         (common-lisp:error ":schedule-arn is required") :type
                         (common-lisp:or schedule-arn common-lisp:null)
                         :accessor
                         struct-shape-update-schedule-output-schedule-arn
                         :shape "ScheduleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-schedule-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-schedule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-schedule-output 'make-update-schedule-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-schedule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-schedule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-arn))
      (common-lisp:list
       (common-lisp:cons "ScheduleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-schedule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (scheduler-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun create-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-after-completion client-token
                     description end-date flexible-time-window group-name
                     kms-key-arn name schedule-expression
                     schedule-expression-timezone start-date state target)
   (common-lisp:declare
    (common-lisp:ignorable action-after-completion client-token description
     end-date flexible-time-window group-name kms-key-arn name
     schedule-expression schedule-expression-timezone start-date state target))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-schedule-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'scheduler-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/schedules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateSchedule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-schedule))
(common-lisp:progn
 (common-lisp:defun create-schedule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token name tags)
   (common-lisp:declare (common-lisp:ignorable client-token name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-schedule-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'scheduler-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/schedule-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateScheduleGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-schedule-group))
(common-lisp:progn
 (common-lisp:defun delete-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token group-name name)
   (common-lisp:declare (common-lisp:ignorable client-token group-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-schedule-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'scheduler-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/schedules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteSchedule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-schedule))
(common-lisp:progn
 (common-lisp:defun delete-schedule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token name)
   (common-lisp:declare (common-lisp:ignorable client-token name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-schedule-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'scheduler-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/schedule-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteScheduleGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-schedule-group))
(common-lisp:progn
 (common-lisp:defun get-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name name)
   (common-lisp:declare (common-lisp:ignorable group-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schedule-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'scheduler-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/schedules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetSchedule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-schedule))
(common-lisp:progn
 (common-lisp:defun get-schedule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schedule-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'scheduler-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/schedule-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetScheduleGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-schedule-group))
(common-lisp:progn
 (common-lisp:defun list-schedule-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results name-prefix next-token)
   (common-lisp:declare
    (common-lisp:ignorable max-results name-prefix next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-schedule-groups-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'scheduler-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/schedule-groups"
                                                        "ListScheduleGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-schedule-groups))
(common-lisp:progn
 (common-lisp:defun list-schedules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name max-results name-prefix
                     next-token state)
   (common-lisp:declare
    (common-lisp:ignorable group-name max-results name-prefix next-token
     state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-schedules-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'scheduler-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/schedules"
                                                        "ListSchedules"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-schedules))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'scheduler-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'scheduler-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'scheduler-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-after-completion client-token
                     description end-date flexible-time-window group-name
                     kms-key-arn name schedule-expression
                     schedule-expression-timezone start-date state target)
   (common-lisp:declare
    (common-lisp:ignorable action-after-completion client-token description
     end-date flexible-time-window group-name kms-key-arn name
     schedule-expression schedule-expression-timezone start-date state target))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-schedule-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'scheduler-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/schedules/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateSchedule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-schedule))
