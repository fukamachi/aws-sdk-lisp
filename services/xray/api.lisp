;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/xray/api
  (:use)
  (:nicknames #:aws/xray)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/xray/api)
(common-lisp:progn
 (common-lisp:define-condition xray-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'xray-error))
(common-lisp:progn
 (common-lisp:defclass xray-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "xray" :api-version
                        "2016-04-12" :host-prefix "xray" :signing-name
                        common-lisp:nil :global-host common-lisp:nil))
 (common-lisp:export 'xray-request))
(common-lisp:defvar *error-map*
  '(("InvalidPolicyRevisionIdException" . invalid-policy-revision-id-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("LockoutPreventionException" . lockout-prevention-exception)
    ("MalformedPolicyDocumentException" . malformed-policy-document-exception)
    ("PolicyCountLimitExceededException"
     . policy-count-limit-exceeded-exception)
    ("PolicySizeLimitExceededException" . policy-size-limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("RuleLimitExceededException" . rule-limit-exceeded-exception)
    ("ThrottledException" . throttled-exception)
    ("TooManyTagsException" . too-many-tags-exception)))
(common-lisp:progn
 (common-lisp:defclass alias common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-alias-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (names :initarg :names :initform common-lisp:nil :type
                         (common-lisp:or alias-names common-lisp:null)
                         :accessor struct-shape-alias-names :shape "AliasNames"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-alias-type :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-alias
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'alias
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'alias 'make-alias))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alias))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alias-list () '(trivial-types:proper-list alias))
 (common-lisp:defun make-alias-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype alias-names () '(trivial-types:proper-list string))
 (common-lisp:defun make-alias-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:deftype annotation-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass annotation-value common-lisp:nil
                       ((number-value :initarg :number-value :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor struct-shape-annotation-value-number-value
                         :shape "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (boolean-value :initarg :boolean-value :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor struct-shape-annotation-value-boolean-value
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (string-value :initarg :string-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-annotation-value-string-value :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-annotation-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'annotation-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'annotation-value 'make-annotation-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input annotation-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input annotation-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-value))
      (common-lisp:list
       (common-lisp:cons "NumberValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boolean-value))
      (common-lisp:list
       (common-lisp:cons "BooleanValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "StringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input annotation-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype annotations () 'common-lisp:hash-table)
 (common-lisp:defun make-annotations (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass anomalous-service common-lisp:nil
                       ((service-id :initarg :service-id :initform
                         common-lisp:nil :type
                         (common-lisp:or service-id common-lisp:null) :accessor
                         struct-shape-anomalous-service-service-id :shape
                         "ServiceId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-anomalous-service
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'anomalous-service
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'anomalous-service 'make-anomalous-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomalous-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomalous-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-id))
      (common-lisp:list
       (common-lisp:cons "ServiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomalous-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype anomalous-service-list ()
   '(trivial-types:proper-list anomalous-service))
 (common-lisp:defun make-anomalous-service-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomalous-service))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attribute-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attribute-map () 'common-lisp:hash-table)
 (common-lisp:defun make-attribute-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass availability-zone-detail common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-availability-zone-detail-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-availability-zone-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'availability-zone-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'availability-zone-detail 'make-availability-zone-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          availability-zone-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          availability-zone-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          availability-zone-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-connection-errors common-lisp:nil
                       ((timeout-count :initarg :timeout-count :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-backend-connection-errors-timeout-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-refused-count :initarg
                         :connection-refused-count :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-backend-connection-errors-connection-refused-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (httpcode4xxcount :initarg :httpcode4xxcount :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-backend-connection-errors-httpcode4xxcount
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (httpcode5xxcount :initarg :httpcode5xxcount :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-backend-connection-errors-httpcode5xxcount
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unknown-host-count :initarg :unknown-host-count
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-backend-connection-errors-unknown-host-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (other-count :initarg :other-count :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-backend-connection-errors-other-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-connection-errors
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backend-connection-errors
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-connection-errors
                    'make-backend-connection-errors))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-connection-errors))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-connection-errors))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-count))
      (common-lisp:list
       (common-lisp:cons "TimeoutCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-refused-count))
      (common-lisp:list
       (common-lisp:cons "ConnectionRefusedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'httpcode4xxcount))
      (common-lisp:list
       (common-lisp:cons "HTTPCode4XXCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'httpcode5xxcount))
      (common-lisp:list
       (common-lisp:cons "HTTPCode5XXCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown-host-count))
      (common-lisp:list
       (common-lisp:cons "UnknownHostCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'other-count))
      (common-lisp:list
       (common-lisp:cons "OtherCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-connection-errors))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-traces-request common-lisp:nil
                       ((trace-ids :initarg :trace-ids :initform
                         (common-lisp:error ":trace-ids is required") :type
                         (common-lisp:or trace-id-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-traces-request-trace-ids :shape
                         "TraceIdList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-batch-get-traces-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-traces-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-traces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-traces-request 'make-batch-get-traces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-traces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-traces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-ids))
      (common-lisp:list
       (common-lisp:cons "TraceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-traces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-traces-result common-lisp:nil
                       ((traces :initarg :traces :initform common-lisp:nil
                         :type (common-lisp:or trace-list common-lisp:null)
                         :accessor struct-shape-batch-get-traces-result-traces
                         :shape "TraceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unprocessed-trace-ids :initarg :unprocessed-trace-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or unprocessed-trace-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-traces-result-unprocessed-trace-ids
                         :shape "UnprocessedTraceIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-batch-get-traces-result-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-traces-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-traces-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-traces-result 'make-batch-get-traces-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-traces-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-traces-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traces))
      (common-lisp:list
       (common-lisp:cons "Traces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-trace-ids))
      (common-lisp:list
       (common-lisp:cons "UnprocessedTraceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-traces-result))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype borrow-count () 'common-lisp:integer)
(common-lisp:deftype client-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-group-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-create-group-request-group-name :shape
                         "GroupName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter-expression :initarg :filter-expression
                         :initform common-lisp:nil :type
                         (common-lisp:or filter-expression common-lisp:null)
                         :accessor
                         struct-shape-create-group-request-filter-expression
                         :shape "FilterExpression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (insights-configuration :initarg
                         :insights-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or insights-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-group-request-insights-configuration
                         :shape "InsightsConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-group-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-group-request 'make-create-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-expression))
      (common-lisp:list
       (common-lisp:cons "FilterExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'insights-configuration))
      (common-lisp:list
       (common-lisp:cons "InsightsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-group-result common-lisp:nil
                       ((group :initarg :group :initform common-lisp:nil :type
                         (common-lisp:or group common-lisp:null) :accessor
                         struct-shape-create-group-result-group :shape "Group"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-group-result 'make-create-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sampling-rule-request common-lisp:nil
                       ((sampling-rule :initarg :sampling-rule :initform
                         (common-lisp:error ":sampling-rule is required") :type
                         (common-lisp:or sampling-rule common-lisp:null)
                         :accessor
                         struct-shape-create-sampling-rule-request-sampling-rule
                         :shape "SamplingRule" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-sampling-rule-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-sampling-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-sampling-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-sampling-rule-request
                    'make-create-sampling-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sampling-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sampling-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampling-rule))
      (common-lisp:list
       (common-lisp:cons "SamplingRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sampling-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sampling-rule-result common-lisp:nil
                       ((sampling-rule-record :initarg :sampling-rule-record
                         :initform common-lisp:nil :type
                         (common-lisp:or sampling-rule-record common-lisp:null)
                         :accessor
                         struct-shape-create-sampling-rule-result-sampling-rule-record
                         :shape "SamplingRuleRecord" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-sampling-rule-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-sampling-rule-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-sampling-rule-result
                    'make-create-sampling-rule-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sampling-rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sampling-rule-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sampling-rule-record))
      (common-lisp:list
       (common-lisp:cons "SamplingRuleRecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sampling-rule-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-group-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-delete-group-request-group-name :shape
                         "GroupName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-arn :initarg :group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or group-arn common-lisp:null) :accessor
                         struct-shape-delete-group-request-group-arn :shape
                         "GroupARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-group-request 'make-delete-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-arn))
      (common-lisp:list
       (common-lisp:cons "GroupARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-group-result common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-group-result 'make-delete-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-policy-request-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-revision-id :initarg :policy-revision-id
                         :initform common-lisp:nil :type
                         (common-lisp:or policy-revision-id common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-policy-request-policy-revision-id
                         :shape "PolicyRevisionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-request
                    'make-delete-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-revision-id))
      (common-lisp:list
       (common-lisp:cons "PolicyRevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-result common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-policy-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-result
                    'make-delete-resource-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-sampling-rule-request common-lisp:nil
                       ((rule-name :initarg :rule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-sampling-rule-request-rule-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-arn :initarg :rule-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-sampling-rule-request-rule-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-sampling-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-sampling-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-sampling-rule-request
                    'make-delete-sampling-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sampling-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sampling-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "RuleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sampling-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-sampling-rule-result common-lisp:nil
                       ((sampling-rule-record :initarg :sampling-rule-record
                         :initform common-lisp:nil :type
                         (common-lisp:or sampling-rule-record common-lisp:null)
                         :accessor
                         struct-shape-delete-sampling-rule-result-sampling-rule-record
                         :shape "SamplingRuleRecord" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-sampling-rule-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-sampling-rule-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-sampling-rule-result
                    'make-delete-sampling-rule-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sampling-rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sampling-rule-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sampling-rule-record))
      (common-lisp:list
       (common-lisp:cons "SamplingRuleRecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sampling-rule-result))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype ec2instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass edge common-lisp:nil
                       ((reference-id :initarg :reference-id :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor struct-shape-edge-reference-id :shape
                         "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-edge-start-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-edge-end-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (summary-statistics :initarg :summary-statistics
                         :initform common-lisp:nil :type
                         (common-lisp:or edge-statistics common-lisp:null)
                         :accessor struct-shape-edge-summary-statistics :shape
                         "EdgeStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response-time-histogram :initarg
                         :response-time-histogram :initform common-lisp:nil
                         :type (common-lisp:or histogram common-lisp:null)
                         :accessor struct-shape-edge-response-time-histogram
                         :shape "Histogram" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aliases :initarg :aliases :initform common-lisp:nil
                         :type (common-lisp:or alias-list common-lisp:null)
                         :accessor struct-shape-edge-aliases :shape "AliasList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (edge-type :initarg :edge-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-edge-edge-type :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (received-event-age-histogram :initarg
                         :received-event-age-histogram :initform
                         common-lisp:nil :type
                         (common-lisp:or histogram common-lisp:null) :accessor
                         struct-shape-edge-received-event-age-histogram :shape
                         "Histogram" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-edge (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'edge
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'edge 'make-edge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input edge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input edge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary-statistics))
      (common-lisp:list
       (common-lisp:cons "SummaryStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-time-histogram))
      (common-lisp:list
       (common-lisp:cons "ResponseTimeHistogram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edge-type))
      (common-lisp:list
       (common-lisp:cons "EdgeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'received-event-age-histogram))
      (common-lisp:list
       (common-lisp:cons "ReceivedEventAgeHistogram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input edge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype edge-list () '(trivial-types:proper-list edge))
 (common-lisp:defun make-edge-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list edge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass edge-statistics common-lisp:nil
                       ((ok-count :initarg :ok-count :initform common-lisp:nil
                         :type (common-lisp:or nullable-long common-lisp:null)
                         :accessor struct-shape-edge-statistics-ok-count :shape
                         "NullableLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-statistics :initarg :error-statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or error-statistics common-lisp:null)
                         :accessor
                         struct-shape-edge-statistics-error-statistics :shape
                         "ErrorStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fault-statistics :initarg :fault-statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or fault-statistics common-lisp:null)
                         :accessor
                         struct-shape-edge-statistics-fault-statistics :shape
                         "FaultStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-count :initarg :total-count :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor struct-shape-edge-statistics-total-count
                         :shape "NullableLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-response-time :initarg :total-response-time
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor
                         struct-shape-edge-statistics-total-response-time
                         :shape "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-edge-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'edge-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'edge-statistics 'make-edge-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input edge-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input edge-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ok-count))
      (common-lisp:list
       (common-lisp:cons "OkCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-statistics))
      (common-lisp:list
       (common-lisp:cons "ErrorStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault-statistics))
      (common-lisp:list
       (common-lisp:cons "FaultStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-response-time))
      (common-lisp:list
       (common-lisp:cons "TotalResponseTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input edge-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption-config common-lisp:nil
                       ((key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-encryption-config-key-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-status common-lisp:null)
                         :accessor struct-shape-encryption-config-status :shape
                         "EncryptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor struct-shape-encryption-config-type :shape
                         "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encryption-config 'make-encryption-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-config))
   common-lisp:nil))
(common-lisp:deftype encryption-key-id () 'common-lisp:string)
(common-lisp:deftype encryption-status () 'common-lisp:string)
(common-lisp:deftype encryption-type () 'common-lisp:string)
(common-lisp:deftype entity-selector-expression () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-root-cause common-lisp:nil
                       ((services :initarg :services :initform common-lisp:nil
                         :type
                         (common-lisp:or error-root-cause-services
                                         common-lisp:null)
                         :accessor struct-shape-error-root-cause-services
                         :shape "ErrorRootCauseServices" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-impacting :initarg :client-impacting :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-error-root-cause-client-impacting :shape
                         "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-root-cause
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-root-cause
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'error-root-cause 'make-error-root-cause))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-root-cause))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-root-cause))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "Services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-impacting))
      (common-lisp:list
       (common-lisp:cons "ClientImpacting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-root-cause))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass error-root-cause-entity common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-error-root-cause-entity-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (exceptions :initarg :exceptions :initform
                         common-lisp:nil :type
                         (common-lisp:or root-cause-exceptions
                                         common-lisp:null)
                         :accessor
                         struct-shape-error-root-cause-entity-exceptions :shape
                         "RootCauseExceptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remote :initarg :remote :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor struct-shape-error-root-cause-entity-remote
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-root-cause-entity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-root-cause-entity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'error-root-cause-entity 'make-error-root-cause-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          error-root-cause-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          error-root-cause-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exceptions))
      (common-lisp:list
       (common-lisp:cons "Exceptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote))
      (common-lisp:list
       (common-lisp:cons "Remote"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          error-root-cause-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype error-root-cause-entity-path ()
   '(trivial-types:proper-list error-root-cause-entity))
 (common-lisp:defun make-error-root-cause-entity-path
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error-root-cause-entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass error-root-cause-service common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-error-root-cause-service-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (names :initarg :names :initform common-lisp:nil :type
                         (common-lisp:or service-names common-lisp:null)
                         :accessor struct-shape-error-root-cause-service-names
                         :shape "ServiceNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-error-root-cause-service-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-error-root-cause-service-account-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-path :initarg :entity-path :initform
                         common-lisp:nil :type
                         (common-lisp:or error-root-cause-entity-path
                                         common-lisp:null)
                         :accessor
                         struct-shape-error-root-cause-service-entity-path
                         :shape "ErrorRootCauseEntityPath" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (inferred :initarg :inferred :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-error-root-cause-service-inferred :shape
                         "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-root-cause-service
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-root-cause-service
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'error-root-cause-service 'make-error-root-cause-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          error-root-cause-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          error-root-cause-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-path))
      (common-lisp:list
       (common-lisp:cons "EntityPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inferred))
      (common-lisp:list
       (common-lisp:cons "Inferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          error-root-cause-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype error-root-cause-services ()
   '(trivial-types:proper-list error-root-cause-service))
 (common-lisp:defun make-error-root-cause-services
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            error-root-cause-service))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype error-root-causes ()
   '(trivial-types:proper-list error-root-cause))
 (common-lisp:defun make-error-root-causes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error-root-cause))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass error-statistics common-lisp:nil
                       ((throttle-count :initarg :throttle-count :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor struct-shape-error-statistics-throttle-count
                         :shape "NullableLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (other-count :initarg :other-count :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor struct-shape-error-statistics-other-count
                         :shape "NullableLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-count :initarg :total-count :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor struct-shape-error-statistics-total-count
                         :shape "NullableLong" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'error-statistics 'make-error-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throttle-count))
      (common-lisp:list
       (common-lisp:cons "ThrottleCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'other-count))
      (common-lisp:list
       (common-lisp:cons "OtherCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-statistics))
   common-lisp:nil))
(common-lisp:deftype event-summary-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fault-root-cause common-lisp:nil
                       ((services :initarg :services :initform common-lisp:nil
                         :type
                         (common-lisp:or fault-root-cause-services
                                         common-lisp:null)
                         :accessor struct-shape-fault-root-cause-services
                         :shape "FaultRootCauseServices" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-impacting :initarg :client-impacting :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-fault-root-cause-client-impacting :shape
                         "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fault-root-cause
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fault-root-cause
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fault-root-cause 'make-fault-root-cause))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fault-root-cause))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fault-root-cause))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "Services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-impacting))
      (common-lisp:list
       (common-lisp:cons "ClientImpacting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fault-root-cause))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fault-root-cause-entity common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-fault-root-cause-entity-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (exceptions :initarg :exceptions :initform
                         common-lisp:nil :type
                         (common-lisp:or root-cause-exceptions
                                         common-lisp:null)
                         :accessor
                         struct-shape-fault-root-cause-entity-exceptions :shape
                         "RootCauseExceptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remote :initarg :remote :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor struct-shape-fault-root-cause-entity-remote
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fault-root-cause-entity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fault-root-cause-entity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fault-root-cause-entity 'make-fault-root-cause-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fault-root-cause-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fault-root-cause-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exceptions))
      (common-lisp:list
       (common-lisp:cons "Exceptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote))
      (common-lisp:list
       (common-lisp:cons "Remote"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fault-root-cause-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fault-root-cause-entity-path ()
   '(trivial-types:proper-list fault-root-cause-entity))
 (common-lisp:defun make-fault-root-cause-entity-path
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fault-root-cause-entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass fault-root-cause-service common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-fault-root-cause-service-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (names :initarg :names :initform common-lisp:nil :type
                         (common-lisp:or service-names common-lisp:null)
                         :accessor struct-shape-fault-root-cause-service-names
                         :shape "ServiceNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-fault-root-cause-service-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-fault-root-cause-service-account-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-path :initarg :entity-path :initform
                         common-lisp:nil :type
                         (common-lisp:or fault-root-cause-entity-path
                                         common-lisp:null)
                         :accessor
                         struct-shape-fault-root-cause-service-entity-path
                         :shape "FaultRootCauseEntityPath" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (inferred :initarg :inferred :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-fault-root-cause-service-inferred :shape
                         "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fault-root-cause-service
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fault-root-cause-service
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fault-root-cause-service 'make-fault-root-cause-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fault-root-cause-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fault-root-cause-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-path))
      (common-lisp:list
       (common-lisp:cons "EntityPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inferred))
      (common-lisp:list
       (common-lisp:cons "Inferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fault-root-cause-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fault-root-cause-services ()
   '(trivial-types:proper-list fault-root-cause-service))
 (common-lisp:defun make-fault-root-cause-services
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            fault-root-cause-service))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype fault-root-causes ()
   '(trivial-types:proper-list fault-root-cause))
 (common-lisp:defun make-fault-root-causes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fault-root-cause))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass fault-statistics common-lisp:nil
                       ((other-count :initarg :other-count :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor struct-shape-fault-statistics-other-count
                         :shape "NullableLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-count :initarg :total-count :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor struct-shape-fault-statistics-total-count
                         :shape "NullableLong" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fault-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fault-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fault-statistics 'make-fault-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fault-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fault-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'other-count))
      (common-lisp:list
       (common-lisp:cons "OtherCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fault-statistics))
   common-lisp:nil))
(common-lisp:deftype filter-expression () 'common-lisp:string)
(common-lisp:deftype fixed-rate () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass forecast-statistics common-lisp:nil
                       ((fault-count-high :initarg :fault-count-high :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor
                         struct-shape-forecast-statistics-fault-count-high
                         :shape "NullableLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fault-count-low :initarg :fault-count-low :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor
                         struct-shape-forecast-statistics-fault-count-low
                         :shape "NullableLong" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-forecast-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'forecast-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'forecast-statistics 'make-forecast-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input forecast-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input forecast-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault-count-high))
      (common-lisp:list
       (common-lisp:cons "FaultCountHigh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault-count-low))
      (common-lisp:list
       (common-lisp:cons "FaultCountLow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input forecast-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-encryption-config-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-encryption-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-encryption-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-encryption-config-request
                    'make-get-encryption-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-encryption-config-result common-lisp:nil
                       ((encryption-config :initarg :encryption-config
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-config common-lisp:null)
                         :accessor
                         struct-shape-get-encryption-config-result-encryption-config
                         :shape "EncryptionConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-encryption-config-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-encryption-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-encryption-config-result
                    'make-get-encryption-config-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-config-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-encryption-config-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-group-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-get-group-request-group-name :shape
                         "GroupName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-arn :initarg :group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or group-arn common-lisp:null) :accessor
                         struct-shape-get-group-request-group-arn :shape
                         "GroupARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-group-request 'make-get-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-arn))
      (common-lisp:list
       (common-lisp:cons "GroupARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-group-result common-lisp:nil
                       ((group :initarg :group :initform common-lisp:nil :type
                         (common-lisp:or group common-lisp:null) :accessor
                         struct-shape-get-group-result-group :shape "Group"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-group-result 'make-get-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-group-result))
   common-lisp:nil))
(common-lisp:deftype get-groups-next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-groups-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or get-groups-next-token
                                         common-lisp:null)
                         :accessor struct-shape-get-groups-request-next-token
                         :shape "GetGroupsNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-groups-request 'make-get-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-groups-result common-lisp:nil
                       ((groups :initarg :groups :initform common-lisp:nil
                         :type
                         (common-lisp:or group-summary-list common-lisp:null)
                         :accessor struct-shape-get-groups-result-groups :shape
                         "GroupSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-groups-result-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-groups-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-groups-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-groups-result 'make-get-groups-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-groups-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-groups-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-groups-result))
   common-lisp:nil))
(common-lisp:deftype get-insight-events-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-insight-events-request common-lisp:nil
                       ((insight-id :initarg :insight-id :initform
                         (common-lisp:error ":insight-id is required") :type
                         (common-lisp:or insight-id common-lisp:null) :accessor
                         struct-shape-get-insight-events-request-insight-id
                         :shape "InsightId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or get-insight-events-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-insight-events-request-max-results
                         :shape "GetInsightEventsMaxResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-insight-events-request-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-insight-events-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-insight-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-insight-events-request
                    'make-get-insight-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-id))
      (common-lisp:list
       (common-lisp:cons "InsightId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-insight-events-result common-lisp:nil
                       ((insight-events :initarg :insight-events :initform
                         common-lisp:nil :type
                         (common-lisp:or insight-event-list common-lisp:null)
                         :accessor
                         struct-shape-get-insight-events-result-insight-events
                         :shape "InsightEventList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-insight-events-result-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-insight-events-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-insight-events-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-insight-events-result
                    'make-get-insight-events-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-events-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-events-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-events))
      (common-lisp:list
       (common-lisp:cons "InsightEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-events-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-insight-impact-graph-request common-lisp:nil
                       ((insight-id :initarg :insight-id :initform
                         (common-lisp:error ":insight-id is required") :type
                         (common-lisp:or insight-id common-lisp:null) :accessor
                         struct-shape-get-insight-impact-graph-request-insight-id
                         :shape "InsightId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":start-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-insight-impact-graph-request-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":end-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-insight-impact-graph-request-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-insight-impact-graph-request-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-insight-impact-graph-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-insight-impact-graph-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-insight-impact-graph-request
                    'make-get-insight-impact-graph-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-impact-graph-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-impact-graph-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-id))
      (common-lisp:list
       (common-lisp:cons "InsightId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-impact-graph-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-insight-impact-graph-result common-lisp:nil
                       ((insight-id :initarg :insight-id :initform
                         common-lisp:nil :type
                         (common-lisp:or insight-id common-lisp:null) :accessor
                         struct-shape-get-insight-impact-graph-result-insight-id
                         :shape "InsightId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-insight-impact-graph-result-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-insight-impact-graph-result-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-graph-start-time :initarg
                         :service-graph-start-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-insight-impact-graph-result-service-graph-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-graph-end-time :initarg
                         :service-graph-end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-insight-impact-graph-result-service-graph-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (services :initarg :services :initform common-lisp:nil
                         :type
                         (common-lisp:or insight-impact-graph-service-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-insight-impact-graph-result-services
                         :shape "InsightImpactGraphServiceList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-insight-impact-graph-result-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-insight-impact-graph-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-insight-impact-graph-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-insight-impact-graph-result
                    'make-get-insight-impact-graph-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-impact-graph-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-impact-graph-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-id))
      (common-lisp:list
       (common-lisp:cons "InsightId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-graph-start-time))
      (common-lisp:list
       (common-lisp:cons "ServiceGraphStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-graph-end-time))
      (common-lisp:list
       (common-lisp:cons "ServiceGraphEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "Services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-impact-graph-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-insight-request common-lisp:nil
                       ((insight-id :initarg :insight-id :initform
                         (common-lisp:error ":insight-id is required") :type
                         (common-lisp:or insight-id common-lisp:null) :accessor
                         struct-shape-get-insight-request-insight-id :shape
                         "InsightId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-insight-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-insight-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-insight-request 'make-get-insight-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-insight-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-id))
      (common-lisp:list
       (common-lisp:cons "InsightId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-insight-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-insight-result common-lisp:nil
                       ((insight :initarg :insight :initform common-lisp:nil
                         :type (common-lisp:or insight common-lisp:null)
                         :accessor struct-shape-get-insight-result-insight
                         :shape "Insight" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-insight-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-insight-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-insight-result 'make-get-insight-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-insight-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-insight-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight))
      (common-lisp:list
       (common-lisp:cons "Insight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-insight-result))
   common-lisp:nil))
(common-lisp:deftype get-insight-summaries-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-insight-summaries-request common-lisp:nil
                       ((states :initarg :states :initform common-lisp:nil
                         :type
                         (common-lisp:or insight-state-list common-lisp:null)
                         :accessor
                         struct-shape-get-insight-summaries-request-states
                         :shape "InsightStateList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-arn :initarg :group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or group-arn common-lisp:null) :accessor
                         struct-shape-get-insight-summaries-request-group-arn
                         :shape "GroupARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-get-insight-summaries-request-group-name
                         :shape "GroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":start-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-insight-summaries-request-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":end-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-insight-summaries-request-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or get-insight-summaries-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-insight-summaries-request-max-results
                         :shape "GetInsightSummariesMaxResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-insight-summaries-request-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-insight-summaries-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-insight-summaries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-insight-summaries-request
                    'make-get-insight-summaries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-summaries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-summaries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'states))
      (common-lisp:list
       (common-lisp:cons "States"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-arn))
      (common-lisp:list
       (common-lisp:cons "GroupARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-summaries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-insight-summaries-result common-lisp:nil
                       ((insight-summaries :initarg :insight-summaries
                         :initform common-lisp:nil :type
                         (common-lisp:or insight-summary-list common-lisp:null)
                         :accessor
                         struct-shape-get-insight-summaries-result-insight-summaries
                         :shape "InsightSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-insight-summaries-result-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-insight-summaries-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-insight-summaries-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-insight-summaries-result
                    'make-get-insight-summaries-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-summaries-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-summaries-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-summaries))
      (common-lisp:list
       (common-lisp:cons "InsightSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-summaries-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sampling-rules-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-sampling-rules-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sampling-rules-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-sampling-rules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sampling-rules-request
                    'make-get-sampling-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sampling-rules-result common-lisp:nil
                       ((sampling-rule-records :initarg :sampling-rule-records
                         :initform common-lisp:nil :type
                         (common-lisp:or sampling-rule-record-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sampling-rules-result-sampling-rule-records
                         :shape "SamplingRuleRecordList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-sampling-rules-result-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sampling-rules-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-sampling-rules-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sampling-rules-result
                    'make-get-sampling-rules-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-rules-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-rules-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sampling-rule-records))
      (common-lisp:list
       (common-lisp:cons "SamplingRuleRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-rules-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sampling-statistic-summaries-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-sampling-statistic-summaries-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sampling-statistic-summaries-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sampling-statistic-summaries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sampling-statistic-summaries-request
                    'make-get-sampling-statistic-summaries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-statistic-summaries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-statistic-summaries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-statistic-summaries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sampling-statistic-summaries-result common-lisp:nil
                       ((sampling-statistic-summaries :initarg
                         :sampling-statistic-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or sampling-statistic-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sampling-statistic-summaries-result-sampling-statistic-summaries
                         :shape "SamplingStatisticSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-sampling-statistic-summaries-result-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sampling-statistic-summaries-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sampling-statistic-summaries-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sampling-statistic-summaries-result
                    'make-get-sampling-statistic-summaries-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-statistic-summaries-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-statistic-summaries-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sampling-statistic-summaries))
      (common-lisp:list
       (common-lisp:cons "SamplingStatisticSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-statistic-summaries-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sampling-targets-request common-lisp:nil
                       ((sampling-statistics-documents :initarg
                         :sampling-statistics-documents :initform
                         (common-lisp:error
                          ":sampling-statistics-documents is required")
                         :type
                         (common-lisp:or sampling-statistics-document-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sampling-targets-request-sampling-statistics-documents
                         :shape "SamplingStatisticsDocumentList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sampling-targets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-sampling-targets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sampling-targets-request
                    'make-get-sampling-targets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sampling-statistics-documents))
      (common-lisp:list
       (common-lisp:cons "SamplingStatisticsDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sampling-targets-result common-lisp:nil
                       ((sampling-target-documents :initarg
                         :sampling-target-documents :initform common-lisp:nil
                         :type
                         (common-lisp:or sampling-target-document-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sampling-targets-result-sampling-target-documents
                         :shape "SamplingTargetDocumentList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-rule-modification :initarg
                         :last-rule-modification :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-sampling-targets-result-last-rule-modification
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unprocessed-statistics :initarg
                         :unprocessed-statistics :initform common-lisp:nil
                         :type
                         (common-lisp:or unprocessed-statistics-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sampling-targets-result-unprocessed-statistics
                         :shape "UnprocessedStatisticsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sampling-targets-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-sampling-targets-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sampling-targets-result
                    'make-get-sampling-targets-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-targets-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-targets-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sampling-target-documents))
      (common-lisp:list
       (common-lisp:cons "SamplingTargetDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-rule-modification))
      (common-lisp:list
       (common-lisp:cons "LastRuleModification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-statistics))
      (common-lisp:list
       (common-lisp:cons "UnprocessedStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sampling-targets-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-graph-request common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         (common-lisp:error ":start-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-service-graph-request-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":end-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-service-graph-request-end-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-get-service-graph-request-group-name
                         :shape "GroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-arn :initarg :group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or group-arn common-lisp:null) :accessor
                         struct-shape-get-service-graph-request-group-arn
                         :shape "GroupARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-service-graph-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-graph-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-service-graph-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-graph-request
                    'make-get-service-graph-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-graph-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-graph-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-arn))
      (common-lisp:list
       (common-lisp:cons "GroupARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-graph-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-graph-result common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-service-graph-result-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-service-graph-result-end-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (services :initarg :services :initform common-lisp:nil
                         :type (common-lisp:or service-list common-lisp:null)
                         :accessor
                         struct-shape-get-service-graph-result-services :shape
                         "ServiceList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (contains-old-group-versions :initarg
                         :contains-old-group-versions :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-get-service-graph-result-contains-old-group-versions
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-service-graph-result-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-graph-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-service-graph-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-graph-result 'make-get-service-graph-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-graph-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-graph-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "Services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contains-old-group-versions))
      (common-lisp:list
       (common-lisp:cons "ContainsOldGroupVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-graph-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-time-series-service-statistics-request
                       common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         (common-lisp:error ":start-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-time-series-service-statistics-request-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":end-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-time-series-service-statistics-request-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-get-time-series-service-statistics-request-group-name
                         :shape "GroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-arn :initarg :group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or group-arn common-lisp:null) :accessor
                         struct-shape-get-time-series-service-statistics-request-group-arn
                         :shape "GroupARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-selector-expression :initarg
                         :entity-selector-expression :initform common-lisp:nil
                         :type
                         (common-lisp:or entity-selector-expression
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-time-series-service-statistics-request-entity-selector-expression
                         :shape "EntitySelectorExpression" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (period :initarg :period :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-get-time-series-service-statistics-request-period
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forecast-statistics :initarg :forecast-statistics
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-get-time-series-service-statistics-request-forecast-statistics
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-time-series-service-statistics-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-time-series-service-statistics-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-time-series-service-statistics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-time-series-service-statistics-request
                    'make-get-time-series-service-statistics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-time-series-service-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-time-series-service-statistics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-arn))
      (common-lisp:list
       (common-lisp:cons "GroupARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'entity-selector-expression))
      (common-lisp:list
       (common-lisp:cons "EntitySelectorExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-statistics))
      (common-lisp:list
       (common-lisp:cons "ForecastStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-time-series-service-statistics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-time-series-service-statistics-result
                       common-lisp:nil
                       ((time-series-service-statistics :initarg
                         :time-series-service-statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or time-series-service-statistics-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-time-series-service-statistics-result-time-series-service-statistics
                         :shape "TimeSeriesServiceStatisticsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (contains-old-group-versions :initarg
                         :contains-old-group-versions :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-get-time-series-service-statistics-result-contains-old-group-versions
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-time-series-service-statistics-result-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-time-series-service-statistics-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-time-series-service-statistics-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-time-series-service-statistics-result
                    'make-get-time-series-service-statistics-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-time-series-service-statistics-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-time-series-service-statistics-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-service-statistics))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesServiceStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contains-old-group-versions))
      (common-lisp:list
       (common-lisp:cons "ContainsOldGroupVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-time-series-service-statistics-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trace-graph-request common-lisp:nil
                       ((trace-ids :initarg :trace-ids :initform
                         (common-lisp:error ":trace-ids is required") :type
                         (common-lisp:or trace-id-list common-lisp:null)
                         :accessor
                         struct-shape-get-trace-graph-request-trace-ids :shape
                         "TraceIdList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-trace-graph-request-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-trace-graph-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-trace-graph-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-trace-graph-request 'make-get-trace-graph-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trace-graph-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trace-graph-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-ids))
      (common-lisp:list
       (common-lisp:cons "TraceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trace-graph-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trace-graph-result common-lisp:nil
                       ((services :initarg :services :initform common-lisp:nil
                         :type (common-lisp:or service-list common-lisp:null)
                         :accessor struct-shape-get-trace-graph-result-services
                         :shape "ServiceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-trace-graph-result-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-trace-graph-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-trace-graph-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-trace-graph-result 'make-get-trace-graph-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trace-graph-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trace-graph-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "Services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trace-graph-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trace-summaries-request common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         (common-lisp:error ":start-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-trace-summaries-request-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":end-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-trace-summaries-request-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-range-type :initarg :time-range-type :initform
                         common-lisp:nil :type
                         (common-lisp:or time-range-type common-lisp:null)
                         :accessor
                         struct-shape-get-trace-summaries-request-time-range-type
                         :shape "TimeRangeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sampling :initarg :sampling :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-get-trace-summaries-request-sampling
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sampling-strategy :initarg :sampling-strategy
                         :initform common-lisp:nil :type
                         (common-lisp:or sampling-strategy common-lisp:null)
                         :accessor
                         struct-shape-get-trace-summaries-request-sampling-strategy
                         :shape "SamplingStrategy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter-expression :initarg :filter-expression
                         :initform common-lisp:nil :type
                         (common-lisp:or filter-expression common-lisp:null)
                         :accessor
                         struct-shape-get-trace-summaries-request-filter-expression
                         :shape "FilterExpression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-trace-summaries-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-trace-summaries-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-trace-summaries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-trace-summaries-request
                    'make-get-trace-summaries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trace-summaries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trace-summaries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range-type))
      (common-lisp:list
       (common-lisp:cons "TimeRangeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampling))
      (common-lisp:list
       (common-lisp:cons "Sampling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampling-strategy))
      (common-lisp:list
       (common-lisp:cons "SamplingStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-expression))
      (common-lisp:list
       (common-lisp:cons "FilterExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trace-summaries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trace-summaries-result common-lisp:nil
                       ((trace-summaries :initarg :trace-summaries :initform
                         common-lisp:nil :type
                         (common-lisp:or trace-summary-list common-lisp:null)
                         :accessor
                         struct-shape-get-trace-summaries-result-trace-summaries
                         :shape "TraceSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (approximate-time :initarg :approximate-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-trace-summaries-result-approximate-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (traces-processed-count :initarg
                         :traces-processed-count :initform common-lisp:nil
                         :type (common-lisp:or nullable-long common-lisp:null)
                         :accessor
                         struct-shape-get-trace-summaries-result-traces-processed-count
                         :shape "NullableLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-trace-summaries-result-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-trace-summaries-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-trace-summaries-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-trace-summaries-result
                    'make-get-trace-summaries-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trace-summaries-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trace-summaries-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-summaries))
      (common-lisp:list
       (common-lisp:cons "TraceSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approximate-time))
      (common-lisp:list
       (common-lisp:cons "ApproximateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traces-processed-count))
      (common-lisp:list
       (common-lisp:cons "TracesProcessedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trace-summaries-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass group common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-group-group-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-arn :initarg :group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-group-group-arn :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filter-expression :initarg :filter-expression
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-group-filter-expression :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (insights-configuration :initarg
                         :insights-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or insights-configuration
                                         common-lisp:null)
                         :accessor struct-shape-group-insights-configuration
                         :shape "InsightsConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'group 'make-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-arn))
      (common-lisp:list
       (common-lisp:cons "GroupARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-expression))
      (common-lisp:list
       (common-lisp:cons "FilterExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'insights-configuration))
      (common-lisp:list
       (common-lisp:cons "InsightsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group))
   common-lisp:nil))
(common-lisp:deftype group-arn () 'common-lisp:string)
(common-lisp:deftype group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass group-summary common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-group-summary-group-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-arn :initarg :group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-group-summary-group-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter-expression :initarg :filter-expression
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-group-summary-filter-expression :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (insights-configuration :initarg
                         :insights-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or insights-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-group-summary-insights-configuration
                         :shape "InsightsConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-group-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'group-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'group-summary 'make-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-arn))
      (common-lisp:list
       (common-lisp:cons "GroupARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-expression))
      (common-lisp:list
       (common-lisp:cons "FilterExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'insights-configuration))
      (common-lisp:list
       (common-lisp:cons "InsightsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype group-summary-list ()
   '(trivial-types:proper-list group-summary))
 (common-lisp:defun make-group-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype httpmethod () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype histogram ()
   '(trivial-types:proper-list histogram-entry))
 (common-lisp:defun make-histogram
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list histogram-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass histogram-entry common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-histogram-entry-value :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-histogram-entry-count :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-histogram-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'histogram-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'histogram-entry 'make-histogram-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input histogram-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input histogram-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input histogram-entry))
   common-lisp:nil))
(common-lisp:deftype host () 'common-lisp:string)
(common-lisp:deftype hostname () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http common-lisp:nil
                       ((http-url :initarg :http-url :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-http-http-url :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (http-status :initarg :http-status :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor struct-shape-http-http-status :shape
                         "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-method :initarg :http-method :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-http-http-method :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-agent :initarg :user-agent :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-http-user-agent :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-ip :initarg :client-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-http-client-ip :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'http 'make-http))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-url))
      (common-lisp:list
       (common-lisp:cons "HttpURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-status))
      (common-lisp:list
       (common-lisp:cons "HttpStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-method))
      (common-lisp:list
       (common-lisp:cons "HttpMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-agent))
      (common-lisp:list
       (common-lisp:cons "UserAgent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-ip))
      (common-lisp:list
       (common-lisp:cons "ClientIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass insight common-lisp:nil
                       ((insight-id :initarg :insight-id :initform
                         common-lisp:nil :type
                         (common-lisp:or insight-id common-lisp:null) :accessor
                         struct-shape-insight-insight-id :shape "InsightId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-arn :initarg :group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or group-arn common-lisp:null) :accessor
                         struct-shape-insight-group-arn :shape "GroupARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-insight-group-name :shape "GroupName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (root-cause-service-id :initarg :root-cause-service-id
                         :initform common-lisp:nil :type
                         (common-lisp:or service-id common-lisp:null) :accessor
                         struct-shape-insight-root-cause-service-id :shape
                         "ServiceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (categories :initarg :categories :initform
                         common-lisp:nil :type
                         (common-lisp:or insight-category-list
                                         common-lisp:null)
                         :accessor struct-shape-insight-categories :shape
                         "InsightCategoryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or insight-state common-lisp:null)
                         :accessor struct-shape-insight-state :shape
                         "InsightState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-insight-start-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-insight-end-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (summary :initarg :summary :initform common-lisp:nil
                         :type
                         (common-lisp:or insight-summary-text common-lisp:null)
                         :accessor struct-shape-insight-summary :shape
                         "InsightSummaryText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-impact-statistics :initarg
                         :client-request-impact-statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or request-impact-statistics
                                         common-lisp:null)
                         :accessor
                         struct-shape-insight-client-request-impact-statistics
                         :shape "RequestImpactStatistics" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (root-cause-service-request-impact-statistics :initarg
                         :root-cause-service-request-impact-statistics
                         :initform common-lisp:nil :type
                         (common-lisp:or request-impact-statistics
                                         common-lisp:null)
                         :accessor
                         struct-shape-insight-root-cause-service-request-impact-statistics
                         :shape "RequestImpactStatistics" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (top-anomalous-services :initarg
                         :top-anomalous-services :initform common-lisp:nil
                         :type
                         (common-lisp:or anomalous-service-list
                                         common-lisp:null)
                         :accessor struct-shape-insight-top-anomalous-services
                         :shape "AnomalousServiceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-insight
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'insight
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'insight 'make-insight))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-id))
      (common-lisp:list
       (common-lisp:cons "InsightId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-arn))
      (common-lisp:list
       (common-lisp:cons "GroupARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-cause-service-id))
      (common-lisp:list
       (common-lisp:cons "RootCauseServiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'categories))
      (common-lisp:list
       (common-lisp:cons "Categories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-impact-statistics))
      (common-lisp:list
       (common-lisp:cons "ClientRequestImpactStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-cause-service-request-impact-statistics))
      (common-lisp:list
       (common-lisp:cons "RootCauseServiceRequestImpactStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'top-anomalous-services))
      (common-lisp:list
       (common-lisp:cons "TopAnomalousServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight))
   common-lisp:nil))
(common-lisp:deftype insight-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype insight-category-list ()
   '(trivial-types:proper-list insight-category))
 (common-lisp:defun make-insight-category-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insight-category))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass insight-event common-lisp:nil
                       ((summary :initarg :summary :initform common-lisp:nil
                         :type
                         (common-lisp:or event-summary-text common-lisp:null)
                         :accessor struct-shape-insight-event-summary :shape
                         "EventSummaryText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-time :initarg :event-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-insight-event-event-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-impact-statistics :initarg
                         :client-request-impact-statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or request-impact-statistics
                                         common-lisp:null)
                         :accessor
                         struct-shape-insight-event-client-request-impact-statistics
                         :shape "RequestImpactStatistics" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (root-cause-service-request-impact-statistics :initarg
                         :root-cause-service-request-impact-statistics
                         :initform common-lisp:nil :type
                         (common-lisp:or request-impact-statistics
                                         common-lisp:null)
                         :accessor
                         struct-shape-insight-event-root-cause-service-request-impact-statistics
                         :shape "RequestImpactStatistics" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (top-anomalous-services :initarg
                         :top-anomalous-services :initform common-lisp:nil
                         :type
                         (common-lisp:or anomalous-service-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-insight-event-top-anomalous-services
                         :shape "AnomalousServiceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-insight-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'insight-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'insight-event 'make-insight-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-time))
      (common-lisp:list
       (common-lisp:cons "EventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-impact-statistics))
      (common-lisp:list
       (common-lisp:cons "ClientRequestImpactStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-cause-service-request-impact-statistics))
      (common-lisp:list
       (common-lisp:cons "RootCauseServiceRequestImpactStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'top-anomalous-services))
      (common-lisp:list
       (common-lisp:cons "TopAnomalousServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype insight-event-list ()
   '(trivial-types:proper-list insight-event))
 (common-lisp:defun make-insight-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insight-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype insight-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass insight-impact-graph-edge common-lisp:nil
                       ((reference-id :initarg :reference-id :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-insight-impact-graph-edge-reference-id
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-insight-impact-graph-edge
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'insight-impact-graph-edge
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'insight-impact-graph-edge
                    'make-insight-impact-graph-edge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          insight-impact-graph-edge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          insight-impact-graph-edge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          insight-impact-graph-edge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype insight-impact-graph-edge-list ()
   '(trivial-types:proper-list insight-impact-graph-edge))
 (common-lisp:defun make-insight-impact-graph-edge-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            insight-impact-graph-edge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass insight-impact-graph-service common-lisp:nil
                       ((reference-id :initarg :reference-id :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-insight-impact-graph-service-reference-id
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-insight-impact-graph-service-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-insight-impact-graph-service-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (names :initarg :names :initform common-lisp:nil :type
                         (common-lisp:or service-names common-lisp:null)
                         :accessor
                         struct-shape-insight-impact-graph-service-names :shape
                         "ServiceNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-insight-impact-graph-service-account-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (edges :initarg :edges :initform common-lisp:nil :type
                         (common-lisp:or insight-impact-graph-edge-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-insight-impact-graph-service-edges :shape
                         "InsightImpactGraphEdgeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-insight-impact-graph-service
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'insight-impact-graph-service
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'insight-impact-graph-service
                    'make-insight-impact-graph-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          insight-impact-graph-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          insight-impact-graph-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edges))
      (common-lisp:list
       (common-lisp:cons "Edges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          insight-impact-graph-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype insight-impact-graph-service-list ()
   '(trivial-types:proper-list insight-impact-graph-service))
 (common-lisp:defun make-insight-impact-graph-service-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            insight-impact-graph-service))
   aws-sdk/generator/shape::members))
(common-lisp:deftype insight-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype insight-state-list ()
   '(trivial-types:proper-list insight-state))
 (common-lisp:defun make-insight-state-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insight-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass insight-summary common-lisp:nil
                       ((insight-id :initarg :insight-id :initform
                         common-lisp:nil :type
                         (common-lisp:or insight-id common-lisp:null) :accessor
                         struct-shape-insight-summary-insight-id :shape
                         "InsightId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-arn :initarg :group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or group-arn common-lisp:null) :accessor
                         struct-shape-insight-summary-group-arn :shape
                         "GroupARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-insight-summary-group-name :shape
                         "GroupName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (root-cause-service-id :initarg :root-cause-service-id
                         :initform common-lisp:nil :type
                         (common-lisp:or service-id common-lisp:null) :accessor
                         struct-shape-insight-summary-root-cause-service-id
                         :shape "ServiceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (categories :initarg :categories :initform
                         common-lisp:nil :type
                         (common-lisp:or insight-category-list
                                         common-lisp:null)
                         :accessor struct-shape-insight-summary-categories
                         :shape "InsightCategoryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or insight-state common-lisp:null)
                         :accessor struct-shape-insight-summary-state :shape
                         "InsightState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-insight-summary-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-insight-summary-end-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (summary :initarg :summary :initform common-lisp:nil
                         :type
                         (common-lisp:or insight-summary-text common-lisp:null)
                         :accessor struct-shape-insight-summary-summary :shape
                         "InsightSummaryText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-impact-statistics :initarg
                         :client-request-impact-statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or request-impact-statistics
                                         common-lisp:null)
                         :accessor
                         struct-shape-insight-summary-client-request-impact-statistics
                         :shape "RequestImpactStatistics" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (root-cause-service-request-impact-statistics :initarg
                         :root-cause-service-request-impact-statistics
                         :initform common-lisp:nil :type
                         (common-lisp:or request-impact-statistics
                                         common-lisp:null)
                         :accessor
                         struct-shape-insight-summary-root-cause-service-request-impact-statistics
                         :shape "RequestImpactStatistics" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (top-anomalous-services :initarg
                         :top-anomalous-services :initform common-lisp:nil
                         :type
                         (common-lisp:or anomalous-service-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-insight-summary-top-anomalous-services
                         :shape "AnomalousServiceList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-insight-summary-last-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-insight-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'insight-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'insight-summary 'make-insight-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-id))
      (common-lisp:list
       (common-lisp:cons "InsightId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-arn))
      (common-lisp:list
       (common-lisp:cons "GroupARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-cause-service-id))
      (common-lisp:list
       (common-lisp:cons "RootCauseServiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'categories))
      (common-lisp:list
       (common-lisp:cons "Categories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-impact-statistics))
      (common-lisp:list
       (common-lisp:cons "ClientRequestImpactStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-cause-service-request-impact-statistics))
      (common-lisp:list
       (common-lisp:cons "RootCauseServiceRequestImpactStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'top-anomalous-services))
      (common-lisp:list
       (common-lisp:cons "TopAnomalousServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype insight-summary-list ()
   '(trivial-types:proper-list insight-summary))
 (common-lisp:defun make-insight-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insight-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype insight-summary-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass insights-configuration common-lisp:nil
                       ((insights-enabled :initarg :insights-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-insights-configuration-insights-enabled
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notifications-enabled :initarg :notifications-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-insights-configuration-notifications-enabled
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-insights-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'insights-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'insights-configuration 'make-insights-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          insights-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          insights-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insights-enabled))
      (common-lisp:list
       (common-lisp:cons "InsightsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notifications-enabled))
      (common-lisp:list
       (common-lisp:cons "NotificationsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          insights-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-id-detail common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-id-detail-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-id-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-id-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-id-detail 'make-instance-id-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-id-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-id-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-id-detail))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-policy-revision-id-exception
     (xray-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-policy-revision-id-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-policy-revision-id-exception
                    'invalid-policy-revision-id-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (xray-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-resource-policies-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-policy-next-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-resource-policies-request-next-token
                         :shape "ResourcePolicyNextToken" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resource-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resource-policies-request
                    'make-list-resource-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-policies-result common-lisp:nil
                       ((resource-policies :initarg :resource-policies
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-policy-list common-lisp:null)
                         :accessor
                         struct-shape-list-resource-policies-result-resource-policies
                         :shape "ResourcePolicyList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-policy-next-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-resource-policies-result-next-token
                         :shape "ResourcePolicyNextToken" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resource-policies-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-policies-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resource-policies-result
                    'make-list-resource-policies-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-policies-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-policies-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policies))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-policies-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition lockout-prevention-exception
     (xray-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       lockout-prevention-exception-message)))
 (common-lisp:export
  (common-lisp:list 'lockout-prevention-exception
                    'lockout-prevention-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition malformed-policy-document-exception
     (xray-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       malformed-policy-document-exception-message)))
 (common-lisp:export
  (common-lisp:list 'malformed-policy-document-exception
                    'malformed-policy-document-exception-message)))
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:deftype nullable-double () 'common-lisp:double-float)
(common-lisp:deftype nullable-integer () 'common-lisp:integer)
(common-lisp:deftype nullable-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition policy-count-limit-exceeded-exception
     (xray-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       policy-count-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'policy-count-limit-exceeded-exception
                    'policy-count-limit-exceeded-exception-message)))
(common-lisp:deftype policy-document () 'common-lisp:string)
(common-lisp:deftype policy-name () 'common-lisp:string)
(common-lisp:deftype policy-revision-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition policy-size-limit-exceeded-exception
     (xray-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       policy-size-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'policy-size-limit-exceeded-exception
                    'policy-size-limit-exceeded-exception-message)))
(common-lisp:deftype priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass put-encryption-config-request common-lisp:nil
                       ((key-id :initarg :key-id :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-key-id common-lisp:null)
                         :accessor
                         struct-shape-put-encryption-config-request-key-id
                         :shape "EncryptionKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor
                         struct-shape-put-encryption-config-request-type :shape
                         "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-encryption-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-encryption-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-encryption-config-request
                    'make-put-encryption-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-encryption-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-encryption-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-encryption-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-encryption-config-result common-lisp:nil
                       ((encryption-config :initarg :encryption-config
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-config common-lisp:null)
                         :accessor
                         struct-shape-put-encryption-config-result-encryption-config
                         :shape "EncryptionConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-encryption-config-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-encryption-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-encryption-config-result
                    'make-put-encryption-config-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-encryption-config-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-encryption-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-encryption-config-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-request common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-request-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policy-document is required")
                         :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-request-policy-document
                         :shape "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-revision-id :initarg :policy-revision-id
                         :initform common-lisp:nil :type
                         (common-lisp:or policy-revision-id common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-request-policy-revision-id
                         :shape "PolicyRevisionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bypass-policy-lockout-check :initarg
                         :bypass-policy-lockout-check :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-request-bypass-policy-lockout-check
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resource-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-request
                    'make-put-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-revision-id))
      (common-lisp:list
       (common-lisp:cons "PolicyRevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-policy-lockout-check))
      (common-lisp:list
       (common-lisp:cons "BypassPolicyLockoutCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-result common-lisp:nil
                       ((resource-policy :initarg :resource-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-policy common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-result-resource-policy
                         :shape "ResourcePolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resource-policy-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-result
                    'make-put-resource-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-telemetry-records-request common-lisp:nil
                       ((telemetry-records :initarg :telemetry-records
                         :initform
                         (common-lisp:error ":telemetry-records is required")
                         :type
                         (common-lisp:or telemetry-record-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-telemetry-records-request-telemetry-records
                         :shape "TelemetryRecordList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2instance-id :initarg :ec2instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2instance-id common-lisp:null)
                         :accessor
                         struct-shape-put-telemetry-records-request-ec2instance-id
                         :shape "EC2InstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hostname :initarg :hostname :initform common-lisp:nil
                         :type (common-lisp:or hostname common-lisp:null)
                         :accessor
                         struct-shape-put-telemetry-records-request-hostname
                         :shape "Hostname" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-put-telemetry-records-request-resource-arn
                         :shape "ResourceARN" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-telemetry-records-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-telemetry-records-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-telemetry-records-request
                    'make-put-telemetry-records-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-telemetry-records-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-telemetry-records-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telemetry-records))
      (common-lisp:list
       (common-lisp:cons "TelemetryRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-id))
      (common-lisp:list
       (common-lisp:cons "EC2InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "Hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-telemetry-records-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-telemetry-records-result common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-telemetry-records-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-telemetry-records-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-telemetry-records-result
                    'make-put-telemetry-records-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-telemetry-records-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-telemetry-records-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-telemetry-records-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-trace-segments-request common-lisp:nil
                       ((trace-segment-documents :initarg
                         :trace-segment-documents :initform
                         (common-lisp:error
                          ":trace-segment-documents is required")
                         :type
                         (common-lisp:or trace-segment-document-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-trace-segments-request-trace-segment-documents
                         :shape "TraceSegmentDocumentList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-trace-segments-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-trace-segments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-trace-segments-request
                    'make-put-trace-segments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-trace-segments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-trace-segments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trace-segment-documents))
      (common-lisp:list
       (common-lisp:cons "TraceSegmentDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-trace-segments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-trace-segments-result common-lisp:nil
                       ((unprocessed-trace-segments :initarg
                         :unprocessed-trace-segments :initform common-lisp:nil
                         :type
                         (common-lisp:or unprocessed-trace-segment-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-trace-segments-result-unprocessed-trace-segments
                         :shape "UnprocessedTraceSegmentList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-trace-segments-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-trace-segments-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-trace-segments-result
                    'make-put-trace-segments-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-trace-segments-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-trace-segments-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-trace-segments))
      (common-lisp:list
       (common-lisp:cons "UnprocessedTraceSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-trace-segments-result))
   common-lisp:nil))
(common-lisp:deftype request-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass request-impact-statistics common-lisp:nil
                       ((fault-count :initarg :fault-count :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor
                         struct-shape-request-impact-statistics-fault-count
                         :shape "NullableLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ok-count :initarg :ok-count :initform common-lisp:nil
                         :type (common-lisp:or nullable-long common-lisp:null)
                         :accessor
                         struct-shape-request-impact-statistics-ok-count :shape
                         "NullableLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-count :initarg :total-count :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor
                         struct-shape-request-impact-statistics-total-count
                         :shape "NullableLong" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-request-impact-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'request-impact-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'request-impact-statistics
                    'make-request-impact-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-impact-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-impact-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault-count))
      (common-lisp:list
       (common-lisp:cons "FaultCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ok-count))
      (common-lisp:list
       (common-lisp:cons "OkCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-impact-statistics))
   common-lisp:nil))
(common-lisp:deftype reservoir-size () 'common-lisp:integer)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-arndetail common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-arndetail-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-arndetail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-arndetail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-arndetail 'make-resource-arndetail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-arndetail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-arndetail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-arndetail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (xray-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-not-found-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defclass resource-policy common-lisp:nil
                       ((policy-name :initarg :policy-name :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor struct-shape-resource-policy-policy-name
                         :shape "PolicyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor struct-shape-resource-policy-policy-document
                         :shape "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-revision-id :initarg :policy-revision-id
                         :initform common-lisp:nil :type
                         (common-lisp:or policy-revision-id common-lisp:null)
                         :accessor
                         struct-shape-resource-policy-policy-revision-id :shape
                         "PolicyRevisionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-resource-policy-last-updated-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource-policy 'make-resource-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-revision-id))
      (common-lisp:list
       (common-lisp:cons "PolicyRevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-policy-list ()
   '(trivial-types:proper-list resource-policy))
 (common-lisp:defun make-resource-policy-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-policy))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-policy-next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass response-time-root-cause common-lisp:nil
                       ((services :initarg :services :initform common-lisp:nil
                         :type
                         (common-lisp:or response-time-root-cause-services
                                         common-lisp:null)
                         :accessor
                         struct-shape-response-time-root-cause-services :shape
                         "ResponseTimeRootCauseServices" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-impacting :initarg :client-impacting :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-response-time-root-cause-client-impacting
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-response-time-root-cause
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'response-time-root-cause
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'response-time-root-cause 'make-response-time-root-cause))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-time-root-cause))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-time-root-cause))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "Services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-impacting))
      (common-lisp:list
       (common-lisp:cons "ClientImpacting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-time-root-cause))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass response-time-root-cause-entity common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-response-time-root-cause-entity-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (coverage :initarg :coverage :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor
                         struct-shape-response-time-root-cause-entity-coverage
                         :shape "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remote :initarg :remote :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-response-time-root-cause-entity-remote
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-response-time-root-cause-entity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-time-root-cause-entity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'response-time-root-cause-entity
                    'make-response-time-root-cause-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-time-root-cause-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-time-root-cause-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coverage))
      (common-lisp:list
       (common-lisp:cons "Coverage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote))
      (common-lisp:list
       (common-lisp:cons "Remote"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-time-root-cause-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype response-time-root-cause-entity-path ()
   '(trivial-types:proper-list response-time-root-cause-entity))
 (common-lisp:defun make-response-time-root-cause-entity-path
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            response-time-root-cause-entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass response-time-root-cause-service common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-response-time-root-cause-service-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (names :initarg :names :initform common-lisp:nil :type
                         (common-lisp:or service-names common-lisp:null)
                         :accessor
                         struct-shape-response-time-root-cause-service-names
                         :shape "ServiceNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-response-time-root-cause-service-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-response-time-root-cause-service-account-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-path :initarg :entity-path :initform
                         common-lisp:nil :type
                         (common-lisp:or response-time-root-cause-entity-path
                                         common-lisp:null)
                         :accessor
                         struct-shape-response-time-root-cause-service-entity-path
                         :shape "ResponseTimeRootCauseEntityPath" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (inferred :initarg :inferred :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-response-time-root-cause-service-inferred
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-response-time-root-cause-service
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'response-time-root-cause-service
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'response-time-root-cause-service
                    'make-response-time-root-cause-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-time-root-cause-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-time-root-cause-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-path))
      (common-lisp:list
       (common-lisp:cons "EntityPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inferred))
      (common-lisp:list
       (common-lisp:cons "Inferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-time-root-cause-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype response-time-root-cause-services ()
   '(trivial-types:proper-list response-time-root-cause-service))
 (common-lisp:defun make-response-time-root-cause-services
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            response-time-root-cause-service))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype response-time-root-causes ()
   '(trivial-types:proper-list response-time-root-cause))
 (common-lisp:defun make-response-time-root-causes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            response-time-root-cause))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass root-cause-exception common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-root-cause-exception-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-root-cause-exception-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-root-cause-exception
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'root-cause-exception
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'root-cause-exception 'make-root-cause-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input root-cause-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input root-cause-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input root-cause-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype root-cause-exceptions ()
   '(trivial-types:proper-list root-cause-exception))
 (common-lisp:defun make-root-cause-exceptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list root-cause-exception))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition rule-limit-exceeded-exception
     (xray-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       rule-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'rule-limit-exceeded-exception
                    'rule-limit-exceeded-exception-message)))
(common-lisp:deftype rule-name () 'common-lisp:string)
(common-lisp:deftype sampled-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass sampling-rule common-lisp:nil
                       ((rule-name :initarg :rule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         struct-shape-sampling-rule-rule-name :shape "RuleName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rule-arn :initarg :rule-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-sampling-rule-rule-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor struct-shape-sampling-rule-resource-arn
                         :shape "ResourceARN" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (priority :initarg :priority :initform
                         (common-lisp:error ":priority is required") :type
                         (common-lisp:or priority common-lisp:null) :accessor
                         struct-shape-sampling-rule-priority :shape "Priority"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (fixed-rate :initarg :fixed-rate :initform
                         (common-lisp:error ":fixed-rate is required") :type
                         (common-lisp:or fixed-rate common-lisp:null) :accessor
                         struct-shape-sampling-rule-fixed-rate :shape
                         "FixedRate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reservoir-size :initarg :reservoir-size :initform
                         (common-lisp:error ":reservoir-size is required")
                         :type (common-lisp:or reservoir-size common-lisp:null)
                         :accessor struct-shape-sampling-rule-reservoir-size
                         :shape "ReservoirSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":service-name is required") :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor struct-shape-sampling-rule-service-name
                         :shape "ServiceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-type :initarg :service-type :initform
                         (common-lisp:error ":service-type is required") :type
                         (common-lisp:or service-type common-lisp:null)
                         :accessor struct-shape-sampling-rule-service-type
                         :shape "ServiceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (host :initarg :host :initform
                         (common-lisp:error ":host is required") :type
                         (common-lisp:or host common-lisp:null) :accessor
                         struct-shape-sampling-rule-host :shape "Host"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (httpmethod :initarg :httpmethod :initform
                         (common-lisp:error ":httpmethod is required") :type
                         (common-lisp:or httpmethod common-lisp:null) :accessor
                         struct-shape-sampling-rule-httpmethod :shape
                         "HTTPMethod" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (urlpath :initarg :urlpath :initform
                         (common-lisp:error ":urlpath is required") :type
                         (common-lisp:or urlpath common-lisp:null) :accessor
                         struct-shape-sampling-rule-urlpath :shape "URLPath"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform
                         (common-lisp:error ":version is required") :type
                         (common-lisp:or version common-lisp:null) :accessor
                         struct-shape-sampling-rule-version :shape "Version"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-map common-lisp:null)
                         :accessor struct-shape-sampling-rule-attributes :shape
                         "AttributeMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sampling-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sampling-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sampling-rule 'make-sampling-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sampling-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sampling-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "RuleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-rate))
      (common-lisp:list
       (common-lisp:cons "FixedRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservoir-size))
      (common-lisp:list
       (common-lisp:cons "ReservoirSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "ServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'httpmethod))
      (common-lisp:list
       (common-lisp:cons "HTTPMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'urlpath))
      (common-lisp:list
       (common-lisp:cons "URLPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sampling-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sampling-rule-record common-lisp:nil
                       ((sampling-rule :initarg :sampling-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or sampling-rule common-lisp:null)
                         :accessor
                         struct-shape-sampling-rule-record-sampling-rule :shape
                         "SamplingRule" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-sampling-rule-record-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (modified-at :initarg :modified-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-sampling-rule-record-modified-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sampling-rule-record
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sampling-rule-record
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sampling-rule-record 'make-sampling-rule-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sampling-rule-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sampling-rule-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampling-rule))
      (common-lisp:list
       (common-lisp:cons "SamplingRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "ModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sampling-rule-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sampling-rule-record-list ()
   '(trivial-types:proper-list sampling-rule-record))
 (common-lisp:defun make-sampling-rule-record-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sampling-rule-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sampling-rule-update common-lisp:nil
                       ((rule-name :initarg :rule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         struct-shape-sampling-rule-update-rule-name :shape
                         "RuleName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rule-arn :initarg :rule-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-sampling-rule-update-rule-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-sampling-rule-update-resource-arn :shape
                         "ResourceARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (priority :initarg :priority :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor struct-shape-sampling-rule-update-priority
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fixed-rate :initarg :fixed-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor struct-shape-sampling-rule-update-fixed-rate
                         :shape "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reservoir-size :initarg :reservoir-size :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-sampling-rule-update-reservoir-size
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (host :initarg :host :initform common-lisp:nil :type
                         (common-lisp:or host common-lisp:null) :accessor
                         struct-shape-sampling-rule-update-host :shape "Host"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-sampling-rule-update-service-name :shape
                         "ServiceName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-type :initarg :service-type :initform
                         common-lisp:nil :type
                         (common-lisp:or service-type common-lisp:null)
                         :accessor
                         struct-shape-sampling-rule-update-service-type :shape
                         "ServiceType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (httpmethod :initarg :httpmethod :initform
                         common-lisp:nil :type
                         (common-lisp:or httpmethod common-lisp:null) :accessor
                         struct-shape-sampling-rule-update-httpmethod :shape
                         "HTTPMethod" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (urlpath :initarg :urlpath :initform common-lisp:nil
                         :type (common-lisp:or urlpath common-lisp:null)
                         :accessor struct-shape-sampling-rule-update-urlpath
                         :shape "URLPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-map common-lisp:null)
                         :accessor struct-shape-sampling-rule-update-attributes
                         :shape "AttributeMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sampling-rule-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sampling-rule-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sampling-rule-update 'make-sampling-rule-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sampling-rule-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sampling-rule-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "RuleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-rate))
      (common-lisp:list
       (common-lisp:cons "FixedRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservoir-size))
      (common-lisp:list
       (common-lisp:cons "ReservoirSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "ServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'httpmethod))
      (common-lisp:list
       (common-lisp:cons "HTTPMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'urlpath))
      (common-lisp:list
       (common-lisp:cons "URLPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sampling-rule-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sampling-statistic-summary common-lisp:nil
                       ((rule-name :initarg :rule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sampling-statistic-summary-rule-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-sampling-statistic-summary-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-count :initarg :request-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-sampling-statistic-summary-request-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (borrow-count :initarg :borrow-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-sampling-statistic-summary-borrow-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sampled-count :initarg :sampled-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-sampling-statistic-summary-sampled-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sampling-statistic-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sampling-statistic-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sampling-statistic-summary
                    'make-sampling-statistic-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sampling-statistic-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sampling-statistic-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-count))
      (common-lisp:list
       (common-lisp:cons "RequestCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'borrow-count))
      (common-lisp:list
       (common-lisp:cons "BorrowCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampled-count))
      (common-lisp:list
       (common-lisp:cons "SampledCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sampling-statistic-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sampling-statistic-summary-list ()
   '(trivial-types:proper-list sampling-statistic-summary))
 (common-lisp:defun make-sampling-statistic-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sampling-statistic-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sampling-statistics-document common-lisp:nil
                       ((rule-name :initarg :rule-name :initform
                         (common-lisp:error ":rule-name is required") :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         struct-shape-sampling-statistics-document-rule-name
                         :shape "RuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         (common-lisp:error ":client-id is required") :type
                         (common-lisp:or client-id common-lisp:null) :accessor
                         struct-shape-sampling-statistics-document-client-id
                         :shape "ClientID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         (common-lisp:error ":timestamp is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-sampling-statistics-document-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-count :initarg :request-count :initform
                         (common-lisp:error ":request-count is required") :type
                         (common-lisp:or request-count common-lisp:null)
                         :accessor
                         struct-shape-sampling-statistics-document-request-count
                         :shape "RequestCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sampled-count :initarg :sampled-count :initform
                         (common-lisp:error ":sampled-count is required") :type
                         (common-lisp:or sampled-count common-lisp:null)
                         :accessor
                         struct-shape-sampling-statistics-document-sampled-count
                         :shape "SampledCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (borrow-count :initarg :borrow-count :initform
                         common-lisp:nil :type
                         (common-lisp:or borrow-count common-lisp:null)
                         :accessor
                         struct-shape-sampling-statistics-document-borrow-count
                         :shape "BorrowCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sampling-statistics-document
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sampling-statistics-document
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sampling-statistics-document
                    'make-sampling-statistics-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sampling-statistics-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sampling-statistics-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-count))
      (common-lisp:list
       (common-lisp:cons "RequestCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampled-count))
      (common-lisp:list
       (common-lisp:cons "SampledCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'borrow-count))
      (common-lisp:list
       (common-lisp:cons "BorrowCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sampling-statistics-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sampling-statistics-document-list ()
   '(trivial-types:proper-list sampling-statistics-document))
 (common-lisp:defun make-sampling-statistics-document-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sampling-statistics-document))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sampling-strategy common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or sampling-strategy-name
                                         common-lisp:null)
                         :accessor struct-shape-sampling-strategy-name :shape
                         "SamplingStrategyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor struct-shape-sampling-strategy-value :shape
                         "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sampling-strategy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sampling-strategy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sampling-strategy 'make-sampling-strategy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sampling-strategy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sampling-strategy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sampling-strategy))
   common-lisp:nil))
(common-lisp:deftype sampling-strategy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sampling-target-document common-lisp:nil
                       ((rule-name :initarg :rule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sampling-target-document-rule-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (fixed-rate :initarg :fixed-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-sampling-target-document-fixed-rate
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reservoir-quota :initarg :reservoir-quota :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-sampling-target-document-reservoir-quota
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reservoir-quota-ttl :initarg :reservoir-quota-ttl
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-sampling-target-document-reservoir-quota-ttl
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interval :initarg :interval :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-sampling-target-document-interval :shape
                         "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sampling-target-document
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sampling-target-document
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sampling-target-document 'make-sampling-target-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sampling-target-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sampling-target-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-rate))
      (common-lisp:list
       (common-lisp:cons "FixedRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservoir-quota))
      (common-lisp:list
       (common-lisp:cons "ReservoirQuota"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservoir-quota-ttl))
      (common-lisp:list
       (common-lisp:cons "ReservoirQuotaTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sampling-target-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sampling-target-document-list ()
   '(trivial-types:proper-list sampling-target-document))
 (common-lisp:defun make-sampling-target-document-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sampling-target-document))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass segment common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or segment-id common-lisp:null) :accessor
                         struct-shape-segment-id :shape "SegmentId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (document :initarg :document :initform common-lisp:nil
                         :type
                         (common-lisp:or segment-document common-lisp:null)
                         :accessor struct-shape-segment-document :shape
                         "SegmentDocument" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-segment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'segment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'segment 'make-segment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input segment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input segment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "Document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input segment))
   common-lisp:nil))
(common-lisp:deftype segment-document () 'common-lisp:string)
(common-lisp:deftype segment-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype segment-list () '(trivial-types:proper-list segment))
 (common-lisp:defun make-segment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list segment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service common-lisp:nil
                       ((reference-id :initarg :reference-id :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor struct-shape-service-reference-id :shape
                         "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (names :initarg :names :initform common-lisp:nil :type
                         (common-lisp:or service-names common-lisp:null)
                         :accessor struct-shape-service-names :shape
                         "ServiceNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (root :initarg :root :initform common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor struct-shape-service-root :shape
                         "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-account-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-type :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-state :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-service-start-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-service-end-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (edges :initarg :edges :initform common-lisp:nil :type
                         (common-lisp:or edge-list common-lisp:null) :accessor
                         struct-shape-service-edges :shape "EdgeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (summary-statistics :initarg :summary-statistics
                         :initform common-lisp:nil :type
                         (common-lisp:or service-statistics common-lisp:null)
                         :accessor struct-shape-service-summary-statistics
                         :shape "ServiceStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration-histogram :initarg :duration-histogram
                         :initform common-lisp:nil :type
                         (common-lisp:or histogram common-lisp:null) :accessor
                         struct-shape-service-duration-histogram :shape
                         "Histogram" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (response-time-histogram :initarg
                         :response-time-histogram :initform common-lisp:nil
                         :type (common-lisp:or histogram common-lisp:null)
                         :accessor struct-shape-service-response-time-histogram
                         :shape "Histogram" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'service 'make-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root))
      (common-lisp:list
       (common-lisp:cons "Root"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edges))
      (common-lisp:list
       (common-lisp:cons "Edges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary-statistics))
      (common-lisp:list
       (common-lisp:cons "SummaryStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-histogram))
      (common-lisp:list
       (common-lisp:cons "DurationHistogram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-time-histogram))
      (common-lisp:list
       (common-lisp:cons "ResponseTimeHistogram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-id common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-id-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (names :initarg :names :initform common-lisp:nil :type
                         (common-lisp:or service-names common-lisp:null)
                         :accessor struct-shape-service-id-names :shape
                         "ServiceNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-id-account-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-id-type :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-id
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-id
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'service-id 'make-service-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-ids () '(trivial-types:proper-list service-id))
 (common-lisp:defun make-service-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype service-list () '(trivial-types:proper-list service))
 (common-lisp:defun make-service-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype service-names () '(trivial-types:proper-list string))
 (common-lisp:defun make-service-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service-statistics common-lisp:nil
                       ((ok-count :initarg :ok-count :initform common-lisp:nil
                         :type (common-lisp:or nullable-long common-lisp:null)
                         :accessor struct-shape-service-statistics-ok-count
                         :shape "NullableLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-statistics :initarg :error-statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or error-statistics common-lisp:null)
                         :accessor
                         struct-shape-service-statistics-error-statistics
                         :shape "ErrorStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fault-statistics :initarg :fault-statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or fault-statistics common-lisp:null)
                         :accessor
                         struct-shape-service-statistics-fault-statistics
                         :shape "FaultStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-count :initarg :total-count :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-long common-lisp:null)
                         :accessor struct-shape-service-statistics-total-count
                         :shape "NullableLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-response-time :initarg :total-response-time
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor
                         struct-shape-service-statistics-total-response-time
                         :shape "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-statistics 'make-service-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ok-count))
      (common-lisp:list
       (common-lisp:cons "OkCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-statistics))
      (common-lisp:list
       (common-lisp:cons "ErrorStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault-statistics))
      (common-lisp:list
       (common-lisp:cons "FaultStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-response-time))
      (common-lisp:list
       (common-lisp:cons "TotalResponseTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-statistics))
   common-lisp:nil))
(common-lisp:deftype service-type () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass telemetry-record common-lisp:nil
                       ((timestamp :initarg :timestamp :initform
                         (common-lisp:error ":timestamp is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-telemetry-record-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (segments-received-count :initarg
                         :segments-received-count :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-telemetry-record-segments-received-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segments-sent-count :initarg :segments-sent-count
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-telemetry-record-segments-sent-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segments-spillover-count :initarg
                         :segments-spillover-count :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-telemetry-record-segments-spillover-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segments-rejected-count :initarg
                         :segments-rejected-count :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-telemetry-record-segments-rejected-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backend-connection-errors :initarg
                         :backend-connection-errors :initform common-lisp:nil
                         :type
                         (common-lisp:or backend-connection-errors
                                         common-lisp:null)
                         :accessor
                         struct-shape-telemetry-record-backend-connection-errors
                         :shape "BackendConnectionErrors" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-telemetry-record
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'telemetry-record
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'telemetry-record 'make-telemetry-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input telemetry-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input telemetry-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segments-received-count))
      (common-lisp:list
       (common-lisp:cons "SegmentsReceivedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segments-sent-count))
      (common-lisp:list
       (common-lisp:cons "SegmentsSentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segments-spillover-count))
      (common-lisp:list
       (common-lisp:cons "SegmentsSpilloverCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segments-rejected-count))
      (common-lisp:list
       (common-lisp:cons "SegmentsRejectedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-connection-errors))
      (common-lisp:list
       (common-lisp:cons "BackendConnectionErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input telemetry-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype telemetry-record-list ()
   '(trivial-types:proper-list telemetry-record))
 (common-lisp:defun make-telemetry-record-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list telemetry-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttled-exception
     (xray-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttled-exception 'throttled-exception-message)))
(common-lisp:deftype time-range-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass time-series-service-statistics common-lisp:nil
                       ((timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-time-series-service-statistics-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (edge-summary-statistics :initarg
                         :edge-summary-statistics :initform common-lisp:nil
                         :type
                         (common-lisp:or edge-statistics common-lisp:null)
                         :accessor
                         struct-shape-time-series-service-statistics-edge-summary-statistics
                         :shape "EdgeStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-summary-statistics :initarg
                         :service-summary-statistics :initform common-lisp:nil
                         :type
                         (common-lisp:or service-statistics common-lisp:null)
                         :accessor
                         struct-shape-time-series-service-statistics-service-summary-statistics
                         :shape "ServiceStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-forecast-statistics :initarg
                         :service-forecast-statistics :initform common-lisp:nil
                         :type
                         (common-lisp:or forecast-statistics common-lisp:null)
                         :accessor
                         struct-shape-time-series-service-statistics-service-forecast-statistics
                         :shape "ForecastStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response-time-histogram :initarg
                         :response-time-histogram :initform common-lisp:nil
                         :type (common-lisp:or histogram common-lisp:null)
                         :accessor
                         struct-shape-time-series-service-statistics-response-time-histogram
                         :shape "Histogram" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-time-series-service-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'time-series-service-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'time-series-service-statistics
                    'make-time-series-service-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-series-service-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-series-service-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-summary-statistics))
      (common-lisp:list
       (common-lisp:cons "EdgeSummaryStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-summary-statistics))
      (common-lisp:list
       (common-lisp:cons "ServiceSummaryStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-forecast-statistics))
      (common-lisp:list
       (common-lisp:cons "ServiceForecastStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-time-histogram))
      (common-lisp:list
       (common-lisp:cons "ResponseTimeHistogram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-series-service-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype time-series-service-statistics-list ()
   '(trivial-types:proper-list time-series-service-statistics))
 (common-lisp:defun make-time-series-service-statistics-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            time-series-service-statistics))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (xray-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defclass trace common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or trace-id common-lisp:null) :accessor
                         struct-shape-trace-id :shape "TraceId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor struct-shape-trace-duration :shape
                         "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit-exceeded :initarg :limit-exceeded :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor struct-shape-trace-limit-exceeded :shape
                         "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segments :initarg :segments :initform common-lisp:nil
                         :type (common-lisp:or segment-list common-lisp:null)
                         :accessor struct-shape-trace-segments :shape
                         "SegmentList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trace
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trace
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'trace 'make-trace))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trace))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trace))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-exceeded))
      (common-lisp:list
       (common-lisp:cons "LimitExceeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segments))
      (common-lisp:list
       (common-lisp:cons "Segments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trace))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trace-availability-zones ()
   '(trivial-types:proper-list availability-zone-detail))
 (common-lisp:defun make-trace-availability-zones
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            availability-zone-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype trace-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trace-id-list () '(trivial-types:proper-list trace-id))
 (common-lisp:defun make-trace-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trace-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype trace-instance-ids ()
   '(trivial-types:proper-list instance-id-detail))
 (common-lisp:defun make-trace-instance-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-id-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype trace-list () '(trivial-types:proper-list trace))
 (common-lisp:defun make-trace-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trace))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype trace-resource-arns ()
   '(trivial-types:proper-list resource-arndetail))
 (common-lisp:defun make-trace-resource-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-arndetail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype trace-segment-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trace-segment-document-list ()
   '(trivial-types:proper-list trace-segment-document))
 (common-lisp:defun make-trace-segment-document-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trace-segment-document))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass trace-summary common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or trace-id common-lisp:null) :accessor
                         struct-shape-trace-summary-id :shape "TraceId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-trace-summary-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor struct-shape-trace-summary-duration :shape
                         "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response-time :initarg :response-time :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor struct-shape-trace-summary-response-time
                         :shape "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (has-fault :initarg :has-fault :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor struct-shape-trace-summary-has-fault :shape
                         "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (has-error :initarg :has-error :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor struct-shape-trace-summary-has-error :shape
                         "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (has-throttle :initarg :has-throttle :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor struct-shape-trace-summary-has-throttle
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-partial :initarg :is-partial :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor struct-shape-trace-summary-is-partial :shape
                         "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http :initarg :http :initform common-lisp:nil :type
                         (common-lisp:or http common-lisp:null) :accessor
                         struct-shape-trace-summary-http :shape "Http"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (annotations :initarg :annotations :initform
                         common-lisp:nil :type
                         (common-lisp:or annotations common-lisp:null)
                         :accessor struct-shape-trace-summary-annotations
                         :shape "Annotations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (users :initarg :users :initform common-lisp:nil :type
                         (common-lisp:or trace-users common-lisp:null)
                         :accessor struct-shape-trace-summary-users :shape
                         "TraceUsers" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-ids :initarg :service-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or service-ids common-lisp:null)
                         :accessor struct-shape-trace-summary-service-ids
                         :shape "ServiceIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arns :initarg :resource-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or trace-resource-arns common-lisp:null)
                         :accessor struct-shape-trace-summary-resource-arns
                         :shape "TraceResourceARNs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-ids :initarg :instance-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or trace-instance-ids common-lisp:null)
                         :accessor struct-shape-trace-summary-instance-ids
                         :shape "TraceInstanceIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or trace-availability-zones
                                         common-lisp:null)
                         :accessor
                         struct-shape-trace-summary-availability-zones :shape
                         "TraceAvailabilityZones" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entry-point :initarg :entry-point :initform
                         common-lisp:nil :type
                         (common-lisp:or service-id common-lisp:null) :accessor
                         struct-shape-trace-summary-entry-point :shape
                         "ServiceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (fault-root-causes :initarg :fault-root-causes
                         :initform common-lisp:nil :type
                         (common-lisp:or fault-root-causes common-lisp:null)
                         :accessor struct-shape-trace-summary-fault-root-causes
                         :shape "FaultRootCauses" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-root-causes :initarg :error-root-causes
                         :initform common-lisp:nil :type
                         (common-lisp:or error-root-causes common-lisp:null)
                         :accessor struct-shape-trace-summary-error-root-causes
                         :shape "ErrorRootCauses" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response-time-root-causes :initarg
                         :response-time-root-causes :initform common-lisp:nil
                         :type
                         (common-lisp:or response-time-root-causes
                                         common-lisp:null)
                         :accessor
                         struct-shape-trace-summary-response-time-root-causes
                         :shape "ResponseTimeRootCauses" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (revision :initarg :revision :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-trace-summary-revision :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (matched-event-time :initarg :matched-event-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-trace-summary-matched-event-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trace-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trace-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'trace-summary 'make-trace-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trace-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trace-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-time))
      (common-lisp:list
       (common-lisp:cons "ResponseTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-fault))
      (common-lisp:list
       (common-lisp:cons "HasFault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-error))
      (common-lisp:list
       (common-lisp:cons "HasError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-throttle))
      (common-lisp:list
       (common-lisp:cons "HasThrottle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-partial))
      (common-lisp:list
       (common-lisp:cons "IsPartial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http))
      (common-lisp:list
       (common-lisp:cons "Http"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'annotations))
      (common-lisp:list
       (common-lisp:cons "Annotations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-ids))
      (common-lisp:list
       (common-lisp:cons "ServiceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "ResourceARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-point))
      (common-lisp:list
       (common-lisp:cons "EntryPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault-root-causes))
      (common-lisp:list
       (common-lisp:cons "FaultRootCauses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-root-causes))
      (common-lisp:list
       (common-lisp:cons "ErrorRootCauses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-time-root-causes))
      (common-lisp:list
       (common-lisp:cons "ResponseTimeRootCauses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "Revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matched-event-time))
      (common-lisp:list
       (common-lisp:cons "MatchedEventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trace-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trace-summary-list ()
   '(trivial-types:proper-list trace-summary))
 (common-lisp:defun make-trace-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trace-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass trace-user common-lisp:nil
                       ((user-name :initarg :user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-trace-user-user-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-ids :initarg :service-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or service-ids common-lisp:null)
                         :accessor struct-shape-trace-user-service-ids :shape
                         "ServiceIds" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trace-user
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trace-user
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'trace-user 'make-trace-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trace-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trace-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-ids))
      (common-lisp:list
       (common-lisp:cons "ServiceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trace-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trace-users () '(trivial-types:proper-list trace-user))
 (common-lisp:defun make-trace-users
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trace-user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype urlpath () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass unprocessed-statistics common-lisp:nil
                       ((rule-name :initarg :rule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-unprocessed-statistics-rule-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-unprocessed-statistics-error-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-unprocessed-statistics-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unprocessed-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unprocessed-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unprocessed-statistics 'make-unprocessed-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-statistics-list ()
   '(trivial-types:proper-list unprocessed-statistics))
 (common-lisp:defun make-unprocessed-statistics-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unprocessed-statistics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype unprocessed-trace-id-list ()
   '(trivial-types:proper-list trace-id))
 (common-lisp:defun make-unprocessed-trace-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trace-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unprocessed-trace-segment common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-unprocessed-trace-segment-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-unprocessed-trace-segment-error-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-unprocessed-trace-segment-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unprocessed-trace-segment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unprocessed-trace-segment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unprocessed-trace-segment
                    'make-unprocessed-trace-segment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-trace-segment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-trace-segment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-trace-segment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-trace-segment-list ()
   '(trivial-types:proper-list unprocessed-trace-segment))
 (common-lisp:defun make-unprocessed-trace-segment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unprocessed-trace-segment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-group-request common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or group-name common-lisp:null) :accessor
                         struct-shape-update-group-request-group-name :shape
                         "GroupName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-arn :initarg :group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or group-arn common-lisp:null) :accessor
                         struct-shape-update-group-request-group-arn :shape
                         "GroupARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter-expression :initarg :filter-expression
                         :initform common-lisp:nil :type
                         (common-lisp:or filter-expression common-lisp:null)
                         :accessor
                         struct-shape-update-group-request-filter-expression
                         :shape "FilterExpression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (insights-configuration :initarg
                         :insights-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or insights-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-group-request-insights-configuration
                         :shape "InsightsConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-group-request 'make-update-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-arn))
      (common-lisp:list
       (common-lisp:cons "GroupARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-expression))
      (common-lisp:list
       (common-lisp:cons "FilterExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'insights-configuration))
      (common-lisp:list
       (common-lisp:cons "InsightsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-group-result common-lisp:nil
                       ((group :initarg :group :initform common-lisp:nil :type
                         (common-lisp:or group common-lisp:null) :accessor
                         struct-shape-update-group-result-group :shape "Group"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-group-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-group-result 'make-update-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-sampling-rule-request common-lisp:nil
                       ((sampling-rule-update :initarg :sampling-rule-update
                         :initform
                         (common-lisp:error
                          ":sampling-rule-update is required")
                         :type
                         (common-lisp:or sampling-rule-update common-lisp:null)
                         :accessor
                         struct-shape-update-sampling-rule-request-sampling-rule-update
                         :shape "SamplingRuleUpdate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-sampling-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-sampling-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-sampling-rule-request
                    'make-update-sampling-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sampling-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sampling-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sampling-rule-update))
      (common-lisp:list
       (common-lisp:cons "SamplingRuleUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sampling-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-sampling-rule-result common-lisp:nil
                       ((sampling-rule-record :initarg :sampling-rule-record
                         :initform common-lisp:nil :type
                         (common-lisp:or sampling-rule-record common-lisp:null)
                         :accessor
                         struct-shape-update-sampling-rule-result-sampling-rule-record
                         :shape "SamplingRuleRecord" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-sampling-rule-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-sampling-rule-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-sampling-rule-result
                    'make-update-sampling-rule-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sampling-rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sampling-rule-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sampling-rule-record))
      (common-lisp:list
       (common-lisp:cons "SamplingRuleRecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sampling-rule-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass value-with-service-ids common-lisp:nil
                       ((annotation-value :initarg :annotation-value :initform
                         common-lisp:nil :type
                         (common-lisp:or annotation-value common-lisp:null)
                         :accessor
                         struct-shape-value-with-service-ids-annotation-value
                         :shape "AnnotationValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-ids :initarg :service-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or service-ids common-lisp:null)
                         :accessor
                         struct-shape-value-with-service-ids-service-ids :shape
                         "ServiceIds" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-value-with-service-ids
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'value-with-service-ids
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'value-with-service-ids 'make-value-with-service-ids))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          value-with-service-ids))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          value-with-service-ids))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'annotation-value))
      (common-lisp:list
       (common-lisp:cons "AnnotationValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-ids))
      (common-lisp:list
       (common-lisp:cons "ServiceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          value-with-service-ids))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype values-with-service-ids ()
   '(trivial-types:proper-list value-with-service-ids))
 (common-lisp:defun make-values-with-service-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value-with-service-ids))
   aws-sdk/generator/shape::members))
(common-lisp:deftype version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun batch-get-traces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trace-ids next-token)
   (common-lisp:declare (common-lisp:ignorable trace-ids next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-traces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/Traces"
                                                        "BatchGetTraces"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-traces))
(common-lisp:progn
 (common-lisp:defun create-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name filter-expression
                     insights-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable group-name filter-expression insights-configuration
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/CreateGroup"
                                                        "CreateGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-group))
(common-lisp:progn
 (common-lisp:defun create-sampling-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sampling-rule tags)
   (common-lisp:declare (common-lisp:ignorable sampling-rule tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-sampling-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/CreateSamplingRule"
                                                        "CreateSamplingRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-sampling-rule))
(common-lisp:progn
 (common-lisp:defun delete-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name group-arn)
   (common-lisp:declare (common-lisp:ignorable group-name group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/DeleteGroup"
                                                        "DeleteGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-group))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-revision-id)
   (common-lisp:declare (common-lisp:ignorable policy-name policy-revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteResourcePolicy"
                                                        "DeleteResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun delete-sampling-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name rule-arn)
   (common-lisp:declare (common-lisp:ignorable rule-name rule-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-sampling-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteSamplingRule"
                                                        "DeleteSamplingRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-sampling-rule))
(common-lisp:progn
 (common-lisp:defun get-encryption-config ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'xray-request :method "POST" :path
                                "/EncryptionConfig" :operation
                                "GetEncryptionConfig"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-encryption-config))
(common-lisp:progn
 (common-lisp:defun get-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name group-arn)
   (common-lisp:declare (common-lisp:ignorable group-name group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/GetGroup"
                                                        "GetGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-group))
(common-lisp:progn
 (common-lisp:defun get-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/Groups"
                                                        "GetGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-groups))
(common-lisp:progn
 (common-lisp:defun get-insight
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key insight-id)
   (common-lisp:declare (common-lisp:ignorable insight-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-insight-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/Insight"
                                                        "GetInsight"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-insight))
(common-lisp:progn
 (common-lisp:defun get-insight-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key insight-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable insight-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-insight-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/InsightEvents"
                                                        "GetInsightEvents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-insight-events))
(common-lisp:progn
 (common-lisp:defun get-insight-impact-graph
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key insight-id start-time end-time
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable insight-id start-time end-time next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-insight-impact-graph-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/InsightImpactGraph"
                                                        "GetInsightImpactGraph"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-insight-impact-graph))
(common-lisp:progn
 (common-lisp:defun get-insight-summaries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key states group-arn group-name start-time
                     end-time max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable states group-arn group-name start-time end-time
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-insight-summaries-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/InsightSummaries"
                                                        "GetInsightSummaries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-insight-summaries))
(common-lisp:progn
 (common-lisp:defun get-sampling-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sampling-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/GetSamplingRules"
                                                        "GetSamplingRules"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-sampling-rules))
(common-lisp:progn
 (common-lisp:defun get-sampling-statistic-summaries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-sampling-statistic-summaries-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/SamplingStatisticSummaries"
                                                        "GetSamplingStatisticSummaries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-sampling-statistic-summaries))
(common-lisp:progn
 (common-lisp:defun get-sampling-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sampling-statistics-documents)
   (common-lisp:declare (common-lisp:ignorable sampling-statistics-documents))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sampling-targets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/SamplingTargets"
                                                        "GetSamplingTargets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-sampling-targets))
(common-lisp:progn
 (common-lisp:defun get-service-graph
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key start-time end-time group-name group-arn
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable start-time end-time group-name group-arn
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-service-graph-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/ServiceGraph"
                                                        "GetServiceGraph"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-service-graph))
(common-lisp:progn
 (common-lisp:defun get-time-series-service-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key start-time end-time group-name group-arn
                     entity-selector-expression period forecast-statistics
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable start-time end-time group-name group-arn
     entity-selector-expression period forecast-statistics next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-time-series-service-statistics-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/TimeSeriesServiceStatistics"
                                                        "GetTimeSeriesServiceStatistics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-time-series-service-statistics))
(common-lisp:progn
 (common-lisp:defun get-trace-graph
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trace-ids next-token)
   (common-lisp:declare (common-lisp:ignorable trace-ids next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-trace-graph-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/TraceGraph"
                                                        "GetTraceGraph"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-trace-graph))
(common-lisp:progn
 (common-lisp:defun get-trace-summaries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key start-time end-time time-range-type
                     sampling sampling-strategy filter-expression next-token)
   (common-lisp:declare
    (common-lisp:ignorable start-time end-time time-range-type sampling
     sampling-strategy filter-expression next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-trace-summaries-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/TraceSummaries"
                                                        "GetTraceSummaries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-trace-summaries))
(common-lisp:progn
 (common-lisp:defun list-resource-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resource-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListResourcePolicies"
                                                        "ListResourcePolicies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-resource-policies))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token)
   (common-lisp:declare (common-lisp:ignorable resource-arn next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListTagsForResource"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-encryption-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id type)
   (common-lisp:declare (common-lisp:ignorable key-id type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-encryption-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/PutEncryptionConfig"
                                                        "PutEncryptionConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-encryption-config))
(common-lisp:progn
 (common-lisp:defun put-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-document
                     policy-revision-id bypass-policy-lockout-check)
   (common-lisp:declare
    (common-lisp:ignorable policy-name policy-document policy-revision-id
     bypass-policy-lockout-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/PutResourcePolicy"
                                                        "PutResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-resource-policy))
(common-lisp:progn
 (common-lisp:defun put-telemetry-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key telemetry-records ec2instance-id hostname
                     resource-arn)
   (common-lisp:declare
    (common-lisp:ignorable telemetry-records ec2instance-id hostname
     resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-telemetry-records-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/TelemetryRecords"
                                                        "PutTelemetryRecords"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-telemetry-records))
(common-lisp:progn
 (common-lisp:defun put-trace-segments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trace-segment-documents)
   (common-lisp:declare (common-lisp:ignorable trace-segment-documents))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-trace-segments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/TraceSegments"
                                                        "PutTraceSegments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-trace-segments))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/TagResource"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/UntagResource"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name group-arn filter-expression
                     insights-configuration)
   (common-lisp:declare
    (common-lisp:ignorable group-name group-arn filter-expression
     insights-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/UpdateGroup"
                                                        "UpdateGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-group))
(common-lisp:progn
 (common-lisp:defun update-sampling-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sampling-rule-update)
   (common-lisp:declare (common-lisp:ignorable sampling-rule-update))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-sampling-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'xray-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateSamplingRule"
                                                        "UpdateSamplingRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-sampling-rule))
