;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/tnb/api (:use)
                             (:nicknames #:aws/tnb)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/tnb/api)
(common-lisp:progn
 (common-lisp:define-condition tnb-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'tnb-error))
(common-lisp:progn
 (common-lisp:defclass tnb-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "tnb" :api-version
                        "2008-10-21" :host-prefix "tnb" :signing-name "tnb"
                        :global-host common-lisp:nil))
 (common-lisp:export 'tnb-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (tnb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-sol-network-operation-input common-lisp:nil
                       ((ns-lcm-op-occ-id :initarg :ns-lcm-op-occ-id :initform
                         (common-lisp:error ":nslcmopoccid is required") :type
                         (common-lisp:or ns-lcm-op-occ-id common-lisp:null)
                         :accessor
                         struct-shape-cancel-sol-network-operation-input-ns-lcm-op-occ-id
                         :shape "NsLcmOpOccId" :location "uri" :location-name
                         "nsLcmOpOccId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-sol-network-operation-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-sol-network-operation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-sol-network-operation-input
                    'make-cancel-sol-network-operation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-sol-network-operation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-sol-network-operation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-sol-network-operation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sol-function-package-input common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-sol-function-package-input-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-sol-function-package-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-sol-function-package-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-sol-function-package-input
                    'make-create-sol-function-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-function-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-function-package-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-function-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sol-function-package-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or vnf-pkg-arn common-lisp:null)
                         :accessor
                         struct-shape-create-sol-function-package-output-arn
                         :shape "VnfPkgArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or vnf-pkg-id common-lisp:null) :accessor
                         struct-shape-create-sol-function-package-output-id
                         :shape "VnfPkgId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (onboarding-state :initarg :onboarding-state :initform
                         (common-lisp:error ":onboardingstate is required")
                         :type
                         (common-lisp:or onboarding-state common-lisp:null)
                         :accessor
                         struct-shape-create-sol-function-package-output-onboarding-state
                         :shape "OnboardingState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operational-state :initarg :operational-state
                         :initform
                         (common-lisp:error ":operationalstate is required")
                         :type
                         (common-lisp:or operational-state common-lisp:null)
                         :accessor
                         struct-shape-create-sol-function-package-output-operational-state
                         :shape "OperationalState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-sol-function-package-output-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (usage-state :initarg :usage-state :initform
                         (common-lisp:error ":usagestate is required") :type
                         (common-lisp:or usage-state common-lisp:null)
                         :accessor
                         struct-shape-create-sol-function-package-output-usage-state
                         :shape "UsageState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-sol-function-package-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-sol-function-package-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-sol-function-package-output
                    'make-create-sol-function-package-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-function-package-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-function-package-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'onboarding-state))
      (common-lisp:list
       (common-lisp:cons "onboardingState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operational-state))
      (common-lisp:list
       (common-lisp:cons "operationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-state))
      (common-lisp:list
       (common-lisp:cons "usageState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-function-package-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sol-network-instance-input common-lisp:nil
                       ((ns-description :initarg :ns-description :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          create-sol-network-instance-input-ns-description-string
                          common-lisp:null)
                         :accessor
                         struct-shape-create-sol-network-instance-input-ns-description
                         :shape
                         "CreateSolNetworkInstanceInputNsDescriptionString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ns-name :initarg :ns-name :initform
                         (common-lisp:error ":nsname is required") :type
                         (common-lisp:or
                          create-sol-network-instance-input-ns-name-string
                          common-lisp:null)
                         :accessor
                         struct-shape-create-sol-network-instance-input-ns-name
                         :shape "CreateSolNetworkInstanceInputNsNameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (nsd-info-id :initarg :nsd-info-id :initform
                         (common-lisp:error ":nsdinfoid is required") :type
                         (common-lisp:or nsd-info-id common-lisp:null)
                         :accessor
                         struct-shape-create-sol-network-instance-input-nsd-info-id
                         :shape "NsdInfoId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-sol-network-instance-input-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-sol-network-instance-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-sol-network-instance-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-sol-network-instance-input
                    'make-create-sol-network-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-description))
      (common-lisp:list
       (common-lisp:cons "nsDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-name))
      (common-lisp:list
       (common-lisp:cons "nsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-info-id))
      (common-lisp:list
       (common-lisp:cons "nsdInfoId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-instance-input))
   common-lisp:nil))
(common-lisp:deftype create-sol-network-instance-input-ns-description-string ()
  'common-lisp:string)
(common-lisp:deftype create-sol-network-instance-input-ns-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-sol-network-instance-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or ns-instance-arn common-lisp:null)
                         :accessor
                         struct-shape-create-sol-network-instance-output-arn
                         :shape "NsInstanceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or ns-instance-id common-lisp:null)
                         :accessor
                         struct-shape-create-sol-network-instance-output-id
                         :shape "NsInstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ns-instance-name :initarg :ns-instance-name :initform
                         (common-lisp:error ":nsinstancename is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-sol-network-instance-output-ns-instance-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-info-id :initarg :nsd-info-id :initform
                         (common-lisp:error ":nsdinfoid is required") :type
                         (common-lisp:or nsd-info-id common-lisp:null)
                         :accessor
                         struct-shape-create-sol-network-instance-output-nsd-info-id
                         :shape "NsdInfoId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-sol-network-instance-output-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-sol-network-instance-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-sol-network-instance-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-sol-network-instance-output
                    'make-create-sol-network-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-instance-name))
      (common-lisp:list
       (common-lisp:cons "nsInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-info-id))
      (common-lisp:list
       (common-lisp:cons "nsdInfoId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sol-network-package-input common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-sol-network-package-input-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-sol-network-package-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-sol-network-package-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-sol-network-package-input
                    'make-create-sol-network-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-package-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sol-network-package-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or nsd-info-arn common-lisp:null)
                         :accessor
                         struct-shape-create-sol-network-package-output-arn
                         :shape "NsdInfoArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or nsd-info-id common-lisp:null)
                         :accessor
                         struct-shape-create-sol-network-package-output-id
                         :shape "NsdInfoId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-onboarding-state :initarg :nsd-onboarding-state
                         :initform
                         (common-lisp:error ":nsdonboardingstate is required")
                         :type
                         (common-lisp:or nsd-onboarding-state common-lisp:null)
                         :accessor
                         struct-shape-create-sol-network-package-output-nsd-onboarding-state
                         :shape "NsdOnboardingState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-operational-state :initarg :nsd-operational-state
                         :initform
                         (common-lisp:error ":nsdoperationalstate is required")
                         :type
                         (common-lisp:or nsd-operational-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-sol-network-package-output-nsd-operational-state
                         :shape "NsdOperationalState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-usage-state :initarg :nsd-usage-state :initform
                         (common-lisp:error ":nsdusagestate is required") :type
                         (common-lisp:or nsd-usage-state common-lisp:null)
                         :accessor
                         struct-shape-create-sol-network-package-output-nsd-usage-state
                         :shape "NsdUsageState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-sol-network-package-output-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-sol-network-package-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-sol-network-package-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-sol-network-package-output
                    'make-create-sol-network-package-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-package-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-package-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nsd-onboarding-state))
      (common-lisp:list
       (common-lisp:cons "nsdOnboardingState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nsd-operational-state))
      (common-lisp:list
       (common-lisp:cons "nsdOperationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-usage-state))
      (common-lisp:list
       (common-lisp:cons "nsdUsageState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sol-network-package-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-sol-function-package-input common-lisp:nil
                       ((vnf-pkg-id :initarg :vnf-pkg-id :initform
                         (common-lisp:error ":vnfpkgid is required") :type
                         (common-lisp:or vnf-pkg-id common-lisp:null) :accessor
                         struct-shape-delete-sol-function-package-input-vnf-pkg-id
                         :shape "VnfPkgId" :location "uri" :location-name
                         "vnfPkgId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-sol-function-package-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-sol-function-package-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-sol-function-package-input
                    'make-delete-sol-function-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-function-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-function-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-function-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-sol-network-instance-input common-lisp:nil
                       ((ns-instance-id :initarg :ns-instance-id :initform
                         (common-lisp:error ":nsinstanceid is required") :type
                         (common-lisp:or ns-instance-id common-lisp:null)
                         :accessor
                         struct-shape-delete-sol-network-instance-input-ns-instance-id
                         :shape "NsInstanceId" :location "uri" :location-name
                         "nsInstanceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-sol-network-instance-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-sol-network-instance-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-sol-network-instance-input
                    'make-delete-sol-network-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-network-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-network-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-network-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-sol-network-package-input common-lisp:nil
                       ((nsd-info-id :initarg :nsd-info-id :initform
                         (common-lisp:error ":nsdinfoid is required") :type
                         (common-lisp:or nsd-info-id common-lisp:null)
                         :accessor
                         struct-shape-delete-sol-network-package-input-nsd-info-id
                         :shape "NsdInfoId" :location "uri" :location-name
                         "nsdInfoId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-sol-network-package-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-sol-network-package-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-sol-network-package-input
                    'make-delete-sol-network-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-network-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-network-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sol-network-package-input))
   common-lisp:nil))
(common-lisp:deftype descriptor-content-type () 'common-lisp:string)
(common-lisp:deftype error-cause () 'common-lisp:string)
(common-lisp:deftype error-details () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-info common-lisp:nil
                       ((cause :initarg :cause :initform common-lisp:nil :type
                         (common-lisp:or error-cause common-lisp:null)
                         :accessor struct-shape-error-info-cause :shape
                         "ErrorCause" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (details :initarg :details :initform common-lisp:nil
                         :type (common-lisp:or error-details common-lisp:null)
                         :accessor struct-shape-error-info-details :shape
                         "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-info 'make-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cause))
      (common-lisp:list
       (common-lisp:cons "cause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass function-artifact-meta common-lisp:nil
                       ((overrides :initarg :overrides :initform
                         common-lisp:nil :type
                         (common-lisp:or override-list common-lisp:null)
                         :accessor
                         struct-shape-function-artifact-meta-overrides :shape
                         "OverrideList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-function-artifact-meta
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'function-artifact-meta
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'function-artifact-meta 'make-function-artifact-meta))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          function-artifact-meta))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          function-artifact-meta))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          function-artifact-meta))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-function-instance-input common-lisp:nil
                       ((vnf-instance-id :initarg :vnf-instance-id :initform
                         (common-lisp:error ":vnfinstanceid is required") :type
                         (common-lisp:or vnf-instance-id common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-instance-input-vnf-instance-id
                         :shape "VnfInstanceId" :location "uri" :location-name
                         "vnfInstanceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-function-instance-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-function-instance-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-instance-input
                    'make-get-sol-function-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-function-instance-metadata common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-instance-metadata-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         (common-lisp:error ":lastmodified is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-instance-metadata-last-modified
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-function-instance-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-function-instance-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-instance-metadata
                    'make-get-sol-function-instance-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-function-instance-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or vnf-instance-arn common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-instance-output-arn
                         :shape "VnfInstanceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or vnf-instance-id common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-instance-output-id
                         :shape "VnfInstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instantiated-vnf-info :initarg :instantiated-vnf-info
                         :initform common-lisp:nil :type
                         (common-lisp:or get-sol-vnf-info common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-instance-output-instantiated-vnf-info
                         :shape "GetSolVnfInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instantiation-state :initarg :instantiation-state
                         :initform
                         (common-lisp:error ":instantiationstate is required")
                         :type
                         (common-lisp:or vnf-instantiation-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-instance-output-instantiation-state
                         :shape "VnfInstantiationState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or get-sol-function-instance-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-instance-output-metadata
                         :shape "GetSolFunctionInstanceMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ns-instance-id :initarg :ns-instance-id :initform
                         (common-lisp:error ":nsinstanceid is required") :type
                         (common-lisp:or ns-instance-id common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-instance-output-ns-instance-id
                         :shape "NsInstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-get-sol-function-instance-output-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnf-pkg-id :initarg :vnf-pkg-id :initform
                         (common-lisp:error ":vnfpkgid is required") :type
                         (common-lisp:or vnf-pkg-id common-lisp:null) :accessor
                         struct-shape-get-sol-function-instance-output-vnf-pkg-id
                         :shape "VnfPkgId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnf-product-name :initarg :vnf-product-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-sol-function-instance-output-vnf-product-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnf-provider :initarg :vnf-provider :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-sol-function-instance-output-vnf-provider
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnfd-id :initarg :vnfd-id :initform
                         (common-lisp:error ":vnfdid is required") :type
                         (common-lisp:or vnfd-id common-lisp:null) :accessor
                         struct-shape-get-sol-function-instance-output-vnfd-id
                         :shape "VnfdId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnfd-version :initarg :vnfd-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-sol-function-instance-output-vnfd-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-function-instance-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-function-instance-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-instance-output
                    'make-get-sol-function-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instantiated-vnf-info))
      (common-lisp:list
       (common-lisp:cons "instantiatedVnfInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instantiation-state))
      (common-lisp:list
       (common-lisp:cons "instantiationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-instance-id))
      (common-lisp:list
       (common-lisp:cons "nsInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-pkg-id))
      (common-lisp:list
       (common-lisp:cons "vnfPkgId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-product-name))
      (common-lisp:list
       (common-lisp:cons "vnfProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-provider))
      (common-lisp:list
       (common-lisp:cons "vnfProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-id))
      (common-lisp:list
       (common-lisp:cons "vnfdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-version))
      (common-lisp:list
       (common-lisp:cons "vnfdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-function-package-content-input common-lisp:nil
                       ((accept :initarg :accept :initform
                         (common-lisp:error ":accept is required") :type
                         (common-lisp:or package-content-type common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-package-content-input-accept
                         :shape "PackageContentType" :location "header"
                         :location-name "Accept")
                        (vnf-pkg-id :initarg :vnf-pkg-id :initform
                         (common-lisp:error ":vnfpkgid is required") :type
                         (common-lisp:or vnf-pkg-id common-lisp:null) :accessor
                         struct-shape-get-sol-function-package-content-input-vnf-pkg-id
                         :shape "VnfPkgId" :location "uri" :location-name
                         "vnfPkgId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-function-package-content-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-function-package-content-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-package-content-input
                    'make-get-sol-function-package-content-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept))
      (common-lisp:cons "Accept" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-content-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-content-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-function-package-content-output common-lisp:nil
                       ((content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or package-content-type common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-package-content-output-content-type
                         :shape "PackageContentType" :location "header"
                         :location-name "Content-Type")
                        (package-content :initarg :package-content :initform
                         common-lisp:nil :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-get-sol-function-package-content-output-package-content
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-function-package-content-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-function-package-content-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-package-content-output
                    'make-get-sol-function-package-content-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-content))
      (common-lisp:list
       (common-lisp:cons "packageContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-content-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'package-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-content-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-sol-function-package-descriptor-input
                       common-lisp:nil
                       ((accept :initarg :accept :initform
                         (common-lisp:error ":accept is required") :type
                         (common-lisp:or descriptor-content-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-package-descriptor-input-accept
                         :shape "DescriptorContentType" :location "header"
                         :location-name "Accept")
                        (vnf-pkg-id :initarg :vnf-pkg-id :initform
                         (common-lisp:error ":vnfpkgid is required") :type
                         (common-lisp:or vnf-pkg-id common-lisp:null) :accessor
                         struct-shape-get-sol-function-package-descriptor-input-vnf-pkg-id
                         :shape "VnfPkgId" :location "uri" :location-name
                         "vnfPkgId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-function-package-descriptor-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-function-package-descriptor-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-package-descriptor-input
                    'make-get-sol-function-package-descriptor-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-descriptor-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept))
      (common-lisp:cons "Accept" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-descriptor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-descriptor-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-function-package-descriptor-output
                       common-lisp:nil
                       ((content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or descriptor-content-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-package-descriptor-output-content-type
                         :shape "DescriptorContentType" :location "header"
                         :location-name "Content-Type")
                        (vnfd :initarg :vnfd :initform common-lisp:nil :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-get-sol-function-package-descriptor-output-vnfd
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-function-package-descriptor-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-function-package-descriptor-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-package-descriptor-output
                    'make-get-sol-function-package-descriptor-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-descriptor-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-descriptor-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd))
      (common-lisp:list
       (common-lisp:cons "vnfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-descriptor-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'vnfd))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-descriptor-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-sol-function-package-input common-lisp:nil
                       ((vnf-pkg-id :initarg :vnf-pkg-id :initform
                         (common-lisp:error ":vnfpkgid is required") :type
                         (common-lisp:or vnf-pkg-id common-lisp:null) :accessor
                         struct-shape-get-sol-function-package-input-vnf-pkg-id
                         :shape "VnfPkgId" :location "uri" :location-name
                         "vnfPkgId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-function-package-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-function-package-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-package-input
                    'make-get-sol-function-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-function-package-metadata common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-package-metadata-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         (common-lisp:error ":lastmodified is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-package-metadata-last-modified
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vnfd :initarg :vnfd :initform common-lisp:nil :type
                         (common-lisp:or function-artifact-meta
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-package-metadata-vnfd
                         :shape "FunctionArtifactMeta" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-function-package-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-function-package-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-package-metadata
                    'make-get-sol-function-package-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd))
      (common-lisp:list
       (common-lisp:cons "vnfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-function-package-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or vnf-pkg-arn common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-package-output-arn
                         :shape "VnfPkgArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or vnf-pkg-id common-lisp:null) :accessor
                         struct-shape-get-sol-function-package-output-id :shape
                         "VnfPkgId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or get-sol-function-package-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-package-output-metadata
                         :shape "GetSolFunctionPackageMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (onboarding-state :initarg :onboarding-state :initform
                         (common-lisp:error ":onboardingstate is required")
                         :type
                         (common-lisp:or onboarding-state common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-package-output-onboarding-state
                         :shape "OnboardingState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operational-state :initarg :operational-state
                         :initform
                         (common-lisp:error ":operationalstate is required")
                         :type
                         (common-lisp:or operational-state common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-package-output-operational-state
                         :shape "OperationalState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-get-sol-function-package-output-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (usage-state :initarg :usage-state :initform
                         (common-lisp:error ":usagestate is required") :type
                         (common-lisp:or usage-state common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-package-output-usage-state
                         :shape "UsageState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnf-product-name :initarg :vnf-product-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-sol-function-package-output-vnf-product-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnf-provider :initarg :vnf-provider :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-sol-function-package-output-vnf-provider
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnfd-id :initarg :vnfd-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-sol-function-package-output-vnfd-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnfd-version :initarg :vnfd-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-sol-function-package-output-vnfd-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-function-package-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-function-package-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-function-package-output
                    'make-get-sol-function-package-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'onboarding-state))
      (common-lisp:list
       (common-lisp:cons "onboardingState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operational-state))
      (common-lisp:list
       (common-lisp:cons "operationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-state))
      (common-lisp:list
       (common-lisp:cons "usageState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-product-name))
      (common-lisp:list
       (common-lisp:cons "vnfProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-provider))
      (common-lisp:list
       (common-lisp:cons "vnfProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-id))
      (common-lisp:list
       (common-lisp:cons "vnfdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-version))
      (common-lisp:list
       (common-lisp:cons "vnfdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-function-package-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-instantiated-vnf-info common-lisp:nil
                       ((vnf-state :initarg :vnf-state :initform
                         common-lisp:nil :type
                         (common-lisp:or vnf-operational-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-instantiated-vnf-info-vnf-state
                         :shape "VnfOperationalState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-instantiated-vnf-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-instantiated-vnf-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-instantiated-vnf-info
                    'make-get-sol-instantiated-vnf-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-instantiated-vnf-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-instantiated-vnf-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-state))
      (common-lisp:list
       (common-lisp:cons "vnfState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-instantiated-vnf-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-network-instance-input common-lisp:nil
                       ((ns-instance-id :initarg :ns-instance-id :initform
                         (common-lisp:error ":nsinstanceid is required") :type
                         (common-lisp:or ns-instance-id common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-instance-input-ns-instance-id
                         :shape "NsInstanceId" :location "uri" :location-name
                         "nsInstanceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-network-instance-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-network-instance-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-instance-input
                    'make-get-sol-network-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-network-instance-metadata common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-instance-metadata-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         (common-lisp:error ":lastmodified is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-instance-metadata-last-modified
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-network-instance-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-network-instance-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-instance-metadata
                    'make-get-sol-network-instance-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-network-instance-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or ns-instance-arn common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-instance-output-arn
                         :shape "NsInstanceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or ns-instance-id common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-instance-output-id :shape
                         "NsInstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lcm-op-info :initarg :lcm-op-info :initform
                         common-lisp:nil :type
                         (common-lisp:or lcm-operation-info common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-instance-output-lcm-op-info
                         :shape "LcmOperationInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or get-sol-network-instance-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-instance-output-metadata
                         :shape "GetSolNetworkInstanceMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ns-instance-description :initarg
                         :ns-instance-description :initform
                         (common-lisp:error
                          ":nsinstancedescription is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-instance-output-ns-instance-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ns-instance-name :initarg :ns-instance-name :initform
                         (common-lisp:error ":nsinstancename is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-instance-output-ns-instance-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ns-state :initarg :ns-state :initform common-lisp:nil
                         :type (common-lisp:or ns-state common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-instance-output-ns-state
                         :shape "NsState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-id :initarg :nsd-id :initform
                         (common-lisp:error ":nsdid is required") :type
                         (common-lisp:or nsd-id common-lisp:null) :accessor
                         struct-shape-get-sol-network-instance-output-nsd-id
                         :shape "NsdId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-info-id :initarg :nsd-info-id :initform
                         (common-lisp:error ":nsdinfoid is required") :type
                         (common-lisp:or nsd-info-id common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-instance-output-nsd-info-id
                         :shape "NsdInfoId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-get-sol-network-instance-output-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-network-instance-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-network-instance-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-instance-output
                    'make-get-sol-network-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lcm-op-info))
      (common-lisp:list
       (common-lisp:cons "lcmOpInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ns-instance-description))
      (common-lisp:list
       (common-lisp:cons "nsInstanceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-instance-name))
      (common-lisp:list
       (common-lisp:cons "nsInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-state))
      (common-lisp:list
       (common-lisp:cons "nsState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-id))
      (common-lisp:list
       (common-lisp:cons "nsdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-info-id))
      (common-lisp:list
       (common-lisp:cons "nsdInfoId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-network-operation-input common-lisp:nil
                       ((ns-lcm-op-occ-id :initarg :ns-lcm-op-occ-id :initform
                         (common-lisp:error ":nslcmopoccid is required") :type
                         (common-lisp:or ns-lcm-op-occ-id common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-operation-input-ns-lcm-op-occ-id
                         :shape "NsLcmOpOccId" :location "uri" :location-name
                         "nsLcmOpOccId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-network-operation-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-network-operation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-operation-input
                    'make-get-sol-network-operation-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-network-operation-metadata common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-operation-metadata-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         (common-lisp:error ":lastmodified is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-operation-metadata-last-modified
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-network-operation-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-network-operation-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-operation-metadata
                    'make-get-sol-network-operation-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-network-operation-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or ns-lcm-op-occ-arn common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-operation-output-arn
                         :shape "NsLcmOpOccArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or problem-details common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-operation-output-error
                         :shape "ProblemDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or ns-lcm-op-occ-id common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-operation-output-id
                         :shape "NsLcmOpOccId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lcm-operation-type :initarg :lcm-operation-type
                         :initform common-lisp:nil :type
                         (common-lisp:or lcm-operation-type common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-operation-output-lcm-operation-type
                         :shape "LcmOperationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or get-sol-network-operation-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-operation-output-metadata
                         :shape "GetSolNetworkOperationMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ns-instance-id :initarg :ns-instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ns-instance-id common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-operation-output-ns-instance-id
                         :shape "NsInstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operation-state :initarg :operation-state :initform
                         common-lisp:nil :type
                         (common-lisp:or ns-lcm-operation-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-operation-output-operation-state
                         :shape "NsLcmOperationState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-get-sol-network-operation-output-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tasks :initarg :tasks :initform common-lisp:nil :type
                         (common-lisp:or get-sol-network-operation-tasks-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-operation-output-tasks
                         :shape "GetSolNetworkOperationTasksList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-network-operation-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-network-operation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-operation-output
                    'make-get-sol-network-operation-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lcm-operation-type))
      (common-lisp:list
       (common-lisp:cons "lcmOperationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-instance-id))
      (common-lisp:list
       (common-lisp:cons "nsInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-state))
      (common-lisp:list
       (common-lisp:cons "operationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-network-operation-task-details common-lisp:nil
                       ((task-context :initarg :task-context :initform
                         common-lisp:nil :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         struct-shape-get-sol-network-operation-task-details-task-context
                         :shape "StringMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-end-time :initarg :task-end-time :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-operation-task-details-task-end-time
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-error-details :initarg :task-error-details
                         :initform common-lisp:nil :type
                         (common-lisp:or error-info common-lisp:null) :accessor
                         struct-shape-get-sol-network-operation-task-details-task-error-details
                         :shape "ErrorInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-name :initarg :task-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-sol-network-operation-task-details-task-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-start-time :initarg :task-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-operation-task-details-task-start-time
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-status :initarg :task-status :initform
                         common-lisp:nil :type
                         (common-lisp:or task-status common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-operation-task-details-task-status
                         :shape "TaskStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-network-operation-task-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-network-operation-task-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-operation-task-details
                    'make-get-sol-network-operation-task-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-task-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-task-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-context))
      (common-lisp:list
       (common-lisp:cons "taskContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-end-time))
      (common-lisp:list
       (common-lisp:cons "taskEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-error-details))
      (common-lisp:list
       (common-lisp:cons "taskErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-name))
      (common-lisp:list
       (common-lisp:cons "taskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-start-time))
      (common-lisp:list
       (common-lisp:cons "taskStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-status))
      (common-lisp:list
       (common-lisp:cons "taskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-operation-task-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-sol-network-operation-tasks-list ()
   '(trivial-types:proper-list get-sol-network-operation-task-details))
 (common-lisp:defun make-get-sol-network-operation-tasks-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            get-sol-network-operation-task-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-sol-network-package-content-input common-lisp:nil
                       ((accept :initarg :accept :initform
                         (common-lisp:error ":accept is required") :type
                         (common-lisp:or package-content-type common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-package-content-input-accept
                         :shape "PackageContentType" :location "header"
                         :location-name "Accept")
                        (nsd-info-id :initarg :nsd-info-id :initform
                         (common-lisp:error ":nsdinfoid is required") :type
                         (common-lisp:or nsd-info-id common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-package-content-input-nsd-info-id
                         :shape "NsdInfoId" :location "uri" :location-name
                         "nsdInfoId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-network-package-content-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-network-package-content-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-package-content-input
                    'make-get-sol-network-package-content-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept))
      (common-lisp:cons "Accept" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-content-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-content-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-network-package-content-output common-lisp:nil
                       ((content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or package-content-type common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-package-content-output-content-type
                         :shape "PackageContentType" :location "header"
                         :location-name "Content-Type")
                        (nsd-content :initarg :nsd-content :initform
                         common-lisp:nil :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-get-sol-network-package-content-output-nsd-content
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-network-package-content-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-network-package-content-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-package-content-output
                    'make-get-sol-network-package-content-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-content))
      (common-lisp:list
       (common-lisp:cons "nsdContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-content-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'nsd-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-content-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-sol-network-package-descriptor-input common-lisp:nil
                       ((nsd-info-id :initarg :nsd-info-id :initform
                         (common-lisp:error ":nsdinfoid is required") :type
                         (common-lisp:or nsd-info-id common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-package-descriptor-input-nsd-info-id
                         :shape "NsdInfoId" :location "uri" :location-name
                         "nsdInfoId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-network-package-descriptor-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-network-package-descriptor-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-package-descriptor-input
                    'make-get-sol-network-package-descriptor-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-descriptor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-descriptor-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-descriptor-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-network-package-descriptor-output
                       common-lisp:nil
                       ((content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or descriptor-content-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-package-descriptor-output-content-type
                         :shape "DescriptorContentType" :location "header"
                         :location-name "Content-Type")
                        (nsd :initarg :nsd :initform common-lisp:nil :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-get-sol-network-package-descriptor-output-nsd
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-network-package-descriptor-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-network-package-descriptor-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-package-descriptor-output
                    'make-get-sol-network-package-descriptor-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-descriptor-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-descriptor-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd))
      (common-lisp:list
       (common-lisp:cons "nsd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-descriptor-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'nsd))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-descriptor-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-sol-network-package-input common-lisp:nil
                       ((nsd-info-id :initarg :nsd-info-id :initform
                         (common-lisp:error ":nsdinfoid is required") :type
                         (common-lisp:or nsd-info-id common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-package-input-nsd-info-id
                         :shape "NsdInfoId" :location "uri" :location-name
                         "nsdInfoId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-network-package-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-network-package-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-package-input
                    'make-get-sol-network-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-network-package-metadata common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-package-metadata-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         (common-lisp:error ":lastmodified is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-package-metadata-last-modified
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (nsd :initarg :nsd :initform common-lisp:nil :type
                         (common-lisp:or network-artifact-meta
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-package-metadata-nsd
                         :shape "NetworkArtifactMeta" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-network-package-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-network-package-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-package-metadata
                    'make-get-sol-network-package-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd))
      (common-lisp:list
       (common-lisp:cons "nsd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-network-package-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or nsd-info-arn common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-package-output-arn :shape
                         "NsdInfoArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or nsd-info-id common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-package-output-id :shape
                         "NsdInfoId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or get-sol-network-package-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-package-output-metadata
                         :shape "GetSolNetworkPackageMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (nsd-id :initarg :nsd-id :initform
                         (common-lisp:error ":nsdid is required") :type
                         (common-lisp:or nsd-id common-lisp:null) :accessor
                         struct-shape-get-sol-network-package-output-nsd-id
                         :shape "NsdId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-name :initarg :nsd-name :initform
                         (common-lisp:error ":nsdname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-sol-network-package-output-nsd-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-onboarding-state :initarg :nsd-onboarding-state
                         :initform
                         (common-lisp:error ":nsdonboardingstate is required")
                         :type
                         (common-lisp:or nsd-onboarding-state common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-package-output-nsd-onboarding-state
                         :shape "NsdOnboardingState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-operational-state :initarg :nsd-operational-state
                         :initform
                         (common-lisp:error ":nsdoperationalstate is required")
                         :type
                         (common-lisp:or nsd-operational-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-package-output-nsd-operational-state
                         :shape "NsdOperationalState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-usage-state :initarg :nsd-usage-state :initform
                         (common-lisp:error ":nsdusagestate is required") :type
                         (common-lisp:or nsd-usage-state common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-package-output-nsd-usage-state
                         :shape "NsdUsageState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-version :initarg :nsd-version :initform
                         (common-lisp:error ":nsdversion is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-sol-network-package-output-nsd-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-get-sol-network-package-output-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnf-pkg-ids :initarg :vnf-pkg-ids :initform
                         (common-lisp:error ":vnfpkgids is required") :type
                         (common-lisp:or vnf-pkg-id-list common-lisp:null)
                         :accessor
                         struct-shape-get-sol-network-package-output-vnf-pkg-ids
                         :shape "VnfPkgIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-network-package-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-network-package-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-network-package-output
                    'make-get-sol-network-package-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-id))
      (common-lisp:list
       (common-lisp:cons "nsdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-name))
      (common-lisp:list
       (common-lisp:cons "nsdName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nsd-onboarding-state))
      (common-lisp:list
       (common-lisp:cons "nsdOnboardingState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nsd-operational-state))
      (common-lisp:list
       (common-lisp:cons "nsdOperationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-usage-state))
      (common-lisp:list
       (common-lisp:cons "nsdUsageState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-version))
      (common-lisp:list
       (common-lisp:cons "nsdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-pkg-ids))
      (common-lisp:list
       (common-lisp:cons "vnfPkgIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-network-package-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-vnf-info common-lisp:nil
                       ((vnf-state :initarg :vnf-state :initform
                         common-lisp:nil :type
                         (common-lisp:or vnf-operational-state
                                         common-lisp:null)
                         :accessor struct-shape-get-sol-vnf-info-vnf-state
                         :shape "VnfOperationalState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnfc-resource-info :initarg :vnfc-resource-info
                         :initform common-lisp:nil :type
                         (common-lisp:or get-sol-vnfc-resource-info-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-vnf-info-vnfc-resource-info
                         :shape "GetSolVnfcResourceInfoList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-vnf-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-sol-vnf-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-vnf-info 'make-get-sol-vnf-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-sol-vnf-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-sol-vnf-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-state))
      (common-lisp:list
       (common-lisp:cons "vnfState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfc-resource-info))
      (common-lisp:list
       (common-lisp:cons "vnfcResourceInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-sol-vnf-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sol-vnfc-resource-info common-lisp:nil
                       ((metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or get-sol-vnfc-resource-info-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-sol-vnfc-resource-info-metadata
                         :shape "GetSolVnfcResourceInfoMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-vnfc-resource-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-sol-vnfc-resource-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-vnfc-resource-info
                    'make-get-sol-vnfc-resource-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-vnfc-resource-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-vnfc-resource-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-vnfc-resource-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-sol-vnfc-resource-info-list ()
   '(trivial-types:proper-list get-sol-vnfc-resource-info))
 (common-lisp:defun make-get-sol-vnfc-resource-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            get-sol-vnfc-resource-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-sol-vnfc-resource-info-metadata common-lisp:nil
                       ((cluster :initarg :cluster :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-sol-vnfc-resource-info-metadata-cluster
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (helm-chart :initarg :helm-chart :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-sol-vnfc-resource-info-metadata-helm-chart
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-group :initarg :node-group :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-sol-vnfc-resource-info-metadata-node-group
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sol-vnfc-resource-info-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-sol-vnfc-resource-info-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sol-vnfc-resource-info-metadata
                    'make-get-sol-vnfc-resource-info-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-vnfc-resource-info-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-vnfc-resource-info-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'helm-chart))
      (common-lisp:list
       (common-lisp:cons "helmChart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-group))
      (common-lisp:list
       (common-lisp:cons "nodeGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sol-vnfc-resource-info-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instantiate-sol-network-instance-input common-lisp:nil
                       ((dry-run :initarg :dry-run :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-instantiate-sol-network-instance-input-dry-run
                         :shape "Boolean" :location "querystring"
                         :location-name "dry_run")
                        (ns-instance-id :initarg :ns-instance-id :initform
                         (common-lisp:error ":nsinstanceid is required") :type
                         (common-lisp:or ns-instance-id common-lisp:null)
                         :accessor
                         struct-shape-instantiate-sol-network-instance-input-ns-instance-id
                         :shape "NsInstanceId" :location "uri" :location-name
                         "nsInstanceId")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-instantiate-sol-network-instance-input-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instantiate-sol-network-instance-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'instantiate-sol-network-instance-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instantiate-sol-network-instance-input
                    'make-instantiate-sol-network-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instantiate-sol-network-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instantiate-sol-network-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instantiate-sol-network-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instantiate-sol-network-instance-output common-lisp:nil
                       ((ns-lcm-op-occ-id :initarg :ns-lcm-op-occ-id :initform
                         (common-lisp:error ":nslcmopoccid is required") :type
                         (common-lisp:or ns-lcm-op-occ-id common-lisp:null)
                         :accessor
                         struct-shape-instantiate-sol-network-instance-output-ns-lcm-op-occ-id
                         :shape "NsLcmOpOccId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-instantiate-sol-network-instance-output-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instantiate-sol-network-instance-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'instantiate-sol-network-instance-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instantiate-sol-network-instance-output
                    'make-instantiate-sol-network-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instantiate-sol-network-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instantiate-sol-network-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-lcm-op-occ-id))
      (common-lisp:list
       (common-lisp:cons "nsLcmOpOccId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instantiate-sol-network-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (tnb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass lcm-operation-info common-lisp:nil
                       ((ns-lcm-op-occ-id :initarg :ns-lcm-op-occ-id :initform
                         (common-lisp:error ":nslcmopoccid is required") :type
                         (common-lisp:or ns-lcm-op-occ-id common-lisp:null)
                         :accessor
                         struct-shape-lcm-operation-info-ns-lcm-op-occ-id
                         :shape "NsLcmOpOccId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lcm-operation-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lcm-operation-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lcm-operation-info 'make-lcm-operation-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lcm-operation-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lcm-operation-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-lcm-op-occ-id))
      (common-lisp:list
       (common-lisp:cons "nsLcmOpOccId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lcm-operation-info))
   common-lisp:nil))
(common-lisp:deftype lcm-operation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-sol-function-instance-info common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or vnf-instance-arn common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-instance-info-arn
                         :shape "VnfInstanceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or vnf-instance-id common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-instance-info-id :shape
                         "VnfInstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instantiated-vnf-info :initarg :instantiated-vnf-info
                         :initform common-lisp:nil :type
                         (common-lisp:or get-sol-instantiated-vnf-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-instance-info-instantiated-vnf-info
                         :shape "GetSolInstantiatedVnfInfo" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (instantiation-state :initarg :instantiation-state
                         :initform
                         (common-lisp:error ":instantiationstate is required")
                         :type
                         (common-lisp:or vnf-instantiation-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-instance-info-instantiation-state
                         :shape "VnfInstantiationState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or list-sol-function-instance-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-instance-info-metadata
                         :shape "ListSolFunctionInstanceMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ns-instance-id :initarg :ns-instance-id :initform
                         (common-lisp:error ":nsinstanceid is required") :type
                         (common-lisp:or ns-instance-id common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-instance-info-ns-instance-id
                         :shape "NsInstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnf-pkg-id :initarg :vnf-pkg-id :initform
                         (common-lisp:error ":vnfpkgid is required") :type
                         (common-lisp:or vnf-pkg-id common-lisp:null) :accessor
                         struct-shape-list-sol-function-instance-info-vnf-pkg-id
                         :shape "VnfPkgId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnf-pkg-name :initarg :vnf-pkg-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-sol-function-instance-info-vnf-pkg-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-function-instance-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-function-instance-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-function-instance-info
                    'make-list-sol-function-instance-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instance-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instance-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instantiated-vnf-info))
      (common-lisp:list
       (common-lisp:cons "instantiatedVnfInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instantiation-state))
      (common-lisp:list
       (common-lisp:cons "instantiationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-instance-id))
      (common-lisp:list
       (common-lisp:cons "nsInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-pkg-id))
      (common-lisp:list
       (common-lisp:cons "vnfPkgId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-pkg-name))
      (common-lisp:list
       (common-lisp:cons "vnfPkgName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instance-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sol-function-instance-metadata common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-instance-metadata-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         (common-lisp:error ":lastmodified is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-instance-metadata-last-modified
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-function-instance-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-function-instance-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-function-instance-metadata
                    'make-list-sol-function-instance-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instance-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instance-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instance-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-sol-function-instance-resources ()
   '(trivial-types:proper-list list-sol-function-instance-info))
 (common-lisp:defun make-list-sol-function-instance-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-sol-function-instance-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-sol-function-instances-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-sol-function-instances-input-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-instances-input-max-results
                         :shape
                         "ListSolFunctionInstancesInputMaxResultsInteger"
                         :location "querystring" :location-name "max_results")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-instances-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextpage_opaque_marker"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-function-instances-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-function-instances-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-function-instances-input
                    'make-list-sol-function-instances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instances-input))
   common-lisp:nil))
(common-lisp:deftype list-sol-function-instances-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-sol-function-instances-output common-lisp:nil
                       ((function-instances :initarg :function-instances
                         :initform common-lisp:nil :type
                         (common-lisp:or list-sol-function-instance-resources
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-instances-output-function-instances
                         :shape "ListSolFunctionInstanceResources" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-instances-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-function-instances-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-function-instances-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-function-instances-output
                    'make-list-sol-function-instances-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-instances))
      (common-lisp:list
       (common-lisp:cons "functionInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sol-function-package-info common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or vnf-pkg-arn common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-package-info-arn :shape
                         "VnfPkgArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or vnf-pkg-id common-lisp:null) :accessor
                         struct-shape-list-sol-function-package-info-id :shape
                         "VnfPkgId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or list-sol-function-package-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-package-info-metadata
                         :shape "ListSolFunctionPackageMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (onboarding-state :initarg :onboarding-state :initform
                         (common-lisp:error ":onboardingstate is required")
                         :type
                         (common-lisp:or onboarding-state common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-package-info-onboarding-state
                         :shape "OnboardingState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operational-state :initarg :operational-state
                         :initform
                         (common-lisp:error ":operationalstate is required")
                         :type
                         (common-lisp:or operational-state common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-package-info-operational-state
                         :shape "OperationalState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (usage-state :initarg :usage-state :initform
                         (common-lisp:error ":usagestate is required") :type
                         (common-lisp:or usage-state common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-package-info-usage-state
                         :shape "UsageState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnf-product-name :initarg :vnf-product-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-sol-function-package-info-vnf-product-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnf-provider :initarg :vnf-provider :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-sol-function-package-info-vnf-provider
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnfd-id :initarg :vnfd-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-package-info-vnfd-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnfd-version :initarg :vnfd-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-sol-function-package-info-vnfd-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-function-package-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-function-package-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-function-package-info
                    'make-list-sol-function-package-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-package-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-package-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'onboarding-state))
      (common-lisp:list
       (common-lisp:cons "onboardingState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operational-state))
      (common-lisp:list
       (common-lisp:cons "operationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-state))
      (common-lisp:list
       (common-lisp:cons "usageState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-product-name))
      (common-lisp:list
       (common-lisp:cons "vnfProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-provider))
      (common-lisp:list
       (common-lisp:cons "vnfProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-id))
      (common-lisp:list
       (common-lisp:cons "vnfdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-version))
      (common-lisp:list
       (common-lisp:cons "vnfdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-package-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sol-function-package-metadata common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-package-metadata-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         (common-lisp:error ":lastmodified is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-package-metadata-last-modified
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-function-package-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-function-package-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-function-package-metadata
                    'make-list-sol-function-package-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-package-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-package-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-package-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-sol-function-package-resources ()
   '(trivial-types:proper-list list-sol-function-package-info))
 (common-lisp:defun make-list-sol-function-package-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-sol-function-package-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-sol-function-packages-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-sol-function-packages-input-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-packages-input-max-results
                         :shape "ListSolFunctionPackagesInputMaxResultsInteger"
                         :location "querystring" :location-name "max_results")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-packages-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextpage_opaque_marker"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-function-packages-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-function-packages-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-function-packages-input
                    'make-list-sol-function-packages-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-packages-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-packages-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-packages-input))
   common-lisp:nil))
(common-lisp:deftype list-sol-function-packages-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-sol-function-packages-output common-lisp:nil
                       ((function-packages :initarg :function-packages
                         :initform
                         (common-lisp:error ":functionpackages is required")
                         :type
                         (common-lisp:or list-sol-function-package-resources
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-packages-output-function-packages
                         :shape "ListSolFunctionPackageResources" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-sol-function-packages-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-function-packages-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-function-packages-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-function-packages-output
                    'make-list-sol-function-packages-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-packages-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-packages-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-packages))
      (common-lisp:list
       (common-lisp:cons "functionPackages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-function-packages-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sol-network-instance-info common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or ns-instance-arn common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-instance-info-arn :shape
                         "NsInstanceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or ns-instance-id common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-instance-info-id :shape
                         "NsInstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or list-sol-network-instance-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-instance-info-metadata
                         :shape "ListSolNetworkInstanceMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ns-instance-description :initarg
                         :ns-instance-description :initform
                         (common-lisp:error
                          ":nsinstancedescription is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-instance-info-ns-instance-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ns-instance-name :initarg :ns-instance-name :initform
                         (common-lisp:error ":nsinstancename is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-instance-info-ns-instance-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ns-state :initarg :ns-state :initform
                         (common-lisp:error ":nsstate is required") :type
                         (common-lisp:or ns-state common-lisp:null) :accessor
                         struct-shape-list-sol-network-instance-info-ns-state
                         :shape "NsState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-id :initarg :nsd-id :initform
                         (common-lisp:error ":nsdid is required") :type
                         (common-lisp:or nsd-id common-lisp:null) :accessor
                         struct-shape-list-sol-network-instance-info-nsd-id
                         :shape "NsdId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-info-id :initarg :nsd-info-id :initform
                         (common-lisp:error ":nsdinfoid is required") :type
                         (common-lisp:or nsd-info-id common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-instance-info-nsd-info-id
                         :shape "NsdInfoId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-network-instance-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-network-instance-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-instance-info
                    'make-list-sol-network-instance-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instance-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instance-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ns-instance-description))
      (common-lisp:list
       (common-lisp:cons "nsInstanceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-instance-name))
      (common-lisp:list
       (common-lisp:cons "nsInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-state))
      (common-lisp:list
       (common-lisp:cons "nsState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-id))
      (common-lisp:list
       (common-lisp:cons "nsdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-info-id))
      (common-lisp:list
       (common-lisp:cons "nsdInfoId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instance-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sol-network-instance-metadata common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-instance-metadata-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         (common-lisp:error ":lastmodified is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-instance-metadata-last-modified
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-network-instance-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-network-instance-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-instance-metadata
                    'make-list-sol-network-instance-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instance-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instance-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instance-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-sol-network-instance-resources ()
   '(trivial-types:proper-list list-sol-network-instance-info))
 (common-lisp:defun make-list-sol-network-instance-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-sol-network-instance-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-sol-network-instances-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-sol-network-instances-input-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-instances-input-max-results
                         :shape "ListSolNetworkInstancesInputMaxResultsInteger"
                         :location "querystring" :location-name "max_results")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-instances-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextpage_opaque_marker"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-network-instances-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-network-instances-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-instances-input
                    'make-list-sol-network-instances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instances-input))
   common-lisp:nil))
(common-lisp:deftype list-sol-network-instances-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-sol-network-instances-output common-lisp:nil
                       ((network-instances :initarg :network-instances
                         :initform common-lisp:nil :type
                         (common-lisp:or list-sol-network-instance-resources
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-instances-output-network-instances
                         :shape "ListSolNetworkInstanceResources" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-instances-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-network-instances-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-network-instances-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-instances-output
                    'make-list-sol-network-instances-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-instances))
      (common-lisp:list
       (common-lisp:cons "networkInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sol-network-operations-info common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or ns-lcm-op-occ-arn common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-operations-info-arn
                         :shape "NsLcmOpOccArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or problem-details common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-operations-info-error
                         :shape "ProblemDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or ns-lcm-op-occ-id common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-operations-info-id
                         :shape "NsLcmOpOccId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lcm-operation-type :initarg :lcm-operation-type
                         :initform
                         (common-lisp:error ":lcmoperationtype is required")
                         :type
                         (common-lisp:or lcm-operation-type common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-operations-info-lcm-operation-type
                         :shape "LcmOperationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or list-sol-network-operations-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-operations-info-metadata
                         :shape "ListSolNetworkOperationsMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ns-instance-id :initarg :ns-instance-id :initform
                         (common-lisp:error ":nsinstanceid is required") :type
                         (common-lisp:or ns-instance-id common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-operations-info-ns-instance-id
                         :shape "NsInstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operation-state :initarg :operation-state :initform
                         (common-lisp:error ":operationstate is required")
                         :type
                         (common-lisp:or ns-lcm-operation-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-operations-info-operation-state
                         :shape "NsLcmOperationState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-network-operations-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-network-operations-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-operations-info
                    'make-list-sol-network-operations-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lcm-operation-type))
      (common-lisp:list
       (common-lisp:cons "lcmOperationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-instance-id))
      (common-lisp:list
       (common-lisp:cons "nsInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-state))
      (common-lisp:list
       (common-lisp:cons "operationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sol-network-operations-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-sol-network-operations-input-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-operations-input-max-results
                         :shape
                         "ListSolNetworkOperationsInputMaxResultsInteger"
                         :location "querystring" :location-name "max_results")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-operations-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextpage_opaque_marker"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-network-operations-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-network-operations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-operations-input
                    'make-list-sol-network-operations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-input))
   common-lisp:nil))
(common-lisp:deftype list-sol-network-operations-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-sol-network-operations-metadata common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-operations-metadata-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         (common-lisp:error ":lastmodified is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-operations-metadata-last-modified
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-network-operations-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-network-operations-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-operations-metadata
                    'make-list-sol-network-operations-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sol-network-operations-output common-lisp:nil
                       ((network-operations :initarg :network-operations
                         :initform common-lisp:nil :type
                         (common-lisp:or list-sol-network-operations-resources
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-operations-output-network-operations
                         :shape "ListSolNetworkOperationsResources" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-operations-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-network-operations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-network-operations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-operations-output
                    'make-list-sol-network-operations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-operations))
      (common-lisp:list
       (common-lisp:cons "networkOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-operations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-sol-network-operations-resources ()
   '(trivial-types:proper-list list-sol-network-operations-info))
 (common-lisp:defun make-list-sol-network-operations-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-sol-network-operations-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-sol-network-package-info common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or nsd-info-arn common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-package-info-arn :shape
                         "NsdInfoArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or nsd-info-id common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-package-info-id :shape
                         "NsdInfoId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or list-sol-network-package-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-package-info-metadata
                         :shape "ListSolNetworkPackageMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (nsd-designer :initarg :nsd-designer :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-sol-network-package-info-nsd-designer
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-id :initarg :nsd-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-package-info-nsd-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-invariant-id :initarg :nsd-invariant-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-sol-network-package-info-nsd-invariant-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-name :initarg :nsd-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-package-info-nsd-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-onboarding-state :initarg :nsd-onboarding-state
                         :initform
                         (common-lisp:error ":nsdonboardingstate is required")
                         :type
                         (common-lisp:or nsd-onboarding-state common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-package-info-nsd-onboarding-state
                         :shape "NsdOnboardingState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-operational-state :initarg :nsd-operational-state
                         :initform
                         (common-lisp:error ":nsdoperationalstate is required")
                         :type
                         (common-lisp:or nsd-operational-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-package-info-nsd-operational-state
                         :shape "NsdOperationalState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-usage-state :initarg :nsd-usage-state :initform
                         (common-lisp:error ":nsdusagestate is required") :type
                         (common-lisp:or nsd-usage-state common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-package-info-nsd-usage-state
                         :shape "NsdUsageState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-version :initarg :nsd-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-sol-network-package-info-nsd-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnf-pkg-ids :initarg :vnf-pkg-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or vnf-pkg-id-list common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-package-info-vnf-pkg-ids
                         :shape "VnfPkgIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-network-package-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-network-package-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-package-info
                    'make-list-sol-network-package-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-package-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-package-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-designer))
      (common-lisp:list
       (common-lisp:cons "nsdDesigner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-id))
      (common-lisp:list
       (common-lisp:cons "nsdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-invariant-id))
      (common-lisp:list
       (common-lisp:cons "nsdInvariantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-name))
      (common-lisp:list
       (common-lisp:cons "nsdName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nsd-onboarding-state))
      (common-lisp:list
       (common-lisp:cons "nsdOnboardingState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nsd-operational-state))
      (common-lisp:list
       (common-lisp:cons "nsdOperationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-usage-state))
      (common-lisp:list
       (common-lisp:cons "nsdUsageState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-version))
      (common-lisp:list
       (common-lisp:cons "nsdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-pkg-ids))
      (common-lisp:list
       (common-lisp:cons "vnfPkgIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-package-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sol-network-package-metadata common-lisp:nil
                       ((created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-package-metadata-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         (common-lisp:error ":lastmodified is required") :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-package-metadata-last-modified
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-network-package-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-network-package-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-package-metadata
                    'make-list-sol-network-package-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-package-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-package-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-package-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-sol-network-package-resources ()
   '(trivial-types:proper-list list-sol-network-package-info))
 (common-lisp:defun make-list-sol-network-package-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-sol-network-package-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-sol-network-packages-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-sol-network-packages-input-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-packages-input-max-results
                         :shape "ListSolNetworkPackagesInputMaxResultsInteger"
                         :location "querystring" :location-name "max_results")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-packages-input-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextpage_opaque_marker"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-network-packages-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-network-packages-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-packages-input
                    'make-list-sol-network-packages-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-packages-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-packages-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-packages-input))
   common-lisp:nil))
(common-lisp:deftype list-sol-network-packages-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-sol-network-packages-output common-lisp:nil
                       ((network-packages :initarg :network-packages :initform
                         (common-lisp:error ":networkpackages is required")
                         :type
                         (common-lisp:or list-sol-network-package-resources
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-packages-output-network-packages
                         :shape "ListSolNetworkPackageResources" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-sol-network-packages-output-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sol-network-packages-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-sol-network-packages-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sol-network-packages-output
                    'make-list-sol-network-packages-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-packages-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-packages-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-packages))
      (common-lisp:list
       (common-lisp:cons "networkPackages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sol-network-packages-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or tnbresource-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-input-resource-arn
                         :shape "TNBResourceArn" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-output-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-artifact-meta common-lisp:nil
                       ((overrides :initarg :overrides :initform
                         common-lisp:nil :type
                         (common-lisp:or override-list common-lisp:null)
                         :accessor struct-shape-network-artifact-meta-overrides
                         :shape "OverrideList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-artifact-meta
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-artifact-meta
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-artifact-meta 'make-network-artifact-meta))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-artifact-meta))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-artifact-meta))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-artifact-meta))
   common-lisp:nil))
(common-lisp:deftype ns-instance-arn () 'common-lisp:string)
(common-lisp:deftype ns-instance-id () 'common-lisp:string)
(common-lisp:deftype ns-lcm-op-occ-arn () 'common-lisp:string)
(common-lisp:deftype ns-lcm-op-occ-id () 'common-lisp:string)
(common-lisp:deftype ns-lcm-operation-state () 'common-lisp:string)
(common-lisp:deftype ns-state () 'common-lisp:string)
(common-lisp:deftype nsd-id () 'common-lisp:string)
(common-lisp:deftype nsd-info-arn () 'common-lisp:string)
(common-lisp:deftype nsd-info-id () 'common-lisp:string)
(common-lisp:deftype nsd-onboarding-state () 'common-lisp:string)
(common-lisp:deftype nsd-operational-state () 'common-lisp:string)
(common-lisp:deftype nsd-usage-state () 'common-lisp:string)
(common-lisp:deftype onboarding-state () 'common-lisp:string)
(common-lisp:deftype operational-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype override-list ()
   '(trivial-types:proper-list tosca-override))
 (common-lisp:defun make-override-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tosca-override))
   aws-sdk/generator/shape::members))
(common-lisp:deftype package-content-type () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass problem-details common-lisp:nil
                       ((detail :initarg :detail :initform
                         (common-lisp:error ":detail is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-problem-details-detail :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-problem-details-title :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-problem-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'problem-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'problem-details 'make-problem-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input problem-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input problem-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail))
      (common-lisp:list
       (common-lisp:cons "detail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input problem-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-sol-function-package-content-input common-lisp:nil
                       ((content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or package-content-type common-lisp:null)
                         :accessor
                         struct-shape-put-sol-function-package-content-input-content-type
                         :shape "PackageContentType" :location "header"
                         :location-name "Content-Type")
                        (file :initarg :file :initform
                         (common-lisp:error ":file is required") :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-put-sol-function-package-content-input-file
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vnf-pkg-id :initarg :vnf-pkg-id :initform
                         (common-lisp:error ":vnfpkgid is required") :type
                         (common-lisp:or vnf-pkg-id common-lisp:null) :accessor
                         struct-shape-put-sol-function-package-content-input-vnf-pkg-id
                         :shape "VnfPkgId" :location "uri" :location-name
                         "vnfPkgId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-sol-function-package-content-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-sol-function-package-content-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-sol-function-package-content-input
                    'make-put-sol-function-package-content-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-input))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'file))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-input))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass put-sol-function-package-content-metadata
                       common-lisp:nil
                       ((vnfd :initarg :vnfd :initform common-lisp:nil :type
                         (common-lisp:or function-artifact-meta
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-sol-function-package-content-metadata-vnfd
                         :shape "FunctionArtifactMeta" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-sol-function-package-content-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-sol-function-package-content-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-sol-function-package-content-metadata
                    'make-put-sol-function-package-content-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd))
      (common-lisp:list
       (common-lisp:cons "vnfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-sol-function-package-content-output common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or vnf-pkg-id common-lisp:null) :accessor
                         struct-shape-put-sol-function-package-content-output-id
                         :shape "VnfPkgId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or
                          put-sol-function-package-content-metadata
                          common-lisp:null)
                         :accessor
                         struct-shape-put-sol-function-package-content-output-metadata
                         :shape "PutSolFunctionPackageContentMetadata"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vnf-product-name :initarg :vnf-product-name :initform
                         (common-lisp:error ":vnfproductname is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-put-sol-function-package-content-output-vnf-product-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnf-provider :initarg :vnf-provider :initform
                         (common-lisp:error ":vnfprovider is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-put-sol-function-package-content-output-vnf-provider
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnfd-id :initarg :vnfd-id :initform
                         (common-lisp:error ":vnfdid is required") :type
                         (common-lisp:or vnfd-id common-lisp:null) :accessor
                         struct-shape-put-sol-function-package-content-output-vnfd-id
                         :shape "VnfdId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnfd-version :initarg :vnfd-version :initform
                         (common-lisp:error ":vnfdversion is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-put-sol-function-package-content-output-vnfd-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-sol-function-package-content-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-sol-function-package-content-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-sol-function-package-content-output
                    'make-put-sol-function-package-content-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-product-name))
      (common-lisp:list
       (common-lisp:cons "vnfProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-provider))
      (common-lisp:list
       (common-lisp:cons "vnfProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-id))
      (common-lisp:list
       (common-lisp:cons "vnfdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-version))
      (common-lisp:list
       (common-lisp:cons "vnfdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-function-package-content-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-sol-network-package-content-input common-lisp:nil
                       ((content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or package-content-type common-lisp:null)
                         :accessor
                         struct-shape-put-sol-network-package-content-input-content-type
                         :shape "PackageContentType" :location "header"
                         :location-name "Content-Type")
                        (file :initarg :file :initform
                         (common-lisp:error ":file is required") :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-put-sol-network-package-content-input-file
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (nsd-info-id :initarg :nsd-info-id :initform
                         (common-lisp:error ":nsdinfoid is required") :type
                         (common-lisp:or nsd-info-id common-lisp:null)
                         :accessor
                         struct-shape-put-sol-network-package-content-input-nsd-info-id
                         :shape "NsdInfoId" :location "uri" :location-name
                         "nsdInfoId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-sol-network-package-content-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-sol-network-package-content-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-sol-network-package-content-input
                    'make-put-sol-network-package-content-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-input))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'file))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-input))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass put-sol-network-package-content-metadata common-lisp:nil
                       ((nsd :initarg :nsd :initform common-lisp:nil :type
                         (common-lisp:or network-artifact-meta
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-sol-network-package-content-metadata-nsd
                         :shape "NetworkArtifactMeta" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-sol-network-package-content-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-sol-network-package-content-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-sol-network-package-content-metadata
                    'make-put-sol-network-package-content-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd))
      (common-lisp:list
       (common-lisp:cons "nsd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-sol-network-package-content-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or nsd-info-arn common-lisp:null)
                         :accessor
                         struct-shape-put-sol-network-package-content-output-arn
                         :shape "NsdInfoArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or nsd-info-id common-lisp:null)
                         :accessor
                         struct-shape-put-sol-network-package-content-output-id
                         :shape "NsdInfoId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or
                          put-sol-network-package-content-metadata
                          common-lisp:null)
                         :accessor
                         struct-shape-put-sol-network-package-content-output-metadata
                         :shape "PutSolNetworkPackageContentMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (nsd-id :initarg :nsd-id :initform
                         (common-lisp:error ":nsdid is required") :type
                         (common-lisp:or nsd-id common-lisp:null) :accessor
                         struct-shape-put-sol-network-package-content-output-nsd-id
                         :shape "NsdId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-name :initarg :nsd-name :initform
                         (common-lisp:error ":nsdname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-put-sol-network-package-content-output-nsd-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-version :initarg :nsd-version :initform
                         (common-lisp:error ":nsdversion is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-put-sol-network-package-content-output-nsd-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnf-pkg-ids :initarg :vnf-pkg-ids :initform
                         (common-lisp:error ":vnfpkgids is required") :type
                         (common-lisp:or vnf-pkg-id-list common-lisp:null)
                         :accessor
                         struct-shape-put-sol-network-package-content-output-vnf-pkg-ids
                         :shape "VnfPkgIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-sol-network-package-content-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-sol-network-package-content-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-sol-network-package-content-output
                    'make-put-sol-network-package-content-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-id))
      (common-lisp:list
       (common-lisp:cons "nsdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-name))
      (common-lisp:list
       (common-lisp:cons "nsdName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-version))
      (common-lisp:list
       (common-lisp:cons "nsdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-pkg-ids))
      (common-lisp:list
       (common-lisp:cons "vnfPkgIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-sol-network-package-content-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (tnb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (tnb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-map () 'common-lisp:hash-table)
 (common-lisp:defun make-string-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:deftype tnbresource-arn () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or tnbresource-arn common-lisp:null)
                         :accessor struct-shape-tag-resource-input-resource-arn
                         :shape "TNBResourceArn" :location "uri" :location-name
                         "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-input-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype task-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass terminate-sol-network-instance-input common-lisp:nil
                       ((ns-instance-id :initarg :ns-instance-id :initform
                         (common-lisp:error ":nsinstanceid is required") :type
                         (common-lisp:or ns-instance-id common-lisp:null)
                         :accessor
                         struct-shape-terminate-sol-network-instance-input-ns-instance-id
                         :shape "NsInstanceId" :location "uri" :location-name
                         "nsInstanceId")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-terminate-sol-network-instance-input-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-terminate-sol-network-instance-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'terminate-sol-network-instance-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'terminate-sol-network-instance-input
                    'make-terminate-sol-network-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-sol-network-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-sol-network-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-sol-network-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass terminate-sol-network-instance-output common-lisp:nil
                       ((ns-lcm-op-occ-id :initarg :ns-lcm-op-occ-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ns-lcm-op-occ-id common-lisp:null)
                         :accessor
                         struct-shape-terminate-sol-network-instance-output-ns-lcm-op-occ-id
                         :shape "NsLcmOpOccId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-terminate-sol-network-instance-output-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-terminate-sol-network-instance-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'terminate-sol-network-instance-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'terminate-sol-network-instance-output
                    'make-terminate-sol-network-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-sol-network-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-sol-network-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-lcm-op-occ-id))
      (common-lisp:list
       (common-lisp:cons "nsLcmOpOccId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-sol-network-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (tnb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defclass tosca-override common-lisp:nil
                       ((default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tosca-override-default-value :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tosca-override-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tosca-override
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tosca-override
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tosca-override 'make-tosca-override))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tosca-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tosca-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tosca-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or tnbresource-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-input-resource-arn :shape
                         "TNBResourceArn" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         struct-shape-untag-resource-input-tag-keys :shape
                         "TagKeys" :location "querystring" :location-name
                         "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-sol-function-package-input common-lisp:nil
                       ((operational-state :initarg :operational-state
                         :initform
                         (common-lisp:error ":operationalstate is required")
                         :type
                         (common-lisp:or operational-state common-lisp:null)
                         :accessor
                         struct-shape-update-sol-function-package-input-operational-state
                         :shape "OperationalState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnf-pkg-id :initarg :vnf-pkg-id :initform
                         (common-lisp:error ":vnfpkgid is required") :type
                         (common-lisp:or vnf-pkg-id common-lisp:null) :accessor
                         struct-shape-update-sol-function-package-input-vnf-pkg-id
                         :shape "VnfPkgId" :location "uri" :location-name
                         "vnfPkgId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-sol-function-package-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-sol-function-package-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-sol-function-package-input
                    'make-update-sol-function-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-function-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-function-package-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operational-state))
      (common-lisp:list
       (common-lisp:cons "operationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-function-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-sol-function-package-output common-lisp:nil
                       ((operational-state :initarg :operational-state
                         :initform
                         (common-lisp:error ":operationalstate is required")
                         :type
                         (common-lisp:or operational-state common-lisp:null)
                         :accessor
                         struct-shape-update-sol-function-package-output-operational-state
                         :shape "OperationalState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-sol-function-package-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-sol-function-package-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-sol-function-package-output
                    'make-update-sol-function-package-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-function-package-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-function-package-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operational-state))
      (common-lisp:list
       (common-lisp:cons "operationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-function-package-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-sol-network-instance-input common-lisp:nil
                       ((ns-instance-id :initarg :ns-instance-id :initform
                         (common-lisp:error ":nsinstanceid is required") :type
                         (common-lisp:or ns-instance-id common-lisp:null)
                         :accessor
                         struct-shape-update-sol-network-instance-input-ns-instance-id
                         :shape "NsInstanceId" :location "uri" :location-name
                         "nsInstanceId")
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-update-sol-network-instance-input-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-type :initarg :update-type :initform
                         (common-lisp:error ":updatetype is required") :type
                         (common-lisp:or update-sol-network-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-sol-network-instance-input-update-type
                         :shape "UpdateSolNetworkType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-sol-network-instance-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-sol-network-instance-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-sol-network-instance-input
                    'make-update-sol-network-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-type))
      (common-lisp:list
       (common-lisp:cons "updateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-sol-network-instance-output common-lisp:nil
                       ((ns-lcm-op-occ-id :initarg :ns-lcm-op-occ-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ns-lcm-op-occ-id common-lisp:null)
                         :accessor
                         struct-shape-update-sol-network-instance-output-ns-lcm-op-occ-id
                         :shape "NsLcmOpOccId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-update-sol-network-instance-output-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-sol-network-instance-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-sol-network-instance-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-sol-network-instance-output
                    'make-update-sol-network-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ns-lcm-op-occ-id))
      (common-lisp:list
       (common-lisp:cons "nsLcmOpOccId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-sol-network-package-input common-lisp:nil
                       ((nsd-info-id :initarg :nsd-info-id :initform
                         (common-lisp:error ":nsdinfoid is required") :type
                         (common-lisp:or nsd-info-id common-lisp:null)
                         :accessor
                         struct-shape-update-sol-network-package-input-nsd-info-id
                         :shape "NsdInfoId" :location "uri" :location-name
                         "nsdInfoId")
                        (nsd-operational-state :initarg :nsd-operational-state
                         :initform
                         (common-lisp:error ":nsdoperationalstate is required")
                         :type
                         (common-lisp:or nsd-operational-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-sol-network-package-input-nsd-operational-state
                         :shape "NsdOperationalState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-sol-network-package-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-sol-network-package-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-sol-network-package-input
                    'make-update-sol-network-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-package-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nsd-operational-state))
      (common-lisp:list
       (common-lisp:cons "nsdOperationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-sol-network-package-output common-lisp:nil
                       ((nsd-operational-state :initarg :nsd-operational-state
                         :initform
                         (common-lisp:error ":nsdoperationalstate is required")
                         :type
                         (common-lisp:or nsd-operational-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-sol-network-package-output-nsd-operational-state
                         :shape "NsdOperationalState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-sol-network-package-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-sol-network-package-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-sol-network-package-output
                    'make-update-sol-network-package-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-package-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-package-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nsd-operational-state))
      (common-lisp:list
       (common-lisp:cons "nsdOperationalState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sol-network-package-output))
   common-lisp:nil))
(common-lisp:deftype update-sol-network-type () 'common-lisp:string)
(common-lisp:deftype usage-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass validate-sol-function-package-content-input
                       common-lisp:nil
                       ((content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or package-content-type common-lisp:null)
                         :accessor
                         struct-shape-validate-sol-function-package-content-input-content-type
                         :shape "PackageContentType" :location "header"
                         :location-name "Content-Type")
                        (file :initarg :file :initform
                         (common-lisp:error ":file is required") :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-validate-sol-function-package-content-input-file
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vnf-pkg-id :initarg :vnf-pkg-id :initform
                         (common-lisp:error ":vnfpkgid is required") :type
                         (common-lisp:or vnf-pkg-id common-lisp:null) :accessor
                         struct-shape-validate-sol-function-package-content-input-vnf-pkg-id
                         :shape "VnfPkgId" :location "uri" :location-name
                         "vnfPkgId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validate-sol-function-package-content-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-sol-function-package-content-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validate-sol-function-package-content-input
                    'make-validate-sol-function-package-content-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-input))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'file))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-input))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass validate-sol-function-package-content-metadata
                       common-lisp:nil
                       ((vnfd :initarg :vnfd :initform common-lisp:nil :type
                         (common-lisp:or function-artifact-meta
                                         common-lisp:null)
                         :accessor
                         struct-shape-validate-sol-function-package-content-metadata-vnfd
                         :shape "FunctionArtifactMeta" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validate-sol-function-package-content-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-sol-function-package-content-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validate-sol-function-package-content-metadata
                    'make-validate-sol-function-package-content-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd))
      (common-lisp:list
       (common-lisp:cons "vnfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validate-sol-function-package-content-output
                       common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or vnf-pkg-id common-lisp:null) :accessor
                         struct-shape-validate-sol-function-package-content-output-id
                         :shape "VnfPkgId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or
                          validate-sol-function-package-content-metadata
                          common-lisp:null)
                         :accessor
                         struct-shape-validate-sol-function-package-content-output-metadata
                         :shape "ValidateSolFunctionPackageContentMetadata"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vnf-product-name :initarg :vnf-product-name :initform
                         (common-lisp:error ":vnfproductname is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-validate-sol-function-package-content-output-vnf-product-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnf-provider :initarg :vnf-provider :initform
                         (common-lisp:error ":vnfprovider is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validate-sol-function-package-content-output-vnf-provider
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnfd-id :initarg :vnfd-id :initform
                         (common-lisp:error ":vnfdid is required") :type
                         (common-lisp:or vnfd-id common-lisp:null) :accessor
                         struct-shape-validate-sol-function-package-content-output-vnfd-id
                         :shape "VnfdId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnfd-version :initarg :vnfd-version :initform
                         (common-lisp:error ":vnfdversion is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validate-sol-function-package-content-output-vnfd-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validate-sol-function-package-content-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-sol-function-package-content-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validate-sol-function-package-content-output
                    'make-validate-sol-function-package-content-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-product-name))
      (common-lisp:list
       (common-lisp:cons "vnfProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-provider))
      (common-lisp:list
       (common-lisp:cons "vnfProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-id))
      (common-lisp:list
       (common-lisp:cons "vnfdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnfd-version))
      (common-lisp:list
       (common-lisp:cons "vnfdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-function-package-content-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validate-sol-network-package-content-input
                       common-lisp:nil
                       ((content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or package-content-type common-lisp:null)
                         :accessor
                         struct-shape-validate-sol-network-package-content-input-content-type
                         :shape "PackageContentType" :location "header"
                         :location-name "Content-Type")
                        (file :initarg :file :initform
                         (common-lisp:error ":file is required") :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-validate-sol-network-package-content-input-file
                         :shape "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (nsd-info-id :initarg :nsd-info-id :initform
                         (common-lisp:error ":nsdinfoid is required") :type
                         (common-lisp:or nsd-info-id common-lisp:null)
                         :accessor
                         struct-shape-validate-sol-network-package-content-input-nsd-info-id
                         :shape "NsdInfoId" :location "uri" :location-name
                         "nsdInfoId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validate-sol-network-package-content-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-sol-network-package-content-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validate-sol-network-package-content-input
                    'make-validate-sol-network-package-content-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-input))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'file))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-input))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass validate-sol-network-package-content-metadata
                       common-lisp:nil
                       ((nsd :initarg :nsd :initform common-lisp:nil :type
                         (common-lisp:or network-artifact-meta
                                         common-lisp:null)
                         :accessor
                         struct-shape-validate-sol-network-package-content-metadata-nsd
                         :shape "NetworkArtifactMeta" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validate-sol-network-package-content-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-sol-network-package-content-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validate-sol-network-package-content-metadata
                    'make-validate-sol-network-package-content-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd))
      (common-lisp:list
       (common-lisp:cons "nsd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validate-sol-network-package-content-output
                       common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or nsd-info-arn common-lisp:null)
                         :accessor
                         struct-shape-validate-sol-network-package-content-output-arn
                         :shape "NsdInfoArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or nsd-info-id common-lisp:null)
                         :accessor
                         struct-shape-validate-sol-network-package-content-output-id
                         :shape "NsdInfoId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or
                          validate-sol-network-package-content-metadata
                          common-lisp:null)
                         :accessor
                         struct-shape-validate-sol-network-package-content-output-metadata
                         :shape "ValidateSolNetworkPackageContentMetadata"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (nsd-id :initarg :nsd-id :initform
                         (common-lisp:error ":nsdid is required") :type
                         (common-lisp:or nsd-id common-lisp:null) :accessor
                         struct-shape-validate-sol-network-package-content-output-nsd-id
                         :shape "NsdId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-name :initarg :nsd-name :initform
                         (common-lisp:error ":nsdname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validate-sol-network-package-content-output-nsd-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nsd-version :initarg :nsd-version :initform
                         (common-lisp:error ":nsdversion is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validate-sol-network-package-content-output-nsd-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vnf-pkg-ids :initarg :vnf-pkg-ids :initform
                         (common-lisp:error ":vnfpkgids is required") :type
                         (common-lisp:or vnf-pkg-id-list common-lisp:null)
                         :accessor
                         struct-shape-validate-sol-network-package-content-output-vnf-pkg-ids
                         :shape "VnfPkgIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validate-sol-network-package-content-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-sol-network-package-content-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validate-sol-network-package-content-output
                    'make-validate-sol-network-package-content-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-id))
      (common-lisp:list
       (common-lisp:cons "nsdId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-name))
      (common-lisp:list
       (common-lisp:cons "nsdName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nsd-version))
      (common-lisp:list
       (common-lisp:cons "nsdVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vnf-pkg-ids))
      (common-lisp:list
       (common-lisp:cons "vnfPkgIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-sol-network-package-content-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (tnb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype vnf-instance-arn () 'common-lisp:string)
(common-lisp:deftype vnf-instance-id () 'common-lisp:string)
(common-lisp:deftype vnf-instantiation-state () 'common-lisp:string)
(common-lisp:deftype vnf-operational-state () 'common-lisp:string)
(common-lisp:deftype vnf-pkg-arn () 'common-lisp:string)
(common-lisp:deftype vnf-pkg-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vnf-pkg-id-list ()
   '(trivial-types:proper-list vnf-pkg-id))
 (common-lisp:defun make-vnf-pkg-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vnf-pkg-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype vnfd-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun cancel-sol-network-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ns-lcm-op-occ-id)
   (common-lisp:declare (common-lisp:ignorable ns-lcm-op-occ-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-sol-network-operation-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nslcm/v1/ns_lcm_op_occs/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ns-lcm-op-occ-id))))
                                                        "CancelSolNetworkOperation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-sol-network-operation))
(common-lisp:progn
 (common-lisp:defun create-sol-function-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags)
   (common-lisp:declare (common-lisp:ignorable tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-sol-function-package-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/sol/vnfpkgm/v1/vnf_packages"
                                                        "CreateSolFunctionPackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-sol-function-package))
(common-lisp:progn
 (common-lisp:defun create-sol-network-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ns-description ns-name nsd-info-id tags)
   (common-lisp:declare
    (common-lisp:ignorable ns-description ns-name nsd-info-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-sol-network-instance-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/sol/nslcm/v1/ns_instances"
                                                        "CreateSolNetworkInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-sol-network-instance))
(common-lisp:progn
 (common-lisp:defun create-sol-network-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags)
   (common-lisp:declare (common-lisp:ignorable tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-sol-network-package-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/sol/nsd/v1/ns_descriptors"
                                                        "CreateSolNetworkPackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-sol-network-package))
(common-lisp:progn
 (common-lisp:defun delete-sol-function-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vnf-pkg-id)
   (common-lisp:declare (common-lisp:ignorable vnf-pkg-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-sol-function-package-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/vnfpkgm/v1/vnf_packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vnf-pkg-id))))
                                                        "DeleteSolFunctionPackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-sol-function-package))
(common-lisp:progn
 (common-lisp:defun delete-sol-network-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ns-instance-id)
   (common-lisp:declare (common-lisp:ignorable ns-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-sol-network-instance-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nslcm/v1/ns_instances/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ns-instance-id))))
                                                        "DeleteSolNetworkInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-sol-network-instance))
(common-lisp:progn
 (common-lisp:defun delete-sol-network-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key nsd-info-id)
   (common-lisp:declare (common-lisp:ignorable nsd-info-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-sol-network-package-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nsd/v1/ns_descriptors/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nsd-info-id))))
                                                        "DeleteSolNetworkPackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-sol-network-package))
(common-lisp:progn
 (common-lisp:defun get-sol-function-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vnf-instance-id)
   (common-lisp:declare (common-lisp:ignorable vnf-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sol-function-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/vnflcm/v1/vnf_instances/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vnf-instance-id))))
                                                        "GetSolFunctionInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-sol-function-instance))
(common-lisp:progn
 (common-lisp:defun get-sol-function-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vnf-pkg-id)
   (common-lisp:declare (common-lisp:ignorable vnf-pkg-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sol-function-package-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/vnfpkgm/v1/vnf_packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vnf-pkg-id))))
                                                        "GetSolFunctionPackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-sol-function-package))
(common-lisp:progn
 (common-lisp:defun get-sol-function-package-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept vnf-pkg-id)
   (common-lisp:declare (common-lisp:ignorable accept vnf-pkg-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-sol-function-package-content-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/vnfpkgm/v1/vnf_packages/~A/package_content"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vnf-pkg-id))))
                                                        "GetSolFunctionPackageContent")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-sol-function-package-content))
(common-lisp:progn
 (common-lisp:defun get-sol-function-package-descriptor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept vnf-pkg-id)
   (common-lisp:declare (common-lisp:ignorable accept vnf-pkg-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-sol-function-package-descriptor-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/vnfpkgm/v1/vnf_packages/~A/vnfd"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vnf-pkg-id))))
                                                        "GetSolFunctionPackageDescriptor")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-sol-function-package-descriptor))
(common-lisp:progn
 (common-lisp:defun get-sol-network-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ns-instance-id)
   (common-lisp:declare (common-lisp:ignorable ns-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sol-network-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nslcm/v1/ns_instances/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ns-instance-id))))
                                                        "GetSolNetworkInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-sol-network-instance))
(common-lisp:progn
 (common-lisp:defun get-sol-network-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ns-lcm-op-occ-id)
   (common-lisp:declare (common-lisp:ignorable ns-lcm-op-occ-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sol-network-operation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nslcm/v1/ns_lcm_op_occs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ns-lcm-op-occ-id))))
                                                        "GetSolNetworkOperation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-sol-network-operation))
(common-lisp:progn
 (common-lisp:defun get-sol-network-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key nsd-info-id)
   (common-lisp:declare (common-lisp:ignorable nsd-info-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sol-network-package-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nsd/v1/ns_descriptors/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nsd-info-id))))
                                                        "GetSolNetworkPackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-sol-network-package))
(common-lisp:progn
 (common-lisp:defun get-sol-network-package-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept nsd-info-id)
   (common-lisp:declare (common-lisp:ignorable accept nsd-info-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-sol-network-package-content-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nsd/v1/ns_descriptors/~A/nsd_content"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nsd-info-id))))
                                                        "GetSolNetworkPackageContent")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-sol-network-package-content))
(common-lisp:progn
 (common-lisp:defun get-sol-network-package-descriptor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key nsd-info-id)
   (common-lisp:declare (common-lisp:ignorable nsd-info-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-sol-network-package-descriptor-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nsd/v1/ns_descriptors/~A/nsd"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nsd-info-id))))
                                                        "GetSolNetworkPackageDescriptor")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-sol-network-package-descriptor))
(common-lisp:progn
 (common-lisp:defun instantiate-sol-network-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dry-run ns-instance-id tags)
   (common-lisp:declare (common-lisp:ignorable dry-run ns-instance-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-instantiate-sol-network-instance-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nslcm/v1/ns_instances/~A/instantiate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ns-instance-id))))
                                                        "InstantiateSolNetworkInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'instantiate-sol-network-instance))
(common-lisp:progn
 (common-lisp:defun list-sol-function-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-sol-function-instances-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/sol/vnflcm/v1/vnf_instances"
                                                        "ListSolFunctionInstances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-sol-function-instances))
(common-lisp:progn
 (common-lisp:defun list-sol-function-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sol-function-packages-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/sol/vnfpkgm/v1/vnf_packages"
                                                        "ListSolFunctionPackages"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-sol-function-packages))
(common-lisp:progn
 (common-lisp:defun list-sol-network-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sol-network-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/sol/nslcm/v1/ns_instances"
                                                        "ListSolNetworkInstances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-sol-network-instances))
(common-lisp:progn
 (common-lisp:defun list-sol-network-operations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-sol-network-operations-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/sol/nslcm/v1/ns_lcm_op_occs"
                                                        "ListSolNetworkOperations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-sol-network-operations))
(common-lisp:progn
 (common-lisp:defun list-sol-network-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sol-network-packages-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/sol/nsd/v1/ns_descriptors"
                                                        "ListSolNetworkPackages"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-sol-network-packages))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-sol-function-package-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-type file vnf-pkg-id)
   (common-lisp:declare (common-lisp:ignorable content-type file vnf-pkg-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-sol-function-package-content-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/vnfpkgm/v1/vnf_packages/~A/package_content"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vnf-pkg-id))))
                                                        "PutSolFunctionPackageContent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-sol-function-package-content))
(common-lisp:progn
 (common-lisp:defun put-sol-network-package-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-type file nsd-info-id)
   (common-lisp:declare (common-lisp:ignorable content-type file nsd-info-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-sol-network-package-content-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nsd/v1/ns_descriptors/~A/nsd_content"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nsd-info-id))))
                                                        "PutSolNetworkPackageContent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-sol-network-package-content))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun terminate-sol-network-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ns-instance-id tags)
   (common-lisp:declare (common-lisp:ignorable ns-instance-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-terminate-sol-network-instance-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nslcm/v1/ns_instances/~A/terminate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ns-instance-id))))
                                                        "TerminateSolNetworkInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'terminate-sol-network-instance))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-sol-function-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key operational-state vnf-pkg-id)
   (common-lisp:declare (common-lisp:ignorable operational-state vnf-pkg-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-sol-function-package-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/vnfpkgm/v1/vnf_packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vnf-pkg-id))))
                                                        "UpdateSolFunctionPackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-sol-function-package))
(common-lisp:progn
 (common-lisp:defun update-sol-network-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ns-instance-id tags update-type)
   (common-lisp:declare
    (common-lisp:ignorable ns-instance-id tags update-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-sol-network-instance-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nslcm/v1/ns_instances/~A/update"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ns-instance-id))))
                                                        "UpdateSolNetworkInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-sol-network-instance))
(common-lisp:progn
 (common-lisp:defun update-sol-network-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key nsd-info-id nsd-operational-state)
   (common-lisp:declare
    (common-lisp:ignorable nsd-info-id nsd-operational-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-sol-network-package-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nsd/v1/ns_descriptors/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nsd-info-id))))
                                                        "UpdateSolNetworkPackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-sol-network-package))
(common-lisp:progn
 (common-lisp:defun validate-sol-function-package-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-type file vnf-pkg-id)
   (common-lisp:declare (common-lisp:ignorable content-type file vnf-pkg-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-validate-sol-function-package-content-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/vnfpkgm/v1/vnf_packages/~A/package_content/validate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vnf-pkg-id))))
                                                        "ValidateSolFunctionPackageContent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'validate-sol-function-package-content))
(common-lisp:progn
 (common-lisp:defun validate-sol-network-package-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-type file nsd-info-id)
   (common-lisp:declare (common-lisp:ignorable content-type file nsd-info-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-validate-sol-network-package-content-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'tnb-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sol/nsd/v1/ns_descriptors/~A/nsd_content/validate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'nsd-info-id))))
                                                        "ValidateSolNetworkPackageContent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'validate-sol-network-package-content))
